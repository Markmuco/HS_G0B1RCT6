
HS_G0B1RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08005200  08005200  00001200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .mySection    00000028  08005000  08005000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ad28  080052c0  080052c0  000012c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001b50  0800ffe8  0800ffe8  0000bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011b38  08011b38  0000e128  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08011b38  08011b38  0000db38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011b40  08011b40  0000e128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011b40  08011b40  0000db40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08011b44  08011b44  0000db44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000010  08011b48  0000e010  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 10 .bss          00001ec4  20000128  08011c60  0000e128  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fec  08011c60  0000efec  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0000e128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027df4  00000000  00000000  0000e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065a2  00000000  00000000  00035f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002070  00000000  00000000  0003c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001913  00000000  00000000  0003e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bc2  00000000  00000000  0003fe6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f7ba  00000000  00000000  00066a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8411  00000000  00000000  000961e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e5f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b84  00000000  00000000  0016e63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001761c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080052c0 <__do_global_dtors_aux>:
 80052c0:	b510      	push	{r4, lr}
 80052c2:	4c06      	ldr	r4, [pc, #24]	@ (80052dc <__do_global_dtors_aux+0x1c>)
 80052c4:	7823      	ldrb	r3, [r4, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <__do_global_dtors_aux+0x1a>
 80052ca:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <__do_global_dtors_aux+0x20>)
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <__do_global_dtors_aux+0x16>
 80052d0:	4804      	ldr	r0, [pc, #16]	@ (80052e4 <__do_global_dtors_aux+0x24>)
 80052d2:	e000      	b.n	80052d6 <__do_global_dtors_aux+0x16>
 80052d4:	bf00      	nop
 80052d6:	2301      	movs	r3, #1
 80052d8:	7023      	strb	r3, [r4, #0]
 80052da:	bd10      	pop	{r4, pc}
 80052dc:	20000128 	.word	0x20000128
 80052e0:	00000000 	.word	0x00000000
 80052e4:	0800ffc0 	.word	0x0800ffc0

080052e8 <frame_dummy>:
 80052e8:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <frame_dummy+0x14>)
 80052ea:	b510      	push	{r4, lr}
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <frame_dummy+0x10>
 80052f0:	4903      	ldr	r1, [pc, #12]	@ (8005300 <frame_dummy+0x18>)
 80052f2:	4804      	ldr	r0, [pc, #16]	@ (8005304 <frame_dummy+0x1c>)
 80052f4:	e000      	b.n	80052f8 <frame_dummy+0x10>
 80052f6:	bf00      	nop
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	00000000 	.word	0x00000000
 8005300:	2000012c 	.word	0x2000012c
 8005304:	0800ffc0 	.word	0x0800ffc0

08005308 <__gnu_thumb1_case_shi>:
 8005308:	b403      	push	{r0, r1}
 800530a:	4671      	mov	r1, lr
 800530c:	0849      	lsrs	r1, r1, #1
 800530e:	0040      	lsls	r0, r0, #1
 8005310:	0049      	lsls	r1, r1, #1
 8005312:	5e09      	ldrsh	r1, [r1, r0]
 8005314:	0049      	lsls	r1, r1, #1
 8005316:	448e      	add	lr, r1
 8005318:	bc03      	pop	{r0, r1}
 800531a:	4770      	bx	lr

0800531c <__udivsi3>:
 800531c:	2200      	movs	r2, #0
 800531e:	0843      	lsrs	r3, r0, #1
 8005320:	428b      	cmp	r3, r1
 8005322:	d374      	bcc.n	800540e <__udivsi3+0xf2>
 8005324:	0903      	lsrs	r3, r0, #4
 8005326:	428b      	cmp	r3, r1
 8005328:	d35f      	bcc.n	80053ea <__udivsi3+0xce>
 800532a:	0a03      	lsrs	r3, r0, #8
 800532c:	428b      	cmp	r3, r1
 800532e:	d344      	bcc.n	80053ba <__udivsi3+0x9e>
 8005330:	0b03      	lsrs	r3, r0, #12
 8005332:	428b      	cmp	r3, r1
 8005334:	d328      	bcc.n	8005388 <__udivsi3+0x6c>
 8005336:	0c03      	lsrs	r3, r0, #16
 8005338:	428b      	cmp	r3, r1
 800533a:	d30d      	bcc.n	8005358 <__udivsi3+0x3c>
 800533c:	22ff      	movs	r2, #255	@ 0xff
 800533e:	0209      	lsls	r1, r1, #8
 8005340:	ba12      	rev	r2, r2
 8005342:	0c03      	lsrs	r3, r0, #16
 8005344:	428b      	cmp	r3, r1
 8005346:	d302      	bcc.n	800534e <__udivsi3+0x32>
 8005348:	1212      	asrs	r2, r2, #8
 800534a:	0209      	lsls	r1, r1, #8
 800534c:	d065      	beq.n	800541a <__udivsi3+0xfe>
 800534e:	0b03      	lsrs	r3, r0, #12
 8005350:	428b      	cmp	r3, r1
 8005352:	d319      	bcc.n	8005388 <__udivsi3+0x6c>
 8005354:	e000      	b.n	8005358 <__udivsi3+0x3c>
 8005356:	0a09      	lsrs	r1, r1, #8
 8005358:	0bc3      	lsrs	r3, r0, #15
 800535a:	428b      	cmp	r3, r1
 800535c:	d301      	bcc.n	8005362 <__udivsi3+0x46>
 800535e:	03cb      	lsls	r3, r1, #15
 8005360:	1ac0      	subs	r0, r0, r3
 8005362:	4152      	adcs	r2, r2
 8005364:	0b83      	lsrs	r3, r0, #14
 8005366:	428b      	cmp	r3, r1
 8005368:	d301      	bcc.n	800536e <__udivsi3+0x52>
 800536a:	038b      	lsls	r3, r1, #14
 800536c:	1ac0      	subs	r0, r0, r3
 800536e:	4152      	adcs	r2, r2
 8005370:	0b43      	lsrs	r3, r0, #13
 8005372:	428b      	cmp	r3, r1
 8005374:	d301      	bcc.n	800537a <__udivsi3+0x5e>
 8005376:	034b      	lsls	r3, r1, #13
 8005378:	1ac0      	subs	r0, r0, r3
 800537a:	4152      	adcs	r2, r2
 800537c:	0b03      	lsrs	r3, r0, #12
 800537e:	428b      	cmp	r3, r1
 8005380:	d301      	bcc.n	8005386 <__udivsi3+0x6a>
 8005382:	030b      	lsls	r3, r1, #12
 8005384:	1ac0      	subs	r0, r0, r3
 8005386:	4152      	adcs	r2, r2
 8005388:	0ac3      	lsrs	r3, r0, #11
 800538a:	428b      	cmp	r3, r1
 800538c:	d301      	bcc.n	8005392 <__udivsi3+0x76>
 800538e:	02cb      	lsls	r3, r1, #11
 8005390:	1ac0      	subs	r0, r0, r3
 8005392:	4152      	adcs	r2, r2
 8005394:	0a83      	lsrs	r3, r0, #10
 8005396:	428b      	cmp	r3, r1
 8005398:	d301      	bcc.n	800539e <__udivsi3+0x82>
 800539a:	028b      	lsls	r3, r1, #10
 800539c:	1ac0      	subs	r0, r0, r3
 800539e:	4152      	adcs	r2, r2
 80053a0:	0a43      	lsrs	r3, r0, #9
 80053a2:	428b      	cmp	r3, r1
 80053a4:	d301      	bcc.n	80053aa <__udivsi3+0x8e>
 80053a6:	024b      	lsls	r3, r1, #9
 80053a8:	1ac0      	subs	r0, r0, r3
 80053aa:	4152      	adcs	r2, r2
 80053ac:	0a03      	lsrs	r3, r0, #8
 80053ae:	428b      	cmp	r3, r1
 80053b0:	d301      	bcc.n	80053b6 <__udivsi3+0x9a>
 80053b2:	020b      	lsls	r3, r1, #8
 80053b4:	1ac0      	subs	r0, r0, r3
 80053b6:	4152      	adcs	r2, r2
 80053b8:	d2cd      	bcs.n	8005356 <__udivsi3+0x3a>
 80053ba:	09c3      	lsrs	r3, r0, #7
 80053bc:	428b      	cmp	r3, r1
 80053be:	d301      	bcc.n	80053c4 <__udivsi3+0xa8>
 80053c0:	01cb      	lsls	r3, r1, #7
 80053c2:	1ac0      	subs	r0, r0, r3
 80053c4:	4152      	adcs	r2, r2
 80053c6:	0983      	lsrs	r3, r0, #6
 80053c8:	428b      	cmp	r3, r1
 80053ca:	d301      	bcc.n	80053d0 <__udivsi3+0xb4>
 80053cc:	018b      	lsls	r3, r1, #6
 80053ce:	1ac0      	subs	r0, r0, r3
 80053d0:	4152      	adcs	r2, r2
 80053d2:	0943      	lsrs	r3, r0, #5
 80053d4:	428b      	cmp	r3, r1
 80053d6:	d301      	bcc.n	80053dc <__udivsi3+0xc0>
 80053d8:	014b      	lsls	r3, r1, #5
 80053da:	1ac0      	subs	r0, r0, r3
 80053dc:	4152      	adcs	r2, r2
 80053de:	0903      	lsrs	r3, r0, #4
 80053e0:	428b      	cmp	r3, r1
 80053e2:	d301      	bcc.n	80053e8 <__udivsi3+0xcc>
 80053e4:	010b      	lsls	r3, r1, #4
 80053e6:	1ac0      	subs	r0, r0, r3
 80053e8:	4152      	adcs	r2, r2
 80053ea:	08c3      	lsrs	r3, r0, #3
 80053ec:	428b      	cmp	r3, r1
 80053ee:	d301      	bcc.n	80053f4 <__udivsi3+0xd8>
 80053f0:	00cb      	lsls	r3, r1, #3
 80053f2:	1ac0      	subs	r0, r0, r3
 80053f4:	4152      	adcs	r2, r2
 80053f6:	0883      	lsrs	r3, r0, #2
 80053f8:	428b      	cmp	r3, r1
 80053fa:	d301      	bcc.n	8005400 <__udivsi3+0xe4>
 80053fc:	008b      	lsls	r3, r1, #2
 80053fe:	1ac0      	subs	r0, r0, r3
 8005400:	4152      	adcs	r2, r2
 8005402:	0843      	lsrs	r3, r0, #1
 8005404:	428b      	cmp	r3, r1
 8005406:	d301      	bcc.n	800540c <__udivsi3+0xf0>
 8005408:	004b      	lsls	r3, r1, #1
 800540a:	1ac0      	subs	r0, r0, r3
 800540c:	4152      	adcs	r2, r2
 800540e:	1a41      	subs	r1, r0, r1
 8005410:	d200      	bcs.n	8005414 <__udivsi3+0xf8>
 8005412:	4601      	mov	r1, r0
 8005414:	4152      	adcs	r2, r2
 8005416:	4610      	mov	r0, r2
 8005418:	4770      	bx	lr
 800541a:	e7ff      	b.n	800541c <__udivsi3+0x100>
 800541c:	b501      	push	{r0, lr}
 800541e:	2000      	movs	r0, #0
 8005420:	f000 f8f0 	bl	8005604 <__aeabi_idiv0>
 8005424:	bd02      	pop	{r1, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)

08005428 <__aeabi_uidivmod>:
 8005428:	2900      	cmp	r1, #0
 800542a:	d0f7      	beq.n	800541c <__udivsi3+0x100>
 800542c:	e776      	b.n	800531c <__udivsi3>
 800542e:	4770      	bx	lr

08005430 <__divsi3>:
 8005430:	4603      	mov	r3, r0
 8005432:	430b      	orrs	r3, r1
 8005434:	d47f      	bmi.n	8005536 <__divsi3+0x106>
 8005436:	2200      	movs	r2, #0
 8005438:	0843      	lsrs	r3, r0, #1
 800543a:	428b      	cmp	r3, r1
 800543c:	d374      	bcc.n	8005528 <__divsi3+0xf8>
 800543e:	0903      	lsrs	r3, r0, #4
 8005440:	428b      	cmp	r3, r1
 8005442:	d35f      	bcc.n	8005504 <__divsi3+0xd4>
 8005444:	0a03      	lsrs	r3, r0, #8
 8005446:	428b      	cmp	r3, r1
 8005448:	d344      	bcc.n	80054d4 <__divsi3+0xa4>
 800544a:	0b03      	lsrs	r3, r0, #12
 800544c:	428b      	cmp	r3, r1
 800544e:	d328      	bcc.n	80054a2 <__divsi3+0x72>
 8005450:	0c03      	lsrs	r3, r0, #16
 8005452:	428b      	cmp	r3, r1
 8005454:	d30d      	bcc.n	8005472 <__divsi3+0x42>
 8005456:	22ff      	movs	r2, #255	@ 0xff
 8005458:	0209      	lsls	r1, r1, #8
 800545a:	ba12      	rev	r2, r2
 800545c:	0c03      	lsrs	r3, r0, #16
 800545e:	428b      	cmp	r3, r1
 8005460:	d302      	bcc.n	8005468 <__divsi3+0x38>
 8005462:	1212      	asrs	r2, r2, #8
 8005464:	0209      	lsls	r1, r1, #8
 8005466:	d065      	beq.n	8005534 <__divsi3+0x104>
 8005468:	0b03      	lsrs	r3, r0, #12
 800546a:	428b      	cmp	r3, r1
 800546c:	d319      	bcc.n	80054a2 <__divsi3+0x72>
 800546e:	e000      	b.n	8005472 <__divsi3+0x42>
 8005470:	0a09      	lsrs	r1, r1, #8
 8005472:	0bc3      	lsrs	r3, r0, #15
 8005474:	428b      	cmp	r3, r1
 8005476:	d301      	bcc.n	800547c <__divsi3+0x4c>
 8005478:	03cb      	lsls	r3, r1, #15
 800547a:	1ac0      	subs	r0, r0, r3
 800547c:	4152      	adcs	r2, r2
 800547e:	0b83      	lsrs	r3, r0, #14
 8005480:	428b      	cmp	r3, r1
 8005482:	d301      	bcc.n	8005488 <__divsi3+0x58>
 8005484:	038b      	lsls	r3, r1, #14
 8005486:	1ac0      	subs	r0, r0, r3
 8005488:	4152      	adcs	r2, r2
 800548a:	0b43      	lsrs	r3, r0, #13
 800548c:	428b      	cmp	r3, r1
 800548e:	d301      	bcc.n	8005494 <__divsi3+0x64>
 8005490:	034b      	lsls	r3, r1, #13
 8005492:	1ac0      	subs	r0, r0, r3
 8005494:	4152      	adcs	r2, r2
 8005496:	0b03      	lsrs	r3, r0, #12
 8005498:	428b      	cmp	r3, r1
 800549a:	d301      	bcc.n	80054a0 <__divsi3+0x70>
 800549c:	030b      	lsls	r3, r1, #12
 800549e:	1ac0      	subs	r0, r0, r3
 80054a0:	4152      	adcs	r2, r2
 80054a2:	0ac3      	lsrs	r3, r0, #11
 80054a4:	428b      	cmp	r3, r1
 80054a6:	d301      	bcc.n	80054ac <__divsi3+0x7c>
 80054a8:	02cb      	lsls	r3, r1, #11
 80054aa:	1ac0      	subs	r0, r0, r3
 80054ac:	4152      	adcs	r2, r2
 80054ae:	0a83      	lsrs	r3, r0, #10
 80054b0:	428b      	cmp	r3, r1
 80054b2:	d301      	bcc.n	80054b8 <__divsi3+0x88>
 80054b4:	028b      	lsls	r3, r1, #10
 80054b6:	1ac0      	subs	r0, r0, r3
 80054b8:	4152      	adcs	r2, r2
 80054ba:	0a43      	lsrs	r3, r0, #9
 80054bc:	428b      	cmp	r3, r1
 80054be:	d301      	bcc.n	80054c4 <__divsi3+0x94>
 80054c0:	024b      	lsls	r3, r1, #9
 80054c2:	1ac0      	subs	r0, r0, r3
 80054c4:	4152      	adcs	r2, r2
 80054c6:	0a03      	lsrs	r3, r0, #8
 80054c8:	428b      	cmp	r3, r1
 80054ca:	d301      	bcc.n	80054d0 <__divsi3+0xa0>
 80054cc:	020b      	lsls	r3, r1, #8
 80054ce:	1ac0      	subs	r0, r0, r3
 80054d0:	4152      	adcs	r2, r2
 80054d2:	d2cd      	bcs.n	8005470 <__divsi3+0x40>
 80054d4:	09c3      	lsrs	r3, r0, #7
 80054d6:	428b      	cmp	r3, r1
 80054d8:	d301      	bcc.n	80054de <__divsi3+0xae>
 80054da:	01cb      	lsls	r3, r1, #7
 80054dc:	1ac0      	subs	r0, r0, r3
 80054de:	4152      	adcs	r2, r2
 80054e0:	0983      	lsrs	r3, r0, #6
 80054e2:	428b      	cmp	r3, r1
 80054e4:	d301      	bcc.n	80054ea <__divsi3+0xba>
 80054e6:	018b      	lsls	r3, r1, #6
 80054e8:	1ac0      	subs	r0, r0, r3
 80054ea:	4152      	adcs	r2, r2
 80054ec:	0943      	lsrs	r3, r0, #5
 80054ee:	428b      	cmp	r3, r1
 80054f0:	d301      	bcc.n	80054f6 <__divsi3+0xc6>
 80054f2:	014b      	lsls	r3, r1, #5
 80054f4:	1ac0      	subs	r0, r0, r3
 80054f6:	4152      	adcs	r2, r2
 80054f8:	0903      	lsrs	r3, r0, #4
 80054fa:	428b      	cmp	r3, r1
 80054fc:	d301      	bcc.n	8005502 <__divsi3+0xd2>
 80054fe:	010b      	lsls	r3, r1, #4
 8005500:	1ac0      	subs	r0, r0, r3
 8005502:	4152      	adcs	r2, r2
 8005504:	08c3      	lsrs	r3, r0, #3
 8005506:	428b      	cmp	r3, r1
 8005508:	d301      	bcc.n	800550e <__divsi3+0xde>
 800550a:	00cb      	lsls	r3, r1, #3
 800550c:	1ac0      	subs	r0, r0, r3
 800550e:	4152      	adcs	r2, r2
 8005510:	0883      	lsrs	r3, r0, #2
 8005512:	428b      	cmp	r3, r1
 8005514:	d301      	bcc.n	800551a <__divsi3+0xea>
 8005516:	008b      	lsls	r3, r1, #2
 8005518:	1ac0      	subs	r0, r0, r3
 800551a:	4152      	adcs	r2, r2
 800551c:	0843      	lsrs	r3, r0, #1
 800551e:	428b      	cmp	r3, r1
 8005520:	d301      	bcc.n	8005526 <__divsi3+0xf6>
 8005522:	004b      	lsls	r3, r1, #1
 8005524:	1ac0      	subs	r0, r0, r3
 8005526:	4152      	adcs	r2, r2
 8005528:	1a41      	subs	r1, r0, r1
 800552a:	d200      	bcs.n	800552e <__divsi3+0xfe>
 800552c:	4601      	mov	r1, r0
 800552e:	4152      	adcs	r2, r2
 8005530:	4610      	mov	r0, r2
 8005532:	4770      	bx	lr
 8005534:	e05d      	b.n	80055f2 <__divsi3+0x1c2>
 8005536:	0fca      	lsrs	r2, r1, #31
 8005538:	d000      	beq.n	800553c <__divsi3+0x10c>
 800553a:	4249      	negs	r1, r1
 800553c:	1003      	asrs	r3, r0, #32
 800553e:	d300      	bcc.n	8005542 <__divsi3+0x112>
 8005540:	4240      	negs	r0, r0
 8005542:	4053      	eors	r3, r2
 8005544:	2200      	movs	r2, #0
 8005546:	469c      	mov	ip, r3
 8005548:	0903      	lsrs	r3, r0, #4
 800554a:	428b      	cmp	r3, r1
 800554c:	d32d      	bcc.n	80055aa <__divsi3+0x17a>
 800554e:	0a03      	lsrs	r3, r0, #8
 8005550:	428b      	cmp	r3, r1
 8005552:	d312      	bcc.n	800557a <__divsi3+0x14a>
 8005554:	22fc      	movs	r2, #252	@ 0xfc
 8005556:	0189      	lsls	r1, r1, #6
 8005558:	ba12      	rev	r2, r2
 800555a:	0a03      	lsrs	r3, r0, #8
 800555c:	428b      	cmp	r3, r1
 800555e:	d30c      	bcc.n	800557a <__divsi3+0x14a>
 8005560:	0189      	lsls	r1, r1, #6
 8005562:	1192      	asrs	r2, r2, #6
 8005564:	428b      	cmp	r3, r1
 8005566:	d308      	bcc.n	800557a <__divsi3+0x14a>
 8005568:	0189      	lsls	r1, r1, #6
 800556a:	1192      	asrs	r2, r2, #6
 800556c:	428b      	cmp	r3, r1
 800556e:	d304      	bcc.n	800557a <__divsi3+0x14a>
 8005570:	0189      	lsls	r1, r1, #6
 8005572:	d03a      	beq.n	80055ea <__divsi3+0x1ba>
 8005574:	1192      	asrs	r2, r2, #6
 8005576:	e000      	b.n	800557a <__divsi3+0x14a>
 8005578:	0989      	lsrs	r1, r1, #6
 800557a:	09c3      	lsrs	r3, r0, #7
 800557c:	428b      	cmp	r3, r1
 800557e:	d301      	bcc.n	8005584 <__divsi3+0x154>
 8005580:	01cb      	lsls	r3, r1, #7
 8005582:	1ac0      	subs	r0, r0, r3
 8005584:	4152      	adcs	r2, r2
 8005586:	0983      	lsrs	r3, r0, #6
 8005588:	428b      	cmp	r3, r1
 800558a:	d301      	bcc.n	8005590 <__divsi3+0x160>
 800558c:	018b      	lsls	r3, r1, #6
 800558e:	1ac0      	subs	r0, r0, r3
 8005590:	4152      	adcs	r2, r2
 8005592:	0943      	lsrs	r3, r0, #5
 8005594:	428b      	cmp	r3, r1
 8005596:	d301      	bcc.n	800559c <__divsi3+0x16c>
 8005598:	014b      	lsls	r3, r1, #5
 800559a:	1ac0      	subs	r0, r0, r3
 800559c:	4152      	adcs	r2, r2
 800559e:	0903      	lsrs	r3, r0, #4
 80055a0:	428b      	cmp	r3, r1
 80055a2:	d301      	bcc.n	80055a8 <__divsi3+0x178>
 80055a4:	010b      	lsls	r3, r1, #4
 80055a6:	1ac0      	subs	r0, r0, r3
 80055a8:	4152      	adcs	r2, r2
 80055aa:	08c3      	lsrs	r3, r0, #3
 80055ac:	428b      	cmp	r3, r1
 80055ae:	d301      	bcc.n	80055b4 <__divsi3+0x184>
 80055b0:	00cb      	lsls	r3, r1, #3
 80055b2:	1ac0      	subs	r0, r0, r3
 80055b4:	4152      	adcs	r2, r2
 80055b6:	0883      	lsrs	r3, r0, #2
 80055b8:	428b      	cmp	r3, r1
 80055ba:	d301      	bcc.n	80055c0 <__divsi3+0x190>
 80055bc:	008b      	lsls	r3, r1, #2
 80055be:	1ac0      	subs	r0, r0, r3
 80055c0:	4152      	adcs	r2, r2
 80055c2:	d2d9      	bcs.n	8005578 <__divsi3+0x148>
 80055c4:	0843      	lsrs	r3, r0, #1
 80055c6:	428b      	cmp	r3, r1
 80055c8:	d301      	bcc.n	80055ce <__divsi3+0x19e>
 80055ca:	004b      	lsls	r3, r1, #1
 80055cc:	1ac0      	subs	r0, r0, r3
 80055ce:	4152      	adcs	r2, r2
 80055d0:	1a41      	subs	r1, r0, r1
 80055d2:	d200      	bcs.n	80055d6 <__divsi3+0x1a6>
 80055d4:	4601      	mov	r1, r0
 80055d6:	4663      	mov	r3, ip
 80055d8:	4152      	adcs	r2, r2
 80055da:	105b      	asrs	r3, r3, #1
 80055dc:	4610      	mov	r0, r2
 80055de:	d301      	bcc.n	80055e4 <__divsi3+0x1b4>
 80055e0:	4240      	negs	r0, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d500      	bpl.n	80055e8 <__divsi3+0x1b8>
 80055e6:	4249      	negs	r1, r1
 80055e8:	4770      	bx	lr
 80055ea:	4663      	mov	r3, ip
 80055ec:	105b      	asrs	r3, r3, #1
 80055ee:	d300      	bcc.n	80055f2 <__divsi3+0x1c2>
 80055f0:	4240      	negs	r0, r0
 80055f2:	b501      	push	{r0, lr}
 80055f4:	2000      	movs	r0, #0
 80055f6:	f000 f805 	bl	8005604 <__aeabi_idiv0>
 80055fa:	bd02      	pop	{r1, pc}

080055fc <__aeabi_idivmod>:
 80055fc:	2900      	cmp	r1, #0
 80055fe:	d0f8      	beq.n	80055f2 <__divsi3+0x1c2>
 8005600:	e716      	b.n	8005430 <__divsi3>
 8005602:	4770      	bx	lr

08005604 <__aeabi_idiv0>:
 8005604:	4770      	bx	lr
 8005606:	46c0      	nop			@ (mov r8, r8)

08005608 <__aeabi_uldivmod>:
 8005608:	2b00      	cmp	r3, #0
 800560a:	d111      	bne.n	8005630 <__aeabi_uldivmod+0x28>
 800560c:	2a00      	cmp	r2, #0
 800560e:	d10f      	bne.n	8005630 <__aeabi_uldivmod+0x28>
 8005610:	2900      	cmp	r1, #0
 8005612:	d100      	bne.n	8005616 <__aeabi_uldivmod+0xe>
 8005614:	2800      	cmp	r0, #0
 8005616:	d002      	beq.n	800561e <__aeabi_uldivmod+0x16>
 8005618:	2100      	movs	r1, #0
 800561a:	43c9      	mvns	r1, r1
 800561c:	0008      	movs	r0, r1
 800561e:	b407      	push	{r0, r1, r2}
 8005620:	4802      	ldr	r0, [pc, #8]	@ (800562c <__aeabi_uldivmod+0x24>)
 8005622:	a102      	add	r1, pc, #8	@ (adr r1, 800562c <__aeabi_uldivmod+0x24>)
 8005624:	1840      	adds	r0, r0, r1
 8005626:	9002      	str	r0, [sp, #8]
 8005628:	bd03      	pop	{r0, r1, pc}
 800562a:	46c0      	nop			@ (mov r8, r8)
 800562c:	ffffffd9 	.word	0xffffffd9
 8005630:	b403      	push	{r0, r1}
 8005632:	4668      	mov	r0, sp
 8005634:	b501      	push	{r0, lr}
 8005636:	9802      	ldr	r0, [sp, #8]
 8005638:	f000 f806 	bl	8005648 <__udivmoddi4>
 800563c:	9b01      	ldr	r3, [sp, #4]
 800563e:	469e      	mov	lr, r3
 8005640:	b002      	add	sp, #8
 8005642:	bc0c      	pop	{r2, r3}
 8005644:	4770      	bx	lr
 8005646:	46c0      	nop			@ (mov r8, r8)

08005648 <__udivmoddi4>:
 8005648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564a:	4657      	mov	r7, sl
 800564c:	464e      	mov	r6, r9
 800564e:	4645      	mov	r5, r8
 8005650:	46de      	mov	lr, fp
 8005652:	b5e0      	push	{r5, r6, r7, lr}
 8005654:	0004      	movs	r4, r0
 8005656:	000d      	movs	r5, r1
 8005658:	4692      	mov	sl, r2
 800565a:	4699      	mov	r9, r3
 800565c:	b083      	sub	sp, #12
 800565e:	428b      	cmp	r3, r1
 8005660:	d830      	bhi.n	80056c4 <__udivmoddi4+0x7c>
 8005662:	d02d      	beq.n	80056c0 <__udivmoddi4+0x78>
 8005664:	4649      	mov	r1, r9
 8005666:	4650      	mov	r0, sl
 8005668:	f000 f8d8 	bl	800581c <__clzdi2>
 800566c:	0029      	movs	r1, r5
 800566e:	0006      	movs	r6, r0
 8005670:	0020      	movs	r0, r4
 8005672:	f000 f8d3 	bl	800581c <__clzdi2>
 8005676:	1a33      	subs	r3, r6, r0
 8005678:	4698      	mov	r8, r3
 800567a:	3b20      	subs	r3, #32
 800567c:	d434      	bmi.n	80056e8 <__udivmoddi4+0xa0>
 800567e:	469b      	mov	fp, r3
 8005680:	4653      	mov	r3, sl
 8005682:	465a      	mov	r2, fp
 8005684:	4093      	lsls	r3, r2
 8005686:	4642      	mov	r2, r8
 8005688:	001f      	movs	r7, r3
 800568a:	4653      	mov	r3, sl
 800568c:	4093      	lsls	r3, r2
 800568e:	001e      	movs	r6, r3
 8005690:	42af      	cmp	r7, r5
 8005692:	d83b      	bhi.n	800570c <__udivmoddi4+0xc4>
 8005694:	42af      	cmp	r7, r5
 8005696:	d100      	bne.n	800569a <__udivmoddi4+0x52>
 8005698:	e079      	b.n	800578e <__udivmoddi4+0x146>
 800569a:	465b      	mov	r3, fp
 800569c:	1ba4      	subs	r4, r4, r6
 800569e:	41bd      	sbcs	r5, r7
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da00      	bge.n	80056a6 <__udivmoddi4+0x5e>
 80056a4:	e076      	b.n	8005794 <__udivmoddi4+0x14c>
 80056a6:	2200      	movs	r2, #0
 80056a8:	2300      	movs	r3, #0
 80056aa:	9200      	str	r2, [sp, #0]
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	2301      	movs	r3, #1
 80056b0:	465a      	mov	r2, fp
 80056b2:	4093      	lsls	r3, r2
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	2301      	movs	r3, #1
 80056b8:	4642      	mov	r2, r8
 80056ba:	4093      	lsls	r3, r2
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	e029      	b.n	8005714 <__udivmoddi4+0xcc>
 80056c0:	4282      	cmp	r2, r0
 80056c2:	d9cf      	bls.n	8005664 <__udivmoddi4+0x1c>
 80056c4:	2200      	movs	r2, #0
 80056c6:	2300      	movs	r3, #0
 80056c8:	9200      	str	r2, [sp, #0]
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <__udivmoddi4+0x8e>
 80056d2:	601c      	str	r4, [r3, #0]
 80056d4:	605d      	str	r5, [r3, #4]
 80056d6:	9800      	ldr	r0, [sp, #0]
 80056d8:	9901      	ldr	r1, [sp, #4]
 80056da:	b003      	add	sp, #12
 80056dc:	bcf0      	pop	{r4, r5, r6, r7}
 80056de:	46bb      	mov	fp, r7
 80056e0:	46b2      	mov	sl, r6
 80056e2:	46a9      	mov	r9, r5
 80056e4:	46a0      	mov	r8, r4
 80056e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056e8:	4642      	mov	r2, r8
 80056ea:	469b      	mov	fp, r3
 80056ec:	2320      	movs	r3, #32
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	4652      	mov	r2, sl
 80056f2:	40da      	lsrs	r2, r3
 80056f4:	4641      	mov	r1, r8
 80056f6:	0013      	movs	r3, r2
 80056f8:	464a      	mov	r2, r9
 80056fa:	408a      	lsls	r2, r1
 80056fc:	0017      	movs	r7, r2
 80056fe:	4642      	mov	r2, r8
 8005700:	431f      	orrs	r7, r3
 8005702:	4653      	mov	r3, sl
 8005704:	4093      	lsls	r3, r2
 8005706:	001e      	movs	r6, r3
 8005708:	42af      	cmp	r7, r5
 800570a:	d9c3      	bls.n	8005694 <__udivmoddi4+0x4c>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	9200      	str	r2, [sp, #0]
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	4643      	mov	r3, r8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0d8      	beq.n	80056cc <__udivmoddi4+0x84>
 800571a:	07fb      	lsls	r3, r7, #31
 800571c:	0872      	lsrs	r2, r6, #1
 800571e:	431a      	orrs	r2, r3
 8005720:	4646      	mov	r6, r8
 8005722:	087b      	lsrs	r3, r7, #1
 8005724:	e00e      	b.n	8005744 <__udivmoddi4+0xfc>
 8005726:	42ab      	cmp	r3, r5
 8005728:	d101      	bne.n	800572e <__udivmoddi4+0xe6>
 800572a:	42a2      	cmp	r2, r4
 800572c:	d80c      	bhi.n	8005748 <__udivmoddi4+0x100>
 800572e:	1aa4      	subs	r4, r4, r2
 8005730:	419d      	sbcs	r5, r3
 8005732:	2001      	movs	r0, #1
 8005734:	1924      	adds	r4, r4, r4
 8005736:	416d      	adcs	r5, r5
 8005738:	2100      	movs	r1, #0
 800573a:	3e01      	subs	r6, #1
 800573c:	1824      	adds	r4, r4, r0
 800573e:	414d      	adcs	r5, r1
 8005740:	2e00      	cmp	r6, #0
 8005742:	d006      	beq.n	8005752 <__udivmoddi4+0x10a>
 8005744:	42ab      	cmp	r3, r5
 8005746:	d9ee      	bls.n	8005726 <__udivmoddi4+0xde>
 8005748:	3e01      	subs	r6, #1
 800574a:	1924      	adds	r4, r4, r4
 800574c:	416d      	adcs	r5, r5
 800574e:	2e00      	cmp	r6, #0
 8005750:	d1f8      	bne.n	8005744 <__udivmoddi4+0xfc>
 8005752:	9800      	ldr	r0, [sp, #0]
 8005754:	9901      	ldr	r1, [sp, #4]
 8005756:	465b      	mov	r3, fp
 8005758:	1900      	adds	r0, r0, r4
 800575a:	4169      	adcs	r1, r5
 800575c:	2b00      	cmp	r3, #0
 800575e:	db24      	blt.n	80057aa <__udivmoddi4+0x162>
 8005760:	002b      	movs	r3, r5
 8005762:	465a      	mov	r2, fp
 8005764:	4644      	mov	r4, r8
 8005766:	40d3      	lsrs	r3, r2
 8005768:	002a      	movs	r2, r5
 800576a:	40e2      	lsrs	r2, r4
 800576c:	001c      	movs	r4, r3
 800576e:	465b      	mov	r3, fp
 8005770:	0015      	movs	r5, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	db2a      	blt.n	80057cc <__udivmoddi4+0x184>
 8005776:	0026      	movs	r6, r4
 8005778:	409e      	lsls	r6, r3
 800577a:	0033      	movs	r3, r6
 800577c:	0026      	movs	r6, r4
 800577e:	4647      	mov	r7, r8
 8005780:	40be      	lsls	r6, r7
 8005782:	0032      	movs	r2, r6
 8005784:	1a80      	subs	r0, r0, r2
 8005786:	4199      	sbcs	r1, r3
 8005788:	9000      	str	r0, [sp, #0]
 800578a:	9101      	str	r1, [sp, #4]
 800578c:	e79e      	b.n	80056cc <__udivmoddi4+0x84>
 800578e:	42a3      	cmp	r3, r4
 8005790:	d8bc      	bhi.n	800570c <__udivmoddi4+0xc4>
 8005792:	e782      	b.n	800569a <__udivmoddi4+0x52>
 8005794:	4642      	mov	r2, r8
 8005796:	2320      	movs	r3, #32
 8005798:	2100      	movs	r1, #0
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	2200      	movs	r2, #0
 800579e:	9100      	str	r1, [sp, #0]
 80057a0:	9201      	str	r2, [sp, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	40da      	lsrs	r2, r3
 80057a6:	9201      	str	r2, [sp, #4]
 80057a8:	e785      	b.n	80056b6 <__udivmoddi4+0x6e>
 80057aa:	4642      	mov	r2, r8
 80057ac:	2320      	movs	r3, #32
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	002a      	movs	r2, r5
 80057b2:	4646      	mov	r6, r8
 80057b4:	409a      	lsls	r2, r3
 80057b6:	0023      	movs	r3, r4
 80057b8:	40f3      	lsrs	r3, r6
 80057ba:	4644      	mov	r4, r8
 80057bc:	4313      	orrs	r3, r2
 80057be:	002a      	movs	r2, r5
 80057c0:	40e2      	lsrs	r2, r4
 80057c2:	001c      	movs	r4, r3
 80057c4:	465b      	mov	r3, fp
 80057c6:	0015      	movs	r5, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	dad4      	bge.n	8005776 <__udivmoddi4+0x12e>
 80057cc:	4642      	mov	r2, r8
 80057ce:	002f      	movs	r7, r5
 80057d0:	2320      	movs	r3, #32
 80057d2:	0026      	movs	r6, r4
 80057d4:	4097      	lsls	r7, r2
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	40de      	lsrs	r6, r3
 80057da:	003b      	movs	r3, r7
 80057dc:	4333      	orrs	r3, r6
 80057de:	e7cd      	b.n	800577c <__udivmoddi4+0x134>

080057e0 <__clzsi2>:
 80057e0:	211c      	movs	r1, #28
 80057e2:	2301      	movs	r3, #1
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	4298      	cmp	r0, r3
 80057e8:	d301      	bcc.n	80057ee <__clzsi2+0xe>
 80057ea:	0c00      	lsrs	r0, r0, #16
 80057ec:	3910      	subs	r1, #16
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	4298      	cmp	r0, r3
 80057f2:	d301      	bcc.n	80057f8 <__clzsi2+0x18>
 80057f4:	0a00      	lsrs	r0, r0, #8
 80057f6:	3908      	subs	r1, #8
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	4298      	cmp	r0, r3
 80057fc:	d301      	bcc.n	8005802 <__clzsi2+0x22>
 80057fe:	0900      	lsrs	r0, r0, #4
 8005800:	3904      	subs	r1, #4
 8005802:	a202      	add	r2, pc, #8	@ (adr r2, 800580c <__clzsi2+0x2c>)
 8005804:	5c10      	ldrb	r0, [r2, r0]
 8005806:	1840      	adds	r0, r0, r1
 8005808:	4770      	bx	lr
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	02020304 	.word	0x02020304
 8005810:	01010101 	.word	0x01010101
	...

0800581c <__clzdi2>:
 800581c:	b510      	push	{r4, lr}
 800581e:	2900      	cmp	r1, #0
 8005820:	d103      	bne.n	800582a <__clzdi2+0xe>
 8005822:	f7ff ffdd 	bl	80057e0 <__clzsi2>
 8005826:	3020      	adds	r0, #32
 8005828:	e002      	b.n	8005830 <__clzdi2+0x14>
 800582a:	0008      	movs	r0, r1
 800582c:	f7ff ffd8 	bl	80057e0 <__clzsi2>
 8005830:	bd10      	pop	{r4, pc}
 8005832:	46c0      	nop			@ (mov r8, r8)

08005834 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	0018      	movs	r0, r3
 800583e:	230c      	movs	r3, #12
 8005840:	001a      	movs	r2, r3
 8005842:	2100      	movs	r1, #0
 8005844:	f009 fe62 	bl	800f50c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005848:	4b2d      	ldr	r3, [pc, #180]	@ (8005900 <MX_ADC1_Init+0xcc>)
 800584a:	4a2e      	ldr	r2, [pc, #184]	@ (8005904 <MX_ADC1_Init+0xd0>)
 800584c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800584e:	4b2c      	ldr	r3, [pc, #176]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005850:	2280      	movs	r2, #128	@ 0x80
 8005852:	05d2      	lsls	r2, r2, #23
 8005854:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005856:	4b2a      	ldr	r3, [pc, #168]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005858:	2200      	movs	r2, #0
 800585a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800585c:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <MX_ADC1_Init+0xcc>)
 800585e:	2200      	movs	r2, #0
 8005860:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005862:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005864:	2200      	movs	r2, #0
 8005866:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005868:	4b25      	ldr	r3, [pc, #148]	@ (8005900 <MX_ADC1_Init+0xcc>)
 800586a:	2204      	movs	r2, #4
 800586c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800586e:	4b24      	ldr	r3, [pc, #144]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005870:	2200      	movs	r2, #0
 8005872:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8005874:	4b22      	ldr	r3, [pc, #136]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005876:	2200      	movs	r2, #0
 8005878:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800587a:	4b21      	ldr	r3, [pc, #132]	@ (8005900 <MX_ADC1_Init+0xcc>)
 800587c:	2200      	movs	r2, #0
 800587e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8005880:	4b1f      	ldr	r3, [pc, #124]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005882:	2201      	movs	r2, #1
 8005884:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005888:	2220      	movs	r2, #32
 800588a:	2100      	movs	r1, #0
 800588c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800588e:	4b1c      	ldr	r3, [pc, #112]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005890:	2200      	movs	r2, #0
 8005892:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005894:	4b1a      	ldr	r3, [pc, #104]	@ (8005900 <MX_ADC1_Init+0xcc>)
 8005896:	2200      	movs	r2, #0
 8005898:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800589a:	4b19      	ldr	r3, [pc, #100]	@ (8005900 <MX_ADC1_Init+0xcc>)
 800589c:	222c      	movs	r2, #44	@ 0x2c
 800589e:	2100      	movs	r1, #0
 80058a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80058a2:	4b17      	ldr	r3, [pc, #92]	@ (8005900 <MX_ADC1_Init+0xcc>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80058a8:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <MX_ADC1_Init+0xcc>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80058ae:	4b14      	ldr	r3, [pc, #80]	@ (8005900 <MX_ADC1_Init+0xcc>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80058b4:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <MX_ADC1_Init+0xcc>)
 80058b6:	223c      	movs	r2, #60	@ 0x3c
 80058b8:	2100      	movs	r1, #0
 80058ba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80058bc:	4b10      	ldr	r3, [pc, #64]	@ (8005900 <MX_ADC1_Init+0xcc>)
 80058be:	2200      	movs	r2, #0
 80058c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80058c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <MX_ADC1_Init+0xcc>)
 80058c4:	0018      	movs	r0, r3
 80058c6:	f003 fa27 	bl	8008d18 <HAL_ADC_Init>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d001      	beq.n	80058d2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80058ce:	f001 f889 	bl	80069e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	2200      	movs	r2, #0
 80058e2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058e4:	1d3a      	adds	r2, r7, #4
 80058e6:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <MX_ADC1_Init+0xcc>)
 80058e8:	0011      	movs	r1, r2
 80058ea:	0018      	movs	r0, r3
 80058ec:	f003 fbbc 	bl	8009068 <HAL_ADC_ConfigChannel>
 80058f0:	1e03      	subs	r3, r0, #0
 80058f2:	d001      	beq.n	80058f8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80058f4:	f001 f876 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80058f8:	46c0      	nop			@ (mov r8, r8)
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b004      	add	sp, #16
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000144 	.word	0x20000144
 8005904:	40012400 	.word	0x40012400

08005908 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b08b      	sub	sp, #44	@ 0x2c
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005910:	2414      	movs	r4, #20
 8005912:	193b      	adds	r3, r7, r4
 8005914:	0018      	movs	r0, r3
 8005916:	2314      	movs	r3, #20
 8005918:	001a      	movs	r2, r3
 800591a:	2100      	movs	r1, #0
 800591c:	f009 fdf6 	bl	800f50c <memset>
  if(adcHandle->Instance==ADC1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a18      	ldr	r2, [pc, #96]	@ (8005988 <HAL_ADC_MspInit+0x80>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d129      	bne.n	800597e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800592a:	4b18      	ldr	r3, [pc, #96]	@ (800598c <HAL_ADC_MspInit+0x84>)
 800592c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800592e:	4b17      	ldr	r3, [pc, #92]	@ (800598c <HAL_ADC_MspInit+0x84>)
 8005930:	2180      	movs	r1, #128	@ 0x80
 8005932:	0349      	lsls	r1, r1, #13
 8005934:	430a      	orrs	r2, r1
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40
 8005938:	4b14      	ldr	r3, [pc, #80]	@ (800598c <HAL_ADC_MspInit+0x84>)
 800593a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	035b      	lsls	r3, r3, #13
 8005940:	4013      	ands	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005946:	4b11      	ldr	r3, [pc, #68]	@ (800598c <HAL_ADC_MspInit+0x84>)
 8005948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800594a:	4b10      	ldr	r3, [pc, #64]	@ (800598c <HAL_ADC_MspInit+0x84>)
 800594c:	2101      	movs	r1, #1
 800594e:	430a      	orrs	r2, r1
 8005950:	635a      	str	r2, [r3, #52]	@ 0x34
 8005952:	4b0e      	ldr	r3, [pc, #56]	@ (800598c <HAL_ADC_MspInit+0x84>)
 8005954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005956:	2201      	movs	r2, #1
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800595e:	193b      	adds	r3, r7, r4
 8005960:	2201      	movs	r2, #1
 8005962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005964:	193b      	adds	r3, r7, r4
 8005966:	2203      	movs	r2, #3
 8005968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596a:	193b      	adds	r3, r7, r4
 800596c:	2200      	movs	r2, #0
 800596e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005970:	193a      	adds	r2, r7, r4
 8005972:	23a0      	movs	r3, #160	@ 0xa0
 8005974:	05db      	lsls	r3, r3, #23
 8005976:	0011      	movs	r1, r2
 8005978:	0018      	movs	r0, r3
 800597a:	f004 fc8b 	bl	800a294 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b00b      	add	sp, #44	@ 0x2c
 8005984:	bd90      	pop	{r4, r7, pc}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	40012400 	.word	0x40012400
 800598c:	40021000 	.word	0x40021000

08005990 <adc_calib>:
 * \param -
 *
 * \return -
 */
HAL_StatusTypeDef adc_calib(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
	return HAL_ADCEx_Calibration_Start(&hadc1);
 8005994:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <adc_calib+0x14>)
 8005996:	0018      	movs	r0, r3
 8005998:	f003 fe34 	bl	8009604 <HAL_ADCEx_Calibration_Start>
 800599c:	0003      	movs	r3, r0
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20000144 	.word	0x20000144

080059a8 <AYCT_EXTI_IRQHandler>:
 * @brief This function handles EXTI line 2 and 3 interrupts.
 *
 * Configure as Rising and Falling IRQ
 */
void AYCT_EXTI_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
	static uint32_t timer_now;

	// IRQ will start before the timer is installed
	if (htim16.Instance == NULL)
 80059ac:	4b83      	ldr	r3, [pc, #524]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d100      	bne.n	80059b6 <AYCT_EXTI_IRQHandler+0xe>
 80059b4:	e0ff      	b.n	8005bb6 <AYCT_EXTI_IRQHandler+0x20e>
		return;

	timer_now = __HAL_TIM_GET_COUNTER(&htim16);
 80059b6:	4b81      	ldr	r3, [pc, #516]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059bc:	4b80      	ldr	r3, [pc, #512]	@ (8005bc0 <AYCT_EXTI_IRQHandler+0x218>)
 80059be:	601a      	str	r2, [r3, #0]

	if (is433_INT)
 80059c0:	4b80      	ldr	r3, [pc, #512]	@ (8005bc4 <AYCT_EXTI_IRQHandler+0x21c>)
 80059c2:	2110      	movs	r1, #16
 80059c4:	0018      	movs	r0, r3
 80059c6:	f004 fdd1 	bl	800a56c <HAL_GPIO_ReadPin>
 80059ca:	1e03      	subs	r3, r0, #0
 80059cc:	d100      	bne.n	80059d0 <AYCT_EXTI_IRQHandler+0x28>
 80059ce:	e0c6      	b.n	8005b5e <AYCT_EXTI_IRQHandler+0x1b6>
	{
		if ((timer_now - start_time > BITS_MINIMUM) && (timer_now - start_time < BITS_MAXIMUM)) // short low
 80059d0:	4b7b      	ldr	r3, [pc, #492]	@ (8005bc0 <AYCT_EXTI_IRQHandler+0x218>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b7c      	ldr	r3, [pc, #496]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b96      	cmp	r3, #150	@ 0x96
 80059dc:	d913      	bls.n	8005a06 <AYCT_EXTI_IRQHandler+0x5e>
 80059de:	4b78      	ldr	r3, [pc, #480]	@ (8005bc0 <AYCT_EXTI_IRQHandler+0x218>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b79      	ldr	r3, [pc, #484]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	23c8      	movs	r3, #200	@ 0xc8
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d20a      	bcs.n	8005a06 <AYCT_EXTI_IRQHandler+0x5e>
			buf[x++] = SHORT_LOW;
 80059f0:	4b76      	ldr	r3, [pc, #472]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	b2d1      	uxtb	r1, r2
 80059f8:	4a74      	ldr	r2, [pc, #464]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 80059fa:	7011      	strb	r1, [r2, #0]
 80059fc:	001a      	movs	r2, r3
 80059fe:	4b74      	ldr	r3, [pc, #464]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005a00:	2101      	movs	r1, #1
 8005a02:	5499      	strb	r1, [r3, r2]
 8005a04:	e027      	b.n	8005a56 <AYCT_EXTI_IRQHandler+0xae>
		else if ((timer_now - start_time > BITL_MINIMUM) && (timer_now - start_time < BITL_MAXIMUM)) // long low
 8005a06:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	23e1      	movs	r3, #225	@ 0xe1
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d913      	bls.n	8005a40 <AYCT_EXTI_IRQHandler+0x98>
 8005a18:	4b69      	ldr	r3, [pc, #420]	@ (8005bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	23fa      	movs	r3, #250	@ 0xfa
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d20a      	bcs.n	8005a40 <AYCT_EXTI_IRQHandler+0x98>
			buf[x++] = LONG_LOW;
 8005a2a:	4b68      	ldr	r3, [pc, #416]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	b2d1      	uxtb	r1, r2
 8005a32:	4a66      	ldr	r2, [pc, #408]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005a34:	7011      	strb	r1, [r2, #0]
 8005a36:	001a      	movs	r2, r3
 8005a38:	4b65      	ldr	r3, [pc, #404]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005a3a:	2103      	movs	r1, #3
 8005a3c:	5499      	strb	r1, [r3, r2]
 8005a3e:	e00a      	b.n	8005a56 <AYCT_EXTI_IRQHandler+0xae>
		else
		{
			cnt = x = 0; // bit is fout
 8005a40:	4b62      	ldr	r3, [pc, #392]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	4b61      	ldr	r3, [pc, #388]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	4b62      	ldr	r3, [pc, #392]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005a4c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8005a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if (x > 4 || cnt > 32)
 8005a56:	4b5d      	ldr	r3, [pc, #372]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d803      	bhi.n	8005a66 <AYCT_EXTI_IRQHandler+0xbe>
 8005a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d906      	bls.n	8005a74 <AYCT_EXTI_IRQHandler+0xcc>
			cnt = x = 0; // bit is fout
 8005a66:	4b59      	ldr	r3, [pc, #356]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	4b57      	ldr	r3, [pc, #348]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005a6e:	781a      	ldrb	r2, [r3, #0]
 8005a70:	4b58      	ldr	r3, [pc, #352]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005a72:	701a      	strb	r2, [r3, #0]

		// received 0
		if (buf[0] == SHORT_HIGH && buf[1] == SHORT_LOW && buf[2] == SHORT_HIGH && buf[3] == LONG_LOW)
 8005a74:	4b56      	ldr	r3, [pc, #344]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b0a      	cmp	r3, #10
 8005a7a:	d133      	bne.n	8005ae4 <AYCT_EXTI_IRQHandler+0x13c>
 8005a7c:	4b54      	ldr	r3, [pc, #336]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d12f      	bne.n	8005ae4 <AYCT_EXTI_IRQHandler+0x13c>
 8005a84:	4b52      	ldr	r3, [pc, #328]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005a86:	789b      	ldrb	r3, [r3, #2]
 8005a88:	2b0a      	cmp	r3, #10
 8005a8a:	d12b      	bne.n	8005ae4 <AYCT_EXTI_IRQHandler+0x13c>
 8005a8c:	4b50      	ldr	r3, [pc, #320]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005a8e:	78db      	ldrb	r3, [r3, #3]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d127      	bne.n	8005ae4 <AYCT_EXTI_IRQHandler+0x13c>
		{
			bit_clear(received_code, (31 - cnt++));
 8005a94:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	b2d1      	uxtb	r1, r2
 8005a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005a9e:	7011      	strb	r1, [r2, #0]
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	40d3      	lsrs	r3, r2
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	001a      	movs	r2, r3
 8005aac:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	4b49      	ldr	r3, [pc, #292]	@ (8005bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8005ab4:	601a      	str	r2, [r3, #0]
			buf[0] = buf[1] = buf[2] = buf[3] = x = NO_DATA;
 8005ab6:	4b45      	ldr	r3, [pc, #276]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	4b43      	ldr	r3, [pc, #268]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	4b43      	ldr	r3, [pc, #268]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005ac2:	70da      	strb	r2, [r3, #3]
 8005ac4:	4b42      	ldr	r3, [pc, #264]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005ac6:	78da      	ldrb	r2, [r3, #3]
 8005ac8:	4b41      	ldr	r3, [pc, #260]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005aca:	709a      	strb	r2, [r3, #2]
 8005acc:	4b40      	ldr	r3, [pc, #256]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005ace:	789a      	ldrb	r2, [r3, #2]
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005ad2:	705a      	strb	r2, [r3, #1]
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005ad6:	785a      	ldrb	r2, [r3, #1]
 8005ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005ada:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8005adc:	4b37      	ldr	r3, [pc, #220]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		// received 1
		if (buf[0] == SHORT_HIGH && buf[1] == LONG_LOW && buf[2] == SHORT_HIGH && buf[3] == SHORT_LOW)
 8005ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b0a      	cmp	r3, #10
 8005aea:	d132      	bne.n	8005b52 <AYCT_EXTI_IRQHandler+0x1aa>
 8005aec:	4b38      	ldr	r3, [pc, #224]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d12e      	bne.n	8005b52 <AYCT_EXTI_IRQHandler+0x1aa>
 8005af4:	4b36      	ldr	r3, [pc, #216]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005af6:	789b      	ldrb	r3, [r3, #2]
 8005af8:	2b0a      	cmp	r3, #10
 8005afa:	d12a      	bne.n	8005b52 <AYCT_EXTI_IRQHandler+0x1aa>
 8005afc:	4b34      	ldr	r3, [pc, #208]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005afe:	78db      	ldrb	r3, [r3, #3]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d126      	bne.n	8005b52 <AYCT_EXTI_IRQHandler+0x1aa>
		{
			bit_set(received_code, (31 - cnt++));
 8005b04:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	b2d1      	uxtb	r1, r2
 8005b0c:	4a31      	ldr	r2, [pc, #196]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005b0e:	7011      	strb	r1, [r2, #0]
 8005b10:	001a      	movs	r2, r3
 8005b12:	2380      	movs	r3, #128	@ 0x80
 8005b14:	061b      	lsls	r3, r3, #24
 8005b16:	40d3      	lsrs	r3, r2
 8005b18:	001a      	movs	r2, r3
 8005b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8005b22:	601a      	str	r2, [r3, #0]
			buf[0] = buf[1] = buf[2] = buf[3] = x = NO_DATA;
 8005b24:	4b29      	ldr	r3, [pc, #164]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	4b28      	ldr	r3, [pc, #160]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	4b28      	ldr	r3, [pc, #160]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b30:	70da      	strb	r2, [r3, #3]
 8005b32:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b34:	78da      	ldrb	r2, [r3, #3]
 8005b36:	4b26      	ldr	r3, [pc, #152]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b38:	709a      	strb	r2, [r3, #2]
 8005b3a:	4b25      	ldr	r3, [pc, #148]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b3c:	789a      	ldrb	r2, [r3, #2]
 8005b3e:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b40:	705a      	strb	r2, [r3, #1]
 8005b42:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b44:	785a      	ldrb	r2, [r3, #1]
 8005b46:	4b22      	ldr	r3, [pc, #136]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b48:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8005b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		start_time = __HAL_TIM_GET_COUNTER(&htim16);
 8005b52:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b58:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e02c      	b.n	8005bb8 <AYCT_EXTI_IRQHandler+0x210>
	}
	else
	{
		if ((timer_now - start_time > BITS_MINIMUM) && (timer_now - start_time < BITS_MAXIMUM)) // 1= tussen MIN en MAX
 8005b5e:	4b18      	ldr	r3, [pc, #96]	@ (8005bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b19      	ldr	r3, [pc, #100]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b96      	cmp	r3, #150	@ 0x96
 8005b6a:	d913      	bls.n	8005b94 <AYCT_EXTI_IRQHandler+0x1ec>
 8005b6c:	4b14      	ldr	r3, [pc, #80]	@ (8005bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b15      	ldr	r3, [pc, #84]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	1ad2      	subs	r2, r2, r3
 8005b76:	23c8      	movs	r3, #200	@ 0xc8
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d20a      	bcs.n	8005b94 <AYCT_EXTI_IRQHandler+0x1ec>
			buf[x++] = SHORT_HIGH;
 8005b7e:	4b13      	ldr	r3, [pc, #76]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	b2d1      	uxtb	r1, r2
 8005b86:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005b88:	7011      	strb	r1, [r2, #0]
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8005b8e:	210a      	movs	r1, #10
 8005b90:	5499      	strb	r1, [r3, r2]
 8005b92:	e00a      	b.n	8005baa <AYCT_EXTI_IRQHandler+0x202>
		else
		{
			cnt = x = 0; // bit is fout
 8005b94:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005bcc <AYCT_EXTI_IRQHandler+0x224>)
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8005ba0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8005ba2:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		start_time = __HAL_TIM_GET_COUNTER(&htim16);
 8005baa:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <AYCT_EXTI_IRQHandler+0x214>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e000      	b.n	8005bb8 <AYCT_EXTI_IRQHandler+0x210>
		return;
 8005bb6:	46c0      	nop			@ (mov r8, r8)
	}

}
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	200008a8 	.word	0x200008a8
 8005bc0:	200001bc 	.word	0x200001bc
 8005bc4:	50000800 	.word	0x50000800
 8005bc8:	200001b4 	.word	0x200001b4
 8005bcc:	200001a9 	.word	0x200001a9
 8005bd0:	200001ac 	.word	0x200001ac
 8005bd4:	200001a8 	.word	0x200001a8
 8005bd8:	200001b8 	.word	0x200001b8

08005bdc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005be0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c1c <MX_CRC_Init+0x40>)
 8005be2:	4a0f      	ldr	r2, [pc, #60]	@ (8005c20 <MX_CRC_Init+0x44>)
 8005be4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8005be6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <MX_CRC_Init+0x40>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8005bec:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <MX_CRC_Init+0x40>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <MX_CRC_Init+0x40>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8005bf8:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <MX_CRC_Init+0x40>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8005bfe:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <MX_CRC_Init+0x40>)
 8005c00:	2203      	movs	r2, #3
 8005c02:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <MX_CRC_Init+0x40>)
 8005c06:	0018      	movs	r0, r3
 8005c08:	f003 fed6 	bl	80099b8 <HAL_CRC_Init>
 8005c0c:	1e03      	subs	r3, r0, #0
 8005c0e:	d001      	beq.n	8005c14 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8005c10:	f000 fee8 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005c14:	46c0      	nop			@ (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	200001c0 	.word	0x200001c0
 8005c20:	40023000 	.word	0x40023000

08005c24 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <HAL_CRC_MspInit+0x38>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d10d      	bne.n	8005c52 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005c36:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <HAL_CRC_MspInit+0x3c>)
 8005c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3a:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <HAL_CRC_MspInit+0x3c>)
 8005c3c:	2180      	movs	r1, #128	@ 0x80
 8005c3e:	0149      	lsls	r1, r1, #5
 8005c40:	430a      	orrs	r2, r1
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <HAL_CRC_MspInit+0x3c>)
 8005c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c48:	2380      	movs	r3, #128	@ 0x80
 8005c4a:	015b      	lsls	r3, r3, #5
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8005c52:	46c0      	nop			@ (mov r8, r8)
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b004      	add	sp, #16
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	40023000 	.word	0x40023000
 8005c60:	40021000 	.word	0x40021000

08005c64 <WriteStruct2eerom>:
 * \param struct to write
 *
 * \return false if successful, true on error.
 */
uint8_t WriteStruct2eerom(i2c_ee_t to_save)
{
 8005c64:	b084      	sub	sp, #16
 8005c66:	b5b0      	push	{r4, r5, r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	2518      	movs	r5, #24
 8005c6e:	197c      	adds	r4, r7, r5
 8005c70:	6020      	str	r0, [r4, #0]
 8005c72:	6061      	str	r1, [r4, #4]
 8005c74:	60a2      	str	r2, [r4, #8]
 8005c76:	60e3      	str	r3, [r4, #12]

	bool result;

	/*##-2- Compute the CRC of "aDataBuffer" ###################################*/
	to_save.crc = HAL_CRC_Calculate(&hcrc, (uint32_t *) &to_save, (sizeof(to_save)/4) - 4); //
 8005c78:	197b      	adds	r3, r7, r5
 8005c7a:	4815      	ldr	r0, [pc, #84]	@ (8005cd0 <WriteStruct2eerom+0x6c>)
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	0019      	movs	r1, r3
 8005c80:	f003 ff00 	bl	8009a84 <HAL_CRC_Calculate>
 8005c84:	0002      	movs	r2, r0
 8005c86:	197b      	adds	r3, r7, r5
 8005c88:	62da      	str	r2, [r3, #44]	@ 0x2c

	result = e2p_write(0x00, (uint8_t *) &to_save, sizeof(to_save));
 8005c8a:	1dfc      	adds	r4, r7, #7
 8005c8c:	197b      	adds	r3, r7, r5
 8005c8e:	2230      	movs	r2, #48	@ 0x30
 8005c90:	0019      	movs	r1, r3
 8005c92:	2000      	movs	r0, #0
 8005c94:	f000 f8a4 	bl	8005de0 <e2p_write>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	7023      	strb	r3, [r4, #0]
	result |= e2p_write(0x40,(uint8_t *) &to_save, sizeof(to_save));
 8005c9c:	197b      	adds	r3, r7, r5
 8005c9e:	2230      	movs	r2, #48	@ 0x30
 8005ca0:	0019      	movs	r1, r3
 8005ca2:	2040      	movs	r0, #64	@ 0x40
 8005ca4:	f000 f89c 	bl	8005de0 <e2p_write>
 8005ca8:	0003      	movs	r3, r0
 8005caa:	001a      	movs	r2, r3
 8005cac:	1dfb      	adds	r3, r7, #7
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	1dfb      	adds	r3, r7, #7
 8005cb8:	1e51      	subs	r1, r2, #1
 8005cba:	418a      	sbcs	r2, r1
 8005cbc:	701a      	strb	r2, [r3, #0]

	return result;
 8005cbe:	1dfb      	adds	r3, r7, #7
 8005cc0:	781b      	ldrb	r3, [r3, #0]
}
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b002      	add	sp, #8
 8005cc8:	bcb0      	pop	{r4, r5, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	b004      	add	sp, #16
 8005cce:	4718      	bx	r3
 8005cd0:	200001c0 	.word	0x200001c0

08005cd4 <ReadStruct2eerom>:
 * @brief This function read the struct from I2C. If the CRC if original fails the backup is used.
 * @param to_read pointer to i2c_ee_t
 * @return 0 if successful, true on CRC error.
 */
uint8_t ReadStruct2eerom(i2c_ee_t * to_read)
{
 8005cd4:	b5b0      	push	{r4, r5, r7, lr}
 8005cd6:	b08e      	sub	sp, #56	@ 0x38
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	uint8_t array[sizeof(i2c_ee_t)];

	e2p_read(0, array, sizeof(i2c_ee_t));
 8005cdc:	2508      	movs	r5, #8
 8005cde:	197b      	adds	r3, r7, r5
 8005ce0:	2230      	movs	r2, #48	@ 0x30
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f000 f839 	bl	8005d5c <e2p_read>

	memcpy(to_read, array, sizeof(i2c_ee_t));
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	197b      	adds	r3, r7, r5
 8005cee:	0010      	movs	r0, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	2330      	movs	r3, #48	@ 0x30
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	f009 fc9e 	bl	800f636 <memcpy>

	if (to_read->crc == HAL_CRC_Calculate(&hcrc, (uint32_t *) &array, (sizeof(array)/4) - 4))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005cfe:	1979      	adds	r1, r7, r5
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <ReadStruct2eerom+0x84>)
 8005d02:	2208      	movs	r2, #8
 8005d04:	0018      	movs	r0, r3
 8005d06:	f003 febd 	bl	8009a84 <HAL_CRC_Calculate>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	429c      	cmp	r4, r3
 8005d0e:	d101      	bne.n	8005d14 <ReadStruct2eerom+0x40>
		return (0);
 8005d10:	2300      	movs	r3, #0
 8005d12:	e01c      	b.n	8005d4e <ReadStruct2eerom+0x7a>
	else
	{
		// CRC error read the backup
		e2p_read(0x40, array, sizeof(i2c_ee_t));
 8005d14:	2508      	movs	r5, #8
 8005d16:	197b      	adds	r3, r7, r5
 8005d18:	2230      	movs	r2, #48	@ 0x30
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	2040      	movs	r0, #64	@ 0x40
 8005d1e:	f000 f81d 	bl	8005d5c <e2p_read>

		memcpy(to_read, array, sizeof(i2c_ee_t));
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	197b      	adds	r3, r7, r5
 8005d26:	0010      	movs	r0, r2
 8005d28:	0019      	movs	r1, r3
 8005d2a:	2330      	movs	r3, #48	@ 0x30
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	f009 fc82 	bl	800f636 <memcpy>

		if (to_read->crc == HAL_CRC_Calculate(&hcrc, (uint32_t *) &array, (sizeof(array)/4) - 4))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005d36:	1979      	adds	r1, r7, r5
 8005d38:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <ReadStruct2eerom+0x84>)
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f003 fea1 	bl	8009a84 <HAL_CRC_Calculate>
 8005d42:	0003      	movs	r3, r0
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d101      	bne.n	8005d4c <ReadStruct2eerom+0x78>
			return (0);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e000      	b.n	8005d4e <ReadStruct2eerom+0x7a>
		else
			return (1);
 8005d4c:	2301      	movs	r3, #1
	}
}
 8005d4e:	0018      	movs	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b00e      	add	sp, #56	@ 0x38
 8005d54:	bdb0      	pop	{r4, r5, r7, pc}
 8005d56:	46c0      	nop			@ (mov r8, r8)
 8005d58:	200001c0 	.word	0x200001c0

08005d5c <e2p_read>:
 * example: https://github.com/sinadarvi/SD_HAL_AT24/blob/master/at24_hal_i2c.c
 *
 * \return false if successful, true on error.
 */
bool e2p_read(uint8_t address, uint8_t *p_dst, uint8_t len)
{
 8005d5c:	b590      	push	{r4, r7, lr}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af04      	add	r7, sp, #16
 8005d62:	6039      	str	r1, [r7, #0]
 8005d64:	0011      	movs	r1, r2
 8005d66:	1dfb      	adds	r3, r7, #7
 8005d68:	1c02      	adds	r2, r0, #0
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	1dbb      	adds	r3, r7, #6
 8005d6e:	1c0a      	adds	r2, r1, #0
 8005d70:	701a      	strb	r2, [r3, #0]
	// Sanity checks
	if (!len)
 8005d72:	1dbb      	adds	r3, r7, #6
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <e2p_read+0x22>
		return (true);
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e029      	b.n	8005dd2 <e2p_read+0x76>
	if ((address + len) > (E2P_PAGE_COUNT * E2P_PAGE_SIZE))
 8005d7e:	1dfb      	adds	r3, r7, #7
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	1dbb      	adds	r3, r7, #6
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	18d4      	adds	r4, r2, r3
 8005d88:	23a0      	movs	r3, #160	@ 0xa0
 8005d8a:	05db      	lsls	r3, r3, #23
 8005d8c:	2140      	movs	r1, #64	@ 0x40
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f004 fbec 	bl	800a56c <HAL_GPIO_ReadPin>
 8005d94:	1e03      	subs	r3, r0, #0
 8005d96:	d002      	beq.n	8005d9e <e2p_read+0x42>
 8005d98:	2380      	movs	r3, #128	@ 0x80
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	e000      	b.n	8005da0 <e2p_read+0x44>
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	da01      	bge.n	8005da8 <e2p_read+0x4c>
		return (true);
 8005da4:	2301      	movs	r3, #1
 8005da6:	e014      	b.n	8005dd2 <e2p_read+0x76>

	if (HAL_I2C_Mem_Read(&hi2c2, (uint16_t) E2P_RIIC_ADDRESS, (uint16_t) address, I2C_MEMADD_SIZE_8BIT, p_dst, (uint16_t) len, 100) != HAL_OK)
 8005da8:	1dfb      	adds	r3, r7, #7
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	1dbb      	adds	r3, r7, #6
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	4809      	ldr	r0, [pc, #36]	@ (8005ddc <e2p_read+0x80>)
 8005db6:	2164      	movs	r1, #100	@ 0x64
 8005db8:	9102      	str	r1, [sp, #8]
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	21a0      	movs	r1, #160	@ 0xa0
 8005dc4:	f004 fe0a 	bl	800a9dc <HAL_I2C_Mem_Read>
 8005dc8:	1e03      	subs	r3, r0, #0
 8005dca:	d001      	beq.n	8005dd0 <e2p_read+0x74>
		return true;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <e2p_read+0x76>

	return false;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	b003      	add	sp, #12
 8005dd8:	bd90      	pop	{r4, r7, pc}
 8005dda:	46c0      	nop			@ (mov r8, r8)
 8005ddc:	200001f4 	.word	0x200001f4

08005de0 <e2p_write>:
 * \param len Length of the data to write.
 *
 * \return false if successful, true on error.
 */
bool e2p_write(uint8_t address, uint8_t *p_src, uint8_t len)
{
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b08d      	sub	sp, #52	@ 0x34
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	6039      	str	r1, [r7, #0]
 8005de8:	0011      	movs	r1, r2
 8005dea:	1dfb      	adds	r3, r7, #7
 8005dec:	1c02      	adds	r2, r0, #0
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	1dbb      	adds	r3, r7, #6
 8005df2:	1c0a      	adds	r2, r1, #0
 8005df4:	701a      	strb	r2, [r3, #0]
	uint32_t pageaddr;
	uint32_t byteaddr;
	uint32_t remaining;
	uint32_t writelen;
	uint32_t addr;
	int32_t rtr = 50;
 8005df6:	2332      	movs	r3, #50	@ 0x32
 8005df8:	60fb      	str	r3, [r7, #12]

	// Sanity checks
	if (!len)
 8005dfa:	1dbb      	adds	r3, r7, #6
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <e2p_write+0x26>
		return (true);
 8005e02:	2301      	movs	r3, #1
 8005e04:	e0c4      	b.n	8005f90 <e2p_write+0x1b0>
	if ((address + len) > (E2P_PAGE_COUNT * E2P_PAGE_SIZE))
 8005e06:	1dfb      	adds	r3, r7, #7
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	1dbb      	adds	r3, r7, #6
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	18d4      	adds	r4, r2, r3
 8005e10:	23a0      	movs	r3, #160	@ 0xa0
 8005e12:	05db      	lsls	r3, r3, #23
 8005e14:	2140      	movs	r1, #64	@ 0x40
 8005e16:	0018      	movs	r0, r3
 8005e18:	f004 fba8 	bl	800a56c <HAL_GPIO_ReadPin>
 8005e1c:	1e03      	subs	r3, r0, #0
 8005e1e:	d002      	beq.n	8005e26 <e2p_write+0x46>
 8005e20:	2380      	movs	r3, #128	@ 0x80
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	e000      	b.n	8005e28 <e2p_write+0x48>
 8005e26:	2380      	movs	r3, #128	@ 0x80
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	da01      	bge.n	8005e30 <e2p_write+0x50>
		return (true);
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0af      	b.n	8005f90 <e2p_write+0x1b0>

	// Get the remaining number of bytes to write
	remaining = len;
 8005e30:	1dbb      	adds	r3, r7, #6
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]
	// Calculate the page address
	pageaddr = address / E2P_PAGE_SIZE;
 8005e36:	1dfb      	adds	r3, r7, #7
 8005e38:	781c      	ldrb	r4, [r3, #0]
 8005e3a:	23a0      	movs	r3, #160	@ 0xa0
 8005e3c:	05db      	lsls	r3, r3, #23
 8005e3e:	2140      	movs	r1, #64	@ 0x40
 8005e40:	0018      	movs	r0, r3
 8005e42:	f004 fb93 	bl	800a56c <HAL_GPIO_ReadPin>
 8005e46:	1e03      	subs	r3, r0, #0
 8005e48:	d001      	beq.n	8005e4e <e2p_write+0x6e>
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	e000      	b.n	8005e50 <e2p_write+0x70>
 8005e4e:	2308      	movs	r3, #8
 8005e50:	0019      	movs	r1, r3
 8005e52:	0020      	movs	r0, r4
 8005e54:	f7ff faec 	bl	8005430 <__divsi3>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	61fb      	str	r3, [r7, #28]
	// Calculate the byte address within the page (for a partial page write)
	byteaddr = address % E2P_PAGE_SIZE;
 8005e5c:	1dfb      	adds	r3, r7, #7
 8005e5e:	781c      	ldrb	r4, [r3, #0]
 8005e60:	23a0      	movs	r3, #160	@ 0xa0
 8005e62:	05db      	lsls	r3, r3, #23
 8005e64:	2140      	movs	r1, #64	@ 0x40
 8005e66:	0018      	movs	r0, r3
 8005e68:	f004 fb80 	bl	800a56c <HAL_GPIO_ReadPin>
 8005e6c:	1e03      	subs	r3, r0, #0
 8005e6e:	d001      	beq.n	8005e74 <e2p_write+0x94>
 8005e70:	2310      	movs	r3, #16
 8005e72:	e000      	b.n	8005e76 <e2p_write+0x96>
 8005e74:	2308      	movs	r3, #8
 8005e76:	0019      	movs	r1, r3
 8005e78:	0020      	movs	r0, r4
 8005e7a:	f7ff fbbf 	bl	80055fc <__aeabi_idivmod>
 8005e7e:	000b      	movs	r3, r1
 8005e80:	61bb      	str	r3, [r7, #24]
	// Calculate the number of bytes to write
	if ((byteaddr + len) > E2P_PAGE_SIZE)
 8005e82:	1dbb      	adds	r3, r7, #6
 8005e84:	781a      	ldrb	r2, [r3, #0]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	18d4      	adds	r4, r2, r3
 8005e8a:	23a0      	movs	r3, #160	@ 0xa0
 8005e8c:	05db      	lsls	r3, r3, #23
 8005e8e:	2140      	movs	r1, #64	@ 0x40
 8005e90:	0018      	movs	r0, r3
 8005e92:	f004 fb6b 	bl	800a56c <HAL_GPIO_ReadPin>
 8005e96:	1e03      	subs	r3, r0, #0
 8005e98:	d001      	beq.n	8005e9e <e2p_write+0xbe>
 8005e9a:	2310      	movs	r3, #16
 8005e9c:	e000      	b.n	8005ea0 <e2p_write+0xc0>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d20e      	bcs.n	8005ec2 <e2p_write+0xe2>
		writelen = E2P_PAGE_SIZE - byteaddr;
 8005ea4:	23a0      	movs	r3, #160	@ 0xa0
 8005ea6:	05db      	lsls	r3, r3, #23
 8005ea8:	2140      	movs	r1, #64	@ 0x40
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f004 fb5e 	bl	800a56c <HAL_GPIO_ReadPin>
 8005eb0:	1e03      	subs	r3, r0, #0
 8005eb2:	d001      	beq.n	8005eb8 <e2p_write+0xd8>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	e000      	b.n	8005eba <e2p_write+0xda>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	e062      	b.n	8005f88 <e2p_write+0x1a8>
	else
		writelen = len;
 8005ec2:	1dbb      	adds	r3, r7, #6
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	613b      	str	r3, [r7, #16]

	// Write data to the device
	while (remaining > 0)
 8005ec8:	e05e      	b.n	8005f88 <e2p_write+0x1a8>
	{
		addr = (pageaddr << E2P_PAGE_OFFSET) | byteaddr;
 8005eca:	23a0      	movs	r3, #160	@ 0xa0
 8005ecc:	05db      	lsls	r3, r3, #23
 8005ece:	2140      	movs	r1, #64	@ 0x40
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f004 fb4b 	bl	800a56c <HAL_GPIO_ReadPin>
 8005ed6:	1e03      	subs	r3, r0, #0
 8005ed8:	d001      	beq.n	8005ede <e2p_write+0xfe>
 8005eda:	2304      	movs	r3, #4
 8005edc:	e000      	b.n	8005ee0 <e2p_write+0x100>
 8005ede:	2303      	movs	r3, #3
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]

		rtr = 50;
 8005eec:	2332      	movs	r3, #50	@ 0x32
 8005eee:	60fb      	str	r3, [r7, #12]

		if (HAL_I2C_Mem_Write(&hi2c2, (uint16_t) E2P_RIIC_ADDRESS, (uint16_t) addr, I2C_MEMADD_SIZE_8BIT, p_src, (uint16_t) writelen, 100) != HAL_OK)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	4827      	ldr	r0, [pc, #156]	@ (8005f98 <e2p_write+0x1b8>)
 8005efa:	2164      	movs	r1, #100	@ 0x64
 8005efc:	9102      	str	r1, [sp, #8]
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	2301      	movs	r3, #1
 8005f06:	21a0      	movs	r1, #160	@ 0xa0
 8005f08:	f004 fc3a 	bl	800a780 <HAL_I2C_Mem_Write>
 8005f0c:	1e03      	subs	r3, r0, #0
 8005f0e:	d001      	beq.n	8005f14 <e2p_write+0x134>
			return true;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e03d      	b.n	8005f90 <e2p_write+0x1b0>

		// 50 x 10ms = 500ms
		while ((--rtr) && !m24xx64_ready())
 8005f14:	46c0      	nop			@ (mov r8, r8)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <e2p_write+0x154>
 8005f22:	f000 f83b 	bl	8005f9c <m24xx64_ready>
 8005f26:	0003      	movs	r3, r0
 8005f28:	001a      	movs	r2, r3
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4053      	eors	r3, r2
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <e2p_write+0x136>
			;

		p_src += writelen;
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	603b      	str	r3, [r7, #0]

		// Update the remaining number of bytes to write
		remaining -= writelen;
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	617b      	str	r3, [r7, #20]
		// Update the page address
		pageaddr++;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
		// The data is now page aligned
		byteaddr = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
		// Calculate the number of bytes to write
		if (remaining > E2P_PAGE_SIZE)
 8005f4e:	23a0      	movs	r3, #160	@ 0xa0
 8005f50:	05db      	lsls	r3, r3, #23
 8005f52:	2140      	movs	r1, #64	@ 0x40
 8005f54:	0018      	movs	r0, r3
 8005f56:	f004 fb09 	bl	800a56c <HAL_GPIO_ReadPin>
 8005f5a:	1e03      	subs	r3, r0, #0
 8005f5c:	d001      	beq.n	8005f62 <e2p_write+0x182>
 8005f5e:	2310      	movs	r3, #16
 8005f60:	e000      	b.n	8005f64 <e2p_write+0x184>
 8005f62:	2308      	movs	r3, #8
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d20c      	bcs.n	8005f84 <e2p_write+0x1a4>
			writelen = E2P_PAGE_SIZE;
 8005f6a:	23a0      	movs	r3, #160	@ 0xa0
 8005f6c:	05db      	lsls	r3, r3, #23
 8005f6e:	2140      	movs	r1, #64	@ 0x40
 8005f70:	0018      	movs	r0, r3
 8005f72:	f004 fafb 	bl	800a56c <HAL_GPIO_ReadPin>
 8005f76:	1e03      	subs	r3, r0, #0
 8005f78:	d001      	beq.n	8005f7e <e2p_write+0x19e>
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	e000      	b.n	8005f80 <e2p_write+0x1a0>
 8005f7e:	2308      	movs	r3, #8
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	e001      	b.n	8005f88 <e2p_write+0x1a8>
		else
			writelen = remaining;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	613b      	str	r3, [r7, #16]
	while (remaining > 0)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d19d      	bne.n	8005eca <e2p_write+0xea>
	}

	return (false);
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b009      	add	sp, #36	@ 0x24
 8005f96:	bd90      	pop	{r4, r7, pc}
 8005f98:	200001f4 	.word	0x200001f4

08005f9c <m24xx64_ready>:
 * \param -.
 *
 * \return True if successful, false on error.
 */
static bool m24xx64_ready(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
	return (HAL_I2C_IsDeviceReady(&hi2c2, E2P_RIIC_ADDRESS, 1, 10) == HAL_OK);
 8005fa0:	4806      	ldr	r0, [pc, #24]	@ (8005fbc <m24xx64_ready+0x20>)
 8005fa2:	230a      	movs	r3, #10
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	21a0      	movs	r1, #160	@ 0xa0
 8005fa8:	f004 fe4c 	bl	800ac44 <HAL_I2C_IsDeviceReady>
 8005fac:	0003      	movs	r3, r0
 8005fae:	425a      	negs	r2, r3
 8005fb0:	4153      	adcs	r3, r2
 8005fb2:	b2db      	uxtb	r3, r3
}
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	200001f4 	.word	0x200001f4

08005fc0 <stm32_flash_erase>:
 * \param -
 *
 * \return false if unsuccessful, else true
 */
HAL_StatusTypeDef stm32_flash_erase(uint32_t start, uint32_t size)
{
 8005fc0:	b590      	push	{r4, r7, lr}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
	uint32_t FirstPage = 0, NbOfPages = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
	uint32_t PageError = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]

	tty_printf("got %08X size %02X\r\n", start,size);
 8005fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006054 <stm32_flash_erase+0x94>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	481e      	ldr	r0, [pc, #120]	@ (8006058 <stm32_flash_erase+0x98>)
 8005fe0:	4798      	blx	r3

	/* Get the 1st page to erase */
	FirstPage = GetPage(start);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 f87b 	bl	80060e0 <GetPage>
 8005fea:	0003      	movs	r3, r0
 8005fec:	617b      	str	r3, [r7, #20]

	tty_printf("page %d\r\n", FirstPage);
 8005fee:	4b19      	ldr	r3, [pc, #100]	@ (8006054 <stm32_flash_erase+0x94>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	4a19      	ldr	r2, [pc, #100]	@ (800605c <stm32_flash_erase+0x9c>)
 8005ff6:	0010      	movs	r0, r2
 8005ff8:	4798      	blx	r3

	/* Get the number of pages to erase from 1st page */
	NbOfPages = size / FLASH_PAGE_SIZE;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	0adb      	lsrs	r3, r3, #11
 8005ffe:	613b      	str	r3, [r7, #16]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8006000:	4b17      	ldr	r3, [pc, #92]	@ (8006060 <stm32_flash_erase+0xa0>)
 8006002:	2202      	movs	r2, #2
 8006004:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = FirstPage;
 8006006:	4b16      	ldr	r3, [pc, #88]	@ (8006060 <stm32_flash_erase+0xa0>)
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = NbOfPages;
 800600c:	4b14      	ldr	r3, [pc, #80]	@ (8006060 <stm32_flash_erase+0xa0>)
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	60da      	str	r2, [r3, #12]
	EraseInitStruct.Banks = FLASH_BANK_2;
 8006012:	4b13      	ldr	r3, [pc, #76]	@ (8006060 <stm32_flash_erase+0xa0>)
 8006014:	2280      	movs	r2, #128	@ 0x80
 8006016:	0212      	lsls	r2, r2, #8
 8006018:	605a      	str	r2, [r3, #4]

	tty_printf("Erase page %d qty %d\r\n", EraseInitStruct.Page, NbOfPages);
 800601a:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <stm32_flash_erase+0x94>)
 800601c:	681c      	ldr	r4, [r3, #0]
 800601e:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <stm32_flash_erase+0xa0>)
 8006020:	6899      	ldr	r1, [r3, #8]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4b0f      	ldr	r3, [pc, #60]	@ (8006064 <stm32_flash_erase+0xa4>)
 8006026:	0018      	movs	r0, r3
 8006028:	47a0      	blx	r4

	HAL_FLASH_Unlock();
 800602a:	f003 ffcf 	bl	8009fcc <HAL_FLASH_Unlock>

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 800602e:	230c      	movs	r3, #12
 8006030:	18fa      	adds	r2, r7, r3
 8006032:	4b0b      	ldr	r3, [pc, #44]	@ (8006060 <stm32_flash_erase+0xa0>)
 8006034:	0011      	movs	r1, r2
 8006036:	0018      	movs	r0, r3
 8006038:	f004 f87c 	bl	800a134 <HAL_FLASHEx_Erase>
 800603c:	1e03      	subs	r3, r0, #0
 800603e:	d001      	beq.n	8006044 <stm32_flash_erase+0x84>
		 Error occurred while page erase.
		 User can add here some code to deal with this error.
		 PageError will contain the faulty page and then to know the code error on this page,
		 user can call function 'HAL_FLASH_GetError()'
		 */
		return (HAL_ERROR);
 8006040:	2301      	movs	r3, #1
 8006042:	e002      	b.n	800604a <stm32_flash_erase+0x8a>
	}

	HAL_FLASH_Lock();
 8006044:	f003 ffe6 	bl	800a014 <HAL_FLASH_Lock>

	return (HAL_OK);
 8006048:	2300      	movs	r3, #0
}
 800604a:	0018      	movs	r0, r3
 800604c:	46bd      	mov	sp, r7
 800604e:	b007      	add	sp, #28
 8006050:	bd90      	pop	{r4, r7, pc}
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	20000a48 	.word	0x20000a48
 8006058:	08010030 	.word	0x08010030
 800605c:	08010048 	.word	0x08010048
 8006060:	200001e4 	.word	0x200001e4
 8006064:	08010054 	.word	0x08010054

08006068 <stm32_flash_write>:
 * \return	false if unsuccessful, else true
 *
 * \note The flash memory must be erased before it can be written.
 */
bool stm32_flash_write(uint32_t address, uint8_t * p_data, uint32_t size)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]

	HAL_FLASH_Unlock();
 8006074:	f003 ffaa 	bl	8009fcc <HAL_FLASH_Unlock>

	uint64_t temp;

	// Iterate through the number of data bytes
	for (uint32_t var = 0; var < size; var += 8)
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e021      	b.n	80060c2 <stm32_flash_write+0x5a>
	{
		wdt_clr();
 800607e:	f000 fbad 	bl	80067dc <wdt_clr>

		memcpy(&temp, p_data, sizeof(temp));
 8006082:	68b9      	ldr	r1, [r7, #8]
 8006084:	2310      	movs	r3, #16
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	2208      	movs	r2, #8
 800608a:	0018      	movs	r0, r3
 800608c:	f009 fad3 	bl	800f636 <memcpy>

		tty_printf("Write %08X\r\n", address);
 8006090:	4b11      	ldr	r3, [pc, #68]	@ (80060d8 <stm32_flash_write+0x70>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	4a11      	ldr	r2, [pc, #68]	@ (80060dc <stm32_flash_write+0x74>)
 8006098:	0010      	movs	r0, r2
 800609a:	4798      	blx	r3

// write block of 2*4 bytes
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, (uint64_t) temp) != HAL_OK) /*!< Fast program a 32 row double-word (64-bit) at a specified address */
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	2001      	movs	r0, #1
 80060a4:	f003 ff44 	bl	8009f30 <HAL_FLASH_Program>
 80060a8:	1e03      	subs	r3, r0, #0
 80060aa:	d001      	beq.n	80060b0 <stm32_flash_write+0x48>
		{
			return (0); // fout
 80060ac:	2300      	movs	r3, #0
 80060ae:	e00f      	b.n	80060d0 <stm32_flash_write+0x68>
		}

		address += 8;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3308      	adds	r3, #8
 80060b4:	60fb      	str	r3, [r7, #12]
		p_data = p_data + 8;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3308      	adds	r3, #8
 80060ba:	60bb      	str	r3, [r7, #8]
	for (uint32_t var = 0; var < size; var += 8)
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3308      	adds	r3, #8
 80060c0:	61fb      	str	r3, [r7, #28]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d3d9      	bcc.n	800607e <stm32_flash_write+0x16>
	}

	HAL_FLASH_Lock();
 80060ca:	f003 ffa3 	bl	800a014 <HAL_FLASH_Lock>

	return (1);
 80060ce:	2301      	movs	r3, #1
}
 80060d0:	0018      	movs	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b008      	add	sp, #32
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000a48 	.word	0x20000a48
 80060dc:	0801006c 	.word	0x0801006c

080060e0 <GetPage>:
 * @brief  Gets the page of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The page of a given address
 */
static uint32_t GetPage(uint32_t Addr)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80060ec:	4b32      	ldr	r3, [pc, #200]	@ (80061b8 <GetPage+0xd8>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	23c0      	movs	r3, #192	@ 0xc0
 80060f2:	049b      	lsls	r3, r3, #18
 80060f4:	4013      	ands	r3, r2
 80060f6:	d00e      	beq.n	8006116 <GetPage+0x36>
 80060f8:	4b2f      	ldr	r3, [pc, #188]	@ (80061b8 <GetPage+0xd8>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	23c0      	movs	r3, #192	@ 0xc0
 80060fe:	049b      	lsls	r3, r3, #18
 8006100:	401a      	ands	r2, r3
 8006102:	2380      	movs	r3, #128	@ 0x80
 8006104:	045b      	lsls	r3, r3, #17
 8006106:	429a      	cmp	r2, r3
 8006108:	d10f      	bne.n	800612a <GetPage+0x4a>
 800610a:	4b2c      	ldr	r3, [pc, #176]	@ (80061bc <GetPage+0xdc>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	2380      	movs	r3, #128	@ 0x80
 8006110:	039b      	lsls	r3, r3, #14
 8006112:	4013      	ands	r3, r2
 8006114:	d109      	bne.n	800612a <GetPage+0x4a>
 8006116:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <GetPage+0xe0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	029b      	lsls	r3, r3, #10
 800611c:	4a29      	ldr	r2, [pc, #164]	@ (80061c4 <GetPage+0xe4>)
 800611e:	4013      	ands	r3, r2
 8006120:	2280      	movs	r2, #128	@ 0x80
 8006122:	0512      	lsls	r2, r2, #20
 8006124:	4694      	mov	ip, r2
 8006126:	4463      	add	r3, ip
 8006128:	e009      	b.n	800613e <GetPage+0x5e>
 800612a:	4b25      	ldr	r3, [pc, #148]	@ (80061c0 <GetPage+0xe0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	029b      	lsls	r3, r3, #10
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	4a25      	ldr	r2, [pc, #148]	@ (80061c8 <GetPage+0xe8>)
 8006134:	4013      	ands	r3, r2
 8006136:	2280      	movs	r2, #128	@ 0x80
 8006138:	0512      	lsls	r2, r2, #20
 800613a:	4694      	mov	ip, r2
 800613c:	4463      	add	r3, ip
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4293      	cmp	r3, r2
 8006142:	d907      	bls.n	8006154 <GetPage+0x74>
	{
		/* Bank 1 */
		page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	22f8      	movs	r2, #248	@ 0xf8
 8006148:	0612      	lsls	r2, r2, #24
 800614a:	4694      	mov	ip, r2
 800614c:	4463      	add	r3, ip
 800614e:	0adb      	lsrs	r3, r3, #11
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e02c      	b.n	80061ae <GetPage+0xce>
	}
	else
	{
		/* Bank 2 */
		page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8006154:	4b18      	ldr	r3, [pc, #96]	@ (80061b8 <GetPage+0xd8>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	23c0      	movs	r3, #192	@ 0xc0
 800615a:	049b      	lsls	r3, r3, #18
 800615c:	4013      	ands	r3, r2
 800615e:	d00e      	beq.n	800617e <GetPage+0x9e>
 8006160:	4b15      	ldr	r3, [pc, #84]	@ (80061b8 <GetPage+0xd8>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	23c0      	movs	r3, #192	@ 0xc0
 8006166:	049b      	lsls	r3, r3, #18
 8006168:	401a      	ands	r2, r3
 800616a:	2380      	movs	r3, #128	@ 0x80
 800616c:	045b      	lsls	r3, r3, #17
 800616e:	429a      	cmp	r2, r3
 8006170:	d10f      	bne.n	8006192 <GetPage+0xb2>
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <GetPage+0xdc>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	2380      	movs	r3, #128	@ 0x80
 8006178:	039b      	lsls	r3, r3, #14
 800617a:	4013      	ands	r3, r2
 800617c:	d109      	bne.n	8006192 <GetPage+0xb2>
 800617e:	4b10      	ldr	r3, [pc, #64]	@ (80061c0 <GetPage+0xe0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	4a0f      	ldr	r2, [pc, #60]	@ (80061c4 <GetPage+0xe4>)
 8006186:	4013      	ands	r3, r2
 8006188:	2280      	movs	r2, #128	@ 0x80
 800618a:	0512      	lsls	r2, r2, #20
 800618c:	4694      	mov	ip, r2
 800618e:	4463      	add	r3, ip
 8006190:	e009      	b.n	80061a6 <GetPage+0xc6>
 8006192:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <GetPage+0xe0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	029b      	lsls	r3, r3, #10
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	4a0b      	ldr	r2, [pc, #44]	@ (80061c8 <GetPage+0xe8>)
 800619c:	4013      	ands	r3, r2
 800619e:	2280      	movs	r2, #128	@ 0x80
 80061a0:	0512      	lsls	r2, r2, #20
 80061a2:	4694      	mov	ip, r2
 80061a4:	4463      	add	r3, ip
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	0adb      	lsrs	r3, r3, #11
 80061ac:	60fb      	str	r3, [r7, #12]
	}

	return page;
 80061ae:	68fb      	ldr	r3, [r7, #12]
}
 80061b0:	0018      	movs	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b004      	add	sp, #16
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	1fff7500 	.word	0x1fff7500
 80061bc:	40022020 	.word	0x40022020
 80061c0:	1fff75e0 	.word	0x1fff75e0
 80061c4:	000ffc00 	.word	0x000ffc00
 80061c8:	0007fe00 	.word	0x0007fe00

080061cc <ReadStruct2Flash>:
 * 		  - sizeof structure
 *
 * \return ERR_OK / ERR_CRC
 */
flash_err_t ReadStruct2Flash(void *p_data, uint16_t data_size)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	000a      	movs	r2, r1
 80061d6:	1cbb      	adds	r3, r7, #2
 80061d8:	801a      	strh	r2, [r3, #0]
	// round 4 bytes
	uint16_t aligned_data_size = ((data_size + 3) / 4) * 4;
 80061da:	1cbb      	adds	r3, r7, #2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	3303      	adds	r3, #3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da00      	bge.n	80061e6 <ReadStruct2Flash+0x1a>
 80061e4:	3303      	adds	r3, #3
 80061e6:	109b      	asrs	r3, r3, #2
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	210e      	movs	r1, #14
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	0092      	lsls	r2, r2, #2
 80061f0:	801a      	strh	r2, [r3, #0]

	uint32_t *p_flash = (uint32_t*) FLASH_EE_START_ADDR;
 80061f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <ReadStruct2Flash+0x9c>)
 80061f4:	60bb      	str	r3, [r7, #8]

	// CRC check the block including the CRC itself will return 0
	if (HAL_CRC_Calculate(&hcrc, p_flash, (aligned_data_size + 4) / 4) == 0)
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	3304      	adds	r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	da00      	bge.n	8006202 <ReadStruct2Flash+0x36>
 8006200:	3303      	adds	r3, #3
 8006202:	109b      	asrs	r3, r3, #2
 8006204:	001a      	movs	r2, r3
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	4b18      	ldr	r3, [pc, #96]	@ (800626c <ReadStruct2Flash+0xa0>)
 800620a:	0018      	movs	r0, r3
 800620c:	f003 fc3a 	bl	8009a84 <HAL_CRC_Calculate>
 8006210:	1e03      	subs	r3, r0, #0
 8006212:	d108      	bne.n	8006226 <ReadStruct2Flash+0x5a>
	{
		// copy the data back
		memcpy(p_data, p_flash, data_size);
 8006214:	1cbb      	adds	r3, r7, #2
 8006216:	881a      	ldrh	r2, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	0018      	movs	r0, r3
 800621e:	f009 fa0a 	bl	800f636 <memcpy>
		return ERR_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e01b      	b.n	800625e <ReadStruct2Flash+0x92>
	}
	// checksum fail try block 2
	else
	{
		p_flash = (uint32_t*) FLASH_EE_COPY_START_ADDR;
 8006226:	4b12      	ldr	r3, [pc, #72]	@ (8006270 <ReadStruct2Flash+0xa4>)
 8006228:	60bb      	str	r3, [r7, #8]

		// CRC check the block including the CRC itself will return 0
		if (HAL_CRC_Calculate(&hcrc, p_flash, (aligned_data_size + 4) / 4) == 0)
 800622a:	230e      	movs	r3, #14
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	3304      	adds	r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	da00      	bge.n	8006238 <ReadStruct2Flash+0x6c>
 8006236:	3303      	adds	r3, #3
 8006238:	109b      	asrs	r3, r3, #2
 800623a:	001a      	movs	r2, r3
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	4b0b      	ldr	r3, [pc, #44]	@ (800626c <ReadStruct2Flash+0xa0>)
 8006240:	0018      	movs	r0, r3
 8006242:	f003 fc1f 	bl	8009a84 <HAL_CRC_Calculate>
 8006246:	1e03      	subs	r3, r0, #0
 8006248:	d108      	bne.n	800625c <ReadStruct2Flash+0x90>
		{
			//read the block including crc32
			memcpy(p_data, p_flash, data_size);
 800624a:	1cbb      	adds	r3, r7, #2
 800624c:	881a      	ldrh	r2, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	0018      	movs	r0, r3
 8006254:	f009 f9ef 	bl	800f636 <memcpy>
			return ERR_OK_COPY;
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <ReadStruct2Flash+0x92>
		}
	}

	return ERR_CRC;
 800625c:	2302      	movs	r3, #2
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	0803f000 	.word	0x0803f000
 800626c:	200001c0 	.word	0x200001c0
 8006270:	0803f800 	.word	0x0803f800

08006274 <WriteStruct2Flash>:
 * 			- sizeof structure
 *
 * \return		ERR_OK / ERR_CRC / ERR_WRITE / ERR_ERASE / ERR_SIZE
 */
flash_err_t WriteStruct2Flash(void *p_data, uint16_t data_size)
{
 8006274:	b5b0      	push	{r4, r5, r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	000a      	movs	r2, r1
 800627e:	1cbb      	adds	r3, r7, #2
 8006280:	801a      	strh	r2, [r3, #0]
	if (data_size + 4 > FLASH_EE_SIZE)
 8006282:	1cbb      	adds	r3, r7, #2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	3304      	adds	r3, #4
 8006288:	001a      	movs	r2, r3
 800628a:	2380      	movs	r3, #128	@ 0x80
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	429a      	cmp	r2, r3
 8006290:	d901      	bls.n	8006296 <WriteStruct2Flash+0x22>
		return ERR_SIZE;
 8006292:	2305      	movs	r3, #5
 8006294:	e01f      	b.n	80062d6 <WriteStruct2Flash+0x62>

	flash_err_t res = 0;
 8006296:	250f      	movs	r5, #15
 8006298:	197b      	adds	r3, r7, r5
 800629a:	2200      	movs	r2, #0
 800629c:	701a      	strb	r2, [r3, #0]
	// write block 1
	res = do_WriteStruct2Flash(p_data, FLASH_EE_START_ADDR, FLASH_EE_SIZE, data_size);
 800629e:	197c      	adds	r4, r7, r5
 80062a0:	1cbb      	adds	r3, r7, #2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	2280      	movs	r2, #128	@ 0x80
 80062a6:	0112      	lsls	r2, r2, #4
 80062a8:	490d      	ldr	r1, [pc, #52]	@ (80062e0 <WriteStruct2Flash+0x6c>)
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f81c 	bl	80062e8 <do_WriteStruct2Flash>
 80062b0:	0003      	movs	r3, r0
 80062b2:	7023      	strb	r3, [r4, #0]
	// write block 2
	res |= do_WriteStruct2Flash(p_data, FLASH_EE_COPY_START_ADDR, FLASH_EE_SIZE, data_size);
 80062b4:	1cbb      	adds	r3, r7, #2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	2280      	movs	r2, #128	@ 0x80
 80062ba:	0112      	lsls	r2, r2, #4
 80062bc:	4909      	ldr	r1, [pc, #36]	@ (80062e4 <WriteStruct2Flash+0x70>)
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f812 	bl	80062e8 <do_WriteStruct2Flash>
 80062c4:	0003      	movs	r3, r0
 80062c6:	0019      	movs	r1, r3
 80062c8:	197b      	adds	r3, r7, r5
 80062ca:	197a      	adds	r2, r7, r5
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	701a      	strb	r2, [r3, #0]

	return res;
 80062d2:	197b      	adds	r3, r7, r5
 80062d4:	781b      	ldrb	r3, [r3, #0]
}
 80062d6:	0018      	movs	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	b004      	add	sp, #16
 80062dc:	bdb0      	pop	{r4, r5, r7, pc}
 80062de:	46c0      	nop			@ (mov r8, r8)
 80062e0:	0803f000 	.word	0x0803f000
 80062e4:	0803f800 	.word	0x0803f800

080062e8 <do_WriteStruct2Flash>:
 * 			- data_size sizeof structure
 *
 * \return ERR_OK / ERR_CRC / ERR_WRITE / ERR_ERASE
 */
static flash_err_t do_WriteStruct2Flash(void *data, uint32_t start_addr, uint16_t block_size, uint16_t data_size)
{
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	0019      	movs	r1, r3
 80062f4:	1dbb      	adds	r3, r7, #6
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	1d3b      	adds	r3, r7, #4
 80062fa:	1c0a      	adds	r2, r1, #0
 80062fc:	801a      	strh	r2, [r3, #0]
	uint32_t *p_heap;
	// round 4 bytes
	data_size = ((data_size + 3) / 4) * 4;
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	3303      	adds	r3, #3
 8006304:	2b00      	cmp	r3, #0
 8006306:	da00      	bge.n	800630a <do_WriteStruct2Flash+0x22>
 8006308:	3303      	adds	r3, #3
 800630a:	109b      	asrs	r3, r3, #2
 800630c:	b29a      	uxth	r2, r3
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	0092      	lsls	r2, r2, #2
 8006312:	801a      	strh	r2, [r3, #0]

	/*##-1- Erase flash ###################################*/
	if (stm32_flash_erase(start_addr, block_size) != HAL_OK)
 8006314:	1dbb      	adds	r3, r7, #6
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	0011      	movs	r1, r2
 800631c:	0018      	movs	r0, r3
 800631e:	f7ff fe4f 	bl	8005fc0 <stm32_flash_erase>
 8006322:	1e03      	subs	r3, r0, #0
 8006324:	d001      	beq.n	800632a <do_WriteStruct2Flash+0x42>
		return ERR_ERASE;
 8006326:	2303      	movs	r3, #3
 8006328:	e057      	b.n	80063da <do_WriteStruct2Flash+0xf2>

	// allocate datablock+crc32
	p_heap = malloc(data_size + 4);
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	3304      	adds	r3, #4
 8006330:	0018      	movs	r0, r3
 8006332:	f008 fddb 	bl	800eeec <malloc>
 8006336:	0003      	movs	r3, r0
 8006338:	617b      	str	r3, [r7, #20]
	if (p_heap == NULL)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <do_WriteStruct2Flash+0x5c>
		return ERR_MEM;
 8006340:	2306      	movs	r3, #6
 8006342:	e04a      	b.n	80063da <do_WriteStruct2Flash+0xf2>

	// copy the datablock to the heap to add the crc32 on top
	memcpy(p_heap, data, data_size);
 8006344:	1d3b      	adds	r3, r7, #4
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	0018      	movs	r0, r3
 800634e:	f009 f972 	bl	800f636 <memcpy>

	/*##-2- Compute the CRC in Words ###################################*/
	*(p_heap + data_size / 4) = HAL_CRC_Calculate(&hcrc, p_heap, data_size / 4);
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	b29b      	uxth	r3, r3
 800635a:	0018      	movs	r0, r3
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	b29b      	uxth	r3, r3
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	18d4      	adds	r4, r2, r3
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	4b1d      	ldr	r3, [pc, #116]	@ (80063e4 <do_WriteStruct2Flash+0xfc>)
 800636e:	0002      	movs	r2, r0
 8006370:	0018      	movs	r0, r3
 8006372:	f003 fb87 	bl	8009a84 <HAL_CRC_Calculate>
 8006376:	0003      	movs	r3, r0
 8006378:	6023      	str	r3, [r4, #0]

	if (stm32_flash_write(start_addr, (uint8_t*) p_heap, data_size + 4) == false)
 800637a:	1d3b      	adds	r3, r7, #4
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	3304      	adds	r3, #4
 8006380:	001a      	movs	r2, r3
 8006382:	6979      	ldr	r1, [r7, #20]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	0018      	movs	r0, r3
 8006388:	f7ff fe6e 	bl	8006068 <stm32_flash_write>
 800638c:	0003      	movs	r3, r0
 800638e:	001a      	movs	r2, r3
 8006390:	2301      	movs	r3, #1
 8006392:	4053      	eors	r3, r2
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <do_WriteStruct2Flash+0xbe>
	{
		free(p_heap);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	0018      	movs	r0, r3
 800639e:	f008 fdaf 	bl	800ef00 <free>
		return ERR_WRITE;
 80063a2:	2304      	movs	r3, #4
 80063a4:	e019      	b.n	80063da <do_WriteStruct2Flash+0xf2>
	}

	/*##-3- Check written data ###################################*/
	if (HAL_CRC_Calculate(&hcrc, (uint32_t*) start_addr, (data_size + 4) / 4) != 0)
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da00      	bge.n	80063b4 <do_WriteStruct2Flash+0xcc>
 80063b2:	3303      	adds	r3, #3
 80063b4:	109b      	asrs	r3, r3, #2
 80063b6:	001a      	movs	r2, r3
 80063b8:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <do_WriteStruct2Flash+0xfc>)
 80063ba:	0018      	movs	r0, r3
 80063bc:	f003 fb62 	bl	8009a84 <HAL_CRC_Calculate>
 80063c0:	1e03      	subs	r3, r0, #0
 80063c2:	d005      	beq.n	80063d0 <do_WriteStruct2Flash+0xe8>
	{
		free(p_heap);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	0018      	movs	r0, r3
 80063c8:	f008 fd9a 	bl	800ef00 <free>
		return ERR_CRC;
 80063cc:	2302      	movs	r3, #2
 80063ce:	e004      	b.n	80063da <do_WriteStruct2Flash+0xf2>
	}

	free(p_heap);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	0018      	movs	r0, r3
 80063d4:	f008 fd94 	bl	800ef00 <free>
	return ERR_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b007      	add	sp, #28
 80063e0:	bd90      	pop	{r4, r7, pc}
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	200001c0 	.word	0x200001c0

080063e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b08b      	sub	sp, #44	@ 0x2c
 80063ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ee:	2414      	movs	r4, #20
 80063f0:	193b      	adds	r3, r7, r4
 80063f2:	0018      	movs	r0, r3
 80063f4:	2314      	movs	r3, #20
 80063f6:	001a      	movs	r2, r3
 80063f8:	2100      	movs	r1, #0
 80063fa:	f009 f887 	bl	800f50c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063fe:	4b91      	ldr	r3, [pc, #580]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006402:	4b90      	ldr	r3, [pc, #576]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006404:	2104      	movs	r1, #4
 8006406:	430a      	orrs	r2, r1
 8006408:	635a      	str	r2, [r3, #52]	@ 0x34
 800640a:	4b8e      	ldr	r3, [pc, #568]	@ (8006644 <MX_GPIO_Init+0x25c>)
 800640c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640e:	2204      	movs	r2, #4
 8006410:	4013      	ands	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006416:	4b8b      	ldr	r3, [pc, #556]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800641a:	4b8a      	ldr	r3, [pc, #552]	@ (8006644 <MX_GPIO_Init+0x25c>)
 800641c:	2120      	movs	r1, #32
 800641e:	430a      	orrs	r2, r1
 8006420:	635a      	str	r2, [r3, #52]	@ 0x34
 8006422:	4b88      	ldr	r3, [pc, #544]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006426:	2220      	movs	r2, #32
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800642e:	4b85      	ldr	r3, [pc, #532]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006432:	4b84      	ldr	r3, [pc, #528]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006434:	2101      	movs	r1, #1
 8006436:	430a      	orrs	r2, r1
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34
 800643a:	4b82      	ldr	r3, [pc, #520]	@ (8006644 <MX_GPIO_Init+0x25c>)
 800643c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643e:	2201      	movs	r2, #1
 8006440:	4013      	ands	r3, r2
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006446:	4b7f      	ldr	r3, [pc, #508]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800644a:	4b7e      	ldr	r3, [pc, #504]	@ (8006644 <MX_GPIO_Init+0x25c>)
 800644c:	2102      	movs	r1, #2
 800644e:	430a      	orrs	r2, r1
 8006450:	635a      	str	r2, [r3, #52]	@ 0x34
 8006452:	4b7c      	ldr	r3, [pc, #496]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006456:	2202      	movs	r2, #2
 8006458:	4013      	ands	r3, r2
 800645a:	607b      	str	r3, [r7, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800645e:	4b79      	ldr	r3, [pc, #484]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006462:	4b78      	ldr	r3, [pc, #480]	@ (8006644 <MX_GPIO_Init+0x25c>)
 8006464:	2108      	movs	r1, #8
 8006466:	430a      	orrs	r2, r1
 8006468:	635a      	str	r2, [r3, #52]	@ 0x34
 800646a:	4b76      	ldr	r3, [pc, #472]	@ (8006644 <MX_GPIO_Init+0x25c>)
 800646c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800646e:	2208      	movs	r2, #8
 8006470:	4013      	ands	r3, r2
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIS_BRIDGE_GPIO_Port, DIS_BRIDGE_Pin, GPIO_PIN_RESET);
 8006476:	23a0      	movs	r3, #160	@ 0xa0
 8006478:	05db      	lsls	r3, r3, #23
 800647a:	2200      	movs	r2, #0
 800647c:	2110      	movs	r1, #16
 800647e:	0018      	movs	r0, r3
 8006480:	f004 f891 	bl	800a5a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
 8006484:	4b70      	ldr	r3, [pc, #448]	@ (8006648 <MX_GPIO_Init+0x260>)
 8006486:	2200      	movs	r2, #0
 8006488:	21ff      	movs	r1, #255	@ 0xff
 800648a:	0018      	movs	r0, r3
 800648c:	f004 f88b 	bl	800a5a6 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin|LCD_RW_Pin|LCD_BACK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_X_Pin|EN_Y_Pin, GPIO_PIN_SET);
 8006490:	23a0      	movs	r3, #160	@ 0xa0
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	486d      	ldr	r0, [pc, #436]	@ (800664c <MX_GPIO_Init+0x264>)
 8006496:	2201      	movs	r2, #1
 8006498:	0019      	movs	r1, r3
 800649a:	f004 f884 	bl	800a5a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, GPIO_PIN_RESET);
 800649e:	4b6c      	ldr	r3, [pc, #432]	@ (8006650 <MX_GPIO_Init+0x268>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	2104      	movs	r1, #4
 80064a4:	0018      	movs	r0, r3
 80064a6:	f004 f87e 	bl	800a5a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : END_X_Pin */
  GPIO_InitStruct.Pin = END_X_Pin;
 80064aa:	193b      	adds	r3, r7, r4
 80064ac:	2280      	movs	r2, #128	@ 0x80
 80064ae:	0192      	lsls	r2, r2, #6
 80064b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064b2:	193b      	adds	r3, r7, r4
 80064b4:	2200      	movs	r2, #0
 80064b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b8:	193b      	adds	r3, r7, r4
 80064ba:	2200      	movs	r2, #0
 80064bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(END_X_GPIO_Port, &GPIO_InitStruct);
 80064be:	193b      	adds	r3, r7, r4
 80064c0:	4a62      	ldr	r2, [pc, #392]	@ (800664c <MX_GPIO_Init+0x264>)
 80064c2:	0019      	movs	r1, r3
 80064c4:	0010      	movs	r0, r2
 80064c6:	f003 fee5 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pins : MY_A_Pin MY_B_Pin MX_A_Pin MX_B_Pin
                           RX433_Pin */
  GPIO_InitStruct.Pin = MY_A_Pin|MY_B_Pin|MX_A_Pin|MX_B_Pin
 80064ca:	0021      	movs	r1, r4
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	221f      	movs	r2, #31
 80064d0:	601a      	str	r2, [r3, #0]
                          |RX433_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80064d2:	187b      	adds	r3, r7, r1
 80064d4:	22c4      	movs	r2, #196	@ 0xc4
 80064d6:	0392      	lsls	r2, r2, #14
 80064d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064da:	000c      	movs	r4, r1
 80064dc:	193b      	adds	r3, r7, r4
 80064de:	2200      	movs	r2, #0
 80064e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e2:	193b      	adds	r3, r7, r4
 80064e4:	4a59      	ldr	r2, [pc, #356]	@ (800664c <MX_GPIO_Init+0x264>)
 80064e6:	0019      	movs	r1, r3
 80064e8:	0010      	movs	r0, r2
 80064ea:	f003 fed3 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pins : END_Y_Pin MID_X_Pin */
  GPIO_InitStruct.Pin = END_Y_Pin|MID_X_Pin;
 80064ee:	193b      	adds	r3, r7, r4
 80064f0:	4a58      	ldr	r2, [pc, #352]	@ (8006654 <MX_GPIO_Init+0x26c>)
 80064f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064f4:	193b      	adds	r3, r7, r4
 80064f6:	2200      	movs	r2, #0
 80064f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fa:	193b      	adds	r3, r7, r4
 80064fc:	2200      	movs	r2, #0
 80064fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006500:	193a      	adds	r2, r7, r4
 8006502:	23a0      	movs	r3, #160	@ 0xa0
 8006504:	05db      	lsls	r3, r3, #23
 8006506:	0011      	movs	r1, r2
 8006508:	0018      	movs	r0, r3
 800650a:	f003 fec3 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIS_BRIDGE_Pin */
  GPIO_InitStruct.Pin = DIS_BRIDGE_Pin;
 800650e:	193b      	adds	r3, r7, r4
 8006510:	2210      	movs	r2, #16
 8006512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006514:	193b      	adds	r3, r7, r4
 8006516:	2201      	movs	r2, #1
 8006518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800651a:	193b      	adds	r3, r7, r4
 800651c:	2200      	movs	r2, #0
 800651e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006520:	193b      	adds	r3, r7, r4
 8006522:	2200      	movs	r2, #0
 8006524:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIS_BRIDGE_GPIO_Port, &GPIO_InitStruct);
 8006526:	193a      	adds	r2, r7, r4
 8006528:	23a0      	movs	r3, #160	@ 0xa0
 800652a:	05db      	lsls	r3, r3, #23
 800652c:	0011      	movs	r1, r2
 800652e:	0018      	movs	r0, r3
 8006530:	f003 feb0 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULT_Pin PCB_ID_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin|PCB_ID_Pin;
 8006534:	193b      	adds	r3, r7, r4
 8006536:	2260      	movs	r2, #96	@ 0x60
 8006538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800653a:	193b      	adds	r3, r7, r4
 800653c:	2200      	movs	r2, #0
 800653e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006540:	193b      	adds	r3, r7, r4
 8006542:	2201      	movs	r2, #1
 8006544:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006546:	193a      	adds	r2, r7, r4
 8006548:	23a0      	movs	r3, #160	@ 0xa0
 800654a:	05db      	lsls	r3, r3, #23
 800654c:	0011      	movs	r1, r2
 800654e:	0018      	movs	r0, r3
 8006550:	f003 fea0 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin
                           LCD_RS_Pin LCD_E_Pin LCD_RW_Pin LCD_BACK_Pin */
  GPIO_InitStruct.Pin = LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
 8006554:	193b      	adds	r3, r7, r4
 8006556:	22ff      	movs	r2, #255	@ 0xff
 8006558:	601a      	str	r2, [r3, #0]
                          |LCD_RS_Pin|LCD_E_Pin|LCD_RW_Pin|LCD_BACK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800655a:	193b      	adds	r3, r7, r4
 800655c:	2201      	movs	r2, #1
 800655e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006560:	193b      	adds	r3, r7, r4
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006566:	193b      	adds	r3, r7, r4
 8006568:	2200      	movs	r2, #0
 800656a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800656c:	193b      	adds	r3, r7, r4
 800656e:	4a36      	ldr	r2, [pc, #216]	@ (8006648 <MX_GPIO_Init+0x260>)
 8006570:	0019      	movs	r1, r3
 8006572:	0010      	movs	r0, r2
 8006574:	f003 fe8e 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin IN_3_Pin MID_Y_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin|IN_3_Pin|MID_Y_Pin;
 8006578:	0021      	movs	r1, r4
 800657a:	187b      	adds	r3, r7, r1
 800657c:	22f0      	movs	r2, #240	@ 0xf0
 800657e:	0212      	lsls	r2, r2, #8
 8006580:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006582:	000c      	movs	r4, r1
 8006584:	193b      	adds	r3, r7, r4
 8006586:	2200      	movs	r2, #0
 8006588:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658a:	193b      	adds	r3, r7, r4
 800658c:	2200      	movs	r2, #0
 800658e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006590:	193b      	adds	r3, r7, r4
 8006592:	4a2d      	ldr	r2, [pc, #180]	@ (8006648 <MX_GPIO_Init+0x260>)
 8006594:	0019      	movs	r1, r3
 8006596:	0010      	movs	r0, r2
 8006598:	f003 fe7c 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_X_Pin EN_Y_Pin */
  GPIO_InitStruct.Pin = EN_X_Pin|EN_Y_Pin;
 800659c:	0021      	movs	r1, r4
 800659e:	187b      	adds	r3, r7, r1
 80065a0:	22a0      	movs	r2, #160	@ 0xa0
 80065a2:	0092      	lsls	r2, r2, #2
 80065a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065a6:	000c      	movs	r4, r1
 80065a8:	193b      	adds	r3, r7, r4
 80065aa:	2201      	movs	r2, #1
 80065ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	193b      	adds	r3, r7, r4
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065b4:	193b      	adds	r3, r7, r4
 80065b6:	2200      	movs	r2, #0
 80065b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065ba:	193b      	adds	r3, r7, r4
 80065bc:	4a23      	ldr	r2, [pc, #140]	@ (800664c <MX_GPIO_Init+0x264>)
 80065be:	0019      	movs	r1, r3
 80065c0:	0010      	movs	r0, r2
 80065c2:	f003 fe67 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP1_Pin */
  GPIO_InitStruct.Pin = TP1_Pin;
 80065c6:	193b      	adds	r3, r7, r4
 80065c8:	2204      	movs	r2, #4
 80065ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065cc:	193b      	adds	r3, r7, r4
 80065ce:	2201      	movs	r2, #1
 80065d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d2:	193b      	adds	r3, r7, r4
 80065d4:	2200      	movs	r2, #0
 80065d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d8:	193b      	adds	r3, r7, r4
 80065da:	2200      	movs	r2, #0
 80065dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 80065de:	193b      	adds	r3, r7, r4
 80065e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006650 <MX_GPIO_Init+0x268>)
 80065e2:	0019      	movs	r1, r3
 80065e4:	0010      	movs	r0, r2
 80065e6:	f003 fe55 	bl	800a294 <HAL_GPIO_Init>

  /*Configure GPIO pin : nGPS_EZN_Pin */
  GPIO_InitStruct.Pin = nGPS_EZN_Pin;
 80065ea:	0021      	movs	r1, r4
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	2210      	movs	r2, #16
 80065f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065f2:	187b      	adds	r3, r7, r1
 80065f4:	2200      	movs	r2, #0
 80065f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	2201      	movs	r2, #1
 80065fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nGPS_EZN_GPIO_Port, &GPIO_InitStruct);
 80065fe:	187b      	adds	r3, r7, r1
 8006600:	4a13      	ldr	r2, [pc, #76]	@ (8006650 <MX_GPIO_Init+0x268>)
 8006602:	0019      	movs	r1, r3
 8006604:	0010      	movs	r0, r2
 8006606:	f003 fe45 	bl	800a294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800660a:	2200      	movs	r2, #0
 800660c:	2100      	movs	r1, #0
 800660e:	2005      	movs	r0, #5
 8006610:	f003 f9a0 	bl	8009954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8006614:	2005      	movs	r0, #5
 8006616:	f003 f9b2 	bl	800997e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800661a:	2200      	movs	r2, #0
 800661c:	2100      	movs	r1, #0
 800661e:	2006      	movs	r0, #6
 8006620:	f003 f998 	bl	8009954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8006624:	2006      	movs	r0, #6
 8006626:	f003 f9aa 	bl	800997e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800662a:	2200      	movs	r2, #0
 800662c:	2101      	movs	r1, #1
 800662e:	2007      	movs	r0, #7
 8006630:	f003 f990 	bl	8009954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8006634:	2007      	movs	r0, #7
 8006636:	f003 f9a2 	bl	800997e <HAL_NVIC_EnableIRQ>

}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	46bd      	mov	sp, r7
 800663e:	b00b      	add	sp, #44	@ 0x2c
 8006640:	bd90      	pop	{r4, r7, pc}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	40021000 	.word	0x40021000
 8006648:	50000400 	.word	0x50000400
 800664c:	50000800 	.word	0x50000800
 8006650:	50000c00 	.word	0x50000c00
 8006654:	00008002 	.word	0x00008002

08006658 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800665c:	4b1b      	ldr	r3, [pc, #108]	@ (80066cc <MX_I2C2_Init+0x74>)
 800665e:	4a1c      	ldr	r2, [pc, #112]	@ (80066d0 <MX_I2C2_Init+0x78>)
 8006660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 8006662:	4b1a      	ldr	r3, [pc, #104]	@ (80066cc <MX_I2C2_Init+0x74>)
 8006664:	4a1b      	ldr	r2, [pc, #108]	@ (80066d4 <MX_I2C2_Init+0x7c>)
 8006666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006668:	4b18      	ldr	r3, [pc, #96]	@ (80066cc <MX_I2C2_Init+0x74>)
 800666a:	2200      	movs	r2, #0
 800666c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800666e:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <MX_I2C2_Init+0x74>)
 8006670:	2201      	movs	r2, #1
 8006672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006674:	4b15      	ldr	r3, [pc, #84]	@ (80066cc <MX_I2C2_Init+0x74>)
 8006676:	2200      	movs	r2, #0
 8006678:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800667a:	4b14      	ldr	r3, [pc, #80]	@ (80066cc <MX_I2C2_Init+0x74>)
 800667c:	2200      	movs	r2, #0
 800667e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006680:	4b12      	ldr	r3, [pc, #72]	@ (80066cc <MX_I2C2_Init+0x74>)
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006686:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <MX_I2C2_Init+0x74>)
 8006688:	2200      	movs	r2, #0
 800668a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800668c:	4b0f      	ldr	r3, [pc, #60]	@ (80066cc <MX_I2C2_Init+0x74>)
 800668e:	2200      	movs	r2, #0
 8006690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006692:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <MX_I2C2_Init+0x74>)
 8006694:	0018      	movs	r0, r3
 8006696:	f003 ffcd 	bl	800a634 <HAL_I2C_Init>
 800669a:	1e03      	subs	r3, r0, #0
 800669c:	d001      	beq.n	80066a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800669e:	f000 f9a1 	bl	80069e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80066a2:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <MX_I2C2_Init+0x74>)
 80066a4:	2100      	movs	r1, #0
 80066a6:	0018      	movs	r0, r3
 80066a8:	f004 fec4 	bl	800b434 <HAL_I2CEx_ConfigAnalogFilter>
 80066ac:	1e03      	subs	r3, r0, #0
 80066ae:	d001      	beq.n	80066b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80066b0:	f000 f998 	bl	80069e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80066b4:	4b05      	ldr	r3, [pc, #20]	@ (80066cc <MX_I2C2_Init+0x74>)
 80066b6:	2100      	movs	r1, #0
 80066b8:	0018      	movs	r0, r3
 80066ba:	f004 ff07 	bl	800b4cc <HAL_I2CEx_ConfigDigitalFilter>
 80066be:	1e03      	subs	r3, r0, #0
 80066c0:	d001      	beq.n	80066c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80066c2:	f000 f98f 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	200001f4 	.word	0x200001f4
 80066d0:	40005800 	.word	0x40005800
 80066d4:	10805d88 	.word	0x10805d88

080066d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b09d      	sub	sp, #116	@ 0x74
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e0:	235c      	movs	r3, #92	@ 0x5c
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	0018      	movs	r0, r3
 80066e6:	2314      	movs	r3, #20
 80066e8:	001a      	movs	r2, r3
 80066ea:	2100      	movs	r1, #0
 80066ec:	f008 ff0e 	bl	800f50c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066f0:	2410      	movs	r4, #16
 80066f2:	193b      	adds	r3, r7, r4
 80066f4:	0018      	movs	r0, r3
 80066f6:	234c      	movs	r3, #76	@ 0x4c
 80066f8:	001a      	movs	r2, r3
 80066fa:	2100      	movs	r1, #0
 80066fc:	f008 ff06 	bl	800f50c <memset>
  if(i2cHandle->Instance==I2C2)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a22      	ldr	r2, [pc, #136]	@ (8006790 <HAL_I2C_MspInit+0xb8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d13e      	bne.n	8006788 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800670a:	193b      	adds	r3, r7, r4
 800670c:	2240      	movs	r2, #64	@ 0x40
 800670e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006710:	193b      	adds	r3, r7, r4
 8006712:	2200      	movs	r2, #0
 8006714:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006716:	193b      	adds	r3, r7, r4
 8006718:	0018      	movs	r0, r3
 800671a:	f005 fce9 	bl	800c0f0 <HAL_RCCEx_PeriphCLKConfig>
 800671e:	1e03      	subs	r3, r0, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006722:	f000 f95f 	bl	80069e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006726:	4b1b      	ldr	r3, [pc, #108]	@ (8006794 <HAL_I2C_MspInit+0xbc>)
 8006728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800672a:	4b1a      	ldr	r3, [pc, #104]	@ (8006794 <HAL_I2C_MspInit+0xbc>)
 800672c:	2102      	movs	r1, #2
 800672e:	430a      	orrs	r2, r1
 8006730:	635a      	str	r2, [r3, #52]	@ 0x34
 8006732:	4b18      	ldr	r3, [pc, #96]	@ (8006794 <HAL_I2C_MspInit+0xbc>)
 8006734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006736:	2202      	movs	r2, #2
 8006738:	4013      	ands	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800673e:	215c      	movs	r1, #92	@ 0x5c
 8006740:	187b      	adds	r3, r7, r1
 8006742:	22c0      	movs	r2, #192	@ 0xc0
 8006744:	0112      	lsls	r2, r2, #4
 8006746:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006748:	187b      	adds	r3, r7, r1
 800674a:	2212      	movs	r2, #18
 800674c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800674e:	187b      	adds	r3, r7, r1
 8006750:	2201      	movs	r2, #1
 8006752:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006754:	187b      	adds	r3, r7, r1
 8006756:	2200      	movs	r2, #0
 8006758:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800675a:	187b      	adds	r3, r7, r1
 800675c:	2206      	movs	r2, #6
 800675e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006760:	187b      	adds	r3, r7, r1
 8006762:	4a0d      	ldr	r2, [pc, #52]	@ (8006798 <HAL_I2C_MspInit+0xc0>)
 8006764:	0019      	movs	r1, r3
 8006766:	0010      	movs	r0, r2
 8006768:	f003 fd94 	bl	800a294 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800676c:	4b09      	ldr	r3, [pc, #36]	@ (8006794 <HAL_I2C_MspInit+0xbc>)
 800676e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006770:	4b08      	ldr	r3, [pc, #32]	@ (8006794 <HAL_I2C_MspInit+0xbc>)
 8006772:	2180      	movs	r1, #128	@ 0x80
 8006774:	03c9      	lsls	r1, r1, #15
 8006776:	430a      	orrs	r2, r1
 8006778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800677a:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <HAL_I2C_MspInit+0xbc>)
 800677c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800677e:	2380      	movs	r3, #128	@ 0x80
 8006780:	03db      	lsls	r3, r3, #15
 8006782:	4013      	ands	r3, r2
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006788:	46c0      	nop			@ (mov r8, r8)
 800678a:	46bd      	mov	sp, r7
 800678c:	b01d      	add	sp, #116	@ 0x74
 800678e:	bd90      	pop	{r4, r7, pc}
 8006790:	40005800 	.word	0x40005800
 8006794:	40021000 	.word	0x40021000
 8006798:	50000400 	.word	0x50000400

0800679c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80067a0:	4b0b      	ldr	r3, [pc, #44]	@ (80067d0 <MX_IWDG_Init+0x34>)
 80067a2:	4a0c      	ldr	r2, [pc, #48]	@ (80067d4 <MX_IWDG_Init+0x38>)
 80067a4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80067a6:	4b0a      	ldr	r3, [pc, #40]	@ (80067d0 <MX_IWDG_Init+0x34>)
 80067a8:	2203      	movs	r2, #3
 80067aa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80067ac:	4b08      	ldr	r3, [pc, #32]	@ (80067d0 <MX_IWDG_Init+0x34>)
 80067ae:	4a0a      	ldr	r2, [pc, #40]	@ (80067d8 <MX_IWDG_Init+0x3c>)
 80067b0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80067b2:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <MX_IWDG_Init+0x34>)
 80067b4:	4a08      	ldr	r2, [pc, #32]	@ (80067d8 <MX_IWDG_Init+0x3c>)
 80067b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80067b8:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <MX_IWDG_Init+0x34>)
 80067ba:	0018      	movs	r0, r3
 80067bc:	f004 fed2 	bl	800b564 <HAL_IWDG_Init>
 80067c0:	1e03      	subs	r3, r0, #0
 80067c2:	d001      	beq.n	80067c8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80067c4:	f000 f90e 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80067c8:	46c0      	nop			@ (mov r8, r8)
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	46c0      	nop			@ (mov r8, r8)
 80067d0:	20000248 	.word	0x20000248
 80067d4:	40003000 	.word	0x40003000
 80067d8:	00000fff 	.word	0x00000fff

080067dc <wdt_clr>:

/* USER CODE BEGIN 1 */

void wdt_clr(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 80067e0:	4b03      	ldr	r3, [pc, #12]	@ (80067f0 <wdt_clr+0x14>)
 80067e2:	0018      	movs	r0, r3
 80067e4:	f004 ff10 	bl	800b608 <HAL_IWDG_Refresh>
}
 80067e8:	46c0      	nop			@ (mov r8, r8)
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	20000248 	.word	0x20000248

080067f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	extern uint32_t _main_app_start_address;
	uint32_t AppAddr = (uint32_t) &_main_app_start_address;
 80067fa:	4b35      	ldr	r3, [pc, #212]	@ (80068d0 <main+0xdc>)
 80067fc:	60fb      	str	r3, [r7, #12]
	uint32_t *ram_key = (uint32_t*) RAM_KEY;
 80067fe:	2380      	movs	r3, #128	@ 0x80
 8006800:	059b      	lsls	r3, r3, #22
 8006802:	60bb      	str	r3, [r7, #8]

	char ch;

	// Vector relocatie
	SCB->VTOR = AppAddr;
 8006804:	4b33      	ldr	r3, [pc, #204]	@ (80068d4 <main+0xe0>)
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800680a:	f002 f8a3 	bl	8008954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800680e:	f000 f86f 	bl	80068f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006812:	f7ff fde9 	bl	80063e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8006816:	f7ff f80d 	bl	8005834 <MX_ADC1_Init>
  MX_CRC_Init();
 800681a:	f7ff f9df 	bl	8005bdc <MX_CRC_Init>
  MX_I2C2_Init();
 800681e:	f7ff ff1b 	bl	8006658 <MX_I2C2_Init>
  MX_IWDG_Init();
 8006822:	f7ff ffbb 	bl	800679c <MX_IWDG_Init>
  MX_RTC_Init();
 8006826:	f000 facb 	bl	8006dc0 <MX_RTC_Init>
  MX_TIM3_Init();
 800682a:	f000 fd37 	bl	800729c <MX_TIM3_Init>
  MX_TIM6_Init();
 800682e:	f000 fd9f 	bl	8007370 <MX_TIM6_Init>
  MX_TIM16_Init();
 8006832:	f000 fdd9 	bl	80073e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8006836:	f000 fdff 	bl	8007438 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800683a:	f001 fcef 	bl	800821c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800683e:	f001 fd3b 	bl	80082b8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8006842:	f001 fd87 	bl	8008354 <MX_USART6_UART_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8006846:	b662      	cpsie	i
}
 8006848:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN 2 */

	__enable_irq();

	wdt_clr();
 800684a:	f7ff ffc7 	bl	80067dc <wdt_clr>

	init_sci();
 800684e:	f001 f953 	bl	8007af8 <init_sci>
	timer_open();
 8006852:	f000 ffe5 	bl	8007820 <timer_open>

	shell_open();
 8006856:	f000 fb1f 	bl	8006e98 <shell_open>

	sh_ver(NULL);
 800685a:	2000      	movs	r0, #0
 800685c:	f000 fba2 	bl	8006fa4 <sh_ver>

	// set protection level 1
	//check_rdp_level();

	if (RCC->CSR & RCC_CSR_IWDGRSTF)
 8006860:	4b1d      	ldr	r3, [pc, #116]	@ (80068d8 <main+0xe4>)
 8006862:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006864:	2380      	movs	r3, #128	@ 0x80
 8006866:	059b      	lsls	r3, r3, #22
 8006868:	4013      	ands	r3, r2
 800686a:	d004      	beq.n	8006876 <main+0x82>
		tty_printf("WDT reboot\r\n");
 800686c:	4b1b      	ldr	r3, [pc, #108]	@ (80068dc <main+0xe8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1b      	ldr	r2, [pc, #108]	@ (80068e0 <main+0xec>)
 8006872:	0010      	movs	r0, r2
 8006874:	4798      	blx	r3

	RCC->CSR = RCC_CSR_RMVF;
 8006876:	4b18      	ldr	r3, [pc, #96]	@ (80068d8 <main+0xe4>)
 8006878:	2280      	movs	r2, #128	@ 0x80
 800687a:	0412      	lsls	r2, r2, #16
 800687c:	661a      	str	r2, [r3, #96]	@ 0x60

	if (sizeof(hw_info_t) > FLASH_PAGE_SIZE)
		tty_printf("  ERR flashvar size overflow\r\n");

	init_vars();
 800687e:	f001 ff2d 	bl	80086dc <init_vars>

	// Timer for contrast
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8006882:	4b18      	ldr	r3, [pc, #96]	@ (80068e4 <main+0xf0>)
 8006884:	2100      	movs	r1, #0
 8006886:	0018      	movs	r0, r3
 8006888:	f006 f8ce 	bl	800ca28 <HAL_TIM_PWM_Start>

	set_x_pwm(100);
 800688c:	2064      	movs	r0, #100	@ 0x64
 800688e:	f000 ff3b 	bl	8007708 <set_x_pwm>
	set_y_pwm(100);
 8006892:	2064      	movs	r0, #100	@ 0x64
 8006894:	f000 ff5e 	bl	8007754 <set_y_pwm>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006898:	4b13      	ldr	r3, [pc, #76]	@ (80068e8 <main+0xf4>)
 800689a:	2100      	movs	r1, #0
 800689c:	0018      	movs	r0, r3
 800689e:	f006 f8c3 	bl	800ca28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80068a2:	4b11      	ldr	r3, [pc, #68]	@ (80068e8 <main+0xf4>)
 80068a4:	2108      	movs	r1, #8
 80068a6:	0018      	movs	r0, r3
 80068a8:	f006 f8be 	bl	800ca28 <HAL_TIM_PWM_Start>

	// AYCT102
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 80068ac:	4b0f      	ldr	r3, [pc, #60]	@ (80068ec <main+0xf8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start_IT(&htim16); // Start Timer 10 IRQ
 80068b4:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <main+0xf8>)
 80068b6:	0018      	movs	r0, r3
 80068b8:	f005 fffc 	bl	800c8b4 <HAL_TIM_Base_Start_IT>
		while (1)
			wdt_clr();
	}

#else
	set_protection();
 80068bc:	f000 fa20 	bl	8006d00 <set_protection>
	while (1)
	{
		HAL_Delay(10);
 80068c0:	200a      	movs	r0, #10
 80068c2:	f002 f8cd 	bl	8008a60 <HAL_Delay>
		wdt_clr();
 80068c6:	f7ff ff89 	bl	80067dc <wdt_clr>
		HAL_Delay(10);
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	e7f8      	b.n	80068c0 <main+0xcc>
 80068ce:	46c0      	nop			@ (mov r8, r8)
 80068d0:	08005200 	.word	0x08005200
 80068d4:	e000ed00 	.word	0xe000ed00
 80068d8:	40021000 	.word	0x40021000
 80068dc:	20000a48 	.word	0x20000a48
 80068e0:	080100c4 	.word	0x080100c4
 80068e4:	200008f4 	.word	0x200008f4
 80068e8:	20000810 	.word	0x20000810
 80068ec:	200008a8 	.word	0x200008a8

080068f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b095      	sub	sp, #84	@ 0x54
 80068f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80068f6:	2414      	movs	r4, #20
 80068f8:	193b      	adds	r3, r7, r4
 80068fa:	0018      	movs	r0, r3
 80068fc:	233c      	movs	r3, #60	@ 0x3c
 80068fe:	001a      	movs	r2, r3
 8006900:	2100      	movs	r1, #0
 8006902:	f008 fe03 	bl	800f50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	0018      	movs	r0, r3
 800690a:	2310      	movs	r3, #16
 800690c:	001a      	movs	r2, r3
 800690e:	2100      	movs	r1, #0
 8006910:	f008 fdfc 	bl	800f50c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006914:	2380      	movs	r3, #128	@ 0x80
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	0018      	movs	r0, r3
 800691a:	f004 fe93 	bl	800b644 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800691e:	f004 fe83 	bl	800b628 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006922:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <SystemClock_Config+0xcc>)
 8006924:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006926:	4b25      	ldr	r3, [pc, #148]	@ (80069bc <SystemClock_Config+0xcc>)
 8006928:	2118      	movs	r1, #24
 800692a:	438a      	bics	r2, r1
 800692c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800692e:	193b      	adds	r3, r7, r4
 8006930:	220d      	movs	r2, #13
 8006932:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006934:	193b      	adds	r3, r7, r4
 8006936:	2280      	movs	r2, #128	@ 0x80
 8006938:	0252      	lsls	r2, r2, #9
 800693a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800693c:	0021      	movs	r1, r4
 800693e:	187b      	adds	r3, r7, r1
 8006940:	2201      	movs	r2, #1
 8006942:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006944:	187b      	adds	r3, r7, r1
 8006946:	2201      	movs	r2, #1
 8006948:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800694a:	187b      	adds	r3, r7, r1
 800694c:	2202      	movs	r2, #2
 800694e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006950:	187b      	adds	r3, r7, r1
 8006952:	2203      	movs	r2, #3
 8006954:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006956:	187b      	adds	r3, r7, r1
 8006958:	2200      	movs	r2, #0
 800695a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 12;
 800695c:	187b      	adds	r3, r7, r1
 800695e:	220c      	movs	r2, #12
 8006960:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006962:	187b      	adds	r3, r7, r1
 8006964:	2280      	movs	r2, #128	@ 0x80
 8006966:	0292      	lsls	r2, r2, #10
 8006968:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800696a:	187b      	adds	r3, r7, r1
 800696c:	2280      	movs	r2, #128	@ 0x80
 800696e:	0492      	lsls	r2, r2, #18
 8006970:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006972:	187b      	adds	r3, r7, r1
 8006974:	2280      	movs	r2, #128	@ 0x80
 8006976:	0592      	lsls	r2, r2, #22
 8006978:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800697a:	187b      	adds	r3, r7, r1
 800697c:	0018      	movs	r0, r3
 800697e:	f004 fead 	bl	800b6dc <HAL_RCC_OscConfig>
 8006982:	1e03      	subs	r3, r0, #0
 8006984:	d001      	beq.n	800698a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006986:	f000 f82d 	bl	80069e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	2207      	movs	r2, #7
 800698e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006990:	1d3b      	adds	r3, r7, #4
 8006992:	2202      	movs	r2, #2
 8006994:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	2200      	movs	r2, #0
 800699a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800699c:	1d3b      	adds	r3, r7, #4
 800699e:	2200      	movs	r2, #0
 80069a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80069a2:	1d3b      	adds	r3, r7, #4
 80069a4:	2101      	movs	r1, #1
 80069a6:	0018      	movs	r0, r3
 80069a8:	f005 f9f8 	bl	800bd9c <HAL_RCC_ClockConfig>
 80069ac:	1e03      	subs	r3, r0, #0
 80069ae:	d001      	beq.n	80069b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80069b0:	f000 f818 	bl	80069e4 <Error_Handler>
  }
}
 80069b4:	46c0      	nop			@ (mov r8, r8)
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b015      	add	sp, #84	@ 0x54
 80069ba:	bd90      	pop	{r4, r7, pc}
 80069bc:	40021000 	.word	0x40021000

080069c0 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
	tty_printf("Error file %s line %d\r\n", file, line);
 80069ca:	4b04      	ldr	r3, [pc, #16]	@ (80069dc <_Error_Handler+0x1c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4803      	ldr	r0, [pc, #12]	@ (80069e0 <_Error_Handler+0x20>)
 80069d4:	4798      	blx	r3
	while (1)
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	e7fd      	b.n	80069d6 <_Error_Handler+0x16>
 80069da:	46c0      	nop			@ (mov r8, r8)
 80069dc:	20000a48 	.word	0x20000a48
 80069e0:	080100d4 	.word	0x080100d4

080069e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler\r\n");
 80069e8:	4b02      	ldr	r3, [pc, #8]	@ (80069f4 <Error_Handler+0x10>)
 80069ea:	0018      	movs	r0, r3
 80069ec:	f008 fc5e 	bl	800f2ac <puts>

	while (1)
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	e7fd      	b.n	80069f0 <Error_Handler+0xc>
 80069f4:	08010110 	.word	0x08010110

080069f8 <HAL_GPIO_EXTI_Rising_Callback>:
#else
/*
 *
 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	0002      	movs	r2, r0
 8006a00:	1dbb      	adds	r3, r7, #6
 8006a02:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a04:	1dbb      	adds	r3, r7, #6
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 f813 	bl	8006a34 <HAL_GPIO_EXTI_Callback>
}
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b002      	add	sp, #8
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_GPIO_EXTI_Falling_Callback>:

/*
 *
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	0002      	movs	r2, r0
 8006a1e:	1dbb      	adds	r3, r7, #6
 8006a20:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a22:	1dbb      	adds	r3, r7, #6
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 f804 	bl	8006a34 <HAL_GPIO_EXTI_Callback>
}
 8006a2c:	46c0      	nop			@ (mov r8, r8)
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b002      	add	sp, #8
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_GPIO_EXTI_Callback>:
 * 			Encoder pulses are about 5ms
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
static void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	1dbb      	adds	r3, r7, #6
 8006a3e:	801a      	strh	r2, [r3, #0]
	static uint32_t hal_debounce_xa = 0;
	static uint32_t hal_debounce_xb = 0;
	static uint32_t hal_debounce_ya = 0;
	static uint32_t hal_debounce_yb = 0;

	uint32_t now = HAL_GetTick();
 8006a40:	f002 f804 	bl	8008a4c <HAL_GetTick>
 8006a44:	0003      	movs	r3, r0
 8006a46:	60fb      	str	r3, [r7, #12]

	switch (GPIO_Pin)
 8006a48:	1dbb      	adds	r3, r7, #6
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d900      	bls.n	8006a52 <HAL_GPIO_EXTI_Callback+0x1e>
 8006a50:	e123      	b.n	8006c9a <HAL_GPIO_EXTI_Callback+0x266>
 8006a52:	009a      	lsls	r2, r3, #2
 8006a54:	4b93      	ldr	r3, [pc, #588]	@ (8006ca4 <HAL_GPIO_EXTI_Callback+0x270>)
 8006a56:	18d3      	adds	r3, r2, r3
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	469f      	mov	pc, r3
	{
	case MX_A_Pin:
		position_saved = false;
 8006a5c:	4b92      	ldr	r3, [pc, #584]	@ (8006ca8 <HAL_GPIO_EXTI_Callback+0x274>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
		timer_start(hal_xa_tmr, hal_ms, NULL);
 8006a62:	4b92      	ldr	r3, [pc, #584]	@ (8006cac <HAL_GPIO_EXTI_Callback+0x278>)
 8006a64:	7818      	ldrb	r0, [r3, #0]
 8006a66:	4b92      	ldr	r3, [pc, #584]	@ (8006cb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	0019      	movs	r1, r3
 8006a6e:	f000 ffc7 	bl	8007a00 <timer_start>
		vars.error_status &= ~ERR_HAL_XA;
 8006a72:	4a90      	ldr	r2, [pc, #576]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006a74:	23da      	movs	r3, #218	@ 0xda
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	58d3      	ldr	r3, [r2, r3]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4393      	bics	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	4a8c      	ldr	r2, [pc, #560]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006a82:	23da      	movs	r3, #218	@ 0xda
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_xa)
 8006a88:	4b8b      	ldr	r3, [pc, #556]	@ (8006cb8 <HAL_GPIO_EXTI_Callback+0x284>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d022      	beq.n	8006ad8 <HAL_GPIO_EXTI_Callback+0xa4>
		{
			if (isMX_A == isMX_B)
 8006a92:	4b8a      	ldr	r3, [pc, #552]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006a94:	2104      	movs	r1, #4
 8006a96:	0018      	movs	r0, r3
 8006a98:	f003 fd68 	bl	800a56c <HAL_GPIO_ReadPin>
 8006a9c:	0003      	movs	r3, r0
 8006a9e:	001c      	movs	r4, r3
 8006aa0:	4b86      	ldr	r3, [pc, #536]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006aa2:	2108      	movs	r1, #8
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f003 fd61 	bl	800a56c <HAL_GPIO_ReadPin>
 8006aaa:	0003      	movs	r3, r0
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d109      	bne.n	8006ac4 <HAL_GPIO_EXTI_Callback+0x90>
				vars.eevar.actual_motor.x++;
 8006ab0:	4a80      	ldr	r2, [pc, #512]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006ab2:	23be      	movs	r3, #190	@ 0xbe
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	58d3      	ldr	r3, [r2, r3]
 8006ab8:	1c59      	adds	r1, r3, #1
 8006aba:	4a7e      	ldr	r2, [pc, #504]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006abc:	23be      	movs	r3, #190	@ 0xbe
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	50d1      	str	r1, [r2, r3]
 8006ac2:	e00e      	b.n	8006ae2 <HAL_GPIO_EXTI_Callback+0xae>
			else
				vars.eevar.actual_motor.x--;
 8006ac4:	4a7b      	ldr	r2, [pc, #492]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006ac6:	23be      	movs	r3, #190	@ 0xbe
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	58d3      	ldr	r3, [r2, r3]
 8006acc:	1e59      	subs	r1, r3, #1
 8006ace:	4a79      	ldr	r2, [pc, #484]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006ad0:	23be      	movs	r3, #190	@ 0xbe
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	50d1      	str	r1, [r2, r3]
 8006ad6:	e004      	b.n	8006ae2 <HAL_GPIO_EXTI_Callback+0xae>
		}
		else
			tty_printf("debounce XA\r\n");
 8006ad8:	4b79      	ldr	r3, [pc, #484]	@ (8006cc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a79      	ldr	r2, [pc, #484]	@ (8006cc4 <HAL_GPIO_EXTI_Callback+0x290>)
 8006ade:	0010      	movs	r0, r2
 8006ae0:	4798      	blx	r3

		hal_debounce_xa = now;
 8006ae2:	4b75      	ldr	r3, [pc, #468]	@ (8006cb8 <HAL_GPIO_EXTI_Callback+0x284>)
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	601a      	str	r2, [r3, #0]
		break;
 8006ae8:	e0d8      	b.n	8006c9c <HAL_GPIO_EXTI_Callback+0x268>

	case MX_B_Pin:
		position_saved = false;
 8006aea:	4b6f      	ldr	r3, [pc, #444]	@ (8006ca8 <HAL_GPIO_EXTI_Callback+0x274>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
		timer_start(hal_xb_tmr, hal_ms, NULL);
 8006af0:	4b75      	ldr	r3, [pc, #468]	@ (8006cc8 <HAL_GPIO_EXTI_Callback+0x294>)
 8006af2:	7818      	ldrb	r0, [r3, #0]
 8006af4:	4b6e      	ldr	r3, [pc, #440]	@ (8006cb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	2200      	movs	r2, #0
 8006afa:	0019      	movs	r1, r3
 8006afc:	f000 ff80 	bl	8007a00 <timer_start>
		vars.error_status &= ~ERR_HAL_XB;
 8006b00:	4a6c      	ldr	r2, [pc, #432]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b02:	23da      	movs	r3, #218	@ 0xda
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	58d3      	ldr	r3, [r2, r3]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	4393      	bics	r3, r2
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	4a69      	ldr	r2, [pc, #420]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b10:	23da      	movs	r3, #218	@ 0xda
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_xb)
 8006b16:	4b6d      	ldr	r3, [pc, #436]	@ (8006ccc <HAL_GPIO_EXTI_Callback+0x298>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d022      	beq.n	8006b66 <HAL_GPIO_EXTI_Callback+0x132>
		{
			if (isMX_A == isMX_B)
 8006b20:	4b66      	ldr	r3, [pc, #408]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006b22:	2104      	movs	r1, #4
 8006b24:	0018      	movs	r0, r3
 8006b26:	f003 fd21 	bl	800a56c <HAL_GPIO_ReadPin>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	001c      	movs	r4, r3
 8006b2e:	4b63      	ldr	r3, [pc, #396]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006b30:	2108      	movs	r1, #8
 8006b32:	0018      	movs	r0, r3
 8006b34:	f003 fd1a 	bl	800a56c <HAL_GPIO_ReadPin>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	d109      	bne.n	8006b52 <HAL_GPIO_EXTI_Callback+0x11e>
				vars.eevar.actual_motor.x--;
 8006b3e:	4a5d      	ldr	r2, [pc, #372]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b40:	23be      	movs	r3, #190	@ 0xbe
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	58d3      	ldr	r3, [r2, r3]
 8006b46:	1e59      	subs	r1, r3, #1
 8006b48:	4a5a      	ldr	r2, [pc, #360]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b4a:	23be      	movs	r3, #190	@ 0xbe
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	50d1      	str	r1, [r2, r3]
 8006b50:	e00e      	b.n	8006b70 <HAL_GPIO_EXTI_Callback+0x13c>
			else
				vars.eevar.actual_motor.x++;
 8006b52:	4a58      	ldr	r2, [pc, #352]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b54:	23be      	movs	r3, #190	@ 0xbe
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	58d3      	ldr	r3, [r2, r3]
 8006b5a:	1c59      	adds	r1, r3, #1
 8006b5c:	4a55      	ldr	r2, [pc, #340]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b5e:	23be      	movs	r3, #190	@ 0xbe
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	50d1      	str	r1, [r2, r3]
 8006b64:	e004      	b.n	8006b70 <HAL_GPIO_EXTI_Callback+0x13c>
		}
		else
			tty_printf("debounce XB\r\n");
 8006b66:	4b56      	ldr	r3, [pc, #344]	@ (8006cc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a59      	ldr	r2, [pc, #356]	@ (8006cd0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8006b6c:	0010      	movs	r0, r2
 8006b6e:	4798      	blx	r3

		hal_debounce_xb = now;
 8006b70:	4b56      	ldr	r3, [pc, #344]	@ (8006ccc <HAL_GPIO_EXTI_Callback+0x298>)
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	601a      	str	r2, [r3, #0]
		break;
 8006b76:	e091      	b.n	8006c9c <HAL_GPIO_EXTI_Callback+0x268>

	case MY_A_Pin:
		position_saved = false;
 8006b78:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca8 <HAL_GPIO_EXTI_Callback+0x274>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
		timer_start(hal_ya_tmr, hal_ms, NULL);
 8006b7e:	4b55      	ldr	r3, [pc, #340]	@ (8006cd4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006b80:	7818      	ldrb	r0, [r3, #0]
 8006b82:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	0019      	movs	r1, r3
 8006b8a:	f000 ff39 	bl	8007a00 <timer_start>
		vars.error_status &= ~ERR_HAL_YA;
 8006b8e:	4a49      	ldr	r2, [pc, #292]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b90:	23da      	movs	r3, #218	@ 0xda
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	58d3      	ldr	r3, [r2, r3]
 8006b96:	2204      	movs	r2, #4
 8006b98:	4393      	bics	r3, r2
 8006b9a:	0019      	movs	r1, r3
 8006b9c:	4a45      	ldr	r2, [pc, #276]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006b9e:	23da      	movs	r3, #218	@ 0xda
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_ya)
 8006ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d022      	beq.n	8006bf4 <HAL_GPIO_EXTI_Callback+0x1c0>
		{
			if (isMY_A == isMY_B)
 8006bae:	4b43      	ldr	r3, [pc, #268]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f003 fcda 	bl	800a56c <HAL_GPIO_ReadPin>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	001c      	movs	r4, r3
 8006bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006bbe:	2102      	movs	r1, #2
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f003 fcd3 	bl	800a56c <HAL_GPIO_ReadPin>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	429c      	cmp	r4, r3
 8006bca:	d109      	bne.n	8006be0 <HAL_GPIO_EXTI_Callback+0x1ac>
				vars.eevar.actual_motor.y++;
 8006bcc:	4a39      	ldr	r2, [pc, #228]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006bce:	23c0      	movs	r3, #192	@ 0xc0
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	58d3      	ldr	r3, [r2, r3]
 8006bd4:	1c59      	adds	r1, r3, #1
 8006bd6:	4a37      	ldr	r2, [pc, #220]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006bd8:	23c0      	movs	r3, #192	@ 0xc0
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	50d1      	str	r1, [r2, r3]
 8006bde:	e00e      	b.n	8006bfe <HAL_GPIO_EXTI_Callback+0x1ca>
			else
				vars.eevar.actual_motor.y--;
 8006be0:	4a34      	ldr	r2, [pc, #208]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006be2:	23c0      	movs	r3, #192	@ 0xc0
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	58d3      	ldr	r3, [r2, r3]
 8006be8:	1e59      	subs	r1, r3, #1
 8006bea:	4a32      	ldr	r2, [pc, #200]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006bec:	23c0      	movs	r3, #192	@ 0xc0
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	50d1      	str	r1, [r2, r3]
 8006bf2:	e004      	b.n	8006bfe <HAL_GPIO_EXTI_Callback+0x1ca>
		}
		else
			tty_printf("debounce YA\r\n");
 8006bf4:	4b32      	ldr	r3, [pc, #200]	@ (8006cc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a38      	ldr	r2, [pc, #224]	@ (8006cdc <HAL_GPIO_EXTI_Callback+0x2a8>)
 8006bfa:	0010      	movs	r0, r2
 8006bfc:	4798      	blx	r3

		hal_debounce_ya = now;
 8006bfe:	4b36      	ldr	r3, [pc, #216]	@ (8006cd8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]
		break;
 8006c04:	e04a      	b.n	8006c9c <HAL_GPIO_EXTI_Callback+0x268>

	case MY_B_Pin:
		position_saved = false;
 8006c06:	4b28      	ldr	r3, [pc, #160]	@ (8006ca8 <HAL_GPIO_EXTI_Callback+0x274>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
		timer_start(hal_yb_tmr, hal_ms, NULL);
 8006c0c:	4b34      	ldr	r3, [pc, #208]	@ (8006ce0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006c0e:	7818      	ldrb	r0, [r3, #0]
 8006c10:	4b27      	ldr	r3, [pc, #156]	@ (8006cb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	2200      	movs	r2, #0
 8006c16:	0019      	movs	r1, r3
 8006c18:	f000 fef2 	bl	8007a00 <timer_start>
		vars.error_status &= ~ERR_HAL_YB;
 8006c1c:	4a25      	ldr	r2, [pc, #148]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006c1e:	23da      	movs	r3, #218	@ 0xda
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	58d3      	ldr	r3, [r2, r3]
 8006c24:	2208      	movs	r2, #8
 8006c26:	4393      	bics	r3, r2
 8006c28:	0019      	movs	r1, r3
 8006c2a:	4a22      	ldr	r2, [pc, #136]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006c2c:	23da      	movs	r3, #218	@ 0xda
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_yb)
 8006c32:	4b2c      	ldr	r3, [pc, #176]	@ (8006ce4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d022      	beq.n	8006c82 <HAL_GPIO_EXTI_Callback+0x24e>
		{
			if (isMY_A == isMY_B)
 8006c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006c3e:	2101      	movs	r1, #1
 8006c40:	0018      	movs	r0, r3
 8006c42:	f003 fc93 	bl	800a56c <HAL_GPIO_ReadPin>
 8006c46:	0003      	movs	r3, r0
 8006c48:	001c      	movs	r4, r3
 8006c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cbc <HAL_GPIO_EXTI_Callback+0x288>)
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f003 fc8c 	bl	800a56c <HAL_GPIO_ReadPin>
 8006c54:	0003      	movs	r3, r0
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d109      	bne.n	8006c6e <HAL_GPIO_EXTI_Callback+0x23a>
				vars.eevar.actual_motor.y--;
 8006c5a:	4a16      	ldr	r2, [pc, #88]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006c5c:	23c0      	movs	r3, #192	@ 0xc0
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	58d3      	ldr	r3, [r2, r3]
 8006c62:	1e59      	subs	r1, r3, #1
 8006c64:	4a13      	ldr	r2, [pc, #76]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006c66:	23c0      	movs	r3, #192	@ 0xc0
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	50d1      	str	r1, [r2, r3]
 8006c6c:	e00e      	b.n	8006c8c <HAL_GPIO_EXTI_Callback+0x258>
			else
				vars.eevar.actual_motor.y++;
 8006c6e:	4a11      	ldr	r2, [pc, #68]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006c70:	23c0      	movs	r3, #192	@ 0xc0
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	58d3      	ldr	r3, [r2, r3]
 8006c76:	1c59      	adds	r1, r3, #1
 8006c78:	4a0e      	ldr	r2, [pc, #56]	@ (8006cb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8006c7a:	23c0      	movs	r3, #192	@ 0xc0
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	50d1      	str	r1, [r2, r3]
 8006c80:	e004      	b.n	8006c8c <HAL_GPIO_EXTI_Callback+0x258>
		}
		else
			tty_printf("debounce YB\r\n");
 8006c82:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a18      	ldr	r2, [pc, #96]	@ (8006ce8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006c88:	0010      	movs	r0, r2
 8006c8a:	4798      	blx	r3

		hal_debounce_yb = now;
 8006c8c:	4b15      	ldr	r3, [pc, #84]	@ (8006ce4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]
		break;
 8006c92:	e003      	b.n	8006c9c <HAL_GPIO_EXTI_Callback+0x268>

	case RX433_Pin:
		AYCT_EXTI_IRQHandler();
 8006c94:	f7fe fe88 	bl	80059a8 <AYCT_EXTI_IRQHandler>
		break;
 8006c98:	e000      	b.n	8006c9c <HAL_GPIO_EXTI_Callback+0x268>

	default:
		break;
 8006c9a:	46c0      	nop			@ (mov r8, r8)
	}
}
 8006c9c:	46c0      	nop			@ (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b005      	add	sp, #20
 8006ca2:	bd90      	pop	{r4, r7, pc}
 8006ca4:	080119bc 	.word	0x080119bc
 8006ca8:	20000014 	.word	0x20000014
 8006cac:	20000010 	.word	0x20000010
 8006cb0:	2000046c 	.word	0x2000046c
 8006cb4:	20000258 	.word	0x20000258
 8006cb8:	20000470 	.word	0x20000470
 8006cbc:	50000800 	.word	0x50000800
 8006cc0:	20000a48 	.word	0x20000a48
 8006cc4:	080102bc 	.word	0x080102bc
 8006cc8:	20000011 	.word	0x20000011
 8006ccc:	20000474 	.word	0x20000474
 8006cd0:	080102cc 	.word	0x080102cc
 8006cd4:	20000012 	.word	0x20000012
 8006cd8:	20000478 	.word	0x20000478
 8006cdc:	080102dc 	.word	0x080102dc
 8006ce0:	20000013 	.word	0x20000013
 8006ce4:	2000047c 	.word	0x2000047c
 8006ce8:	080102ec 	.word	0x080102ec

08006cec <timer6_irq>:
#endif
/*
 * Measure phase timeout
 */
void timer6_irq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
	timer_overflow = true;
 8006cf0:	4b02      	ldr	r3, [pc, #8]	@ (8006cfc <timer6_irq+0x10>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	701a      	strb	r2, [r3, #0]
}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	2000046e 	.word	0x2000046e

08006d00 <set_protection>:
 * \param
 *
 * \return - true if OK
 */
void set_protection(void)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b0d7      	sub	sp, #348	@ 0x15c
 8006d04:	af00      	add	r7, sp, #0
	hw_info_t flash;

	ReadStruct2Flash(&flash, sizeof(hw_info_t));
 8006d06:	23ac      	movs	r3, #172	@ 0xac
 8006d08:	005a      	lsls	r2, r3, #1
 8006d0a:	003b      	movs	r3, r7
 8006d0c:	0011      	movs	r1, r2
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f7ff fa5c 	bl	80061cc <ReadStruct2Flash>

	flash.stm_serial = stm_serial();
 8006d14:	f000 f82e 	bl	8006d74 <stm_serial>
 8006d18:	0002      	movs	r2, r0
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <set_protection+0x64>)
 8006d1c:	24ac      	movs	r4, #172	@ 0xac
 8006d1e:	0064      	lsls	r4, r4, #1
 8006d20:	191b      	adds	r3, r3, r4
 8006d22:	19db      	adds	r3, r3, r7
 8006d24:	609a      	str	r2, [r3, #8]

	tty_printf("<<<<<<<<<<Set protection NO USER PROGRAM>>>>>>>>>>>>>\r\n");
 8006d26:	4b10      	ldr	r3, [pc, #64]	@ (8006d68 <set_protection+0x68>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a10      	ldr	r2, [pc, #64]	@ (8006d6c <set_protection+0x6c>)
 8006d2c:	0010      	movs	r0, r2
 8006d2e:	4798      	blx	r3
	tty_printf("Serial number [%u] PUT ROM THIS IN ROMTABLE\r\n", flash.stm_serial);
 8006d30:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <set_protection+0x68>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <set_protection+0x64>)
 8006d36:	191b      	adds	r3, r3, r4
 8006d38:	19db      	adds	r3, r3, r7
 8006d3a:	6899      	ldr	r1, [r3, #8]
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <set_protection+0x70>)
 8006d3e:	0018      	movs	r0, r3
 8006d40:	4790      	blx	r2
	tty_printf("<<<<<<<<<<Set protection NO USER PROGRAM>>>>>>>>>>>>>\r\n");
 8006d42:	4b09      	ldr	r3, [pc, #36]	@ (8006d68 <set_protection+0x68>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a09      	ldr	r2, [pc, #36]	@ (8006d6c <set_protection+0x6c>)
 8006d48:	0010      	movs	r0, r2
 8006d4a:	4798      	blx	r3

	WriteStruct2Flash(&flash, sizeof(hw_info_t));
 8006d4c:	23ac      	movs	r3, #172	@ 0xac
 8006d4e:	005a      	lsls	r2, r3, #1
 8006d50:	003b      	movs	r3, r7
 8006d52:	0011      	movs	r1, r2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7ff fa8d 	bl	8006274 <WriteStruct2Flash>
}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	b057      	add	sp, #348	@ 0x15c
 8006d60:	bd90      	pop	{r4, r7, pc}
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	fffffea8 	.word	0xfffffea8
 8006d68:	20000a48 	.word	0x20000a48
 8006d6c:	08010350 	.word	0x08010350
 8006d70:	08010388 	.word	0x08010388

08006d74 <stm_serial>:
 * \param
 *
 * \return - CRC32 of STM serial
 */
uint32_t stm_serial(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
	uint32_t challenge[3];

	uint32_t *p_mem;
	p_mem = (uint32_t*) UID_BASE;
 8006d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006db8 <stm_serial+0x44>)
 8006d7c:	613b      	str	r3, [r7, #16]

	for (int var = 0; var < 3; var++)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e00b      	b.n	8006d9c <stm_serial+0x28>
		challenge[var] = *(p_mem + var);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	18d3      	adds	r3, r2, r3
 8006d8c:	6819      	ldr	r1, [r3, #0]
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	0092      	lsls	r2, r2, #2
 8006d94:	50d1      	str	r1, [r2, r3]
	for (int var = 0; var < 3; var++)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	ddf0      	ble.n	8006d84 <stm_serial+0x10>

	return HAL_CRC_Calculate(&hcrc, challenge, sizeof(challenge) / 4);
 8006da2:	1d39      	adds	r1, r7, #4
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <stm_serial+0x48>)
 8006da6:	2203      	movs	r2, #3
 8006da8:	0018      	movs	r0, r3
 8006daa:	f002 fe6b 	bl	8009a84 <HAL_CRC_Calculate>
 8006dae:	0003      	movs	r3, r0
}
 8006db0:	0018      	movs	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b006      	add	sp, #24
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	1fff7590 	.word	0x1fff7590
 8006dbc:	200001c0 	.word	0x200001c0

08006dc0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006dc4:	4b13      	ldr	r3, [pc, #76]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006dc6:	4a14      	ldr	r2, [pc, #80]	@ (8006e18 <MX_RTC_Init+0x58>)
 8006dc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006dca:	4b12      	ldr	r3, [pc, #72]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8006dd0:	4b10      	ldr	r3, [pc, #64]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006dd2:	227f      	movs	r2, #127	@ 0x7f
 8006dd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006dd8:	22ff      	movs	r2, #255	@ 0xff
 8006dda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006de2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006de8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006dee:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006df0:	2280      	movs	r2, #128	@ 0x80
 8006df2:	05d2      	lsls	r2, r2, #23
 8006df4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8006df6:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <MX_RTC_Init+0x54>)
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f005 fbb2 	bl	800c568 <HAL_RTC_Init>
 8006e04:	1e03      	subs	r3, r0, #0
 8006e06:	d001      	beq.n	8006e0c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8006e08:	f7ff fdec 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006e0c:	46c0      	nop			@ (mov r8, r8)
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	20000480 	.word	0x20000480
 8006e18:	40002800 	.word	0x40002800

08006e1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b097      	sub	sp, #92	@ 0x5c
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e24:	240c      	movs	r4, #12
 8006e26:	193b      	adds	r3, r7, r4
 8006e28:	0018      	movs	r0, r3
 8006e2a:	234c      	movs	r3, #76	@ 0x4c
 8006e2c:	001a      	movs	r2, r3
 8006e2e:	2100      	movs	r1, #0
 8006e30:	f008 fb6c 	bl	800f50c <memset>
  if(rtcHandle->Instance==RTC)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a15      	ldr	r2, [pc, #84]	@ (8006e90 <HAL_RTC_MspInit+0x74>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d124      	bne.n	8006e88 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006e3e:	193b      	adds	r3, r7, r4
 8006e40:	2280      	movs	r2, #128	@ 0x80
 8006e42:	0292      	lsls	r2, r2, #10
 8006e44:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006e46:	193b      	adds	r3, r7, r4
 8006e48:	2280      	movs	r2, #128	@ 0x80
 8006e4a:	0052      	lsls	r2, r2, #1
 8006e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e4e:	193b      	adds	r3, r7, r4
 8006e50:	0018      	movs	r0, r3
 8006e52:	f005 f94d 	bl	800c0f0 <HAL_RCCEx_PeriphCLKConfig>
 8006e56:	1e03      	subs	r3, r0, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006e5a:	f7ff fdc3 	bl	80069e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <HAL_RTC_MspInit+0x78>)
 8006e60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e62:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <HAL_RTC_MspInit+0x78>)
 8006e64:	2180      	movs	r1, #128	@ 0x80
 8006e66:	0209      	lsls	r1, r1, #8
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006e6c:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <HAL_RTC_MspInit+0x78>)
 8006e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e70:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <HAL_RTC_MspInit+0x78>)
 8006e72:	2180      	movs	r1, #128	@ 0x80
 8006e74:	00c9      	lsls	r1, r1, #3
 8006e76:	430a      	orrs	r2, r1
 8006e78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006e7a:	4b06      	ldr	r3, [pc, #24]	@ (8006e94 <HAL_RTC_MspInit+0x78>)
 8006e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e7e:	2380      	movs	r3, #128	@ 0x80
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4013      	ands	r3, r2
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006e88:	46c0      	nop			@ (mov r8, r8)
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	b017      	add	sp, #92	@ 0x5c
 8006e8e:	bd90      	pop	{r4, r7, pc}
 8006e90:	40002800 	.word	0x40002800
 8006e94:	40021000 	.word	0x40021000

08006e98 <shell_open>:
 * \Parameters	vars pointer to vars_t
 *
 * \return -.
 */
void shell_open(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
	if (tmr == NO_TIMER)
 8006e9c:	4b09      	ldr	r3, [pc, #36]	@ (8006ec4 <shell_open+0x2c>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2bfa      	cmp	r3, #250	@ 0xfa
 8006ea2:	d105      	bne.n	8006eb0 <shell_open+0x18>
	{
		tmr = timer_get();
 8006ea4:	f000 fd2a 	bl	80078fc <timer_get>
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	001a      	movs	r2, r3
 8006eac:	4b05      	ldr	r3, [pc, #20]	@ (8006ec4 <shell_open+0x2c>)
 8006eae:	701a      	strb	r2, [r3, #0]
	}

	shell_cmdline_init(&cmdline);
 8006eb0:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <shell_open+0x30>)
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 f80a 	bl	8006ecc <shell_cmdline_init>

#if FLEXIBLE_SCI1 || FLEXIBLE_SCI2 || FLEXIBLE_SCI3 || FLEXIBLE_SCI4 || FLEXIBLE_SCI5 || FLEXIBLE_SCI6 || FLEXIBLE_SCI7 || FLEXIBLE_SCI8
#ifdef ENABLE_MODBUS
	shell_use_modbus();
#else
	shell_use_sci1();
 8006eb8:	f000 febe 	bl	8007c38 <shell_use_sci1>
#endif
#endif
}
 8006ebc:	46c0      	nop			@ (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	46c0      	nop			@ (mov r8, r8)
 8006ec4:	20000015 	.word	0x20000015
 8006ec8:	20000788 	.word	0x20000788

08006ecc <shell_cmdline_init>:
 * \Parameters object A pointer to a command line object.
 *
 * \return -.
 */
static void shell_cmdline_init(cmdline_obj_t *object)
{
 8006ecc:	b590      	push	{r4, r7, lr}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < (SHELL_CMDLINE_HIST_COUNT + 1); i++)
 8006ed4:	230f      	movs	r3, #15
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	e047      	b.n	8006f6e <shell_cmdline_init+0xa2>
	{
		object->cmdline[i].id = i;
 8006ede:	240f      	movs	r4, #15
 8006ee0:	193b      	adds	r3, r7, r4
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	0013      	movs	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	193a      	adds	r2, r7, r4
 8006ef0:	7812      	ldrb	r2, [r2, #0]
 8006ef2:	545a      	strb	r2, [r3, r1]
		object->cmdline[i].str = &mem_pool[SHELL_CMDLINE_SIZE * i];
 8006ef4:	193b      	adds	r3, r7, r4
 8006ef6:	781a      	ldrb	r2, [r3, #0]
 8006ef8:	0013      	movs	r3, r2
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	189b      	adds	r3, r3, r2
 8006efe:	00da      	lsls	r2, r3, #3
 8006f00:	1899      	adds	r1, r3, r2
 8006f02:	193b      	adds	r3, r7, r4
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	4b26      	ldr	r3, [pc, #152]	@ (8006fa0 <shell_cmdline_init+0xd4>)
 8006f08:	18c9      	adds	r1, r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	0013      	movs	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	189b      	adds	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	18c3      	adds	r3, r0, r3
 8006f16:	3304      	adds	r3, #4
 8006f18:	6019      	str	r1, [r3, #0]
		object->cmdline[i].size = 0;
 8006f1a:	0020      	movs	r0, r4
 8006f1c:	183b      	adds	r3, r7, r0
 8006f1e:	781a      	ldrb	r2, [r3, #0]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	0013      	movs	r3, r2
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	189b      	adds	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	18cb      	adds	r3, r1, r3
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]

		if (object->cmdline[i].id == SHELL_CMDLINE_HIST_COUNT)
 8006f32:	183b      	adds	r3, r7, r0
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	0013      	movs	r3, r2
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	189b      	adds	r3, r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	5c5b      	ldrb	r3, [r3, r1]
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d10d      	bne.n	8006f62 <shell_cmdline_init+0x96>
		{
			object->p_cmdline = &object->cmdline[i];
 8006f46:	183b      	adds	r3, r7, r0
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	0013      	movs	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	189b      	adds	r3, r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	18d2      	adds	r2, r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	66da      	str	r2, [r3, #108]	@ 0x6c
			object->p_cmdline->size = 0;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f5e:	2200      	movs	r2, #0
 8006f60:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < (SHELL_CMDLINE_HIST_COUNT + 1); i++)
 8006f62:	210f      	movs	r1, #15
 8006f64:	187b      	adds	r3, r7, r1
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	187b      	adds	r3, r7, r1
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	230f      	movs	r3, #15
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d9b2      	bls.n	8006ede <shell_cmdline_init+0x12>
		}
	}
#if (SHELL_CMDLINE_HIST_COUNT > 0)
	object->cmd_idx = 0;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2270      	movs	r2, #112	@ 0x70
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	5499      	strb	r1, [r3, r2]
#endif
	object->tabline.str = NULL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	679a      	str	r2, [r3, #120]	@ 0x78
	object->tabline.size = 0;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	227c      	movs	r2, #124	@ 0x7c
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	5499      	strb	r1, [r3, r2]
	object->tab_idx = 0;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2280      	movs	r2, #128	@ 0x80
 8006f92:	2100      	movs	r1, #0
 8006f94:	5499      	strb	r1, [r3, r2]
}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b005      	add	sp, #20
 8006f9c:	bd90      	pop	{r4, r7, pc}
 8006f9e:	46c0      	nop			@ (mov r8, r8)
 8006fa0:	200004ac 	.word	0x200004ac

08006fa4 <sh_ver>:
 * \Parameters -.
 *
 * \return -.
 */
void sh_ver(char *argv)
{
 8006fa4:	b5b0      	push	{r4, r5, r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	6078      	str	r0, [r7, #4]
	extern app_info_t c_app_info;

	uint32_t *Bootloader_info = (uint32_t*) (0x08005000 - 40);
 8006fac:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <sh_ver+0x78>)
 8006fae:	60fb      	str	r3, [r7, #12]
	app_info_t *p_bl_info = (app_info_t*) Bootloader_info;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	60bb      	str	r3, [r7, #8]

	tty_printf("Bootloader %X.%02X\r\n", ((p_bl_info->version >> 24) & 0xFF), ((p_bl_info->version >> 16) & 0xFF));
 8006fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8007020 <sh_ver+0x7c>)
 8006fb6:	681c      	ldr	r4, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	0e19      	lsrs	r1, r3, #24
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	22ff      	movs	r2, #255	@ 0xff
 8006fc6:	401a      	ands	r2, r3
 8006fc8:	4b16      	ldr	r3, [pc, #88]	@ (8007024 <sh_ver+0x80>)
 8006fca:	0018      	movs	r0, r3
 8006fcc:	47a0      	blx	r4

#ifdef ENABLE_MODBUS
	tty_printf("Modbus ");
#endif
	tty_printf("Suntrack %lx.%02lx (%s %s)\r\n", ((c_app_info.version >> 24) & 0xFF), ((c_app_info.version >> 16) & 0xFF), c_app_info.build_date, c_app_info.build_time);
 8006fce:	4b14      	ldr	r3, [pc, #80]	@ (8007020 <sh_ver+0x7c>)
 8006fd0:	681c      	ldr	r4, [r3, #0]
 8006fd2:	4b15      	ldr	r3, [pc, #84]	@ (8007028 <sh_ver+0x84>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	0e19      	lsrs	r1, r3, #24
 8006fd8:	4b13      	ldr	r3, [pc, #76]	@ (8007028 <sh_ver+0x84>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	22ff      	movs	r2, #255	@ 0xff
 8006fe0:	401a      	ands	r2, r3
 8006fe2:	4d12      	ldr	r5, [pc, #72]	@ (800702c <sh_ver+0x88>)
 8006fe4:	4812      	ldr	r0, [pc, #72]	@ (8007030 <sh_ver+0x8c>)
 8006fe6:	4b13      	ldr	r3, [pc, #76]	@ (8007034 <sh_ver+0x90>)
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	002b      	movs	r3, r5
 8006fec:	47a0      	blx	r4

	// fixed low on L6205 types
	if (isPCB)
 8006fee:	23a0      	movs	r3, #160	@ 0xa0
 8006ff0:	05db      	lsls	r3, r3, #23
 8006ff2:	2140      	movs	r1, #64	@ 0x40
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f003 fab9 	bl	800a56c <HAL_GPIO_ReadPin>
 8006ffa:	1e03      	subs	r3, r0, #0
 8006ffc:	d005      	beq.n	800700a <sh_ver+0x66>
		tty_printf("Hardware MP6515\r\n");
 8006ffe:	4b08      	ldr	r3, [pc, #32]	@ (8007020 <sh_ver+0x7c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a0d      	ldr	r2, [pc, #52]	@ (8007038 <sh_ver+0x94>)
 8007004:	0010      	movs	r0, r2
 8007006:	4798      	blx	r3
	else
		tty_printf("Hardware L6203\r\n");

}
 8007008:	e004      	b.n	8007014 <sh_ver+0x70>
		tty_printf("Hardware L6203\r\n");
 800700a:	4b05      	ldr	r3, [pc, #20]	@ (8007020 <sh_ver+0x7c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a0b      	ldr	r2, [pc, #44]	@ (800703c <sh_ver+0x98>)
 8007010:	0010      	movs	r0, r2
 8007012:	4798      	blx	r3
}
 8007014:	46c0      	nop			@ (mov r8, r8)
 8007016:	46bd      	mov	sp, r7
 8007018:	b004      	add	sp, #16
 800701a:	bdb0      	pop	{r4, r5, r7, pc}
 800701c:	08004fd8 	.word	0x08004fd8
 8007020:	20000a48 	.word	0x20000a48
 8007024:	080117b4 	.word	0x080117b4
 8007028:	08005000 	.word	0x08005000
 800702c:	08005010 	.word	0x08005010
 8007030:	080117cc 	.word	0x080117cc
 8007034:	0800501c 	.word	0x0800501c
 8007038:	080117ec 	.word	0x080117ec
 800703c:	08011800 	.word	0x08011800

08007040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007046:	4b11      	ldr	r3, [pc, #68]	@ (800708c <HAL_MspInit+0x4c>)
 8007048:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800704a:	4b10      	ldr	r3, [pc, #64]	@ (800708c <HAL_MspInit+0x4c>)
 800704c:	2101      	movs	r1, #1
 800704e:	430a      	orrs	r2, r1
 8007050:	641a      	str	r2, [r3, #64]	@ 0x40
 8007052:	4b0e      	ldr	r3, [pc, #56]	@ (800708c <HAL_MspInit+0x4c>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	2201      	movs	r2, #1
 8007058:	4013      	ands	r3, r2
 800705a:	607b      	str	r3, [r7, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800705e:	4b0b      	ldr	r3, [pc, #44]	@ (800708c <HAL_MspInit+0x4c>)
 8007060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007062:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <HAL_MspInit+0x4c>)
 8007064:	2180      	movs	r1, #128	@ 0x80
 8007066:	0549      	lsls	r1, r1, #21
 8007068:	430a      	orrs	r2, r1
 800706a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800706c:	4b07      	ldr	r3, [pc, #28]	@ (800708c <HAL_MspInit+0x4c>)
 800706e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	055b      	lsls	r3, r3, #21
 8007074:	4013      	ands	r3, r2
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800707a:	23c0      	movs	r3, #192	@ 0xc0
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	0018      	movs	r0, r3
 8007080:	f001 fd12 	bl	8008aa8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007084:	46c0      	nop			@ (mov r8, r8)
 8007086:	46bd      	mov	sp, r7
 8007088:	b002      	add	sp, #8
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40021000 	.word	0x40021000

08007090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007094:	46c0      	nop			@ (mov r8, r8)
 8007096:	e7fd      	b.n	8007094 <NMI_Handler+0x4>

08007098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800709c:	46c0      	nop			@ (mov r8, r8)
 800709e:	e7fd      	b.n	800709c <HardFault_Handler+0x4>

080070a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80070a4:	46c0      	nop			@ (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070ae:	46c0      	nop			@ (mov r8, r8)
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	timer_callback();
 80070b8:	f000 fbd0 	bl	800785c <timer_callback>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070bc:	f001 fcb4 	bl	8008a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070c0:	46c0      	nop			@ (mov r8, r8)
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MY_A_Pin);
 80070ca:	2001      	movs	r0, #1
 80070cc:	f003 fa88 	bl	800a5e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MY_B_Pin);
 80070d0:	2002      	movs	r0, #2
 80070d2:	f003 fa85 	bl	800a5e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */


  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80070d6:	46c0      	nop			@ (mov r8, r8)
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MX_A_Pin);
 80070e0:	2004      	movs	r0, #4
 80070e2:	f003 fa7d 	bl	800a5e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MX_B_Pin);
 80070e6:	2008      	movs	r0, #8
 80070e8:	f003 fa7a 	bl	800a5e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80070ec:	46c0      	nop			@ (mov r8, r8)
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RX433_Pin);
 80070f6:	2010      	movs	r0, #16
 80070f8:	f003 fa72 	bl	800a5e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80070fc:	46c0      	nop			@ (mov r8, r8)
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

	timer6_irq();
 8007108:	f7ff fdf0 	bl	8006cec <timer6_irq>

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800710c:	4b03      	ldr	r3, [pc, #12]	@ (800711c <TIM6_DAC_LPTIM1_IRQHandler+0x18>)
 800710e:	0018      	movs	r0, r3
 8007110:	f005 fd7a 	bl	800cc08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8007114:	46c0      	nop			@ (mov r8, r8)
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	2000085c 	.word	0x2000085c

08007120 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8007124:	4b03      	ldr	r3, [pc, #12]	@ (8007134 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8007126:	0018      	movs	r0, r3
 8007128:	f005 fd6e 	bl	800cc08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 800712c:	46c0      	nop			@ (mov r8, r8)
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	46c0      	nop			@ (mov r8, r8)
 8007134:	200008a8 	.word	0x200008a8

08007138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	sci1_callback();
 800713c:	f000 fcec 	bl	8007b18 <sci1_callback>
	return;
 8007140:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

	sci2_callback();
 800714a:	f000 fda7 	bl	8007c9c <sci2_callback>
	return;
 800714e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007158:	4b03      	ldr	r3, [pc, #12]	@ (8007168 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 800715a:	0018      	movs	r0, r3
 800715c:	f006 fc84 	bl	800da68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8007160:	46c0      	nop			@ (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	46c0      	nop			@ (mov r8, r8)
 8007168:	20001dec 	.word	0x20001dec

0800716c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e00a      	b.n	8007194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800717e:	e000      	b.n	8007182 <_read+0x16>
 8007180:	bf00      	nop
 8007182:	0001      	movs	r1, r0
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	60ba      	str	r2, [r7, #8]
 800718a:	b2ca      	uxtb	r2, r1
 800718c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	3301      	adds	r3, #1
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	429a      	cmp	r2, r3
 800719a:	dbf0      	blt.n	800717e <_read+0x12>
	}

return len;
 800719c:	687b      	ldr	r3, [r7, #4]
}
 800719e:	0018      	movs	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b006      	add	sp, #24
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b086      	sub	sp, #24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	e009      	b.n	80071cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	60ba      	str	r2, [r7, #8]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	0018      	movs	r0, r3
 80071c2:	e000      	b.n	80071c6 <_write+0x20>
 80071c4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	3301      	adds	r3, #1
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	dbf1      	blt.n	80071b8 <_write+0x12>
	}
	return len;
 80071d4:	687b      	ldr	r3, [r7, #4]
}
 80071d6:	0018      	movs	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	b006      	add	sp, #24
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80071e8:	4b11      	ldr	r3, [pc, #68]	@ (8007230 <_sbrk+0x50>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <_sbrk+0x16>
		heap_end = &end;
 80071f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007230 <_sbrk+0x50>)
 80071f2:	4a10      	ldr	r2, [pc, #64]	@ (8007234 <_sbrk+0x54>)
 80071f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80071f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007230 <_sbrk+0x50>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80071fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <_sbrk+0x50>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	18d2      	adds	r2, r2, r3
 8007204:	466b      	mov	r3, sp
 8007206:	429a      	cmp	r2, r3
 8007208:	d907      	bls.n	800721a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800720a:	f008 f9e7 	bl	800f5dc <__errno>
 800720e:	0003      	movs	r3, r0
 8007210:	220c      	movs	r2, #12
 8007212:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007214:	2301      	movs	r3, #1
 8007216:	425b      	negs	r3, r3
 8007218:	e006      	b.n	8007228 <_sbrk+0x48>
	}

	heap_end += incr;
 800721a:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <_sbrk+0x50>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	18d2      	adds	r2, r2, r3
 8007222:	4b03      	ldr	r3, [pc, #12]	@ (8007230 <_sbrk+0x50>)
 8007224:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8007226:	68fb      	ldr	r3, [r7, #12]
}
 8007228:	0018      	movs	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	b004      	add	sp, #16
 800722e:	bd80      	pop	{r7, pc}
 8007230:	2000080c 	.word	0x2000080c
 8007234:	20001ff0 	.word	0x20001ff0

08007238 <_close>:

int _close(int file)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	return -1;
 8007240:	2301      	movs	r3, #1
 8007242:	425b      	negs	r3, r3
}
 8007244:	0018      	movs	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	b002      	add	sp, #8
 800724a:	bd80      	pop	{r7, pc}

0800724c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2280      	movs	r2, #128	@ 0x80
 800725a:	0192      	lsls	r2, r2, #6
 800725c:	605a      	str	r2, [r3, #4]
	return 0;
 800725e:	2300      	movs	r3, #0
}
 8007260:	0018      	movs	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}

08007268 <_isatty>:

int _isatty(int file)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	return 1;
 8007270:	2301      	movs	r3, #1
}
 8007272:	0018      	movs	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	b002      	add	sp, #8
 8007278:	bd80      	pop	{r7, pc}

0800727a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
	return 0;
 8007286:	2300      	movs	r3, #0
}
 8007288:	0018      	movs	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	b004      	add	sp, #16
 800728e:	bd80      	pop	{r7, pc}

08007290 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007294:	46c0      	nop			@ (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <MX_TIM3_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	@ 0x28
 80072a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072a2:	231c      	movs	r3, #28
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	0018      	movs	r0, r3
 80072a8:	230c      	movs	r3, #12
 80072aa:	001a      	movs	r2, r3
 80072ac:	2100      	movs	r1, #0
 80072ae:	f008 f92d 	bl	800f50c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072b2:	003b      	movs	r3, r7
 80072b4:	0018      	movs	r0, r3
 80072b6:	231c      	movs	r3, #28
 80072b8:	001a      	movs	r2, r3
 80072ba:	2100      	movs	r1, #0
 80072bc:	f008 f926 	bl	800f50c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80072c0:	4b29      	ldr	r3, [pc, #164]	@ (8007368 <MX_TIM3_Init+0xcc>)
 80072c2:	4a2a      	ldr	r2, [pc, #168]	@ (800736c <MX_TIM3_Init+0xd0>)
 80072c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 80072c6:	4b28      	ldr	r3, [pc, #160]	@ (8007368 <MX_TIM3_Init+0xcc>)
 80072c8:	2217      	movs	r2, #23
 80072ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072cc:	4b26      	ldr	r3, [pc, #152]	@ (8007368 <MX_TIM3_Init+0xcc>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80072d2:	4b25      	ldr	r3, [pc, #148]	@ (8007368 <MX_TIM3_Init+0xcc>)
 80072d4:	22c7      	movs	r2, #199	@ 0xc7
 80072d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072d8:	4b23      	ldr	r3, [pc, #140]	@ (8007368 <MX_TIM3_Init+0xcc>)
 80072da:	2200      	movs	r2, #0
 80072dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072de:	4b22      	ldr	r3, [pc, #136]	@ (8007368 <MX_TIM3_Init+0xcc>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80072e4:	4b20      	ldr	r3, [pc, #128]	@ (8007368 <MX_TIM3_Init+0xcc>)
 80072e6:	0018      	movs	r0, r3
 80072e8:	f005 fb46 	bl	800c978 <HAL_TIM_PWM_Init>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d001      	beq.n	80072f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80072f0:	f7ff fb78 	bl	80069e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072f4:	211c      	movs	r1, #28
 80072f6:	187b      	adds	r3, r7, r1
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072fc:	187b      	adds	r3, r7, r1
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007302:	187a      	adds	r2, r7, r1
 8007304:	4b18      	ldr	r3, [pc, #96]	@ (8007368 <MX_TIM3_Init+0xcc>)
 8007306:	0011      	movs	r1, r2
 8007308:	0018      	movs	r0, r3
 800730a:	f006 fa2d 	bl	800d768 <HAL_TIMEx_MasterConfigSynchronization>
 800730e:	1e03      	subs	r3, r0, #0
 8007310:	d001      	beq.n	8007316 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8007312:	f7ff fb67 	bl	80069e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007316:	003b      	movs	r3, r7
 8007318:	2260      	movs	r2, #96	@ 0x60
 800731a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800731c:	003b      	movs	r3, r7
 800731e:	2200      	movs	r2, #0
 8007320:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007322:	003b      	movs	r3, r7
 8007324:	2200      	movs	r2, #0
 8007326:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007328:	003b      	movs	r3, r7
 800732a:	2200      	movs	r2, #0
 800732c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800732e:	0039      	movs	r1, r7
 8007330:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <MX_TIM3_Init+0xcc>)
 8007332:	2200      	movs	r2, #0
 8007334:	0018      	movs	r0, r3
 8007336:	f005 fd6f 	bl	800ce18 <HAL_TIM_PWM_ConfigChannel>
 800733a:	1e03      	subs	r3, r0, #0
 800733c:	d001      	beq.n	8007342 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800733e:	f7ff fb51 	bl	80069e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007342:	0039      	movs	r1, r7
 8007344:	4b08      	ldr	r3, [pc, #32]	@ (8007368 <MX_TIM3_Init+0xcc>)
 8007346:	2208      	movs	r2, #8
 8007348:	0018      	movs	r0, r3
 800734a:	f005 fd65 	bl	800ce18 <HAL_TIM_PWM_ConfigChannel>
 800734e:	1e03      	subs	r3, r0, #0
 8007350:	d001      	beq.n	8007356 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8007352:	f7ff fb47 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007356:	4b04      	ldr	r3, [pc, #16]	@ (8007368 <MX_TIM3_Init+0xcc>)
 8007358:	0018      	movs	r0, r3
 800735a:	f000 f96b 	bl	8007634 <HAL_TIM_MspPostInit>

}
 800735e:	46c0      	nop			@ (mov r8, r8)
 8007360:	46bd      	mov	sp, r7
 8007362:	b00a      	add	sp, #40	@ 0x28
 8007364:	bd80      	pop	{r7, pc}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	20000810 	.word	0x20000810
 800736c:	40000400 	.word	0x40000400

08007370 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	0018      	movs	r0, r3
 800737a:	230c      	movs	r3, #12
 800737c:	001a      	movs	r2, r3
 800737e:	2100      	movs	r1, #0
 8007380:	f008 f8c4 	bl	800f50c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007384:	4b15      	ldr	r3, [pc, #84]	@ (80073dc <MX_TIM6_Init+0x6c>)
 8007386:	4a16      	ldr	r2, [pc, #88]	@ (80073e0 <MX_TIM6_Init+0x70>)
 8007388:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 95;
 800738a:	4b14      	ldr	r3, [pc, #80]	@ (80073dc <MX_TIM6_Init+0x6c>)
 800738c:	225f      	movs	r2, #95	@ 0x5f
 800738e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007390:	4b12      	ldr	r3, [pc, #72]	@ (80073dc <MX_TIM6_Init+0x6c>)
 8007392:	2200      	movs	r2, #0
 8007394:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 60000;
 8007396:	4b11      	ldr	r3, [pc, #68]	@ (80073dc <MX_TIM6_Init+0x6c>)
 8007398:	4a12      	ldr	r2, [pc, #72]	@ (80073e4 <MX_TIM6_Init+0x74>)
 800739a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800739c:	4b0f      	ldr	r3, [pc, #60]	@ (80073dc <MX_TIM6_Init+0x6c>)
 800739e:	2200      	movs	r2, #0
 80073a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80073a2:	4b0e      	ldr	r3, [pc, #56]	@ (80073dc <MX_TIM6_Init+0x6c>)
 80073a4:	0018      	movs	r0, r3
 80073a6:	f005 fa2d 	bl	800c804 <HAL_TIM_Base_Init>
 80073aa:	1e03      	subs	r3, r0, #0
 80073ac:	d001      	beq.n	80073b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80073ae:	f7ff fb19 	bl	80069e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073b2:	1d3b      	adds	r3, r7, #4
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073b8:	1d3b      	adds	r3, r7, #4
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80073be:	1d3a      	adds	r2, r7, #4
 80073c0:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <MX_TIM6_Init+0x6c>)
 80073c2:	0011      	movs	r1, r2
 80073c4:	0018      	movs	r0, r3
 80073c6:	f006 f9cf 	bl	800d768 <HAL_TIMEx_MasterConfigSynchronization>
 80073ca:	1e03      	subs	r3, r0, #0
 80073cc:	d001      	beq.n	80073d2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80073ce:	f7ff fb09 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b004      	add	sp, #16
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			@ (mov r8, r8)
 80073dc:	2000085c 	.word	0x2000085c
 80073e0:	40001000 	.word	0x40001000
 80073e4:	0000ea60 	.word	0x0000ea60

080073e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80073ec:	4b0f      	ldr	r3, [pc, #60]	@ (800742c <MX_TIM16_Init+0x44>)
 80073ee:	4a10      	ldr	r2, [pc, #64]	@ (8007430 <MX_TIM16_Init+0x48>)
 80073f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47;
 80073f2:	4b0e      	ldr	r3, [pc, #56]	@ (800742c <MX_TIM16_Init+0x44>)
 80073f4:	222f      	movs	r2, #47	@ 0x2f
 80073f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073f8:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <MX_TIM16_Init+0x44>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 80073fe:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <MX_TIM16_Init+0x44>)
 8007400:	4a0c      	ldr	r2, [pc, #48]	@ (8007434 <MX_TIM16_Init+0x4c>)
 8007402:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007404:	4b09      	ldr	r3, [pc, #36]	@ (800742c <MX_TIM16_Init+0x44>)
 8007406:	2200      	movs	r2, #0
 8007408:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800740a:	4b08      	ldr	r3, [pc, #32]	@ (800742c <MX_TIM16_Init+0x44>)
 800740c:	2200      	movs	r2, #0
 800740e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <MX_TIM16_Init+0x44>)
 8007412:	2200      	movs	r2, #0
 8007414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007416:	4b05      	ldr	r3, [pc, #20]	@ (800742c <MX_TIM16_Init+0x44>)
 8007418:	0018      	movs	r0, r3
 800741a:	f005 f9f3 	bl	800c804 <HAL_TIM_Base_Init>
 800741e:	1e03      	subs	r3, r0, #0
 8007420:	d001      	beq.n	8007426 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8007422:	f7ff fadf 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200008a8 	.word	0x200008a8
 8007430:	40014400 	.word	0x40014400
 8007434:	00001387 	.word	0x00001387

08007438 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b094      	sub	sp, #80	@ 0x50
 800743c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800743e:	2334      	movs	r3, #52	@ 0x34
 8007440:	18fb      	adds	r3, r7, r3
 8007442:	0018      	movs	r0, r3
 8007444:	231c      	movs	r3, #28
 8007446:	001a      	movs	r2, r3
 8007448:	2100      	movs	r1, #0
 800744a:	f008 f85f 	bl	800f50c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800744e:	003b      	movs	r3, r7
 8007450:	0018      	movs	r0, r3
 8007452:	2334      	movs	r3, #52	@ 0x34
 8007454:	001a      	movs	r2, r3
 8007456:	2100      	movs	r1, #0
 8007458:	f008 f858 	bl	800f50c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800745c:	4b37      	ldr	r3, [pc, #220]	@ (800753c <MX_TIM17_Init+0x104>)
 800745e:	4a38      	ldr	r2, [pc, #224]	@ (8007540 <MX_TIM17_Init+0x108>)
 8007460:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 30;
 8007462:	4b36      	ldr	r3, [pc, #216]	@ (800753c <MX_TIM17_Init+0x104>)
 8007464:	221e      	movs	r2, #30
 8007466:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007468:	4b34      	ldr	r3, [pc, #208]	@ (800753c <MX_TIM17_Init+0x104>)
 800746a:	2200      	movs	r2, #0
 800746c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 800746e:	4b33      	ldr	r3, [pc, #204]	@ (800753c <MX_TIM17_Init+0x104>)
 8007470:	2264      	movs	r2, #100	@ 0x64
 8007472:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007474:	4b31      	ldr	r3, [pc, #196]	@ (800753c <MX_TIM17_Init+0x104>)
 8007476:	2200      	movs	r2, #0
 8007478:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800747a:	4b30      	ldr	r3, [pc, #192]	@ (800753c <MX_TIM17_Init+0x104>)
 800747c:	2200      	movs	r2, #0
 800747e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007480:	4b2e      	ldr	r3, [pc, #184]	@ (800753c <MX_TIM17_Init+0x104>)
 8007482:	2200      	movs	r2, #0
 8007484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007486:	4b2d      	ldr	r3, [pc, #180]	@ (800753c <MX_TIM17_Init+0x104>)
 8007488:	0018      	movs	r0, r3
 800748a:	f005 f9bb 	bl	800c804 <HAL_TIM_Base_Init>
 800748e:	1e03      	subs	r3, r0, #0
 8007490:	d001      	beq.n	8007496 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8007492:	f7ff faa7 	bl	80069e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8007496:	4b29      	ldr	r3, [pc, #164]	@ (800753c <MX_TIM17_Init+0x104>)
 8007498:	0018      	movs	r0, r3
 800749a:	f005 fa6d 	bl	800c978 <HAL_TIM_PWM_Init>
 800749e:	1e03      	subs	r3, r0, #0
 80074a0:	d001      	beq.n	80074a6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80074a2:	f7ff fa9f 	bl	80069e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074a6:	2134      	movs	r1, #52	@ 0x34
 80074a8:	187b      	adds	r3, r7, r1
 80074aa:	2260      	movs	r2, #96	@ 0x60
 80074ac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80074ae:	187b      	adds	r3, r7, r1
 80074b0:	2200      	movs	r2, #0
 80074b2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074b4:	187b      	adds	r3, r7, r1
 80074b6:	2200      	movs	r2, #0
 80074b8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80074ba:	187b      	adds	r3, r7, r1
 80074bc:	2200      	movs	r2, #0
 80074be:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074c0:	187b      	adds	r3, r7, r1
 80074c2:	2200      	movs	r2, #0
 80074c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80074c6:	187b      	adds	r3, r7, r1
 80074c8:	2200      	movs	r2, #0
 80074ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80074cc:	187b      	adds	r3, r7, r1
 80074ce:	2200      	movs	r2, #0
 80074d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074d2:	1879      	adds	r1, r7, r1
 80074d4:	4b19      	ldr	r3, [pc, #100]	@ (800753c <MX_TIM17_Init+0x104>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	0018      	movs	r0, r3
 80074da:	f005 fc9d 	bl	800ce18 <HAL_TIM_PWM_ConfigChannel>
 80074de:	1e03      	subs	r3, r0, #0
 80074e0:	d001      	beq.n	80074e6 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80074e2:	f7ff fa7f 	bl	80069e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80074e6:	003b      	movs	r3, r7
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80074ec:	003b      	movs	r3, r7
 80074ee:	2200      	movs	r2, #0
 80074f0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80074f2:	003b      	movs	r3, r7
 80074f4:	2200      	movs	r2, #0
 80074f6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80074f8:	003b      	movs	r3, r7
 80074fa:	2200      	movs	r2, #0
 80074fc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80074fe:	003b      	movs	r3, r7
 8007500:	2200      	movs	r2, #0
 8007502:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007504:	003b      	movs	r3, r7
 8007506:	2280      	movs	r2, #128	@ 0x80
 8007508:	0192      	lsls	r2, r2, #6
 800750a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800750c:	003b      	movs	r3, r7
 800750e:	2200      	movs	r2, #0
 8007510:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007512:	003b      	movs	r3, r7
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8007518:	003a      	movs	r2, r7
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <MX_TIM17_Init+0x104>)
 800751c:	0011      	movs	r1, r2
 800751e:	0018      	movs	r0, r3
 8007520:	f006 f998 	bl	800d854 <HAL_TIMEx_ConfigBreakDeadTime>
 8007524:	1e03      	subs	r3, r0, #0
 8007526:	d001      	beq.n	800752c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8007528:	f7ff fa5c 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800752c:	4b03      	ldr	r3, [pc, #12]	@ (800753c <MX_TIM17_Init+0x104>)
 800752e:	0018      	movs	r0, r3
 8007530:	f000 f880 	bl	8007634 <HAL_TIM_MspPostInit>

}
 8007534:	46c0      	nop			@ (mov r8, r8)
 8007536:	46bd      	mov	sp, r7
 8007538:	b014      	add	sp, #80	@ 0x50
 800753a:	bd80      	pop	{r7, pc}
 800753c:	200008f4 	.word	0x200008f4
 8007540:	40014800 	.word	0x40014800

08007544 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a09      	ldr	r2, [pc, #36]	@ (8007578 <HAL_TIM_PWM_MspInit+0x34>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d10b      	bne.n	800756e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007556:	4b09      	ldr	r3, [pc, #36]	@ (800757c <HAL_TIM_PWM_MspInit+0x38>)
 8007558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800755a:	4b08      	ldr	r3, [pc, #32]	@ (800757c <HAL_TIM_PWM_MspInit+0x38>)
 800755c:	2102      	movs	r1, #2
 800755e:	430a      	orrs	r2, r1
 8007560:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007562:	4b06      	ldr	r3, [pc, #24]	@ (800757c <HAL_TIM_PWM_MspInit+0x38>)
 8007564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007566:	2202      	movs	r2, #2
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800756e:	46c0      	nop			@ (mov r8, r8)
 8007570:	46bd      	mov	sp, r7
 8007572:	b004      	add	sp, #16
 8007574:	bd80      	pop	{r7, pc}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	40000400 	.word	0x40000400
 800757c:	40021000 	.word	0x40021000

08007580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a25      	ldr	r2, [pc, #148]	@ (8007624 <HAL_TIM_Base_MspInit+0xa4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d114      	bne.n	80075bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007592:	4b25      	ldr	r3, [pc, #148]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 8007594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007596:	4b24      	ldr	r3, [pc, #144]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 8007598:	2110      	movs	r1, #16
 800759a:	430a      	orrs	r2, r1
 800759c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800759e:	4b22      	ldr	r3, [pc, #136]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 80075a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a2:	2210      	movs	r2, #16
 80075a4:	4013      	ands	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80075aa:	2200      	movs	r2, #0
 80075ac:	2100      	movs	r1, #0
 80075ae:	2011      	movs	r0, #17
 80075b0:	f002 f9d0 	bl	8009954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80075b4:	2011      	movs	r0, #17
 80075b6:	f002 f9e2 	bl	800997e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80075ba:	e02e      	b.n	800761a <HAL_TIM_Base_MspInit+0x9a>
  else if(tim_baseHandle->Instance==TIM16)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1a      	ldr	r2, [pc, #104]	@ (800762c <HAL_TIM_Base_MspInit+0xac>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d116      	bne.n	80075f4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80075c6:	4b18      	ldr	r3, [pc, #96]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 80075c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ca:	4b17      	ldr	r3, [pc, #92]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 80075cc:	2180      	movs	r1, #128	@ 0x80
 80075ce:	0289      	lsls	r1, r1, #10
 80075d0:	430a      	orrs	r2, r1
 80075d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80075d4:	4b14      	ldr	r3, [pc, #80]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 80075d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075d8:	2380      	movs	r3, #128	@ 0x80
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	4013      	ands	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80075e2:	2200      	movs	r2, #0
 80075e4:	2100      	movs	r1, #0
 80075e6:	2015      	movs	r0, #21
 80075e8:	f002 f9b4 	bl	8009954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80075ec:	2015      	movs	r0, #21
 80075ee:	f002 f9c6 	bl	800997e <HAL_NVIC_EnableIRQ>
}
 80075f2:	e012      	b.n	800761a <HAL_TIM_Base_MspInit+0x9a>
  else if(tim_baseHandle->Instance==TIM17)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007630 <HAL_TIM_Base_MspInit+0xb0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d10d      	bne.n	800761a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80075fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 8007600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007602:	4b09      	ldr	r3, [pc, #36]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 8007604:	2180      	movs	r1, #128	@ 0x80
 8007606:	02c9      	lsls	r1, r1, #11
 8007608:	430a      	orrs	r2, r1
 800760a:	641a      	str	r2, [r3, #64]	@ 0x40
 800760c:	4b06      	ldr	r3, [pc, #24]	@ (8007628 <HAL_TIM_Base_MspInit+0xa8>)
 800760e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007610:	2380      	movs	r3, #128	@ 0x80
 8007612:	02db      	lsls	r3, r3, #11
 8007614:	4013      	ands	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
}
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	46bd      	mov	sp, r7
 800761e:	b006      	add	sp, #24
 8007620:	bd80      	pop	{r7, pc}
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	40001000 	.word	0x40001000
 8007628:	40021000 	.word	0x40021000
 800762c:	40014400 	.word	0x40014400
 8007630:	40014800 	.word	0x40014800

08007634 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b08b      	sub	sp, #44	@ 0x2c
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800763c:	2414      	movs	r4, #20
 800763e:	193b      	adds	r3, r7, r4
 8007640:	0018      	movs	r0, r3
 8007642:	2314      	movs	r3, #20
 8007644:	001a      	movs	r2, r3
 8007646:	2100      	movs	r1, #0
 8007648:	f007 ff60 	bl	800f50c <memset>
  if(timHandle->Instance==TIM3)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a29      	ldr	r2, [pc, #164]	@ (80076f8 <HAL_TIM_MspPostInit+0xc4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d123      	bne.n	800769e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007656:	4b29      	ldr	r3, [pc, #164]	@ (80076fc <HAL_TIM_MspPostInit+0xc8>)
 8007658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800765a:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <HAL_TIM_MspPostInit+0xc8>)
 800765c:	2104      	movs	r1, #4
 800765e:	430a      	orrs	r2, r1
 8007660:	635a      	str	r2, [r3, #52]	@ 0x34
 8007662:	4b26      	ldr	r3, [pc, #152]	@ (80076fc <HAL_TIM_MspPostInit+0xc8>)
 8007664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007666:	2204      	movs	r2, #4
 8007668:	4013      	ands	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800766e:	193b      	adds	r3, r7, r4
 8007670:	22a0      	movs	r2, #160	@ 0xa0
 8007672:	0052      	lsls	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007676:	0021      	movs	r1, r4
 8007678:	187b      	adds	r3, r7, r1
 800767a:	2202      	movs	r2, #2
 800767c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800767e:	187b      	adds	r3, r7, r1
 8007680:	2200      	movs	r2, #0
 8007682:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007684:	187b      	adds	r3, r7, r1
 8007686:	2200      	movs	r2, #0
 8007688:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800768a:	187b      	adds	r3, r7, r1
 800768c:	2201      	movs	r2, #1
 800768e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007690:	187b      	adds	r3, r7, r1
 8007692:	4a1b      	ldr	r2, [pc, #108]	@ (8007700 <HAL_TIM_MspPostInit+0xcc>)
 8007694:	0019      	movs	r1, r3
 8007696:	0010      	movs	r0, r2
 8007698:	f002 fdfc 	bl	800a294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800769c:	e027      	b.n	80076ee <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM17)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a18      	ldr	r2, [pc, #96]	@ (8007704 <HAL_TIM_MspPostInit+0xd0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d122      	bne.n	80076ee <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076a8:	4b14      	ldr	r3, [pc, #80]	@ (80076fc <HAL_TIM_MspPostInit+0xc8>)
 80076aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ac:	4b13      	ldr	r3, [pc, #76]	@ (80076fc <HAL_TIM_MspPostInit+0xc8>)
 80076ae:	2101      	movs	r1, #1
 80076b0:	430a      	orrs	r2, r1
 80076b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80076b4:	4b11      	ldr	r3, [pc, #68]	@ (80076fc <HAL_TIM_MspPostInit+0xc8>)
 80076b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b8:	2201      	movs	r2, #1
 80076ba:	4013      	ands	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_CONTRAST_Pin;
 80076c0:	2114      	movs	r1, #20
 80076c2:	187b      	adds	r3, r7, r1
 80076c4:	2280      	movs	r2, #128	@ 0x80
 80076c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c8:	187b      	adds	r3, r7, r1
 80076ca:	2202      	movs	r2, #2
 80076cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ce:	187b      	adds	r3, r7, r1
 80076d0:	2200      	movs	r2, #0
 80076d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d4:	187b      	adds	r3, r7, r1
 80076d6:	2200      	movs	r2, #0
 80076d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80076da:	187b      	adds	r3, r7, r1
 80076dc:	2205      	movs	r2, #5
 80076de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_CONTRAST_GPIO_Port, &GPIO_InitStruct);
 80076e0:	187a      	adds	r2, r7, r1
 80076e2:	23a0      	movs	r3, #160	@ 0xa0
 80076e4:	05db      	lsls	r3, r3, #23
 80076e6:	0011      	movs	r1, r2
 80076e8:	0018      	movs	r0, r3
 80076ea:	f002 fdd3 	bl	800a294 <HAL_GPIO_Init>
}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	46bd      	mov	sp, r7
 80076f2:	b00b      	add	sp, #44	@ 0x2c
 80076f4:	bd90      	pop	{r4, r7, pc}
 80076f6:	46c0      	nop			@ (mov r8, r8)
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40021000 	.word	0x40021000
 8007700:	50000800 	.word	0x50000800
 8007704:	40014800 	.word	0x40014800

08007708 <set_x_pwm>:

/* USER CODE BEGIN 1 */


void set_x_pwm(int16_t pwm)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	0002      	movs	r2, r0
 8007710:	1dbb      	adds	r3, r7, #6
 8007712:	801a      	strh	r2, [r3, #0]
	// incoming -100 to +100
	// different direction for H-Bridges
	if (isPCB)
 8007714:	23a0      	movs	r3, #160	@ 0xa0
 8007716:	05db      	lsls	r3, r3, #23
 8007718:	2140      	movs	r1, #64	@ 0x40
 800771a:	0018      	movs	r0, r3
 800771c:	f002 ff26 	bl	800a56c <HAL_GPIO_ReadPin>
 8007720:	1e03      	subs	r3, r0, #0
 8007722:	d005      	beq.n	8007730 <set_x_pwm+0x28>
		pwm = -pwm;
 8007724:	1dbb      	adds	r3, r7, #6
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	425b      	negs	r3, r3
 800772a:	b29a      	uxth	r2, r3
 800772c:	1dbb      	adds	r3, r7, #6
 800772e:	801a      	strh	r2, [r3, #0]

	pwm += 100;
 8007730:	1dbb      	adds	r3, r7, #6
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	3364      	adds	r3, #100	@ 0x64
 8007736:	b29a      	uxth	r2, r3
 8007738:	1dbb      	adds	r3, r7, #6
 800773a:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 800773c:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <set_x_pwm+0x48>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	1dba      	adds	r2, r7, #6
 8007742:	2100      	movs	r1, #0
 8007744:	5e52      	ldrsh	r2, [r2, r1]
 8007746:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007748:	46c0      	nop			@ (mov r8, r8)
 800774a:	46bd      	mov	sp, r7
 800774c:	b002      	add	sp, #8
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000810 	.word	0x20000810

08007754 <set_y_pwm>:




void set_y_pwm(int16_t pwm)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	0002      	movs	r2, r0
 800775c:	1dbb      	adds	r3, r7, #6
 800775e:	801a      	strh	r2, [r3, #0]
	// different direction for H-Bridges
	if (isPCB)
 8007760:	23a0      	movs	r3, #160	@ 0xa0
 8007762:	05db      	lsls	r3, r3, #23
 8007764:	2140      	movs	r1, #64	@ 0x40
 8007766:	0018      	movs	r0, r3
 8007768:	f002 ff00 	bl	800a56c <HAL_GPIO_ReadPin>
 800776c:	1e03      	subs	r3, r0, #0
 800776e:	d005      	beq.n	800777c <set_y_pwm+0x28>
		pwm = -pwm;
 8007770:	1dbb      	adds	r3, r7, #6
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	425b      	negs	r3, r3
 8007776:	b29a      	uxth	r2, r3
 8007778:	1dbb      	adds	r3, r7, #6
 800777a:	801a      	strh	r2, [r3, #0]

	pwm += 100;
 800777c:	1dbb      	adds	r3, r7, #6
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	3364      	adds	r3, #100	@ 0x64
 8007782:	b29a      	uxth	r2, r3
 8007784:	1dbb      	adds	r3, r7, #6
 8007786:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8007788:	4b04      	ldr	r3, [pc, #16]	@ (800779c <set_y_pwm+0x48>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	1dba      	adds	r2, r7, #6
 800778e:	2100      	movs	r1, #0
 8007790:	5e52      	ldrsh	r2, [r2, r1]
 8007792:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007794:	46c0      	nop			@ (mov r8, r8)
 8007796:	46bd      	mov	sp, r7
 8007798:	b002      	add	sp, #8
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000810 	.word	0x20000810

080077a0 <set_contrast>:

void set_contrast(uint16_t pwm)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	0002      	movs	r2, r0
 80077a8:	1dbb      	adds	r3, r7, #6
 80077aa:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, pwm);
 80077ac:	4b04      	ldr	r3, [pc, #16]	@ (80077c0 <set_contrast+0x20>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	1dba      	adds	r2, r7, #6
 80077b2:	8812      	ldrh	r2, [r2, #0]
 80077b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80077b6:	46c0      	nop			@ (mov r8, r8)
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b002      	add	sp, #8
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	200008f4 	.word	0x200008f4

080077c4 <new_pwm_freq>:

void new_pwm_freq(uint32_t pwm)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	htim3.Instance = TIM3;
 80077cc:	4b11      	ldr	r3, [pc, #68]	@ (8007814 <new_pwm_freq+0x50>)
 80077ce:	4a12      	ldr	r2, [pc, #72]	@ (8007818 <new_pwm_freq+0x54>)
 80077d0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = APB_CLK / pwm / 200;
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4811      	ldr	r0, [pc, #68]	@ (800781c <new_pwm_freq+0x58>)
 80077d6:	f7fd fda1 	bl	800531c <__udivsi3>
 80077da:	0003      	movs	r3, r0
 80077dc:	001a      	movs	r2, r3
 80077de:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <new_pwm_freq+0x50>)
 80077e0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007814 <new_pwm_freq+0x50>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 199;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007814 <new_pwm_freq+0x50>)
 80077ea:	22c7      	movs	r2, #199	@ 0xc7
 80077ec:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077ee:	4b09      	ldr	r3, [pc, #36]	@ (8007814 <new_pwm_freq+0x50>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077f4:	4b07      	ldr	r3, [pc, #28]	@ (8007814 <new_pwm_freq+0x50>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80077fa:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <new_pwm_freq+0x50>)
 80077fc:	0018      	movs	r0, r3
 80077fe:	f005 f8bb 	bl	800c978 <HAL_TIM_PWM_Init>
 8007802:	1e03      	subs	r3, r0, #0
 8007804:	d001      	beq.n	800780a <new_pwm_freq+0x46>
	{
		Error_Handler();
 8007806:	f7ff f8ed 	bl	80069e4 <Error_Handler>
	}

}
 800780a:	46c0      	nop			@ (mov r8, r8)
 800780c:	46bd      	mov	sp, r7
 800780e:	b002      	add	sp, #8
 8007810:	bd80      	pop	{r7, pc}
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	20000810 	.word	0x20000810
 8007818:	40000400 	.word	0x40000400
 800781c:	0003a980 	.word	0x0003a980

08007820 <timer_open>:
 * \param -.
 *
 * \return TRUE if successful, FALSE on error.
 */
bool timer_open(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  // Clear the timer allocation table
  memset(timer_alloc_table, 0, MAX_TIMERS / 8);
 8007824:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <timer_open+0x30>)
 8007826:	2204      	movs	r2, #4
 8007828:	2100      	movs	r1, #0
 800782a:	0018      	movs	r0, r3
 800782c:	f007 fe6e 	bl	800f50c <memset>

  // Clear the timer active table
  memset(timer_active_table, 0, MAX_TIMERS / 8);
 8007830:	4b08      	ldr	r3, [pc, #32]	@ (8007854 <timer_open+0x34>)
 8007832:	2204      	movs	r2, #4
 8007834:	2100      	movs	r1, #0
 8007836:	0018      	movs	r0, r3
 8007838:	f007 fe68 	bl	800f50c <memset>

  // Clear the timer function pointers
  memset(timer_func, 0, sizeof(timer_func));
 800783c:	4b06      	ldr	r3, [pc, #24]	@ (8007858 <timer_open+0x38>)
 800783e:	2280      	movs	r2, #128	@ 0x80
 8007840:	2100      	movs	r1, #0
 8007842:	0018      	movs	r0, r3
 8007844:	f007 fe62 	bl	800f50c <memset>

  return 1;
 8007848:	2301      	movs	r3, #1
}
 800784a:	0018      	movs	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	200009c0 	.word	0x200009c0
 8007854:	200009c4 	.word	0x200009c4
 8007858:	200009c8 	.word	0x200009c8

0800785c <timer_callback>:
 * \param -.
 *
 * \return -.
 */
void timer_callback(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
  uint8_t timerid;

  // Handle the timers
  for (timerid = 0; timerid < MAX_TIMERS; timerid++)
 8007862:	1dfb      	adds	r3, r7, #7
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e039      	b.n	80078de <timer_callback+0x82>
  {
    if (timer_active_table[timerid / 8] & (1 << (timerid % 8)))
 800786a:	1dfb      	adds	r3, r7, #7
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	08db      	lsrs	r3, r3, #3
 8007870:	b2db      	uxtb	r3, r3
 8007872:	001a      	movs	r2, r3
 8007874:	4b1e      	ldr	r3, [pc, #120]	@ (80078f0 <timer_callback+0x94>)
 8007876:	5c9b      	ldrb	r3, [r3, r2]
 8007878:	0019      	movs	r1, r3
 800787a:	1dfb      	adds	r3, r7, #7
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2207      	movs	r2, #7
 8007880:	4013      	ands	r3, r2
 8007882:	4119      	asrs	r1, r3
 8007884:	000b      	movs	r3, r1
 8007886:	2201      	movs	r2, #1
 8007888:	4013      	ands	r3, r2
 800788a:	d023      	beq.n	80078d4 <timer_callback+0x78>
    {
      if (timer_pool[timerid])
 800788c:	1dfb      	adds	r3, r7, #7
 800788e:	781a      	ldrb	r2, [r3, #0]
 8007890:	4b18      	ldr	r3, [pc, #96]	@ (80078f4 <timer_callback+0x98>)
 8007892:	0092      	lsls	r2, r2, #2
 8007894:	58d3      	ldr	r3, [r2, r3]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <timer_callback+0x50>
        timer_pool[timerid]--;
 800789a:	1dfb      	adds	r3, r7, #7
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4a15      	ldr	r2, [pc, #84]	@ (80078f4 <timer_callback+0x98>)
 80078a0:	0099      	lsls	r1, r3, #2
 80078a2:	588a      	ldr	r2, [r1, r2]
 80078a4:	1e51      	subs	r1, r2, #1
 80078a6:	4a13      	ldr	r2, [pc, #76]	@ (80078f4 <timer_callback+0x98>)
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	5099      	str	r1, [r3, r2]
      if ((timer_pool[timerid] == 1) && timer_func[timerid])
 80078ac:	1dfb      	adds	r3, r7, #7
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <timer_callback+0x98>)
 80078b2:	0092      	lsls	r2, r2, #2
 80078b4:	58d3      	ldr	r3, [r2, r3]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10c      	bne.n	80078d4 <timer_callback+0x78>
 80078ba:	1dfb      	adds	r3, r7, #7
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <timer_callback+0x9c>)
 80078c0:	0092      	lsls	r2, r2, #2
 80078c2:	58d3      	ldr	r3, [r2, r3]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <timer_callback+0x78>
        timer_func[timerid]();
 80078c8:	1dfb      	adds	r3, r7, #7
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	4b0a      	ldr	r3, [pc, #40]	@ (80078f8 <timer_callback+0x9c>)
 80078ce:	0092      	lsls	r2, r2, #2
 80078d0:	58d3      	ldr	r3, [r2, r3]
 80078d2:	4798      	blx	r3
  for (timerid = 0; timerid < MAX_TIMERS; timerid++)
 80078d4:	1dfb      	adds	r3, r7, #7
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	1dfb      	adds	r3, r7, #7
 80078da:	3201      	adds	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	1dfb      	adds	r3, r7, #7
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b1f      	cmp	r3, #31
 80078e4:	d9c1      	bls.n	800786a <timer_callback+0xe>
    }
  }
}
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	46c0      	nop			@ (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b002      	add	sp, #8
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	200009c4 	.word	0x200009c4
 80078f4:	20000940 	.word	0x20000940
 80078f8:	200009c8 	.word	0x200009c8

080078fc <timer_get>:
 * \param -.
 *
 * \return A timer id if successful, NO_TIMER on error.
 */
uint8_t timer_get(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
  uint8_t i, j, bit;
  uint8_t timerid = NO_TIMER;
 8007902:	1d3b      	adds	r3, r7, #4
 8007904:	22fa      	movs	r2, #250	@ 0xfa
 8007906:	701a      	strb	r2, [r3, #0]

  // Skip used bytes in the allocation table
  for (i = 0; i < (MAX_TIMERS / 8) && (timer_alloc_table[i] == 0xFF); i++);
 8007908:	1dfb      	adds	r3, r7, #7
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	e004      	b.n	800791a <timer_get+0x1e>
 8007910:	1dfb      	adds	r3, r7, #7
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	3201      	adds	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	1dfb      	adds	r3, r7, #7
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d805      	bhi.n	800792e <timer_get+0x32>
 8007922:	1dfb      	adds	r3, r7, #7
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4a30      	ldr	r2, [pc, #192]	@ (80079e8 <timer_get+0xec>)
 8007928:	5cd3      	ldrb	r3, [r2, r3]
 800792a:	2bff      	cmp	r3, #255	@ 0xff
 800792c:	d0f0      	beq.n	8007910 <timer_get+0x14>

  if (i < (MAX_TIMERS / 8))
 800792e:	1dfb      	adds	r3, r7, #7
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b03      	cmp	r3, #3
 8007934:	d83f      	bhi.n	80079b6 <timer_get+0xba>
  {
    // Skip used bits in the allocation table
    for (j = 0, bit = 1; j < 8 && (timer_alloc_table[i] & bit); j++, bit <<= 1);
 8007936:	1dbb      	adds	r3, r7, #6
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	1d7b      	adds	r3, r7, #5
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e009      	b.n	8007958 <timer_get+0x5c>
 8007944:	1dbb      	adds	r3, r7, #6
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	1dbb      	adds	r3, r7, #6
 800794a:	3201      	adds	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	1d7a      	adds	r2, r7, #5
 8007950:	1d7b      	adds	r3, r7, #5
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	18db      	adds	r3, r3, r3
 8007956:	7013      	strb	r3, [r2, #0]
 8007958:	1dbb      	adds	r3, r7, #6
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b07      	cmp	r3, #7
 800795e:	d809      	bhi.n	8007974 <timer_get+0x78>
 8007960:	1dfb      	adds	r3, r7, #7
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	4a20      	ldr	r2, [pc, #128]	@ (80079e8 <timer_get+0xec>)
 8007966:	5cd3      	ldrb	r3, [r2, r3]
 8007968:	1d7a      	adds	r2, r7, #5
 800796a:	7812      	ldrb	r2, [r2, #0]
 800796c:	4013      	ands	r3, r2
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e7      	bne.n	8007944 <timer_get+0x48>

    // Calculate the timer id
    timerid = (i * 8) + j;
 8007974:	1dfb      	adds	r3, r7, #7
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	b2d9      	uxtb	r1, r3
 800797c:	1d3b      	adds	r3, r7, #4
 800797e:	1dba      	adds	r2, r7, #6
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	188a      	adds	r2, r1, r2
 8007984:	701a      	strb	r2, [r3, #0]

    // Clear the timer value
    timer_pool[timerid] = 0;
 8007986:	1d3b      	adds	r3, r7, #4
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	4b18      	ldr	r3, [pc, #96]	@ (80079ec <timer_get+0xf0>)
 800798c:	0092      	lsls	r2, r2, #2
 800798e:	2100      	movs	r1, #0
 8007990:	50d1      	str	r1, [r2, r3]

    // Clear the timer callback function pointer
    timer_func[timerid] = 0;
 8007992:	1d3b      	adds	r3, r7, #4
 8007994:	781a      	ldrb	r2, [r3, #0]
 8007996:	4b16      	ldr	r3, [pc, #88]	@ (80079f0 <timer_get+0xf4>)
 8007998:	0092      	lsls	r2, r2, #2
 800799a:	2100      	movs	r1, #0
 800799c:	50d1      	str	r1, [r2, r3]

    // Mark the timer as used in the allocation table
    timer_alloc_table[i] |= bit;
 800799e:	1dfb      	adds	r3, r7, #7
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	4a11      	ldr	r2, [pc, #68]	@ (80079e8 <timer_get+0xec>)
 80079a4:	5cd1      	ldrb	r1, [r2, r3]
 80079a6:	1dfb      	adds	r3, r7, #7
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	1d7a      	adds	r2, r7, #5
 80079ac:	7812      	ldrb	r2, [r2, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	b2d1      	uxtb	r1, r2
 80079b2:	4a0d      	ldr	r2, [pc, #52]	@ (80079e8 <timer_get+0xec>)
 80079b4:	54d1      	strb	r1, [r2, r3]
  }

  if (timerid == NO_TIMER)
 80079b6:	1d3b      	adds	r3, r7, #4
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2bfa      	cmp	r3, #250	@ 0xfa
 80079bc:	d104      	bne.n	80079c8 <timer_get+0xcc>
	  _Error_Handler(__FILE__,__LINE__);
 80079be:	4b0d      	ldr	r3, [pc, #52]	@ (80079f4 <timer_get+0xf8>)
 80079c0:	217d      	movs	r1, #125	@ 0x7d
 80079c2:	0018      	movs	r0, r3
 80079c4:	f7fe fffc 	bl	80069c0 <_Error_Handler>

  if (timerid == MAX_TIMERS -1)
 80079c8:	1d3b      	adds	r3, r7, #4
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b1f      	cmp	r3, #31
 80079ce:	d104      	bne.n	80079da <timer_get+0xde>
	  tty_printf("\t#Warning: last timer\r\n");
 80079d0:	4b09      	ldr	r3, [pc, #36]	@ (80079f8 <timer_get+0xfc>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a09      	ldr	r2, [pc, #36]	@ (80079fc <timer_get+0x100>)
 80079d6:	0010      	movs	r0, r2
 80079d8:	4798      	blx	r3

  return (timerid);
 80079da:	1d3b      	adds	r3, r7, #4
 80079dc:	781b      	ldrb	r3, [r3, #0]
}
 80079de:	0018      	movs	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b002      	add	sp, #8
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	46c0      	nop			@ (mov r8, r8)
 80079e8:	200009c0 	.word	0x200009c0
 80079ec:	20000940 	.word	0x20000940
 80079f0:	200009c8 	.word	0x200009c8
 80079f4:	0801185c 	.word	0x0801185c
 80079f8:	20000a48 	.word	0x20000a48
 80079fc:	08011870 	.word	0x08011870

08007a00 <timer_start>:
 * \param p_fxn A function to be called when the timer is elapsed.
 *
 * \return TRUE if successful, FALSE on error.
 */
bool timer_start(uint8_t timerid, uint32_t value, void *p_fxn)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	210f      	movs	r1, #15
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	1c02      	adds	r2, r0, #0
 8007a10:	701a      	strb	r2, [r3, #0]
  if (timerid < MAX_TIMERS)
 8007a12:	0008      	movs	r0, r1
 8007a14:	183b      	adds	r3, r7, r0
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b1f      	cmp	r3, #31
 8007a1a:	d824      	bhi.n	8007a66 <timer_start+0x66>
  {
    // Set the timer value
    timer_pool[timerid] = value;
 8007a1c:	183b      	adds	r3, r7, r0
 8007a1e:	781a      	ldrb	r2, [r3, #0]
 8007a20:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <timer_start+0x70>)
 8007a22:	0092      	lsls	r2, r2, #2
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	50d1      	str	r1, [r2, r3]

    // Set the timer callback function pointer
    timer_func[timerid] = (void (*)(void))p_fxn;
 8007a28:	183b      	adds	r3, r7, r0
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4b11      	ldr	r3, [pc, #68]	@ (8007a74 <timer_start+0x74>)
 8007a30:	0092      	lsls	r2, r2, #2
 8007a32:	50d1      	str	r1, [r2, r3]

    // Mark timer as active in the allocation table
    timer_active_table[timerid / 8] |= (1 << (timerid % 8));
 8007a34:	0001      	movs	r1, r0
 8007a36:	187b      	adds	r3, r7, r1
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	08db      	lsrs	r3, r3, #3
 8007a3c:	b2d8      	uxtb	r0, r3
 8007a3e:	0002      	movs	r2, r0
 8007a40:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <timer_start+0x78>)
 8007a42:	5c9b      	ldrb	r3, [r3, r2]
 8007a44:	b25a      	sxtb	r2, r3
 8007a46:	187b      	adds	r3, r7, r1
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2107      	movs	r1, #7
 8007a4c:	400b      	ands	r3, r1
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4099      	lsls	r1, r3
 8007a52:	000b      	movs	r3, r1
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	4313      	orrs	r3, r2
 8007a58:	b25b      	sxtb	r3, r3
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	b2d9      	uxtb	r1, r3
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <timer_start+0x78>)
 8007a60:	5499      	strb	r1, [r3, r2]

    return (true);
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <timer_start+0x68>
  }

  return (false);
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	0018      	movs	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b004      	add	sp, #16
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000940 	.word	0x20000940
 8007a74:	200009c8 	.word	0x200009c8
 8007a78:	200009c4 	.word	0x200009c4

08007a7c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007a80:	f3bf 8f4f 	dsb	sy
}
 8007a84:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a86:	4b04      	ldr	r3, [pc, #16]	@ (8007a98 <__NVIC_SystemReset+0x1c>)
 8007a88:	4a04      	ldr	r2, [pc, #16]	@ (8007a9c <__NVIC_SystemReset+0x20>)
 8007a8a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a8c:	f3bf 8f4f 	dsb	sy
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	e7fd      	b.n	8007a92 <__NVIC_SystemReset+0x16>
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	e000ed00 	.word	0xe000ed00
 8007a9c:	05fa0004 	.word	0x05fa0004

08007aa0 <f_sci1>:
#endif
/*
 * Callback on receiving char
 */
static void f_sci1(sci_cb_args_t *args)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	static uint8_t esc = 0;
#ifdef ENABLE_MODBUS
	static uint8_t tab = 0;
	static bool command_mode = true;
#endif
	volatile uint32_t *ram_key = (uint32_t*) RAM_KEY;
 8007aa8:	2380      	movs	r3, #128	@ 0x80
 8007aaa:	059b      	lsls	r3, r3, #22
 8007aac:	60fb      	str	r3, [r7, #12]

	if (args->byte == ESC)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	2b1b      	cmp	r3, #27
 8007ab4:	d113      	bne.n	8007ade <f_sci1+0x3e>
	{
		if (esc++ == 10)
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <f_sci1+0x4c>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	b2d1      	uxtb	r1, r2
 8007abe:	4a0b      	ldr	r2, [pc, #44]	@ (8007aec <f_sci1+0x4c>)
 8007ac0:	7011      	strb	r1, [r2, #0]
 8007ac2:	2b0a      	cmp	r3, #10
 8007ac4:	d10e      	bne.n	8007ae4 <f_sci1+0x44>
		{
			esc = 0;
 8007ac6:	4b09      	ldr	r3, [pc, #36]	@ (8007aec <f_sci1+0x4c>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
			// set bootloader flag
			*ram_key = WAIT_KEY_1;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a08      	ldr	r2, [pc, #32]	@ (8007af0 <f_sci1+0x50>)
 8007ad0:	601a      	str	r2, [r3, #0]
			sci1_puts("To Bootloader..\r\n");
 8007ad2:	4b08      	ldr	r3, [pc, #32]	@ (8007af4 <f_sci1+0x54>)
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f000 f84a 	bl	8007b6e <sci1_puts>
			NVIC_SystemReset();
 8007ada:	f7ff ffcf 	bl	8007a7c <__NVIC_SystemReset>
		}
	}
	else
		esc = 0;
 8007ade:	4b03      	ldr	r3, [pc, #12]	@ (8007aec <f_sci1+0x4c>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
		}
	}
	else
		tab = 0;
#endif
}
 8007ae4:	46c0      	nop			@ (mov r8, r8)
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b004      	add	sp, #16
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20001cc0 	.word	0x20001cc0
 8007af0:	55aa5501 	.word	0x55aa5501
 8007af4:	080118d0 	.word	0x080118d0

08007af8 <init_sci>:

/*
 * Init all usarts
 */
void init_sci(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
#if (SCI_CFG_CH1_INCLUDED)
	sci_init(SCI_CH1, f_sci1);
 8007afc:	4b05      	ldr	r3, [pc, #20]	@ (8007b14 <init_sci+0x1c>)
 8007afe:	0019      	movs	r1, r3
 8007b00:	2000      	movs	r0, #0
 8007b02:	f000 f9bd 	bl	8007e80 <sci_init>
#endif
#if (SCI_CFG_CH2_INCLUDED)
	sci_init(SCI_CH2, NULL);
 8007b06:	2100      	movs	r1, #0
 8007b08:	2001      	movs	r0, #1
 8007b0a:	f000 f9b9 	bl	8007e80 <sci_init>
#endif
#if (SCI_CFG_CAN_INCLUDED)
	sci_init(SCI_CAN, NULL);
#endif

}
 8007b0e:	46c0      	nop			@ (mov r8, r8)
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	08007aa1 	.word	0x08007aa1

08007b18 <sci1_callback>:
/*
 * ******************************* SCI-1 *******************************
 */
#if (SCI_CFG_CH1_INCLUDED)
void sci1_callback(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
	isr_handler(&ch1_ctrl);
 8007b1c:	4b03      	ldr	r3, [pc, #12]	@ (8007b2c <sci1_callback+0x14>)
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f000 f8c8 	bl	8007cb4 <isr_handler>
}
 8007b24:	46c0      	nop			@ (mov r8, r8)
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	2000001c 	.word	0x2000001c

08007b30 <sci1_getch>:
bool sci1_getch(char *c)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	return (sci_getc(SCI_CH1, (uint8_t *) c));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f000 fb11 	bl	8008164 <sci_getc>
 8007b42:	0003      	movs	r3, r0
}
 8007b44:	0018      	movs	r0, r3
 8007b46:	46bd      	mov	sp, r7
 8007b48:	b002      	add	sp, #8
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <sci1_putc>:
bool sci1_putc(char c)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	0002      	movs	r2, r0
 8007b54:	1dfb      	adds	r3, r7, #7
 8007b56:	701a      	strb	r2, [r3, #0]
	return (sci_putc(SCI_CH1, c));
 8007b58:	1dfb      	adds	r3, r7, #7
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	2000      	movs	r0, #0
 8007b60:	f000 fa42 	bl	8007fe8 <sci_putc>
 8007b64:	0003      	movs	r3, r0
}
 8007b66:	0018      	movs	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b002      	add	sp, #8
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <sci1_puts>:
bool sci1_puts(char *str)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
	return (sci_puts(SCI_CH1, (uint8_t *) str));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	0019      	movs	r1, r3
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	f000 fa96 	bl	80080ac <sci_puts>
 8007b80:	0003      	movs	r3, r0
}
 8007b82:	0018      	movs	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b002      	add	sp, #8
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <sci1_putsn>:
bool sci1_putsn(char *str, uint16_t len)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	000a      	movs	r2, r1
 8007b94:	1cbb      	adds	r3, r7, #2
 8007b96:	801a      	strh	r2, [r3, #0]
	return (sci_putsn(SCI_CH1, (uint8_t *) str, len));
 8007b98:	1cbb      	adds	r3, r7, #2
 8007b9a:	881a      	ldrh	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	0019      	movs	r1, r3
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f000 faad 	bl	8008100 <sci_putsn>
 8007ba6:	0003      	movs	r3, r0
}
 8007ba8:	0018      	movs	r0, r3
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <sci1_printf>:
bool sci1_printf(char *format, ...)
{
 8007bb0:	b40f      	push	{r0, r1, r2, r3}
 8007bb2:	b590      	push	{r4, r7, lr}
 8007bb4:	b0c3      	sub	sp, #268	@ 0x10c
 8007bb6:	af00      	add	r7, sp, #0
	char str[255 + 1];
	va_list args;

	va_start(args, format);
 8007bb8:	238a      	movs	r3, #138	@ 0x8a
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	2108      	movs	r1, #8
 8007bbe:	185b      	adds	r3, r3, r1
 8007bc0:	19db      	adds	r3, r3, r7
 8007bc2:	607b      	str	r3, [r7, #4]
	vsnprintf(str, sizeof(str), format, args);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2288      	movs	r2, #136	@ 0x88
 8007bc8:	0052      	lsls	r2, r2, #1
 8007bca:	1852      	adds	r2, r2, r1
 8007bcc:	19d2      	adds	r2, r2, r7
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	2180      	movs	r1, #128	@ 0x80
 8007bd2:	0049      	lsls	r1, r1, #1
 8007bd4:	2408      	movs	r4, #8
 8007bd6:	1938      	adds	r0, r7, r4
 8007bd8:	f007 fbec 	bl	800f3b4 <vsniprintf>
	va_end(args);

	return (sci_puts(SCI_CH1, (uint8_t *) str));
 8007bdc:	193b      	adds	r3, r7, r4
 8007bde:	0019      	movs	r1, r3
 8007be0:	2000      	movs	r0, #0
 8007be2:	f000 fa63 	bl	80080ac <sci_puts>
 8007be6:	0003      	movs	r3, r0
}
 8007be8:	0018      	movs	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	b043      	add	sp, #268	@ 0x10c
 8007bee:	bc90      	pop	{r4, r7}
 8007bf0:	bc08      	pop	{r3}
 8007bf2:	b004      	add	sp, #16
 8007bf4:	4718      	bx	r3

08007bf6 <dummy_getch>:
bool dummy_printf(char *format, ...)
{
	return false;
}
bool dummy_getch(char *c)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
	return false;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b002      	add	sp, #8
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <dummy_putsn>:
bool dummy_putsn(char *str, uint16_t len)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	000a      	movs	r2, r1
 8007c12:	1cbb      	adds	r3, r7, #2
 8007c14:	801a      	strh	r2, [r3, #0]
	return false;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	0018      	movs	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b002      	add	sp, #8
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <dummy_putc>:
bool dummy_putc(char c)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	0002      	movs	r2, r0
 8007c28:	1dfb      	adds	r3, r7, #7
 8007c2a:	701a      	strb	r2, [r3, #0]
	return false;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	0018      	movs	r0, r3
 8007c30:	46bd      	mov	sp, r7
 8007c32:	b002      	add	sp, #8
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <shell_use_sci1>:
	return false;
}

#if FLEXIBLE_SCI1
void shell_use_sci1(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	af00      	add	r7, sp, #0
	fp.sci_printf = *sci1_printf;
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <shell_use_sci1+0x3c>)
 8007c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c78 <shell_use_sci1+0x40>)
 8007c40:	601a      	str	r2, [r3, #0]
	fp.sci_putc = *sci1_putc;
 8007c42:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <shell_use_sci1+0x3c>)
 8007c44:	4a0d      	ldr	r2, [pc, #52]	@ (8007c7c <shell_use_sci1+0x44>)
 8007c46:	605a      	str	r2, [r3, #4]
	fp.sci_puts = *sci1_puts;
 8007c48:	4b0a      	ldr	r3, [pc, #40]	@ (8007c74 <shell_use_sci1+0x3c>)
 8007c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007c80 <shell_use_sci1+0x48>)
 8007c4c:	609a      	str	r2, [r3, #8]
	fp.sci_putsn = *sci1_putsn;
 8007c4e:	4b09      	ldr	r3, [pc, #36]	@ (8007c74 <shell_use_sci1+0x3c>)
 8007c50:	4a0c      	ldr	r2, [pc, #48]	@ (8007c84 <shell_use_sci1+0x4c>)
 8007c52:	60da      	str	r2, [r3, #12]
	fp.sci_getch = *sci1_getch;
 8007c54:	4b07      	ldr	r3, [pc, #28]	@ (8007c74 <shell_use_sci1+0x3c>)
 8007c56:	4a0c      	ldr	r2, [pc, #48]	@ (8007c88 <shell_use_sci1+0x50>)
 8007c58:	611a      	str	r2, [r3, #16]

	mp.sci_putc = *dummy_putc;
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <shell_use_sci1+0x54>)
 8007c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8007c90 <shell_use_sci1+0x58>)
 8007c5e:	605a      	str	r2, [r3, #4]
	mp.sci_getch = *dummy_getch;
 8007c60:	4b0a      	ldr	r3, [pc, #40]	@ (8007c8c <shell_use_sci1+0x54>)
 8007c62:	4a0c      	ldr	r2, [pc, #48]	@ (8007c94 <shell_use_sci1+0x5c>)
 8007c64:	611a      	str	r2, [r3, #16]
	mp.sci_putsn = *dummy_putsn;
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <shell_use_sci1+0x54>)
 8007c68:	4a0b      	ldr	r2, [pc, #44]	@ (8007c98 <shell_use_sci1+0x60>)
 8007c6a:	60da      	str	r2, [r3, #12]

}
 8007c6c:	46c0      	nop			@ (mov r8, r8)
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	46c0      	nop			@ (mov r8, r8)
 8007c74:	20000a48 	.word	0x20000a48
 8007c78:	08007bb1 	.word	0x08007bb1
 8007c7c:	08007b4d 	.word	0x08007b4d
 8007c80:	08007b6f 	.word	0x08007b6f
 8007c84:	08007b8b 	.word	0x08007b8b
 8007c88:	08007b31 	.word	0x08007b31
 8007c8c:	20000a5c 	.word	0x20000a5c
 8007c90:	08007c21 	.word	0x08007c21
 8007c94:	08007bf7 	.word	0x08007bf7
 8007c98:	08007c09 	.word	0x08007c09

08007c9c <sci2_callback>:
/*
 * ******************************* SCI-2 *******************************
 */
#if (SCI_CFG_CH2_INCLUDED)
void sci2_callback(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
	isr_handler(&ch2_ctrl);
 8007ca0:	4b03      	ldr	r3, [pc, #12]	@ (8007cb0 <sci2_callback+0x14>)
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f000 f806 	bl	8007cb4 <isr_handler>
}
 8007ca8:	46c0      	nop			@ (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	46c0      	nop			@ (mov r8, r8)
 8007cb0:	2000002c 	.word	0x2000002c

08007cb4 <isr_handler>:
 * \param hdl A handle to the SCI channel.
 *
 * \return -.
 */
static void isr_handler(const sci_hdl_t hdl)
{
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b08b      	sub	sp, #44	@ 0x2c
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(hdl->handle->Instance->ISR);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t cr1its = READ_REG(hdl->handle->Instance->CR1);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	623b      	str	r3, [r7, #32]
	uint32_t cr3its = READ_REG(hdl->handle->Instance->CR3);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	61fb      	str	r3, [r7, #28]
	uint32_t errorflags = 0x00U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61bb      	str	r3, [r7, #24]

	sci_cb_args_t args;
	uint8_t c;

	/* If no error occurs */
	errorflags = (isrflags & (uint32_t) (USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	220f      	movs	r2, #15
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
	if (errorflags == RESET)
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d154      	bne.n	8007d96 <isr_handler+0xe2>
	{
		if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	2220      	movs	r2, #32
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	d04a      	beq.n	8007d8a <isr_handler+0xd6>
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d104      	bne.n	8007d06 <isr_handler+0x52>
 8007cfc:	69fa      	ldr	r2, [r7, #28]
 8007cfe:	2380      	movs	r3, #128	@ 0x80
 8007d00:	055b      	lsls	r3, r3, #21
 8007d02:	4013      	ands	r3, r2
 8007d04:	d041      	beq.n	8007d8a <isr_handler+0xd6>
		{
			c = hdl->handle->Instance->RDR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d0e:	2417      	movs	r4, #23
 8007d10:	193b      	adds	r3, r7, r4
 8007d12:	701a      	strb	r2, [r3, #0]

			if (hdl->rx_queue->count < hdl->rx_queue->size)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d237      	bcs.n	8007d94 <isr_handler+0xe0>
			{
				hdl->rx_queue->buf[hdl->rx_queue->in_index++] = c;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	1c50      	adds	r0, r2, #1
 8007d32:	60d8      	str	r0, [r3, #12]
 8007d34:	188b      	adds	r3, r1, r2
 8007d36:	193a      	adds	r2, r7, r4
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	701a      	strb	r2, [r3, #0]
				if (hdl->rx_queue->in_index >= hdl->rx_queue->size)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d303      	bcc.n	8007d54 <isr_handler+0xa0>
					hdl->rx_queue->in_index = 0;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2200      	movs	r2, #0
 8007d52:	60da      	str	r2, [r3, #12]
				hdl->rx_queue->count++;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	3201      	adds	r2, #1
 8007d5c:	609a      	str	r2, [r3, #8]

				args.event = SCI_EVT_RX_CHAR;
 8007d5e:	210c      	movs	r1, #12
 8007d60:	187b      	adds	r3, r7, r1
 8007d62:	2200      	movs	r2, #0
 8007d64:	711a      	strb	r2, [r3, #4]

				if (hdl->callback != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d012      	beq.n	8007d94 <isr_handler+0xe0>
				{
					args.hdl = hdl;
 8007d6e:	187b      	adds	r3, r7, r1
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
					args.byte = c;
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	2217      	movs	r2, #23
 8007d78:	18ba      	adds	r2, r7, r2
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	715a      	strb	r2, [r3, #5]
					hdl->callback((void*) &args);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	187a      	adds	r2, r7, r1
 8007d84:	0010      	movs	r0, r2
 8007d86:	4798      	blx	r3
			if (hdl->rx_queue->count < hdl->rx_queue->size)
 8007d88:	e004      	b.n	8007d94 <isr_handler+0xe0>
				}
			}
		}
		else
		{
			args.event = SCI_EVT_RXBUF_OVFL;
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	2201      	movs	r2, #1
 8007d90:	711a      	strb	r2, [r3, #4]
 8007d92:	e000      	b.n	8007d96 <isr_handler+0xe2>
			if (hdl->rx_queue->count < hdl->rx_queue->size)
 8007d94:	46c0      	nop			@ (mov r8, r8)
		}
	}

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_PE))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d104      	bne.n	8007db0 <isr_handler+0xfc>
	__HAL_UART_CLEAR_PEFLAG(hdl->handle);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2201      	movs	r2, #1
 8007dae:	621a      	str	r2, [r3, #32]

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_FE))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2202      	movs	r2, #2
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d104      	bne.n	8007dca <isr_handler+0x116>
	__HAL_UART_CLEAR_FEFLAG(hdl->handle);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	621a      	str	r2, [r3, #32]

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_NE))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d104      	bne.n	8007de4 <isr_handler+0x130>
	__HAL_UART_CLEAR_NEFLAG(hdl->handle);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2204      	movs	r2, #4
 8007de2:	621a      	str	r2, [r3, #32]

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_ORE))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	2208      	movs	r2, #8
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d104      	bne.n	8007dfe <isr_handler+0x14a>
	__HAL_UART_CLEAR_OREFLAG(hdl->handle);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	621a      	str	r2, [r3, #32]

	if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U) || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	2280      	movs	r2, #128	@ 0x80
 8007e02:	4013      	ands	r3, r2
 8007e04:	d037      	beq.n	8007e76 <isr_handler+0x1c2>
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	2280      	movs	r2, #128	@ 0x80
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d104      	bne.n	8007e18 <isr_handler+0x164>
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	2380      	movs	r3, #128	@ 0x80
 8007e12:	041b      	lsls	r3, r3, #16
 8007e14:	4013      	ands	r3, r2
 8007e16:	d02e      	beq.n	8007e76 <isr_handler+0x1c2>
	{
		if (hdl->tx_queue->count > 0)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01f      	beq.n	8007e62 <isr_handler+0x1ae>
		{
			hdl->handle->Instance->TDR = hdl->tx_queue->buf[hdl->tx_queue->out_index++];
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	6819      	ldr	r1, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	1c50      	adds	r0, r2, #1
 8007e30:	6118      	str	r0, [r3, #16]
 8007e32:	188b      	adds	r3, r1, r2
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	629a      	str	r2, [r3, #40]	@ 0x28
			if (hdl->tx_queue->out_index >= hdl->tx_queue->size)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d303      	bcc.n	8007e56 <isr_handler+0x1a2>
				hdl->tx_queue->out_index = 0;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	611a      	str	r2, [r3, #16]
			hdl->tx_queue->count--;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	3a01      	subs	r2, #1
 8007e5e:	609a      	str	r2, [r3, #8]
		else
		{
			CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
		}
	}
}
 8007e60:	e009      	b.n	8007e76 <isr_handler+0x1c2>
			CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2180      	movs	r1, #128	@ 0x80
 8007e72:	438a      	bics	r2, r1
 8007e74:	601a      	str	r2, [r3, #0]
}
 8007e76:	46c0      	nop			@ (mov r8, r8)
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	b00b      	add	sp, #44	@ 0x2c
 8007e7c:	bd90      	pop	{r4, r7, pc}
	...

08007e80 <sci_init>:
 * \param p_callback Pointer to function called from interrupt.
 *
 * \return True if successful, false on error.
 */
static bool sci_init(sci_ch_t ch, void (*const p_callback)(void *p_args))
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	0002      	movs	r2, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	1dfb      	adds	r3, r7, #7
 8007e8c:	701a      	strb	r2, [r3, #0]
	if (ch >= SCI_NUM_CH)
 8007e8e:	1dfb      	adds	r3, r7, #7
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b09      	cmp	r3, #9
 8007e94:	d901      	bls.n	8007e9a <sci_init+0x1a>
		return (false);
 8007e96:	2300      	movs	r3, #0
 8007e98:	e094      	b.n	8007fc4 <sci_init+0x144>

	g_handles[ch]->callback = p_callback;
 8007e9a:	1dfb      	adds	r3, r7, #7
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8007fcc <sci_init+0x14c>)
 8007ea0:	0092      	lsls	r2, r2, #2
 8007ea2:	58d3      	ldr	r3, [r2, r3]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	60da      	str	r2, [r3, #12]

	switch (ch)
 8007ea8:	1dfb      	adds	r3, r7, #7
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <sci_init+0x36>
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d02b      	beq.n	8007f0c <sci_init+0x8c>
		g_handles[ch]->rx_queue->size = SCI_CFG_CAN_RX_BUFSIZ;
		break;
#endif

	default:
		break;
 8007eb4:	e055      	b.n	8007f62 <sci_init+0xe2>
		g_handles[ch]->handle->Instance = USART1;
 8007eb6:	1dfb      	adds	r3, r7, #7
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	4b44      	ldr	r3, [pc, #272]	@ (8007fcc <sci_init+0x14c>)
 8007ebc:	0092      	lsls	r2, r2, #2
 8007ebe:	58d3      	ldr	r3, [r2, r3]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a43      	ldr	r2, [pc, #268]	@ (8007fd0 <sci_init+0x150>)
 8007ec4:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->buf = ch1_tx_buf;
 8007ec6:	1dfb      	adds	r3, r7, #7
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	4b40      	ldr	r3, [pc, #256]	@ (8007fcc <sci_init+0x14c>)
 8007ecc:	0092      	lsls	r2, r2, #2
 8007ece:	58d3      	ldr	r3, [r2, r3]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4a40      	ldr	r2, [pc, #256]	@ (8007fd4 <sci_init+0x154>)
 8007ed4:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->size = SCI_CFG_CH1_TX_BUFSIZ;
 8007ed6:	1dfb      	adds	r3, r7, #7
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	4b3c      	ldr	r3, [pc, #240]	@ (8007fcc <sci_init+0x14c>)
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	58d3      	ldr	r3, [r2, r3]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2280      	movs	r2, #128	@ 0x80
 8007ee4:	0112      	lsls	r2, r2, #4
 8007ee6:	605a      	str	r2, [r3, #4]
		g_handles[ch]->rx_queue->buf = ch1_rx_buf;
 8007ee8:	1dfb      	adds	r3, r7, #7
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	4b37      	ldr	r3, [pc, #220]	@ (8007fcc <sci_init+0x14c>)
 8007eee:	0092      	lsls	r2, r2, #2
 8007ef0:	58d3      	ldr	r3, [r2, r3]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4a38      	ldr	r2, [pc, #224]	@ (8007fd8 <sci_init+0x158>)
 8007ef6:	601a      	str	r2, [r3, #0]
		g_handles[ch]->rx_queue->size = SCI_CFG_CH1_RX_BUFSIZ;
 8007ef8:	1dfb      	adds	r3, r7, #7
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	4b33      	ldr	r3, [pc, #204]	@ (8007fcc <sci_init+0x14c>)
 8007efe:	0092      	lsls	r2, r2, #2
 8007f00:	58d3      	ldr	r3, [r2, r3]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	2280      	movs	r2, #128	@ 0x80
 8007f06:	0052      	lsls	r2, r2, #1
 8007f08:	605a      	str	r2, [r3, #4]
		break;
 8007f0a:	e02a      	b.n	8007f62 <sci_init+0xe2>
		g_handles[ch]->handle->Instance = USART2;
 8007f0c:	1dfb      	adds	r3, r7, #7
 8007f0e:	781a      	ldrb	r2, [r3, #0]
 8007f10:	4b2e      	ldr	r3, [pc, #184]	@ (8007fcc <sci_init+0x14c>)
 8007f12:	0092      	lsls	r2, r2, #2
 8007f14:	58d3      	ldr	r3, [r2, r3]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a30      	ldr	r2, [pc, #192]	@ (8007fdc <sci_init+0x15c>)
 8007f1a:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->buf = ch2_tx_buf;
 8007f1c:	1dfb      	adds	r3, r7, #7
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	4b2a      	ldr	r3, [pc, #168]	@ (8007fcc <sci_init+0x14c>)
 8007f22:	0092      	lsls	r2, r2, #2
 8007f24:	58d3      	ldr	r3, [r2, r3]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4a2d      	ldr	r2, [pc, #180]	@ (8007fe0 <sci_init+0x160>)
 8007f2a:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->size = SCI_CFG_CH2_TX_BUFSIZ;
 8007f2c:	1dfb      	adds	r3, r7, #7
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <sci_init+0x14c>)
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	58d3      	ldr	r3, [r2, r3]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2280      	movs	r2, #128	@ 0x80
 8007f3a:	0112      	lsls	r2, r2, #4
 8007f3c:	605a      	str	r2, [r3, #4]
		g_handles[ch]->rx_queue->buf = ch2_rx_buf;
 8007f3e:	1dfb      	adds	r3, r7, #7
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	4b22      	ldr	r3, [pc, #136]	@ (8007fcc <sci_init+0x14c>)
 8007f44:	0092      	lsls	r2, r2, #2
 8007f46:	58d3      	ldr	r3, [r2, r3]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	4a26      	ldr	r2, [pc, #152]	@ (8007fe4 <sci_init+0x164>)
 8007f4c:	601a      	str	r2, [r3, #0]
		g_handles[ch]->rx_queue->size = SCI_CFG_CH2_RX_BUFSIZ;
 8007f4e:	1dfb      	adds	r3, r7, #7
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	4b1e      	ldr	r3, [pc, #120]	@ (8007fcc <sci_init+0x14c>)
 8007f54:	0092      	lsls	r2, r2, #2
 8007f56:	58d3      	ldr	r3, [r2, r3]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	2280      	movs	r2, #128	@ 0x80
 8007f5c:	0052      	lsls	r2, r2, #1
 8007f5e:	605a      	str	r2, [r3, #4]
		break;
 8007f60:	46c0      	nop			@ (mov r8, r8)
	}

	g_handles[ch]->tx_queue->count = 0;
 8007f62:	1dfb      	adds	r3, r7, #7
 8007f64:	781a      	ldrb	r2, [r3, #0]
 8007f66:	4b19      	ldr	r3, [pc, #100]	@ (8007fcc <sci_init+0x14c>)
 8007f68:	0092      	lsls	r2, r2, #2
 8007f6a:	58d3      	ldr	r3, [r2, r3]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	609a      	str	r2, [r3, #8]
	g_handles[ch]->tx_queue->in_index = 0;
 8007f72:	1dfb      	adds	r3, r7, #7
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	4b15      	ldr	r3, [pc, #84]	@ (8007fcc <sci_init+0x14c>)
 8007f78:	0092      	lsls	r2, r2, #2
 8007f7a:	58d3      	ldr	r3, [r2, r3]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	60da      	str	r2, [r3, #12]
	g_handles[ch]->tx_queue->out_index = 0;
 8007f82:	1dfb      	adds	r3, r7, #7
 8007f84:	781a      	ldrb	r2, [r3, #0]
 8007f86:	4b11      	ldr	r3, [pc, #68]	@ (8007fcc <sci_init+0x14c>)
 8007f88:	0092      	lsls	r2, r2, #2
 8007f8a:	58d3      	ldr	r3, [r2, r3]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]

	g_handles[ch]->rx_queue->count = 0;
 8007f92:	1dfb      	adds	r3, r7, #7
 8007f94:	781a      	ldrb	r2, [r3, #0]
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <sci_init+0x14c>)
 8007f98:	0092      	lsls	r2, r2, #2
 8007f9a:	58d3      	ldr	r3, [r2, r3]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	609a      	str	r2, [r3, #8]
	g_handles[ch]->rx_queue->in_index = 0;
 8007fa2:	1dfb      	adds	r3, r7, #7
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <sci_init+0x14c>)
 8007fa8:	0092      	lsls	r2, r2, #2
 8007faa:	58d3      	ldr	r3, [r2, r3]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	60da      	str	r2, [r3, #12]
	g_handles[ch]->rx_queue->out_index = 0;
 8007fb2:	1dfb      	adds	r3, r7, #7
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <sci_init+0x14c>)
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	58d3      	ldr	r3, [r2, r3]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	611a      	str	r2, [r3, #16]

	return (true);
 8007fc2:	2301      	movs	r3, #1
}
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	08011a60 	.word	0x08011a60
 8007fd0:	40013800 	.word	0x40013800
 8007fd4:	20000a70 	.word	0x20000a70
 8007fd8:	20001270 	.word	0x20001270
 8007fdc:	40004400 	.word	0x40004400
 8007fe0:	20001398 	.word	0x20001398
 8007fe4:	20001b98 	.word	0x20001b98

08007fe8 <sci_putc>:
 * \param c Character to write.
 *
 * \return True if successful, false on error.
 */
static bool sci_putc(sci_ch_t ch, uint8_t c)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	0002      	movs	r2, r0
 8007ff0:	1dfb      	adds	r3, r7, #7
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	1dbb      	adds	r3, r7, #6
 8007ff6:	1c0a      	adds	r2, r1, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
	sci_hdl_t hdl = g_handles[ch];
 8007ffa:	1dfb      	adds	r3, r7, #7
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80080a8 <sci_putc+0xc0>)
 8008000:	0092      	lsls	r2, r2, #2
 8008002:	58d3      	ldr	r3, [r2, r3]
 8008004:	60fb      	str	r3, [r7, #12]

	CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_TX_EN);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2180      	movs	r1, #128	@ 0x80
 8008016:	438a      	bics	r2, r1
 8008018:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800801a:	f3bf 8f4f 	dsb	sy
}
 800801e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8008020:	f3bf 8f6f 	isb	sy
}
 8008024:	46c0      	nop			@ (mov r8, r8)
	__DSB();
	__ISB();

	if (hdl->tx_queue->count < hdl->tx_queue->size)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d228      	bcs.n	8008088 <sci_putc+0xa0>
	{
		hdl->tx_queue->buf[hdl->tx_queue->in_index++] = c;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	6819      	ldr	r1, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	1c50      	adds	r0, r2, #1
 8008044:	60d8      	str	r0, [r3, #12]
 8008046:	188b      	adds	r3, r1, r2
 8008048:	1dba      	adds	r2, r7, #6
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	701a      	strb	r2, [r3, #0]
		if (hdl->tx_queue->in_index >= hdl->tx_queue->size)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68da      	ldr	r2, [r3, #12]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d303      	bcc.n	8008066 <sci_putc+0x7e>
			hdl->tx_queue->in_index = 0;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	60da      	str	r2, [r3, #12]
		hdl->tx_queue->count++;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	3201      	adds	r2, #1
 800806e:	609a      	str	r2, [r3, #8]

		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_TX_EN);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2180      	movs	r1, #128	@ 0x80
 8008080:	430a      	orrs	r2, r1
 8008082:	601a      	str	r2, [r3, #0]

		return (true);
 8008084:	2301      	movs	r3, #1
 8008086:	e00a      	b.n	800809e <sci_putc+0xb6>
	}
	else
		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_TX_EN);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2180      	movs	r1, #128	@ 0x80
 8008098:	430a      	orrs	r2, r1
 800809a:	601a      	str	r2, [r3, #0]

	return (false);
 800809c:	2300      	movs	r3, #0
}
 800809e:	0018      	movs	r0, r3
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b004      	add	sp, #16
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	46c0      	nop			@ (mov r8, r8)
 80080a8:	08011a60 	.word	0x08011a60

080080ac <sci_puts>:
 * \param str Pointer to the character string to write.
 *
 * \return True if successful, false on error.
 */
static bool sci_puts(sci_ch_t ch, uint8_t *str)
{
 80080ac:	b590      	push	{r4, r7, lr}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	0002      	movs	r2, r0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	1dfb      	adds	r3, r7, #7
 80080b8:	701a      	strb	r2, [r3, #0]
	bool err = true;
 80080ba:	230f      	movs	r3, #15
 80080bc:	18fb      	adds	r3, r7, r3
 80080be:	2201      	movs	r2, #1
 80080c0:	701a      	strb	r2, [r3, #0]

	while (*str && err)
 80080c2:	e00d      	b.n	80080e0 <sci_puts+0x34>
		err = sci_putc(ch, *str++);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	603a      	str	r2, [r7, #0]
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	230f      	movs	r3, #15
 80080ce:	18fc      	adds	r4, r7, r3
 80080d0:	1dfb      	adds	r3, r7, #7
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	0011      	movs	r1, r2
 80080d6:	0018      	movs	r0, r3
 80080d8:	f7ff ff86 	bl	8007fe8 <sci_putc>
 80080dc:	0003      	movs	r3, r0
 80080de:	7023      	strb	r3, [r4, #0]
	while (*str && err)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <sci_puts+0x46>
 80080e8:	230f      	movs	r3, #15
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e8      	bne.n	80080c4 <sci_puts+0x18>

	return (err);
 80080f2:	230f      	movs	r3, #15
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	781b      	ldrb	r3, [r3, #0]
}
 80080f8:	0018      	movs	r0, r3
 80080fa:	46bd      	mov	sp, r7
 80080fc:	b005      	add	sp, #20
 80080fe:	bd90      	pop	{r4, r7, pc}

08008100 <sci_putsn>:
 * \param len Length of the character string to write.
 *
 * \return True if successful, false on error.
 */
static bool sci_putsn(sci_ch_t ch, uint8_t *str, uint16_t len)
{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6039      	str	r1, [r7, #0]
 8008108:	0011      	movs	r1, r2
 800810a:	1dfb      	adds	r3, r7, #7
 800810c:	1c02      	adds	r2, r0, #0
 800810e:	701a      	strb	r2, [r3, #0]
 8008110:	1d3b      	adds	r3, r7, #4
 8008112:	1c0a      	adds	r2, r1, #0
 8008114:	801a      	strh	r2, [r3, #0]
	bool err = true;
 8008116:	230f      	movs	r3, #15
 8008118:	18fb      	adds	r3, r7, r3
 800811a:	2201      	movs	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]

	while (len-- && err)
 800811e:	e00d      	b.n	800813c <sci_putsn+0x3c>
		err = sci_putc(ch, *str++);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	603a      	str	r2, [r7, #0]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	230f      	movs	r3, #15
 800812a:	18fc      	adds	r4, r7, r3
 800812c:	1dfb      	adds	r3, r7, #7
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	0011      	movs	r1, r2
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff ff58 	bl	8007fe8 <sci_putc>
 8008138:	0003      	movs	r3, r0
 800813a:	7023      	strb	r3, [r4, #0]
	while (len-- && err)
 800813c:	1d3b      	adds	r3, r7, #4
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	1d3a      	adds	r2, r7, #4
 8008142:	1e59      	subs	r1, r3, #1
 8008144:	8011      	strh	r1, [r2, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <sci_putsn+0x54>
 800814a:	230f      	movs	r3, #15
 800814c:	18fb      	adds	r3, r7, r3
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e5      	bne.n	8008120 <sci_putsn+0x20>

	return (err);
 8008154:	230f      	movs	r3, #15
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	781b      	ldrb	r3, [r3, #0]
}
 800815a:	0018      	movs	r0, r3
 800815c:	46bd      	mov	sp, r7
 800815e:	b005      	add	sp, #20
 8008160:	bd90      	pop	{r4, r7, pc}
	...

08008164 <sci_getc>:
 * \param c Pointer to the character read.
 *
 * \return True if successful, false on error.
 */
static bool sci_getc(sci_ch_t ch, uint8_t *c)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	0002      	movs	r2, r0
 800816c:	6039      	str	r1, [r7, #0]
 800816e:	1dfb      	adds	r3, r7, #7
 8008170:	701a      	strb	r2, [r3, #0]
	sci_hdl_t hdl = g_handles[ch];
 8008172:	1dfb      	adds	r3, r7, #7
 8008174:	781a      	ldrb	r2, [r3, #0]
 8008176:	4b28      	ldr	r3, [pc, #160]	@ (8008218 <sci_getc+0xb4>)
 8008178:	0092      	lsls	r2, r2, #2
 800817a:	58d3      	ldr	r3, [r2, r3]
 800817c:	60fb      	str	r3, [r7, #12]

	CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_RX_EN);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2120      	movs	r1, #32
 800818e:	438a      	bics	r2, r1
 8008190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8008192:	f3bf 8f4f 	dsb	sy
}
 8008196:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8008198:	f3bf 8f6f 	isb	sy
}
 800819c:	46c0      	nop			@ (mov r8, r8)
	__DSB();
	__ISB();

	if (hdl->rx_queue->count > 0)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d028      	beq.n	80081fa <sci_getc+0x96>
	{
		*c = hdl->rx_queue->buf[hdl->rx_queue->out_index++];
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	6819      	ldr	r1, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	1c50      	adds	r0, r2, #1
 80081b6:	6118      	str	r0, [r3, #16]
 80081b8:	188b      	adds	r3, r1, r2
 80081ba:	781a      	ldrb	r2, [r3, #0]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	701a      	strb	r2, [r3, #0]
		if (hdl->rx_queue->out_index >= hdl->rx_queue->size)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d303      	bcc.n	80081d8 <sci_getc+0x74>
			hdl->rx_queue->out_index = 0;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2200      	movs	r2, #0
 80081d6:	611a      	str	r2, [r3, #16]
		hdl->rx_queue->count--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	689a      	ldr	r2, [r3, #8]
 80081de:	3a01      	subs	r2, #1
 80081e0:	609a      	str	r2, [r3, #8]

		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_RX_EN);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2120      	movs	r1, #32
 80081f2:	430a      	orrs	r2, r1
 80081f4:	601a      	str	r2, [r3, #0]

		return (true);
 80081f6:	2301      	movs	r3, #1
 80081f8:	e00a      	b.n	8008210 <sci_getc+0xac>
	}
	else
		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_RX_EN);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2120      	movs	r1, #32
 800820a:	430a      	orrs	r2, r1
 800820c:	601a      	str	r2, [r3, #0]

	return (false);
 800820e:	2300      	movs	r3, #0
}
 8008210:	0018      	movs	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	b004      	add	sp, #16
 8008216:	bd80      	pop	{r7, pc}
 8008218:	08011a60 	.word	0x08011a60

0800821c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008220:	4b23      	ldr	r3, [pc, #140]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008222:	4a24      	ldr	r2, [pc, #144]	@ (80082b4 <MX_USART1_UART_Init+0x98>)
 8008224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008226:	4b22      	ldr	r3, [pc, #136]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008228:	22e1      	movs	r2, #225	@ 0xe1
 800822a:	0252      	lsls	r2, r2, #9
 800822c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800822e:	4b20      	ldr	r3, [pc, #128]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008230:	2200      	movs	r2, #0
 8008232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008234:	4b1e      	ldr	r3, [pc, #120]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008236:	2200      	movs	r2, #0
 8008238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800823a:	4b1d      	ldr	r3, [pc, #116]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 800823c:	2200      	movs	r2, #0
 800823e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008240:	4b1b      	ldr	r3, [pc, #108]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008242:	220c      	movs	r2, #12
 8008244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008246:	4b1a      	ldr	r3, [pc, #104]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008248:	2200      	movs	r2, #0
 800824a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800824c:	4b18      	ldr	r3, [pc, #96]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 800824e:	2200      	movs	r2, #0
 8008250:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008252:	4b17      	ldr	r3, [pc, #92]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008254:	2200      	movs	r2, #0
 8008256:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008258:	4b15      	ldr	r3, [pc, #84]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 800825a:	2200      	movs	r2, #0
 800825c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800825e:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008260:	2200      	movs	r2, #0
 8008262:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008264:	4b12      	ldr	r3, [pc, #72]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008266:	0018      	movs	r0, r3
 8008268:	f005 fba8 	bl	800d9bc <HAL_UART_Init>
 800826c:	1e03      	subs	r3, r0, #0
 800826e:	d001      	beq.n	8008274 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008270:	f7fe fbb8 	bl	80069e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008274:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008276:	2100      	movs	r1, #0
 8008278:	0018      	movs	r0, r3
 800827a:	f006 fd57 	bl	800ed2c <HAL_UARTEx_SetTxFifoThreshold>
 800827e:	1e03      	subs	r3, r0, #0
 8008280:	d001      	beq.n	8008286 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008282:	f7fe fbaf 	bl	80069e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008286:	4b0a      	ldr	r3, [pc, #40]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 8008288:	2100      	movs	r1, #0
 800828a:	0018      	movs	r0, r3
 800828c:	f006 fd8e 	bl	800edac <HAL_UARTEx_SetRxFifoThreshold>
 8008290:	1e03      	subs	r3, r0, #0
 8008292:	d001      	beq.n	8008298 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008294:	f7fe fba6 	bl	80069e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008298:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <MX_USART1_UART_Init+0x94>)
 800829a:	0018      	movs	r0, r3
 800829c:	f006 fd0c 	bl	800ecb8 <HAL_UARTEx_DisableFifoMode>
 80082a0:	1e03      	subs	r3, r0, #0
 80082a2:	d001      	beq.n	80082a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80082a4:	f7fe fb9e 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80082a8:	46c0      	nop			@ (mov r8, r8)
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	20001cc4 	.word	0x20001cc4
 80082b4:	40013800 	.word	0x40013800

080082b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80082bc:	4b23      	ldr	r3, [pc, #140]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082be:	4a24      	ldr	r2, [pc, #144]	@ (8008350 <MX_USART2_UART_Init+0x98>)
 80082c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80082c2:	4b22      	ldr	r3, [pc, #136]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082c4:	2296      	movs	r2, #150	@ 0x96
 80082c6:	0192      	lsls	r2, r2, #6
 80082c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80082ca:	4b20      	ldr	r3, [pc, #128]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80082d0:	4b1e      	ldr	r3, [pc, #120]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80082d6:	4b1d      	ldr	r3, [pc, #116]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082d8:	2200      	movs	r2, #0
 80082da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80082dc:	4b1b      	ldr	r3, [pc, #108]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082de:	220c      	movs	r2, #12
 80082e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082e2:	4b1a      	ldr	r3, [pc, #104]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80082e8:	4b18      	ldr	r3, [pc, #96]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80082ee:	4b17      	ldr	r3, [pc, #92]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80082f4:	4b15      	ldr	r3, [pc, #84]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80082fa:	4b14      	ldr	r3, [pc, #80]	@ (800834c <MX_USART2_UART_Init+0x94>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008300:	4b12      	ldr	r3, [pc, #72]	@ (800834c <MX_USART2_UART_Init+0x94>)
 8008302:	0018      	movs	r0, r3
 8008304:	f005 fb5a 	bl	800d9bc <HAL_UART_Init>
 8008308:	1e03      	subs	r3, r0, #0
 800830a:	d001      	beq.n	8008310 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800830c:	f7fe fb6a 	bl	80069e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008310:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <MX_USART2_UART_Init+0x94>)
 8008312:	2100      	movs	r1, #0
 8008314:	0018      	movs	r0, r3
 8008316:	f006 fd09 	bl	800ed2c <HAL_UARTEx_SetTxFifoThreshold>
 800831a:	1e03      	subs	r3, r0, #0
 800831c:	d001      	beq.n	8008322 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800831e:	f7fe fb61 	bl	80069e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008322:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <MX_USART2_UART_Init+0x94>)
 8008324:	2100      	movs	r1, #0
 8008326:	0018      	movs	r0, r3
 8008328:	f006 fd40 	bl	800edac <HAL_UARTEx_SetRxFifoThreshold>
 800832c:	1e03      	subs	r3, r0, #0
 800832e:	d001      	beq.n	8008334 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008330:	f7fe fb58 	bl	80069e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008334:	4b05      	ldr	r3, [pc, #20]	@ (800834c <MX_USART2_UART_Init+0x94>)
 8008336:	0018      	movs	r0, r3
 8008338:	f006 fcbe 	bl	800ecb8 <HAL_UARTEx_DisableFifoMode>
 800833c:	1e03      	subs	r3, r0, #0
 800833e:	d001      	beq.n	8008344 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008340:	f7fe fb50 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008344:	46c0      	nop			@ (mov r8, r8)
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	20001d58 	.word	0x20001d58
 8008350:	40004400 	.word	0x40004400

08008354 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008358:	4b16      	ldr	r3, [pc, #88]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 800835a:	4a17      	ldr	r2, [pc, #92]	@ (80083b8 <MX_USART6_UART_Init+0x64>)
 800835c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800835e:	4b15      	ldr	r3, [pc, #84]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 8008360:	22e1      	movs	r2, #225	@ 0xe1
 8008362:	0252      	lsls	r2, r2, #9
 8008364:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008366:	4b13      	ldr	r3, [pc, #76]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 8008368:	2200      	movs	r2, #0
 800836a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800836c:	4b11      	ldr	r3, [pc, #68]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 800836e:	2200      	movs	r2, #0
 8008370:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008372:	4b10      	ldr	r3, [pc, #64]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 8008374:	2200      	movs	r2, #0
 8008376:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008378:	4b0e      	ldr	r3, [pc, #56]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 800837a:	220c      	movs	r2, #12
 800837c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800837e:	4b0d      	ldr	r3, [pc, #52]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 8008380:	2200      	movs	r2, #0
 8008382:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008384:	4b0b      	ldr	r3, [pc, #44]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 8008386:	2200      	movs	r2, #0
 8008388:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800838a:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 800838c:	2200      	movs	r2, #0
 800838e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008390:	4b08      	ldr	r3, [pc, #32]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 8008392:	2200      	movs	r2, #0
 8008394:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008396:	4b07      	ldr	r3, [pc, #28]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 8008398:	2200      	movs	r2, #0
 800839a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <MX_USART6_UART_Init+0x60>)
 800839e:	0018      	movs	r0, r3
 80083a0:	f005 fb0c 	bl	800d9bc <HAL_UART_Init>
 80083a4:	1e03      	subs	r3, r0, #0
 80083a6:	d001      	beq.n	80083ac <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80083a8:	f7fe fb1c 	bl	80069e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80083ac:	46c0      	nop			@ (mov r8, r8)
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	46c0      	nop			@ (mov r8, r8)
 80083b4:	20001dec 	.word	0x20001dec
 80083b8:	40013c00 	.word	0x40013c00

080083bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b0a1      	sub	sp, #132	@ 0x84
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c4:	236c      	movs	r3, #108	@ 0x6c
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	0018      	movs	r0, r3
 80083ca:	2314      	movs	r3, #20
 80083cc:	001a      	movs	r2, r3
 80083ce:	2100      	movs	r1, #0
 80083d0:	f007 f89c 	bl	800f50c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80083d4:	2420      	movs	r4, #32
 80083d6:	193b      	adds	r3, r7, r4
 80083d8:	0018      	movs	r0, r3
 80083da:	234c      	movs	r3, #76	@ 0x4c
 80083dc:	001a      	movs	r2, r3
 80083de:	2100      	movs	r1, #0
 80083e0:	f007 f894 	bl	800f50c <memset>
  if(uartHandle->Instance==USART1)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a6d      	ldr	r2, [pc, #436]	@ (80085a0 <HAL_UART_MspInit+0x1e4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d148      	bne.n	8008480 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80083ee:	193b      	adds	r3, r7, r4
 80083f0:	2201      	movs	r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80083f4:	193b      	adds	r3, r7, r4
 80083f6:	2200      	movs	r2, #0
 80083f8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083fa:	193b      	adds	r3, r7, r4
 80083fc:	0018      	movs	r0, r3
 80083fe:	f003 fe77 	bl	800c0f0 <HAL_RCCEx_PeriphCLKConfig>
 8008402:	1e03      	subs	r3, r0, #0
 8008404:	d001      	beq.n	800840a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008406:	f7fe faed 	bl	80069e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800840a:	4b66      	ldr	r3, [pc, #408]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 800840c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800840e:	4b65      	ldr	r3, [pc, #404]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008410:	2180      	movs	r1, #128	@ 0x80
 8008412:	01c9      	lsls	r1, r1, #7
 8008414:	430a      	orrs	r2, r1
 8008416:	641a      	str	r2, [r3, #64]	@ 0x40
 8008418:	4b62      	ldr	r3, [pc, #392]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 800841a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800841c:	2380      	movs	r3, #128	@ 0x80
 800841e:	01db      	lsls	r3, r3, #7
 8008420:	4013      	ands	r3, r2
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008426:	4b5f      	ldr	r3, [pc, #380]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800842a:	4b5e      	ldr	r3, [pc, #376]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 800842c:	2101      	movs	r1, #1
 800842e:	430a      	orrs	r2, r1
 8008430:	635a      	str	r2, [r3, #52]	@ 0x34
 8008432:	4b5c      	ldr	r3, [pc, #368]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008436:	2201      	movs	r2, #1
 8008438:	4013      	ands	r3, r2
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800843e:	216c      	movs	r1, #108	@ 0x6c
 8008440:	187b      	adds	r3, r7, r1
 8008442:	22c0      	movs	r2, #192	@ 0xc0
 8008444:	00d2      	lsls	r2, r2, #3
 8008446:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008448:	187b      	adds	r3, r7, r1
 800844a:	2202      	movs	r2, #2
 800844c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800844e:	187b      	adds	r3, r7, r1
 8008450:	2200      	movs	r2, #0
 8008452:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008454:	187b      	adds	r3, r7, r1
 8008456:	2200      	movs	r2, #0
 8008458:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800845a:	187b      	adds	r3, r7, r1
 800845c:	2201      	movs	r2, #1
 800845e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008460:	187a      	adds	r2, r7, r1
 8008462:	23a0      	movs	r3, #160	@ 0xa0
 8008464:	05db      	lsls	r3, r3, #23
 8008466:	0011      	movs	r1, r2
 8008468:	0018      	movs	r0, r3
 800846a:	f001 ff13 	bl	800a294 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800846e:	2200      	movs	r2, #0
 8008470:	2101      	movs	r1, #1
 8008472:	201b      	movs	r0, #27
 8008474:	f001 fa6e 	bl	8009954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008478:	201b      	movs	r0, #27
 800847a:	f001 fa80 	bl	800997e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800847e:	e08b      	b.n	8008598 <HAL_UART_MspInit+0x1dc>
  else if(uartHandle->Instance==USART2)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a48      	ldr	r2, [pc, #288]	@ (80085a8 <HAL_UART_MspInit+0x1ec>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d148      	bne.n	800851c <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800848a:	2120      	movs	r1, #32
 800848c:	187b      	adds	r3, r7, r1
 800848e:	2202      	movs	r2, #2
 8008490:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008492:	187b      	adds	r3, r7, r1
 8008494:	2200      	movs	r2, #0
 8008496:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008498:	187b      	adds	r3, r7, r1
 800849a:	0018      	movs	r0, r3
 800849c:	f003 fe28 	bl	800c0f0 <HAL_RCCEx_PeriphCLKConfig>
 80084a0:	1e03      	subs	r3, r0, #0
 80084a2:	d001      	beq.n	80084a8 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80084a4:	f7fe fa9e 	bl	80069e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80084a8:	4b3e      	ldr	r3, [pc, #248]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 80084aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ac:	4b3d      	ldr	r3, [pc, #244]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 80084ae:	2180      	movs	r1, #128	@ 0x80
 80084b0:	0289      	lsls	r1, r1, #10
 80084b2:	430a      	orrs	r2, r1
 80084b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80084b6:	4b3b      	ldr	r3, [pc, #236]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 80084b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ba:	2380      	movs	r3, #128	@ 0x80
 80084bc:	029b      	lsls	r3, r3, #10
 80084be:	4013      	ands	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084c4:	4b37      	ldr	r3, [pc, #220]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 80084c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c8:	4b36      	ldr	r3, [pc, #216]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 80084ca:	2101      	movs	r1, #1
 80084cc:	430a      	orrs	r2, r1
 80084ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80084d0:	4b34      	ldr	r3, [pc, #208]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 80084d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d4:	2201      	movs	r2, #1
 80084d6:	4013      	ands	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80084dc:	216c      	movs	r1, #108	@ 0x6c
 80084de:	187b      	adds	r3, r7, r1
 80084e0:	220c      	movs	r2, #12
 80084e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	2202      	movs	r2, #2
 80084e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ea:	187b      	adds	r3, r7, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084f0:	187b      	adds	r3, r7, r1
 80084f2:	2200      	movs	r2, #0
 80084f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80084f6:	187b      	adds	r3, r7, r1
 80084f8:	2201      	movs	r2, #1
 80084fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084fc:	187a      	adds	r2, r7, r1
 80084fe:	23a0      	movs	r3, #160	@ 0xa0
 8008500:	05db      	lsls	r3, r3, #23
 8008502:	0011      	movs	r1, r2
 8008504:	0018      	movs	r0, r3
 8008506:	f001 fec5 	bl	800a294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800850a:	2200      	movs	r2, #0
 800850c:	2100      	movs	r1, #0
 800850e:	201c      	movs	r0, #28
 8008510:	f001 fa20 	bl	8009954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8008514:	201c      	movs	r0, #28
 8008516:	f001 fa32 	bl	800997e <HAL_NVIC_EnableIRQ>
}
 800851a:	e03d      	b.n	8008598 <HAL_UART_MspInit+0x1dc>
  else if(uartHandle->Instance==USART6)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a22      	ldr	r2, [pc, #136]	@ (80085ac <HAL_UART_MspInit+0x1f0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d138      	bne.n	8008598 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008526:	4b1f      	ldr	r3, [pc, #124]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800852a:	4b1e      	ldr	r3, [pc, #120]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 800852c:	2180      	movs	r1, #128	@ 0x80
 800852e:	0089      	lsls	r1, r1, #2
 8008530:	430a      	orrs	r2, r1
 8008532:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008534:	4b1b      	ldr	r3, [pc, #108]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008538:	2380      	movs	r3, #128	@ 0x80
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008542:	4b18      	ldr	r3, [pc, #96]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008546:	4b17      	ldr	r3, [pc, #92]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008548:	2102      	movs	r1, #2
 800854a:	430a      	orrs	r2, r1
 800854c:	635a      	str	r2, [r3, #52]	@ 0x34
 800854e:	4b15      	ldr	r3, [pc, #84]	@ (80085a4 <HAL_UART_MspInit+0x1e8>)
 8008550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008552:	2202      	movs	r2, #2
 8008554:	4013      	ands	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
 8008558:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800855a:	216c      	movs	r1, #108	@ 0x6c
 800855c:	187b      	adds	r3, r7, r1
 800855e:	22c0      	movs	r2, #192	@ 0xc0
 8008560:	0092      	lsls	r2, r2, #2
 8008562:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008564:	187b      	adds	r3, r7, r1
 8008566:	2202      	movs	r2, #2
 8008568:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856a:	187b      	adds	r3, r7, r1
 800856c:	2200      	movs	r2, #0
 800856e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008570:	187b      	adds	r3, r7, r1
 8008572:	2200      	movs	r2, #0
 8008574:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008576:	187b      	adds	r3, r7, r1
 8008578:	2208      	movs	r2, #8
 800857a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800857c:	187b      	adds	r3, r7, r1
 800857e:	4a0c      	ldr	r2, [pc, #48]	@ (80085b0 <HAL_UART_MspInit+0x1f4>)
 8008580:	0019      	movs	r1, r3
 8008582:	0010      	movs	r0, r2
 8008584:	f001 fe86 	bl	800a294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8008588:	2200      	movs	r2, #0
 800858a:	2100      	movs	r1, #0
 800858c:	201d      	movs	r0, #29
 800858e:	f001 f9e1 	bl	8009954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8008592:	201d      	movs	r0, #29
 8008594:	f001 f9f3 	bl	800997e <HAL_NVIC_EnableIRQ>
}
 8008598:	46c0      	nop			@ (mov r8, r8)
 800859a:	46bd      	mov	sp, r7
 800859c:	b021      	add	sp, #132	@ 0x84
 800859e:	bd90      	pop	{r4, r7, pc}
 80085a0:	40013800 	.word	0x40013800
 80085a4:	40021000 	.word	0x40021000
 80085a8:	40004400 	.word	0x40004400
 80085ac:	40013c00 	.word	0x40013c00
 80085b0:	50000400 	.word	0x50000400

080085b4 <factory>:
 * \param poinyer to flashvars
 *
 * \return -.
 */
void factory(hw_info_t * hwinfo)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	uint32_t remember_stm_serial = hwinfo->stm_serial;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	60fb      	str	r3, [r7, #12]

	// Clear STM32 Flash parameters
	memset(hwinfo, 0x00, sizeof(hw_info_t));
 80085c2:	23ac      	movs	r3, #172	@ 0xac
 80085c4:	005a      	lsls	r2, r3, #1
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2100      	movs	r1, #0
 80085ca:	0018      	movs	r0, r3
 80085cc:	f006 ff9e 	bl	800f50c <memset>

	// set back the serial
	hwinfo->stm_serial = remember_stm_serial;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	609a      	str	r2, [r3, #8]

	hwinfo->hysteresis.x = 5;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	22f8      	movs	r2, #248	@ 0xf8
 80085da:	2105      	movs	r1, #5
 80085dc:	5099      	str	r1, [r3, r2]
	hwinfo->hysteresis.y = 5;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	22fc      	movs	r2, #252	@ 0xfc
 80085e2:	2105      	movs	r1, #5
 80085e4:	5099      	str	r1, [r3, r2]
	hwinfo->pid.repeat_ms = 5;
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	2380      	movs	r3, #128	@ 0x80
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	2105      	movs	r1, #5
 80085ee:	52d1      	strh	r1, [r2, r3]
	hwinfo->pid.i = 40;		// ms
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	2381      	movs	r3, #129	@ 0x81
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	2128      	movs	r1, #40	@ 0x28
 80085f8:	52d1      	strh	r1, [r2, r3]
	hwinfo->pid.p = 1000;	// 1000 = 1.000
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	2382      	movs	r3, #130	@ 0x82
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	21fa      	movs	r1, #250	@ 0xfa
 8008602:	0089      	lsls	r1, r1, #2
 8008604:	52d1      	strh	r1, [r2, r3]
	hwinfo->pid.d = 0;		// not used
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	2383      	movs	r3, #131	@ 0x83
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	2100      	movs	r1, #0
 800860e:	52d1      	strh	r1, [r2, r3]

	hwinfo->pid.softstart = 500; // ms
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	2384      	movs	r3, #132	@ 0x84
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	21fa      	movs	r1, #250	@ 0xfa
 8008618:	0049      	lsls	r1, r1, #1
 800861a:	52d1      	strh	r1, [r2, r3]

	hwinfo->debounce = 3000; // 3 seconds of ignore remote and end switch
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	2385      	movs	r3, #133	@ 0x85
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	492c      	ldr	r1, [pc, #176]	@ (80086d4 <factory+0x120>)
 8008624:	52d1      	strh	r1, [r2, r3]
	hwinfo->steps.x = 156;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	22f0      	movs	r2, #240	@ 0xf0
 800862a:	219c      	movs	r1, #156	@ 0x9c
 800862c:	5099      	str	r1, [r3, r2]
	hwinfo->steps.y = 156;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	22f4      	movs	r2, #244	@ 0xf4
 8008632:	219c      	movs	r1, #156	@ 0x9c
 8008634:	5099      	str	r1, [r3, r2]
	hwinfo->pwmfreq = 15000;
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	238e      	movs	r3, #142	@ 0x8e
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4926      	ldr	r1, [pc, #152]	@ (80086d8 <factory+0x124>)
 800863e:	50d1      	str	r1, [r2, r3]
	hwinfo->turnback = 10;
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	2392      	movs	r3, #146	@ 0x92
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	210a      	movs	r1, #10
 8008648:	50d1      	str	r1, [r2, r3]

	// parkposition should not be 0
	hwinfo->parkposition.x = 10 * hwinfo->steps.x;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	22f0      	movs	r2, #240	@ 0xf0
 800864e:	589a      	ldr	r2, [r3, r2]
 8008650:	0013      	movs	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	189b      	adds	r3, r3, r2
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	001a      	movs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	629a      	str	r2, [r3, #40]	@ 0x28
	hwinfo->parkposition.y = 10 * hwinfo->steps.y;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	22f4      	movs	r2, #244	@ 0xf4
 8008662:	589a      	ldr	r2, [r3, r2]
 8008664:	0013      	movs	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	189b      	adds	r3, r3, r2
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	001a      	movs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	62da      	str	r2, [r3, #44]	@ 0x2c

	hwinfo->max_pwm = 50;
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	238a      	movs	r3, #138	@ 0x8a
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	2132      	movs	r1, #50	@ 0x32
 800867a:	50d1      	str	r1, [r2, r3]
	hwinfo->min_pwm = 10;
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	2388      	movs	r3, #136	@ 0x88
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	210a      	movs	r1, #10
 8008684:	50d1      	str	r1, [r2, r3]
	hwinfo->maximum.x = DEFAULT_MAX;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	22fa      	movs	r2, #250	@ 0xfa
 800868a:	00d2      	lsls	r2, r2, #3
 800868c:	621a      	str	r2, [r3, #32]
	hwinfo->maximum.y = DEFAULT_MAX;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	22fa      	movs	r2, #250	@ 0xfa
 8008692:	00d2      	lsls	r2, r2, #3
 8008694:	625a      	str	r2, [r3, #36]	@ 0x24
	hwinfo->contrast = 30;
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	2390      	movs	r3, #144	@ 0x90
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	211e      	movs	r1, #30
 800869e:	54d1      	strb	r1, [r2, r3]
	hwinfo->track_interval = 10; // seconds
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	2391      	movs	r3, #145	@ 0x91
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	210a      	movs	r1, #10
 80086a8:	52d1      	strh	r1, [r2, r3]
	hwinfo->max_windpulse = 0x00; // no maxwind
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	238c      	movs	r3, #140	@ 0x8c
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	2100      	movs	r1, #0
 80086b2:	50d1      	str	r1, [r2, r3]
	hwinfo->sun_down_angle = 0;
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	2386      	movs	r3, #134	@ 0x86
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	2100      	movs	r1, #0
 80086bc:	52d1      	strh	r1, [r2, r3]

	// copy to real location
	WriteStruct2Flash(hwinfo, sizeof(hw_info_t));
 80086be:	23ac      	movs	r3, #172	@ 0xac
 80086c0:	005a      	lsls	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	0011      	movs	r1, r2
 80086c6:	0018      	movs	r0, r3
 80086c8:	f7fd fdd4 	bl	8006274 <WriteStruct2Flash>
}
 80086cc:	46c0      	nop			@ (mov r8, r8)
 80086ce:	46bd      	mov	sp, r7
 80086d0:	b004      	add	sp, #16
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	00000bb8 	.word	0x00000bb8
 80086d8:	00003a98 	.word	0x00003a98

080086dc <init_vars>:
 * \param pointer data
 *
 * \return -.
 */
void init_vars(void)
{
 80086dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086de:	b0bb      	sub	sp, #236	@ 0xec
 80086e0:	af08      	add	r7, sp, #32
	vars.error_status = ERR_NONE;
 80086e2:	4a7d      	ldr	r2, [pc, #500]	@ (80088d8 <init_vars+0x1fc>)
 80086e4:	23da      	movs	r3, #218	@ 0xda
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	2100      	movs	r1, #0
 80086ea:	50d1      	str	r1, [r2, r3]
	vars.out_of_range = false;
 80086ec:	4a7a      	ldr	r2, [pc, #488]	@ (80088d8 <init_vars+0x1fc>)
 80086ee:	23ba      	movs	r3, #186	@ 0xba
 80086f0:	33ff      	adds	r3, #255	@ 0xff
 80086f2:	2100      	movs	r1, #0
 80086f4:	54d1      	strb	r1, [r2, r3]
	vars.about_to_save = TG_NONE;
 80086f6:	4b78      	ldr	r3, [pc, #480]	@ (80088d8 <init_vars+0x1fc>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	751a      	strb	r2, [r3, #20]

	vars.screen_tmr = NO_TIMER;
 80086fc:	4a76      	ldr	r2, [pc, #472]	@ (80088d8 <init_vars+0x1fc>)
 80086fe:	23bc      	movs	r3, #188	@ 0xbc
 8008700:	33ff      	adds	r3, #255	@ 0xff
 8008702:	21fa      	movs	r1, #250	@ 0xfa
 8008704:	54d1      	strb	r1, [r2, r3]
	vars.tracking_tmr = NO_TIMER;
 8008706:	4a74      	ldr	r2, [pc, #464]	@ (80088d8 <init_vars+0x1fc>)
 8008708:	23de      	movs	r3, #222	@ 0xde
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	21fa      	movs	r1, #250	@ 0xfa
 800870e:	54d1      	strb	r1, [r2, r3]
	vars.calc_sun_tmr = NO_TIMER;
 8008710:	4a71      	ldr	r2, [pc, #452]	@ (80088d8 <init_vars+0x1fc>)
 8008712:	23be      	movs	r3, #190	@ 0xbe
 8008714:	33ff      	adds	r3, #255	@ 0xff
 8008716:	21fa      	movs	r1, #250	@ 0xfa
 8008718:	54d1      	strb	r1, [r2, r3]
	vars.lastrx_ayct102_home = 0;
 800871a:	4a6f      	ldr	r2, [pc, #444]	@ (80088d8 <init_vars+0x1fc>)
 800871c:	23d8      	movs	r3, #216	@ 0xd8
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	2100      	movs	r1, #0
 8008722:	50d1      	str	r1, [r2, r3]
	vars.gps_debug = false;
 8008724:	4a6c      	ldr	r2, [pc, #432]	@ (80088d8 <init_vars+0x1fc>)
 8008726:	23e0      	movs	r3, #224	@ 0xe0
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	2100      	movs	r1, #0
 800872c:	54d1      	strb	r1, [r2, r3]
	vars.gps_system = SYS_UNKNOWN;
 800872e:	4a6a      	ldr	r2, [pc, #424]	@ (80088d8 <init_vars+0x1fc>)
 8008730:	23c0      	movs	r3, #192	@ 0xc0
 8008732:	33ff      	adds	r3, #255	@ 0xff
 8008734:	2100      	movs	r1, #0
 8008736:	54d1      	strb	r1, [r2, r3]
	vars.wind_ppm = 0;
 8008738:	4a67      	ldr	r2, [pc, #412]	@ (80088d8 <init_vars+0x1fc>)
 800873a:	23d6      	movs	r3, #214	@ 0xd6
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	2100      	movs	r1, #0
 8008740:	50d1      	str	r1, [r2, r3]
	vars.deviation.x = vars.deviation.y = 0;
 8008742:	4b65      	ldr	r3, [pc, #404]	@ (80088d8 <init_vars+0x1fc>)
 8008744:	2200      	movs	r2, #0
 8008746:	611a      	str	r2, [r3, #16]
 8008748:	4b63      	ldr	r3, [pc, #396]	@ (80088d8 <init_vars+0x1fc>)
 800874a:	691a      	ldr	r2, [r3, #16]
 800874c:	4b62      	ldr	r3, [pc, #392]	@ (80088d8 <init_vars+0x1fc>)
 800874e:	60da      	str	r2, [r3, #12]

	BRIDGE_DRIVE_DIS;
 8008750:	23a0      	movs	r3, #160	@ 0xa0
 8008752:	05db      	lsls	r3, r3, #23
 8008754:	2200      	movs	r2, #0
 8008756:	2110      	movs	r1, #16
 8008758:	0018      	movs	r0, r3
 800875a:	f001 ff24 	bl	800a5a6 <HAL_GPIO_WritePin>
	LCD_BACK_ON;
 800875e:	4b5f      	ldr	r3, [pc, #380]	@ (80088dc <init_vars+0x200>)
 8008760:	2201      	movs	r2, #1
 8008762:	2180      	movs	r1, #128	@ 0x80
 8008764:	0018      	movs	r0, r3
 8008766:	f001 ff1e 	bl	800a5a6 <HAL_GPIO_WritePin>

	if (adc_calib() != HAL_OK)
 800876a:	f7fd f911 	bl	8005990 <adc_calib>
 800876e:	1e03      	subs	r3, r0, #0
 8008770:	d004      	beq.n	800877c <init_vars+0xa0>
		tty_printf(" Error ADC calibration\r\n");
 8008772:	4b5b      	ldr	r3, [pc, #364]	@ (80088e0 <init_vars+0x204>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a5b      	ldr	r2, [pc, #364]	@ (80088e4 <init_vars+0x208>)
 8008778:	0010      	movs	r0, r2
 800877a:	4798      	blx	r3
		tty_printf("TLE version 0x%02X 0x%02X\r\n", result[0], result[1]);
	else
		tty_printf(" Error TLE\r\n");
#endif
	// read vars.hwinfo
	if (ReadStruct2Flash(&vars.hwinfo, sizeof(hw_info_t)) == ERR_CRC)
 800877c:	23ac      	movs	r3, #172	@ 0xac
 800877e:	005a      	lsls	r2, r3, #1
 8008780:	4b59      	ldr	r3, [pc, #356]	@ (80088e8 <init_vars+0x20c>)
 8008782:	0011      	movs	r1, r2
 8008784:	0018      	movs	r0, r3
 8008786:	f7fd fd21 	bl	80061cc <ReadStruct2Flash>
 800878a:	0003      	movs	r3, r0
 800878c:	2b02      	cmp	r3, #2
 800878e:	d119      	bne.n	80087c4 <init_vars+0xe8>
	{
		// Possibly the old version?
		old_hw_info_t old_hw_info;
		if (ReadStruct2Flash(&old_hw_info, sizeof(old_hw_info_t)) != ERR_CRC)
 8008790:	1d3b      	adds	r3, r7, #4
 8008792:	21c4      	movs	r1, #196	@ 0xc4
 8008794:	0018      	movs	r0, r3
 8008796:	f7fd fd19 	bl	80061cc <ReadStruct2Flash>
 800879a:	0003      	movs	r3, r0
 800879c:	2b02      	cmp	r3, #2
 800879e:	d008      	beq.n	80087b2 <init_vars+0xd6>
		{
			vars.hwinfo.stm_serial = old_hw_info.stm_serial;
 80087a0:	1d3b      	adds	r3, r7, #4
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	4b4c      	ldr	r3, [pc, #304]	@ (80088d8 <init_vars+0x1fc>)
 80087a6:	621a      	str	r2, [r3, #32]
			tty_printf("Found old serial\r\n");
 80087a8:	4b4d      	ldr	r3, [pc, #308]	@ (80088e0 <init_vars+0x204>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a4f      	ldr	r2, [pc, #316]	@ (80088ec <init_vars+0x210>)
 80087ae:	0010      	movs	r0, r2
 80087b0:	4798      	blx	r3
		}

		tty_printf("  Error loading flash: restore defaults\r\n");
 80087b2:	4b4b      	ldr	r3, [pc, #300]	@ (80088e0 <init_vars+0x204>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4e      	ldr	r2, [pc, #312]	@ (80088f0 <init_vars+0x214>)
 80087b8:	0010      	movs	r0, r2
 80087ba:	4798      	blx	r3
		factory(&vars.hwinfo);
 80087bc:	4b4a      	ldr	r3, [pc, #296]	@ (80088e8 <init_vars+0x20c>)
 80087be:	0018      	movs	r0, r3
 80087c0:	f7ff fef8 	bl	80085b4 <factory>

	/*
	 * testtest
	 */
	/** Load Clean, System Clean, PowerUp counters from I2C eerom */
	if (ReadStruct2eerom(&vars.eevar))
 80087c4:	4b4b      	ldr	r3, [pc, #300]	@ (80088f4 <init_vars+0x218>)
 80087c6:	0018      	movs	r0, r3
 80087c8:	f7fd fa84 	bl	8005cd4 <ReadStruct2eerom>
 80087cc:	1e03      	subs	r3, r0, #0
 80087ce:	d03f      	beq.n	8008850 <init_vars+0x174>
	{
		// CRC error: load defaults
		tty_printf("  Error reading eeprom\r\n");
 80087d0:	4b43      	ldr	r3, [pc, #268]	@ (80088e0 <init_vars+0x204>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a48      	ldr	r2, [pc, #288]	@ (80088f8 <init_vars+0x21c>)
 80087d6:	0010      	movs	r0, r2
 80087d8:	4798      	blx	r3

		vars.eevar.actual_motor.x = 1000;
 80087da:	4a3f      	ldr	r2, [pc, #252]	@ (80088d8 <init_vars+0x1fc>)
 80087dc:	23be      	movs	r3, #190	@ 0xbe
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	21fa      	movs	r1, #250	@ 0xfa
 80087e2:	0089      	lsls	r1, r1, #2
 80087e4:	50d1      	str	r1, [r2, r3]
		vars.eevar.actual_motor.y = 1000;
 80087e6:	4a3c      	ldr	r2, [pc, #240]	@ (80088d8 <init_vars+0x1fc>)
 80087e8:	23c0      	movs	r3, #192	@ 0xc0
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	21fa      	movs	r1, #250	@ 0xfa
 80087ee:	0089      	lsls	r1, r1, #2
 80087f0:	50d1      	str	r1, [r2, r3]
		vars.eevar.bootcounter = 0;
 80087f2:	4a39      	ldr	r2, [pc, #228]	@ (80088d8 <init_vars+0x1fc>)
 80087f4:	23cc      	movs	r3, #204	@ 0xcc
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	2100      	movs	r1, #0
 80087fa:	50d1      	str	r1, [r2, r3]
		vars.eevar.tracking_minutes = 0;
 80087fc:	4a36      	ldr	r2, [pc, #216]	@ (80088d8 <init_vars+0x1fc>)
 80087fe:	23ca      	movs	r3, #202	@ 0xca
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	2100      	movs	r1, #0
 8008804:	50d1      	str	r1, [r2, r3]

		// will enter calibration mode because of this
		vars.hwinfo.maximum.x = DEFAULT_MAX;
 8008806:	4b34      	ldr	r3, [pc, #208]	@ (80088d8 <init_vars+0x1fc>)
 8008808:	22fa      	movs	r2, #250	@ 0xfa
 800880a:	00d2      	lsls	r2, r2, #3
 800880c:	639a      	str	r2, [r3, #56]	@ 0x38
		vars.hwinfo.maximum.y = DEFAULT_MAX;
 800880e:	4b32      	ldr	r3, [pc, #200]	@ (80088d8 <init_vars+0x1fc>)
 8008810:	22fa      	movs	r2, #250	@ 0xfa
 8008812:	00d2      	lsls	r2, r2, #3
 8008814:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (WriteStruct2eerom(vars.eevar))
 8008816:	4d30      	ldr	r5, [pc, #192]	@ (80088d8 <init_vars+0x1fc>)
 8008818:	23be      	movs	r3, #190	@ 0xbe
 800881a:	005c      	lsls	r4, r3, #1
 800881c:	2210      	movs	r2, #16
 800881e:	192b      	adds	r3, r5, r4
 8008820:	189a      	adds	r2, r3, r2
 8008822:	466b      	mov	r3, sp
 8008824:	ca43      	ldmia	r2!, {r0, r1, r6}
 8008826:	c343      	stmia	r3!, {r0, r1, r6}
 8008828:	ca43      	ldmia	r2!, {r0, r1, r6}
 800882a:	c343      	stmia	r3!, {r0, r1, r6}
 800882c:	ca03      	ldmia	r2!, {r0, r1}
 800882e:	c303      	stmia	r3!, {r0, r1}
 8008830:	5928      	ldr	r0, [r5, r4]
 8008832:	192b      	adds	r3, r5, r4
 8008834:	6859      	ldr	r1, [r3, #4]
 8008836:	192b      	adds	r3, r5, r4
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	192b      	adds	r3, r5, r4
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f7fd fa11 	bl	8005c64 <WriteStruct2eerom>
 8008842:	1e03      	subs	r3, r0, #0
 8008844:	d004      	beq.n	8008850 <init_vars+0x174>
			tty_printf("  Error write eeprom\r\n");
 8008846:	4b26      	ldr	r3, [pc, #152]	@ (80088e0 <init_vars+0x204>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a2c      	ldr	r2, [pc, #176]	@ (80088fc <init_vars+0x220>)
 800884c:	0010      	movs	r0, r2
 800884e:	4798      	blx	r3

	}

	new_pwm_freq(vars.hwinfo.pwmfreq);
 8008850:	4a21      	ldr	r2, [pc, #132]	@ (80088d8 <init_vars+0x1fc>)
 8008852:	239a      	movs	r3, #154	@ 0x9a
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	58d3      	ldr	r3, [r2, r3]
 8008858:	0018      	movs	r0, r3
 800885a:	f7fe ffb3 	bl	80077c4 <new_pwm_freq>

	// compatible with new parameter
	if (vars.hwinfo.turnback == 0)
 800885e:	4a1e      	ldr	r2, [pc, #120]	@ (80088d8 <init_vars+0x1fc>)
 8008860:	239e      	movs	r3, #158	@ 0x9e
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	58d3      	ldr	r3, [r2, r3]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d104      	bne.n	8008874 <init_vars+0x198>
		vars.hwinfo.turnback = 10;
 800886a:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <init_vars+0x1fc>)
 800886c:	239e      	movs	r3, #158	@ 0x9e
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	210a      	movs	r1, #10
 8008872:	50d1      	str	r1, [r2, r3]

	// number of boots
	vars.eevar.bootcounter++;
 8008874:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <init_vars+0x1fc>)
 8008876:	23cc      	movs	r3, #204	@ 0xcc
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	58d3      	ldr	r3, [r2, r3]
 800887c:	1c59      	adds	r1, r3, #1
 800887e:	4a16      	ldr	r2, [pc, #88]	@ (80088d8 <init_vars+0x1fc>)
 8008880:	23cc      	movs	r3, #204	@ 0xcc
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	50d1      	str	r1, [r2, r3]
	vars.max_pwm = vars.hwinfo.max_pwm;
 8008886:	4a14      	ldr	r2, [pc, #80]	@ (80088d8 <init_vars+0x1fc>)
 8008888:	2396      	movs	r3, #150	@ 0x96
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	58d3      	ldr	r3, [r2, r3]
 800888e:	b259      	sxtb	r1, r3
 8008890:	4a11      	ldr	r2, [pc, #68]	@ (80088d8 <init_vars+0x1fc>)
 8008892:	23dc      	movs	r3, #220	@ 0xdc
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	54d1      	strb	r1, [r2, r3]

	// do not move
	vars.goto_motor = vars.eevar.actual_motor;
 8008898:	4b0f      	ldr	r3, [pc, #60]	@ (80088d8 <init_vars+0x1fc>)
 800889a:	490f      	ldr	r1, [pc, #60]	@ (80088d8 <init_vars+0x1fc>)
 800889c:	22be      	movs	r2, #190	@ 0xbe
 800889e:	0052      	lsls	r2, r2, #1
 80088a0:	3304      	adds	r3, #4
 80088a2:	188a      	adds	r2, r1, r2
 80088a4:	ca03      	ldmia	r2!, {r0, r1}
 80088a6:	c303      	stmia	r3!, {r0, r1}
	set_contrast(vars.hwinfo.contrast);
 80088a8:	4a0b      	ldr	r2, [pc, #44]	@ (80088d8 <init_vars+0x1fc>)
 80088aa:	239c      	movs	r3, #156	@ 0x9c
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	5cd3      	ldrb	r3, [r2, r3]
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7fe ff75 	bl	80077a0 <set_contrast>

	// store mode to wait for GPS mode
	vars.store_main_mode = vars.eevar.main_mode;
 80088b6:	4a08      	ldr	r2, [pc, #32]	@ (80088d8 <init_vars+0x1fc>)
 80088b8:	23c6      	movs	r3, #198	@ 0xc6
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	5cd1      	ldrb	r1, [r2, r3]
 80088be:	4a06      	ldr	r2, [pc, #24]	@ (80088d8 <init_vars+0x1fc>)
 80088c0:	23b8      	movs	r3, #184	@ 0xb8
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	54d1      	strb	r1, [r2, r3]
	vars.eevar.main_mode = ST_INIT;
 80088c6:	4a04      	ldr	r2, [pc, #16]	@ (80088d8 <init_vars+0x1fc>)
 80088c8:	23c6      	movs	r3, #198	@ 0xc6
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	2113      	movs	r1, #19
 80088ce:	54d1      	strb	r1, [r2, r3]

}
 80088d0:	46c0      	nop			@ (mov r8, r8)
 80088d2:	46bd      	mov	sp, r7
 80088d4:	b033      	add	sp, #204	@ 0xcc
 80088d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d8:	20000258 	.word	0x20000258
 80088dc:	50000400 	.word	0x50000400
 80088e0:	20000a48 	.word	0x20000a48
 80088e4:	0801192c 	.word	0x0801192c
 80088e8:	20000270 	.word	0x20000270
 80088ec:	08011948 	.word	0x08011948
 80088f0:	0801195c 	.word	0x0801195c
 80088f4:	200003d4 	.word	0x200003d4
 80088f8:	08011988 	.word	0x08011988
 80088fc:	080119a4 	.word	0x080119a4

08008900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008900:	480d      	ldr	r0, [pc, #52]	@ (8008938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008902:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008904:	f7fe fcc4 	bl	8007290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008908:	480c      	ldr	r0, [pc, #48]	@ (800893c <LoopForever+0x6>)
  ldr r1, =_edata
 800890a:	490d      	ldr	r1, [pc, #52]	@ (8008940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800890c:	4a0d      	ldr	r2, [pc, #52]	@ (8008944 <LoopForever+0xe>)
  movs r3, #0
 800890e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008910:	e002      	b.n	8008918 <LoopCopyDataInit>

08008912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008916:	3304      	adds	r3, #4

08008918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800891a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800891c:	d3f9      	bcc.n	8008912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800891e:	4a0a      	ldr	r2, [pc, #40]	@ (8008948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008920:	4c0a      	ldr	r4, [pc, #40]	@ (800894c <LoopForever+0x16>)
  movs r3, #0
 8008922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008924:	e001      	b.n	800892a <LoopFillZerobss>

08008926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008928:	3204      	adds	r2, #4

0800892a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800892a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800892c:	d3fb      	bcc.n	8008926 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800892e:	f006 fe5b 	bl	800f5e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008932:	f7fd ff5f 	bl	80067f4 <main>

08008936 <LoopForever>:

LoopForever:
  b LoopForever
 8008936:	e7fe      	b.n	8008936 <LoopForever>
  ldr   r0, =_estack
 8008938:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800893c:	20000010 	.word	0x20000010
  ldr r1, =_edata
 8008940:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8008944:	08011b48 	.word	0x08011b48
  ldr r2, =_sbss
 8008948:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 800894c:	20001fec 	.word	0x20001fec

08008950 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008950:	e7fe      	b.n	8008950 <ADC1_COMP_IRQHandler>
	...

08008954 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800895a:	1dfb      	adds	r3, r7, #7
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008960:	4b0b      	ldr	r3, [pc, #44]	@ (8008990 <HAL_Init+0x3c>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	4b0a      	ldr	r3, [pc, #40]	@ (8008990 <HAL_Init+0x3c>)
 8008966:	2180      	movs	r1, #128	@ 0x80
 8008968:	0049      	lsls	r1, r1, #1
 800896a:	430a      	orrs	r2, r1
 800896c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800896e:	2000      	movs	r0, #0
 8008970:	f000 f810 	bl	8008994 <HAL_InitTick>
 8008974:	1e03      	subs	r3, r0, #0
 8008976:	d003      	beq.n	8008980 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008978:	1dfb      	adds	r3, r7, #7
 800897a:	2201      	movs	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	e001      	b.n	8008984 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008980:	f7fe fb5e 	bl	8007040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008984:	1dfb      	adds	r3, r7, #7
 8008986:	781b      	ldrb	r3, [r3, #0]
}
 8008988:	0018      	movs	r0, r3
 800898a:	46bd      	mov	sp, r7
 800898c:	b002      	add	sp, #8
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40022000 	.word	0x40022000

08008994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800899c:	230f      	movs	r3, #15
 800899e:	18fb      	adds	r3, r7, r3
 80089a0:	2200      	movs	r2, #0
 80089a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80089a4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a1c <HAL_InitTick+0x88>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d02b      	beq.n	8008a04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80089ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008a20 <HAL_InitTick+0x8c>)
 80089ae:	681c      	ldr	r4, [r3, #0]
 80089b0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a1c <HAL_InitTick+0x88>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	0019      	movs	r1, r3
 80089b6:	23fa      	movs	r3, #250	@ 0xfa
 80089b8:	0098      	lsls	r0, r3, #2
 80089ba:	f7fc fcaf 	bl	800531c <__udivsi3>
 80089be:	0003      	movs	r3, r0
 80089c0:	0019      	movs	r1, r3
 80089c2:	0020      	movs	r0, r4
 80089c4:	f7fc fcaa 	bl	800531c <__udivsi3>
 80089c8:	0003      	movs	r3, r0
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 ffe7 	bl	800999e <HAL_SYSTICK_Config>
 80089d0:	1e03      	subs	r3, r0, #0
 80089d2:	d112      	bne.n	80089fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d80a      	bhi.n	80089f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	2301      	movs	r3, #1
 80089de:	425b      	negs	r3, r3
 80089e0:	2200      	movs	r2, #0
 80089e2:	0018      	movs	r0, r3
 80089e4:	f000 ffb6 	bl	8009954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80089e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a24 <HAL_InitTick+0x90>)
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e00d      	b.n	8008a0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80089f0:	230f      	movs	r3, #15
 80089f2:	18fb      	adds	r3, r7, r3
 80089f4:	2201      	movs	r2, #1
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	e008      	b.n	8008a0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80089fa:	230f      	movs	r3, #15
 80089fc:	18fb      	adds	r3, r7, r3
 80089fe:	2201      	movs	r2, #1
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e003      	b.n	8008a0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008a04:	230f      	movs	r3, #15
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008a0c:	230f      	movs	r3, #15
 8008a0e:	18fb      	adds	r3, r7, r3
 8008a10:	781b      	ldrb	r3, [r3, #0]
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b005      	add	sp, #20
 8008a18:	bd90      	pop	{r4, r7, pc}
 8008a1a:	46c0      	nop			@ (mov r8, r8)
 8008a1c:	20000040 	.word	0x20000040
 8008a20:	20000018 	.word	0x20000018
 8008a24:	2000003c 	.word	0x2000003c

08008a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008a2c:	4b05      	ldr	r3, [pc, #20]	@ (8008a44 <HAL_IncTick+0x1c>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	001a      	movs	r2, r3
 8008a32:	4b05      	ldr	r3, [pc, #20]	@ (8008a48 <HAL_IncTick+0x20>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	18d2      	adds	r2, r2, r3
 8008a38:	4b03      	ldr	r3, [pc, #12]	@ (8008a48 <HAL_IncTick+0x20>)
 8008a3a:	601a      	str	r2, [r3, #0]
}
 8008a3c:	46c0      	nop			@ (mov r8, r8)
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	46c0      	nop			@ (mov r8, r8)
 8008a44:	20000040 	.word	0x20000040
 8008a48:	20001e80 	.word	0x20001e80

08008a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a50:	4b02      	ldr	r3, [pc, #8]	@ (8008a5c <HAL_GetTick+0x10>)
 8008a52:	681b      	ldr	r3, [r3, #0]
}
 8008a54:	0018      	movs	r0, r3
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	46c0      	nop			@ (mov r8, r8)
 8008a5c:	20001e80 	.word	0x20001e80

08008a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a68:	f7ff fff0 	bl	8008a4c <HAL_GetTick>
 8008a6c:	0003      	movs	r3, r0
 8008a6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	d005      	beq.n	8008a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa4 <HAL_Delay+0x44>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	001a      	movs	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	189b      	adds	r3, r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a86:	46c0      	nop			@ (mov r8, r8)
 8008a88:	f7ff ffe0 	bl	8008a4c <HAL_GetTick>
 8008a8c:	0002      	movs	r2, r0
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d8f7      	bhi.n	8008a88 <HAL_Delay+0x28>
  {
  }
}
 8008a98:	46c0      	nop			@ (mov r8, r8)
 8008a9a:	46c0      	nop			@ (mov r8, r8)
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b004      	add	sp, #16
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	46c0      	nop			@ (mov r8, r8)
 8008aa4:	20000040 	.word	0x20000040

08008aa8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a06      	ldr	r2, [pc, #24]	@ (8008ad0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	0019      	movs	r1, r3
 8008aba:	4b04      	ldr	r3, [pc, #16]	@ (8008acc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	601a      	str	r2, [r3, #0]
}
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b002      	add	sp, #8
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	46c0      	nop			@ (mov r8, r8)
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	fffff9ff 	.word	0xfffff9ff

08008ad4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a05      	ldr	r2, [pc, #20]	@ (8008af8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8008ae4:	401a      	ands	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	601a      	str	r2, [r3, #0]
}
 8008aee:	46c0      	nop			@ (mov r8, r8)
 8008af0:	46bd      	mov	sp, r7
 8008af2:	b002      	add	sp, #8
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	46c0      	nop			@ (mov r8, r8)
 8008af8:	fe3fffff 	.word	0xfe3fffff

08008afc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	23e0      	movs	r3, #224	@ 0xe0
 8008b0a:	045b      	lsls	r3, r3, #17
 8008b0c:	4013      	ands	r3, r2
}
 8008b0e:	0018      	movs	r0, r3
 8008b10:	46bd      	mov	sp, r7
 8008b12:	b002      	add	sp, #8
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	2104      	movs	r1, #4
 8008b2a:	400a      	ands	r2, r1
 8008b2c:	2107      	movs	r1, #7
 8008b2e:	4091      	lsls	r1, r2
 8008b30:	000a      	movs	r2, r1
 8008b32:	43d2      	mvns	r2, r2
 8008b34:	401a      	ands	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2104      	movs	r1, #4
 8008b3a:	400b      	ands	r3, r1
 8008b3c:	6879      	ldr	r1, [r7, #4]
 8008b3e:	4099      	lsls	r1, r3
 8008b40:	000b      	movs	r3, r1
 8008b42:	431a      	orrs	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8008b48:	46c0      	nop			@ (mov r8, r8)
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b004      	add	sp, #16
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	2104      	movs	r1, #4
 8008b62:	400a      	ands	r2, r1
 8008b64:	2107      	movs	r1, #7
 8008b66:	4091      	lsls	r1, r2
 8008b68:	000a      	movs	r2, r1
 8008b6a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2104      	movs	r1, #4
 8008b70:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008b72:	40da      	lsrs	r2, r3
 8008b74:	0013      	movs	r3, r2
}
 8008b76:	0018      	movs	r0, r3
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b002      	add	sp, #8
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	211f      	movs	r1, #31
 8008b92:	400a      	ands	r2, r1
 8008b94:	210f      	movs	r1, #15
 8008b96:	4091      	lsls	r1, r2
 8008b98:	000a      	movs	r2, r1
 8008b9a:	43d2      	mvns	r2, r2
 8008b9c:	401a      	ands	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	0e9b      	lsrs	r3, r3, #26
 8008ba2:	210f      	movs	r1, #15
 8008ba4:	4019      	ands	r1, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	201f      	movs	r0, #31
 8008baa:	4003      	ands	r3, r0
 8008bac:	4099      	lsls	r1, r3
 8008bae:	000b      	movs	r3, r1
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008bb6:	46c0      	nop			@ (mov r8, r8)
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b004      	add	sp, #16
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	035b      	lsls	r3, r3, #13
 8008bd0:	0b5b      	lsrs	r3, r3, #13
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008bd8:	46c0      	nop			@ (mov r8, r8)
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	b002      	add	sp, #8
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	0352      	lsls	r2, r2, #13
 8008bf2:	0b52      	lsrs	r2, r2, #13
 8008bf4:	43d2      	mvns	r2, r2
 8008bf6:	401a      	ands	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008bfc:	46c0      	nop			@ (mov r8, r8)
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	b002      	add	sp, #8
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	0212      	lsls	r2, r2, #8
 8008c18:	43d2      	mvns	r2, r2
 8008c1a:	401a      	ands	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	400b      	ands	r3, r1
 8008c24:	4904      	ldr	r1, [pc, #16]	@ (8008c38 <LL_ADC_SetChannelSamplingTime+0x34>)
 8008c26:	400b      	ands	r3, r1
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8008c2e:	46c0      	nop			@ (mov r8, r8)
 8008c30:	46bd      	mov	sp, r7
 8008c32:	b004      	add	sp, #16
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	46c0      	nop			@ (mov r8, r8)
 8008c38:	07ffff00 	.word	0x07ffff00

08008c3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	4a05      	ldr	r2, [pc, #20]	@ (8008c60 <LL_ADC_EnableInternalRegulator+0x24>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	2280      	movs	r2, #128	@ 0x80
 8008c4e:	0552      	lsls	r2, r2, #21
 8008c50:	431a      	orrs	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008c56:	46c0      	nop			@ (mov r8, r8)
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b002      	add	sp, #8
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	46c0      	nop			@ (mov r8, r8)
 8008c60:	6fffffe8 	.word	0x6fffffe8

08008c64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	2380      	movs	r3, #128	@ 0x80
 8008c72:	055b      	lsls	r3, r3, #21
 8008c74:	401a      	ands	r2, r3
 8008c76:	2380      	movs	r3, #128	@ 0x80
 8008c78:	055b      	lsls	r3, r3, #21
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d101      	bne.n	8008c82 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	0018      	movs	r0, r3
 8008c86:	46bd      	mov	sp, r7
 8008c88:	b002      	add	sp, #8
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	4a04      	ldr	r2, [pc, #16]	@ (8008cac <LL_ADC_Disable+0x20>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008ca4:	46c0      	nop			@ (mov r8, r8)
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	b002      	add	sp, #8
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	7fffffe8 	.word	0x7fffffe8

08008cb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d101      	bne.n	8008cc8 <LL_ADC_IsEnabled+0x18>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <LL_ADC_IsEnabled+0x1a>
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	0018      	movs	r0, r3
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	b002      	add	sp, #8
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d101      	bne.n	8008cea <LL_ADC_IsDisableOngoing+0x18>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <LL_ADC_IsDisableOngoing+0x1a>
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	0018      	movs	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b002      	add	sp, #8
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	2204      	movs	r2, #4
 8008d02:	4013      	ands	r3, r2
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d101      	bne.n	8008d0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	0018      	movs	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	b002      	add	sp, #8
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d20:	231f      	movs	r3, #31
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	2200      	movs	r2, #0
 8008d26:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e17f      	b.n	800903e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f7fc fddd 	bl	8005908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2254      	movs	r2, #84	@ 0x54
 8008d58:	2100      	movs	r1, #0
 8008d5a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	0018      	movs	r0, r3
 8008d62:	f7ff ff7f 	bl	8008c64 <LL_ADC_IsInternalRegulatorEnabled>
 8008d66:	1e03      	subs	r3, r0, #0
 8008d68:	d115      	bne.n	8008d96 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7ff ff64 	bl	8008c3c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008d74:	4bb4      	ldr	r3, [pc, #720]	@ (8009048 <HAL_ADC_Init+0x330>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	49b4      	ldr	r1, [pc, #720]	@ (800904c <HAL_ADC_Init+0x334>)
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f7fc face 	bl	800531c <__udivsi3>
 8008d80:	0003      	movs	r3, r0
 8008d82:	3301      	adds	r3, #1
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008d88:	e002      	b.n	8008d90 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f9      	bne.n	8008d8a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f7ff ff62 	bl	8008c64 <LL_ADC_IsInternalRegulatorEnabled>
 8008da0:	1e03      	subs	r3, r0, #0
 8008da2:	d10f      	bne.n	8008dc4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da8:	2210      	movs	r2, #16
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db4:	2201      	movs	r2, #1
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008dbc:	231f      	movs	r3, #31
 8008dbe:	18fb      	adds	r3, r7, r3
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f7ff ff93 	bl	8008cf4 <LL_ADC_REG_IsConversionOngoing>
 8008dce:	0003      	movs	r3, r0
 8008dd0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd6:	2210      	movs	r2, #16
 8008dd8:	4013      	ands	r3, r2
 8008dda:	d000      	beq.n	8008dde <HAL_ADC_Init+0xc6>
 8008ddc:	e122      	b.n	8009024 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d000      	beq.n	8008de6 <HAL_ADC_Init+0xce>
 8008de4:	e11e      	b.n	8009024 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dea:	4a99      	ldr	r2, [pc, #612]	@ (8009050 <HAL_ADC_Init+0x338>)
 8008dec:	4013      	ands	r3, r2
 8008dee:	2202      	movs	r2, #2
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f7ff ff58 	bl	8008cb0 <LL_ADC_IsEnabled>
 8008e00:	1e03      	subs	r3, r0, #0
 8008e02:	d000      	beq.n	8008e06 <HAL_ADC_Init+0xee>
 8008e04:	e0ad      	b.n	8008f62 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	7e1b      	ldrb	r3, [r3, #24]
 8008e0e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8008e10:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7e5b      	ldrb	r3, [r3, #25]
 8008e16:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008e18:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7e9b      	ldrb	r3, [r3, #26]
 8008e1e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8008e20:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_ADC_Init+0x118>
 8008e2a:	2380      	movs	r3, #128	@ 0x80
 8008e2c:	015b      	lsls	r3, r3, #5
 8008e2e:	e000      	b.n	8008e32 <HAL_ADC_Init+0x11a>
 8008e30:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008e32:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008e38:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da04      	bge.n	8008e4c <HAL_ADC_Init+0x134>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	085b      	lsrs	r3, r3, #1
 8008e4a:	e001      	b.n	8008e50 <HAL_ADC_Init+0x138>
 8008e4c:	2380      	movs	r3, #128	@ 0x80
 8008e4e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8008e50:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	212c      	movs	r1, #44	@ 0x2c
 8008e56:	5c5b      	ldrb	r3, [r3, r1]
 8008e58:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008e5a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	5c9b      	ldrb	r3, [r3, r2]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d115      	bne.n	8008e98 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7e9b      	ldrb	r3, [r3, #26]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d105      	bne.n	8008e80 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	2280      	movs	r2, #128	@ 0x80
 8008e78:	0252      	lsls	r2, r2, #9
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	61bb      	str	r3, [r7, #24]
 8008e7e:	e00b      	b.n	8008e98 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e84:	2220      	movs	r2, #32
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e90:	2201      	movs	r2, #1
 8008e92:	431a      	orrs	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00a      	beq.n	8008eb6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ea4:	23e0      	movs	r3, #224	@ 0xe0
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	4a65      	ldr	r2, [pc, #404]	@ (8009054 <HAL_ADC_Init+0x33c>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	0019      	movs	r1, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	0f9b      	lsrs	r3, r3, #30
 8008ed2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	223c      	movs	r2, #60	@ 0x3c
 8008ee4:	5c9b      	ldrb	r3, [r3, r2]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d111      	bne.n	8008f0e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	0f9b      	lsrs	r3, r3, #30
 8008ef0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008ef6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8008efc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8008f02:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	4a50      	ldr	r2, [pc, #320]	@ (8009058 <HAL_ADC_Init+0x340>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	0019      	movs	r1, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	23c0      	movs	r3, #192	@ 0xc0
 8008f2a:	061b      	lsls	r3, r3, #24
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d018      	beq.n	8008f62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8008f34:	2380      	movs	r3, #128	@ 0x80
 8008f36:	05db      	lsls	r3, r3, #23
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d012      	beq.n	8008f62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8008f40:	2380      	movs	r3, #128	@ 0x80
 8008f42:	061b      	lsls	r3, r3, #24
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d00c      	beq.n	8008f62 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8008f48:	4b44      	ldr	r3, [pc, #272]	@ (800905c <HAL_ADC_Init+0x344>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a44      	ldr	r2, [pc, #272]	@ (8009060 <HAL_ADC_Init+0x348>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	0019      	movs	r1, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	23f0      	movs	r3, #240	@ 0xf0
 8008f58:	039b      	lsls	r3, r3, #14
 8008f5a:	401a      	ands	r2, r3
 8008f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800905c <HAL_ADC_Init+0x344>)
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6a:	001a      	movs	r2, r3
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	f7ff fdd2 	bl	8008b16 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7a:	493a      	ldr	r1, [pc, #232]	@ (8009064 <HAL_ADC_Init+0x34c>)
 8008f7c:	001a      	movs	r2, r3
 8008f7e:	f7ff fdca 	bl	8008b16 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2110      	movs	r1, #16
 8008f96:	4249      	negs	r1, r1
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f9c:	e018      	b.n	8008fd0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691a      	ldr	r2, [r3, #16]
 8008fa2:	2380      	movs	r3, #128	@ 0x80
 8008fa4:	039b      	lsls	r3, r3, #14
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d112      	bne.n	8008fd0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	221c      	movs	r2, #28
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2210      	movs	r2, #16
 8008fbe:	4252      	negs	r2, r2
 8008fc0:	409a      	lsls	r2, r3
 8008fc2:	0011      	movs	r1, r2
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f7ff fdba 	bl	8008b50 <LL_ADC_GetSamplingTimeCommonChannels>
 8008fdc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d10b      	bne.n	8008ffe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	4393      	bics	r3, r2
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008ffc:	e01c      	b.n	8009038 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009002:	2212      	movs	r2, #18
 8009004:	4393      	bics	r3, r2
 8009006:	2210      	movs	r2, #16
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009012:	2201      	movs	r2, #1
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800901a:	231f      	movs	r3, #31
 800901c:	18fb      	adds	r3, r7, r3
 800901e:	2201      	movs	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009022:	e009      	b.n	8009038 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009028:	2210      	movs	r2, #16
 800902a:	431a      	orrs	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009030:	231f      	movs	r3, #31
 8009032:	18fb      	adds	r3, r7, r3
 8009034:	2201      	movs	r2, #1
 8009036:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009038:	231f      	movs	r3, #31
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	781b      	ldrb	r3, [r3, #0]
}
 800903e:	0018      	movs	r0, r3
 8009040:	46bd      	mov	sp, r7
 8009042:	b008      	add	sp, #32
 8009044:	bd80      	pop	{r7, pc}
 8009046:	46c0      	nop			@ (mov r8, r8)
 8009048:	20000018 	.word	0x20000018
 800904c:	00030d40 	.word	0x00030d40
 8009050:	fffffefd 	.word	0xfffffefd
 8009054:	ffde0201 	.word	0xffde0201
 8009058:	1ffffc02 	.word	0x1ffffc02
 800905c:	40012708 	.word	0x40012708
 8009060:	ffc3ffff 	.word	0xffc3ffff
 8009064:	07ffff04 	.word	0x07ffff04

08009068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009072:	2317      	movs	r3, #23
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	2200      	movs	r2, #0
 8009078:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2254      	movs	r2, #84	@ 0x54
 8009082:	5c9b      	ldrb	r3, [r3, r2]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_ADC_ConfigChannel+0x24>
 8009088:	2302      	movs	r3, #2
 800908a:	e1c0      	b.n	800940e <HAL_ADC_ConfigChannel+0x3a6>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2254      	movs	r2, #84	@ 0x54
 8009090:	2101      	movs	r1, #1
 8009092:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	0018      	movs	r0, r3
 800909a:	f7ff fe2b 	bl	8008cf4 <LL_ADC_REG_IsConversionOngoing>
 800909e:	1e03      	subs	r3, r0, #0
 80090a0:	d000      	beq.n	80090a4 <HAL_ADC_ConfigChannel+0x3c>
 80090a2:	e1a3      	b.n	80093ec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d100      	bne.n	80090ae <HAL_ADC_ConfigChannel+0x46>
 80090ac:	e143      	b.n	8009336 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691a      	ldr	r2, [r3, #16]
 80090b2:	2380      	movs	r3, #128	@ 0x80
 80090b4:	061b      	lsls	r3, r3, #24
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d004      	beq.n	80090c4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80090be:	4ac1      	ldr	r2, [pc, #772]	@ (80093c4 <HAL_ADC_ConfigChannel+0x35c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d108      	bne.n	80090d6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	0019      	movs	r1, r3
 80090ce:	0010      	movs	r0, r2
 80090d0:	f7ff fd75 	bl	8008bbe <LL_ADC_REG_SetSequencerChAdd>
 80090d4:	e0c9      	b.n	800926a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	211f      	movs	r1, #31
 80090e0:	400b      	ands	r3, r1
 80090e2:	210f      	movs	r1, #15
 80090e4:	4099      	lsls	r1, r3
 80090e6:	000b      	movs	r3, r1
 80090e8:	43db      	mvns	r3, r3
 80090ea:	4013      	ands	r3, r2
 80090ec:	0019      	movs	r1, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	035b      	lsls	r3, r3, #13
 80090f4:	0b5b      	lsrs	r3, r3, #13
 80090f6:	d105      	bne.n	8009104 <HAL_ADC_ConfigChannel+0x9c>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	0e9b      	lsrs	r3, r3, #26
 80090fe:	221f      	movs	r2, #31
 8009100:	4013      	ands	r3, r2
 8009102:	e098      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2201      	movs	r2, #1
 800910a:	4013      	ands	r3, r2
 800910c:	d000      	beq.n	8009110 <HAL_ADC_ConfigChannel+0xa8>
 800910e:	e091      	b.n	8009234 <HAL_ADC_ConfigChannel+0x1cc>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2202      	movs	r2, #2
 8009116:	4013      	ands	r3, r2
 8009118:	d000      	beq.n	800911c <HAL_ADC_ConfigChannel+0xb4>
 800911a:	e089      	b.n	8009230 <HAL_ADC_ConfigChannel+0x1c8>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2204      	movs	r2, #4
 8009122:	4013      	ands	r3, r2
 8009124:	d000      	beq.n	8009128 <HAL_ADC_ConfigChannel+0xc0>
 8009126:	e081      	b.n	800922c <HAL_ADC_ConfigChannel+0x1c4>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2208      	movs	r2, #8
 800912e:	4013      	ands	r3, r2
 8009130:	d000      	beq.n	8009134 <HAL_ADC_ConfigChannel+0xcc>
 8009132:	e079      	b.n	8009228 <HAL_ADC_ConfigChannel+0x1c0>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2210      	movs	r2, #16
 800913a:	4013      	ands	r3, r2
 800913c:	d000      	beq.n	8009140 <HAL_ADC_ConfigChannel+0xd8>
 800913e:	e071      	b.n	8009224 <HAL_ADC_ConfigChannel+0x1bc>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2220      	movs	r2, #32
 8009146:	4013      	ands	r3, r2
 8009148:	d000      	beq.n	800914c <HAL_ADC_ConfigChannel+0xe4>
 800914a:	e069      	b.n	8009220 <HAL_ADC_ConfigChannel+0x1b8>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2240      	movs	r2, #64	@ 0x40
 8009152:	4013      	ands	r3, r2
 8009154:	d000      	beq.n	8009158 <HAL_ADC_ConfigChannel+0xf0>
 8009156:	e061      	b.n	800921c <HAL_ADC_ConfigChannel+0x1b4>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2280      	movs	r2, #128	@ 0x80
 800915e:	4013      	ands	r3, r2
 8009160:	d000      	beq.n	8009164 <HAL_ADC_ConfigChannel+0xfc>
 8009162:	e059      	b.n	8009218 <HAL_ADC_ConfigChannel+0x1b0>
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	2380      	movs	r3, #128	@ 0x80
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	4013      	ands	r3, r2
 800916e:	d151      	bne.n	8009214 <HAL_ADC_ConfigChannel+0x1ac>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	2380      	movs	r3, #128	@ 0x80
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4013      	ands	r3, r2
 800917a:	d149      	bne.n	8009210 <HAL_ADC_ConfigChannel+0x1a8>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	2380      	movs	r3, #128	@ 0x80
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4013      	ands	r3, r2
 8009186:	d141      	bne.n	800920c <HAL_ADC_ConfigChannel+0x1a4>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	2380      	movs	r3, #128	@ 0x80
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	4013      	ands	r3, r2
 8009192:	d139      	bne.n	8009208 <HAL_ADC_ConfigChannel+0x1a0>
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	2380      	movs	r3, #128	@ 0x80
 800919a:	015b      	lsls	r3, r3, #5
 800919c:	4013      	ands	r3, r2
 800919e:	d131      	bne.n	8009204 <HAL_ADC_ConfigChannel+0x19c>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	2380      	movs	r3, #128	@ 0x80
 80091a6:	019b      	lsls	r3, r3, #6
 80091a8:	4013      	ands	r3, r2
 80091aa:	d129      	bne.n	8009200 <HAL_ADC_ConfigChannel+0x198>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	2380      	movs	r3, #128	@ 0x80
 80091b2:	01db      	lsls	r3, r3, #7
 80091b4:	4013      	ands	r3, r2
 80091b6:	d121      	bne.n	80091fc <HAL_ADC_ConfigChannel+0x194>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	2380      	movs	r3, #128	@ 0x80
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	4013      	ands	r3, r2
 80091c2:	d119      	bne.n	80091f8 <HAL_ADC_ConfigChannel+0x190>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	2380      	movs	r3, #128	@ 0x80
 80091ca:	025b      	lsls	r3, r3, #9
 80091cc:	4013      	ands	r3, r2
 80091ce:	d111      	bne.n	80091f4 <HAL_ADC_ConfigChannel+0x18c>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	2380      	movs	r3, #128	@ 0x80
 80091d6:	029b      	lsls	r3, r3, #10
 80091d8:	4013      	ands	r3, r2
 80091da:	d109      	bne.n	80091f0 <HAL_ADC_ConfigChannel+0x188>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	2380      	movs	r3, #128	@ 0x80
 80091e2:	02db      	lsls	r3, r3, #11
 80091e4:	4013      	ands	r3, r2
 80091e6:	d001      	beq.n	80091ec <HAL_ADC_ConfigChannel+0x184>
 80091e8:	2312      	movs	r3, #18
 80091ea:	e024      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 80091ec:	2300      	movs	r3, #0
 80091ee:	e022      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 80091f0:	2311      	movs	r3, #17
 80091f2:	e020      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 80091f4:	2310      	movs	r3, #16
 80091f6:	e01e      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 80091f8:	230f      	movs	r3, #15
 80091fa:	e01c      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 80091fc:	230e      	movs	r3, #14
 80091fe:	e01a      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009200:	230d      	movs	r3, #13
 8009202:	e018      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009204:	230c      	movs	r3, #12
 8009206:	e016      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009208:	230b      	movs	r3, #11
 800920a:	e014      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 800920c:	230a      	movs	r3, #10
 800920e:	e012      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009210:	2309      	movs	r3, #9
 8009212:	e010      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009214:	2308      	movs	r3, #8
 8009216:	e00e      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009218:	2307      	movs	r3, #7
 800921a:	e00c      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 800921c:	2306      	movs	r3, #6
 800921e:	e00a      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009220:	2305      	movs	r3, #5
 8009222:	e008      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009224:	2304      	movs	r3, #4
 8009226:	e006      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009228:	2303      	movs	r3, #3
 800922a:	e004      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 800922c:	2302      	movs	r3, #2
 800922e:	e002      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <HAL_ADC_ConfigChannel+0x1ce>
 8009234:	2300      	movs	r3, #0
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	6852      	ldr	r2, [r2, #4]
 800923a:	201f      	movs	r0, #31
 800923c:	4002      	ands	r2, r0
 800923e:	4093      	lsls	r3, r2
 8009240:	000a      	movs	r2, r1
 8009242:	431a      	orrs	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	089b      	lsrs	r3, r3, #2
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	429a      	cmp	r2, r3
 8009256:	d808      	bhi.n	800926a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	6859      	ldr	r1, [r3, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	001a      	movs	r2, r3
 8009266:	f7ff fc8a 	bl	8008b7e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	6819      	ldr	r1, [r3, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	001a      	movs	r2, r3
 8009278:	f7ff fcc4 	bl	8008c04 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	db00      	blt.n	8009286 <HAL_ADC_ConfigChannel+0x21e>
 8009284:	e0bc      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009286:	4b50      	ldr	r3, [pc, #320]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 8009288:	0018      	movs	r0, r3
 800928a:	f7ff fc37 	bl	8008afc <LL_ADC_GetCommonPathInternalCh>
 800928e:	0003      	movs	r3, r0
 8009290:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a4d      	ldr	r2, [pc, #308]	@ (80093cc <HAL_ADC_ConfigChannel+0x364>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d122      	bne.n	80092e2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	2380      	movs	r3, #128	@ 0x80
 80092a0:	041b      	lsls	r3, r3, #16
 80092a2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80092a4:	d11d      	bne.n	80092e2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2280      	movs	r2, #128	@ 0x80
 80092aa:	0412      	lsls	r2, r2, #16
 80092ac:	4313      	orrs	r3, r2
 80092ae:	4a46      	ldr	r2, [pc, #280]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 80092b0:	0019      	movs	r1, r3
 80092b2:	0010      	movs	r0, r2
 80092b4:	f7ff fc0e 	bl	8008ad4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80092b8:	4b45      	ldr	r3, [pc, #276]	@ (80093d0 <HAL_ADC_ConfigChannel+0x368>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4945      	ldr	r1, [pc, #276]	@ (80093d4 <HAL_ADC_ConfigChannel+0x36c>)
 80092be:	0018      	movs	r0, r3
 80092c0:	f7fc f82c 	bl	800531c <__udivsi3>
 80092c4:	0003      	movs	r3, r0
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	0013      	movs	r3, r2
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	189b      	adds	r3, r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80092d2:	e002      	b.n	80092da <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1f9      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80092e0:	e08e      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a3c      	ldr	r2, [pc, #240]	@ (80093d8 <HAL_ADC_ConfigChannel+0x370>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d10e      	bne.n	800930a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	2380      	movs	r3, #128	@ 0x80
 80092f0:	045b      	lsls	r3, r3, #17
 80092f2:	4013      	ands	r3, r2
 80092f4:	d109      	bne.n	800930a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	2280      	movs	r2, #128	@ 0x80
 80092fa:	0452      	lsls	r2, r2, #17
 80092fc:	4313      	orrs	r3, r2
 80092fe:	4a32      	ldr	r2, [pc, #200]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 8009300:	0019      	movs	r1, r3
 8009302:	0010      	movs	r0, r2
 8009304:	f7ff fbe6 	bl	8008ad4 <LL_ADC_SetCommonPathInternalCh>
 8009308:	e07a      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a33      	ldr	r2, [pc, #204]	@ (80093dc <HAL_ADC_ConfigChannel+0x374>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d000      	beq.n	8009316 <HAL_ADC_ConfigChannel+0x2ae>
 8009314:	e074      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	2380      	movs	r3, #128	@ 0x80
 800931a:	03db      	lsls	r3, r3, #15
 800931c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800931e:	d000      	beq.n	8009322 <HAL_ADC_ConfigChannel+0x2ba>
 8009320:	e06e      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2280      	movs	r2, #128	@ 0x80
 8009326:	03d2      	lsls	r2, r2, #15
 8009328:	4313      	orrs	r3, r2
 800932a:	4a27      	ldr	r2, [pc, #156]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 800932c:	0019      	movs	r1, r3
 800932e:	0010      	movs	r0, r2
 8009330:	f7ff fbd0 	bl	8008ad4 <LL_ADC_SetCommonPathInternalCh>
 8009334:	e064      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691a      	ldr	r2, [r3, #16]
 800933a:	2380      	movs	r3, #128	@ 0x80
 800933c:	061b      	lsls	r3, r3, #24
 800933e:	429a      	cmp	r2, r3
 8009340:	d004      	beq.n	800934c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009346:	4a1f      	ldr	r2, [pc, #124]	@ (80093c4 <HAL_ADC_ConfigChannel+0x35c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d107      	bne.n	800935c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	0019      	movs	r1, r3
 8009356:	0010      	movs	r0, r2
 8009358:	f7ff fc42 	bl	8008be0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	da4d      	bge.n	8009400 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009364:	4b18      	ldr	r3, [pc, #96]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 8009366:	0018      	movs	r0, r3
 8009368:	f7ff fbc8 	bl	8008afc <LL_ADC_GetCommonPathInternalCh>
 800936c:	0003      	movs	r3, r0
 800936e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a15      	ldr	r2, [pc, #84]	@ (80093cc <HAL_ADC_ConfigChannel+0x364>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d108      	bne.n	800938c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	4a18      	ldr	r2, [pc, #96]	@ (80093e0 <HAL_ADC_ConfigChannel+0x378>)
 800937e:	4013      	ands	r3, r2
 8009380:	4a11      	ldr	r2, [pc, #68]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 8009382:	0019      	movs	r1, r3
 8009384:	0010      	movs	r0, r2
 8009386:	f7ff fba5 	bl	8008ad4 <LL_ADC_SetCommonPathInternalCh>
 800938a:	e039      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a11      	ldr	r2, [pc, #68]	@ (80093d8 <HAL_ADC_ConfigChannel+0x370>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d108      	bne.n	80093a8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	4a12      	ldr	r2, [pc, #72]	@ (80093e4 <HAL_ADC_ConfigChannel+0x37c>)
 800939a:	4013      	ands	r3, r2
 800939c:	4a0a      	ldr	r2, [pc, #40]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 800939e:	0019      	movs	r1, r3
 80093a0:	0010      	movs	r0, r2
 80093a2:	f7ff fb97 	bl	8008ad4 <LL_ADC_SetCommonPathInternalCh>
 80093a6:	e02b      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a0b      	ldr	r2, [pc, #44]	@ (80093dc <HAL_ADC_ConfigChannel+0x374>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d126      	bne.n	8009400 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	4a0c      	ldr	r2, [pc, #48]	@ (80093e8 <HAL_ADC_ConfigChannel+0x380>)
 80093b6:	4013      	ands	r3, r2
 80093b8:	4a03      	ldr	r2, [pc, #12]	@ (80093c8 <HAL_ADC_ConfigChannel+0x360>)
 80093ba:	0019      	movs	r1, r3
 80093bc:	0010      	movs	r0, r2
 80093be:	f7ff fb89 	bl	8008ad4 <LL_ADC_SetCommonPathInternalCh>
 80093c2:	e01d      	b.n	8009400 <HAL_ADC_ConfigChannel+0x398>
 80093c4:	80000004 	.word	0x80000004
 80093c8:	40012708 	.word	0x40012708
 80093cc:	b0001000 	.word	0xb0001000
 80093d0:	20000018 	.word	0x20000018
 80093d4:	00030d40 	.word	0x00030d40
 80093d8:	b8004000 	.word	0xb8004000
 80093dc:	b4002000 	.word	0xb4002000
 80093e0:	ff7fffff 	.word	0xff7fffff
 80093e4:	feffffff 	.word	0xfeffffff
 80093e8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f0:	2220      	movs	r2, #32
 80093f2:	431a      	orrs	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80093f8:	2317      	movs	r3, #23
 80093fa:	18fb      	adds	r3, r7, r3
 80093fc:	2201      	movs	r2, #1
 80093fe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2254      	movs	r2, #84	@ 0x54
 8009404:	2100      	movs	r1, #0
 8009406:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8009408:	2317      	movs	r3, #23
 800940a:	18fb      	adds	r3, r7, r3
 800940c:	781b      	ldrb	r3, [r3, #0]
}
 800940e:	0018      	movs	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	b006      	add	sp, #24
 8009414:	bd80      	pop	{r7, pc}
 8009416:	46c0      	nop			@ (mov r8, r8)

08009418 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	0018      	movs	r0, r3
 8009426:	f7ff fc54 	bl	8008cd2 <LL_ADC_IsDisableOngoing>
 800942a:	0003      	movs	r3, r0
 800942c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	0018      	movs	r0, r3
 8009434:	f7ff fc3c 	bl	8008cb0 <LL_ADC_IsEnabled>
 8009438:	1e03      	subs	r3, r0, #0
 800943a:	d046      	beq.n	80094ca <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d143      	bne.n	80094ca <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	2205      	movs	r2, #5
 800944a:	4013      	ands	r3, r2
 800944c:	2b01      	cmp	r3, #1
 800944e:	d10d      	bne.n	800946c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	0018      	movs	r0, r3
 8009456:	f7ff fc19 	bl	8008c8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2203      	movs	r2, #3
 8009460:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009462:	f7ff faf3 	bl	8008a4c <HAL_GetTick>
 8009466:	0003      	movs	r3, r0
 8009468:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800946a:	e028      	b.n	80094be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009470:	2210      	movs	r2, #16
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800947c:	2201      	movs	r2, #1
 800947e:	431a      	orrs	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e021      	b.n	80094cc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009488:	f7ff fae0 	bl	8008a4c <HAL_GetTick>
 800948c:	0002      	movs	r2, r0
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d913      	bls.n	80094be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2201      	movs	r2, #1
 800949e:	4013      	ands	r3, r2
 80094a0:	d00d      	beq.n	80094be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a6:	2210      	movs	r2, #16
 80094a8:	431a      	orrs	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094b2:	2201      	movs	r2, #1
 80094b4:	431a      	orrs	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e006      	b.n	80094cc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2201      	movs	r2, #1
 80094c6:	4013      	ands	r3, r2
 80094c8:	d1de      	bne.n	8009488 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	0018      	movs	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b004      	add	sp, #16
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <LL_ADC_GetCommonClock>:
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	23f0      	movs	r3, #240	@ 0xf0
 80094e2:	039b      	lsls	r3, r3, #14
 80094e4:	4013      	ands	r3, r2
}
 80094e6:	0018      	movs	r0, r3
 80094e8:	46bd      	mov	sp, r7
 80094ea:	b002      	add	sp, #8
 80094ec:	bd80      	pop	{r7, pc}

080094ee <LL_ADC_GetClock>:
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	0f9b      	lsrs	r3, r3, #30
 80094fc:	079b      	lsls	r3, r3, #30
}
 80094fe:	0018      	movs	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	b002      	add	sp, #8
 8009504:	bd80      	pop	{r7, pc}

08009506 <LL_ADC_SetCalibrationFactor>:
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	22b4      	movs	r2, #180	@ 0xb4
 8009514:	589b      	ldr	r3, [r3, r2]
 8009516:	227f      	movs	r2, #127	@ 0x7f
 8009518:	4393      	bics	r3, r2
 800951a:	001a      	movs	r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	431a      	orrs	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	21b4      	movs	r1, #180	@ 0xb4
 8009524:	505a      	str	r2, [r3, r1]
}
 8009526:	46c0      	nop			@ (mov r8, r8)
 8009528:	46bd      	mov	sp, r7
 800952a:	b002      	add	sp, #8
 800952c:	bd80      	pop	{r7, pc}

0800952e <LL_ADC_GetCalibrationFactor>:
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	22b4      	movs	r2, #180	@ 0xb4
 800953a:	589b      	ldr	r3, [r3, r2]
 800953c:	227f      	movs	r2, #127	@ 0x7f
 800953e:	4013      	ands	r3, r2
}
 8009540:	0018      	movs	r0, r3
 8009542:	46bd      	mov	sp, r7
 8009544:	b002      	add	sp, #8
 8009546:	bd80      	pop	{r7, pc}

08009548 <LL_ADC_Enable>:
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4a04      	ldr	r2, [pc, #16]	@ (8009568 <LL_ADC_Enable+0x20>)
 8009556:	4013      	ands	r3, r2
 8009558:	2201      	movs	r2, #1
 800955a:	431a      	orrs	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	609a      	str	r2, [r3, #8]
}
 8009560:	46c0      	nop			@ (mov r8, r8)
 8009562:	46bd      	mov	sp, r7
 8009564:	b002      	add	sp, #8
 8009566:	bd80      	pop	{r7, pc}
 8009568:	7fffffe8 	.word	0x7fffffe8

0800956c <LL_ADC_Disable>:
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	4a04      	ldr	r2, [pc, #16]	@ (800958c <LL_ADC_Disable+0x20>)
 800957a:	4013      	ands	r3, r2
 800957c:	2202      	movs	r2, #2
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	609a      	str	r2, [r3, #8]
}
 8009584:	46c0      	nop			@ (mov r8, r8)
 8009586:	46bd      	mov	sp, r7
 8009588:	b002      	add	sp, #8
 800958a:	bd80      	pop	{r7, pc}
 800958c:	7fffffe8 	.word	0x7fffffe8

08009590 <LL_ADC_IsEnabled>:
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	2201      	movs	r2, #1
 800959e:	4013      	ands	r3, r2
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <LL_ADC_IsEnabled+0x18>
 80095a4:	2301      	movs	r3, #1
 80095a6:	e000      	b.n	80095aa <LL_ADC_IsEnabled+0x1a>
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	0018      	movs	r0, r3
 80095ac:	46bd      	mov	sp, r7
 80095ae:	b002      	add	sp, #8
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <LL_ADC_StartCalibration>:
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	4a05      	ldr	r2, [pc, #20]	@ (80095d8 <LL_ADC_StartCalibration+0x24>)
 80095c2:	4013      	ands	r3, r2
 80095c4:	2280      	movs	r2, #128	@ 0x80
 80095c6:	0612      	lsls	r2, r2, #24
 80095c8:	431a      	orrs	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	609a      	str	r2, [r3, #8]
}
 80095ce:	46c0      	nop			@ (mov r8, r8)
 80095d0:	46bd      	mov	sp, r7
 80095d2:	b002      	add	sp, #8
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	46c0      	nop			@ (mov r8, r8)
 80095d8:	7fffffe8 	.word	0x7fffffe8

080095dc <LL_ADC_IsCalibrationOnGoing>:
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	0fdb      	lsrs	r3, r3, #31
 80095ea:	07da      	lsls	r2, r3, #31
 80095ec:	2380      	movs	r3, #128	@ 0x80
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d101      	bne.n	80095f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e000      	b.n	80095fa <LL_ADC_IsCalibrationOnGoing+0x1e>
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	0018      	movs	r0, r3
 80095fc:	46bd      	mov	sp, r7
 80095fe:	b002      	add	sp, #8
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8009604:	b590      	push	{r4, r7, lr}
 8009606:	b08b      	sub	sp, #44	@ 0x2c
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2254      	movs	r2, #84	@ 0x54
 8009618:	5c9b      	ldrb	r3, [r3, r2]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_ADCEx_Calibration_Start+0x1e>
 800961e:	2302      	movs	r3, #2
 8009620:	e0dd      	b.n	80097de <HAL_ADCEx_Calibration_Start+0x1da>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2254      	movs	r2, #84	@ 0x54
 8009626:	2101      	movs	r1, #1
 8009628:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800962a:	231f      	movs	r3, #31
 800962c:	18fc      	adds	r4, r7, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	0018      	movs	r0, r3
 8009632:	f7ff fef1 	bl	8009418 <ADC_Disable>
 8009636:	0003      	movs	r3, r0
 8009638:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	0018      	movs	r0, r3
 8009640:	f7ff ffa6 	bl	8009590 <LL_ADC_IsEnabled>
 8009644:	1e03      	subs	r3, r0, #0
 8009646:	d000      	beq.n	800964a <HAL_ADCEx_Calibration_Start+0x46>
 8009648:	e0bc      	b.n	80097c4 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800964e:	4a66      	ldr	r2, [pc, #408]	@ (80097e8 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8009650:	4013      	ands	r3, r2
 8009652:	2202      	movs	r2, #2
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	4a62      	ldr	r2, [pc, #392]	@ (80097ec <HAL_ADCEx_Calibration_Start+0x1e8>)
 8009662:	4013      	ands	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68da      	ldr	r2, [r3, #12]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	495f      	ldr	r1, [pc, #380]	@ (80097f0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8009672:	400a      	ands	r2, r1
 8009674:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8009676:	2300      	movs	r3, #0
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
 800967a:	e02d      	b.n	80096d8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	0018      	movs	r0, r3
 8009682:	f7ff ff97 	bl	80095b4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009686:	e014      	b.n	80096b2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3301      	adds	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4a58      	ldr	r2, [pc, #352]	@ (80097f4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d90d      	bls.n	80096b2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800969a:	2212      	movs	r2, #18
 800969c:	4393      	bics	r3, r2
 800969e:	2210      	movs	r2, #16
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2254      	movs	r2, #84	@ 0x54
 80096aa:	2100      	movs	r1, #0
 80096ac:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e095      	b.n	80097de <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	0018      	movs	r0, r3
 80096b8:	f7ff ff90 	bl	80095dc <LL_ADC_IsCalibrationOnGoing>
 80096bc:	1e03      	subs	r3, r0, #0
 80096be:	d1e3      	bne.n	8009688 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7ff ff32 	bl	800952e <LL_ADC_GetCalibrationFactor>
 80096ca:	0002      	movs	r2, r0
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	189b      	adds	r3, r3, r2
 80096d0:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	3301      	adds	r3, #1
 80096d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	2b07      	cmp	r3, #7
 80096dc:	d9ce      	bls.n	800967c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80096de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80096e0:	6a38      	ldr	r0, [r7, #32]
 80096e2:	f7fb fe1b 	bl	800531c <__udivsi3>
 80096e6:	0003      	movs	r3, r0
 80096e8:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	0018      	movs	r0, r3
 80096f0:	f7ff ff2a 	bl	8009548 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	0018      	movs	r0, r3
 80096fa:	f7ff fef8 	bl	80094ee <LL_ADC_GetClock>
 80096fe:	1e03      	subs	r3, r0, #0
 8009700:	d11b      	bne.n	800973a <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009702:	4b3d      	ldr	r3, [pc, #244]	@ (80097f8 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8009704:	0018      	movs	r0, r3
 8009706:	f7ff fee5 	bl	80094d4 <LL_ADC_GetCommonClock>
 800970a:	0003      	movs	r3, r0
 800970c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	23e0      	movs	r3, #224	@ 0xe0
 8009712:	035b      	lsls	r3, r3, #13
 8009714:	429a      	cmp	r2, r3
 8009716:	d310      	bcc.n	800973a <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	0c9b      	lsrs	r3, r3, #18
 800971c:	3b03      	subs	r3, #3
 800971e:	2201      	movs	r2, #1
 8009720:	409a      	lsls	r2, r3
 8009722:	0013      	movs	r3, r2
 8009724:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	085b      	lsrs	r3, r3, #1
 800972a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800972c:	e002      	b.n	8009734 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	3b01      	subs	r3, #1
 8009732:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1f9      	bne.n	800972e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6a3a      	ldr	r2, [r7, #32]
 8009740:	0011      	movs	r1, r2
 8009742:	0018      	movs	r0, r3
 8009744:	f7ff fedf 	bl	8009506 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	0018      	movs	r0, r3
 800974e:	f7ff ff0d 	bl	800956c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009752:	f7ff f97b 	bl	8008a4c <HAL_GetTick>
 8009756:	0003      	movs	r3, r0
 8009758:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800975a:	e01b      	b.n	8009794 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800975c:	f7ff f976 	bl	8008a4c <HAL_GetTick>
 8009760:	0002      	movs	r2, r0
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	2b02      	cmp	r3, #2
 8009768:	d914      	bls.n	8009794 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	0018      	movs	r0, r3
 8009770:	f7ff ff0e 	bl	8009590 <LL_ADC_IsEnabled>
 8009774:	1e03      	subs	r3, r0, #0
 8009776:	d00d      	beq.n	8009794 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800977c:	2210      	movs	r2, #16
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009788:	2201      	movs	r2, #1
 800978a:	431a      	orrs	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e024      	b.n	80097de <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	0018      	movs	r0, r3
 800979a:	f7ff fef9 	bl	8009590 <LL_ADC_IsEnabled>
 800979e:	1e03      	subs	r3, r0, #0
 80097a0:	d1dc      	bne.n	800975c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68d9      	ldr	r1, [r3, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b6:	2203      	movs	r2, #3
 80097b8:	4393      	bics	r3, r2
 80097ba:	2201      	movs	r2, #1
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80097c2:	e005      	b.n	80097d0 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c8:	2210      	movs	r2, #16
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2254      	movs	r2, #84	@ 0x54
 80097d4:	2100      	movs	r1, #0
 80097d6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80097d8:	231f      	movs	r3, #31
 80097da:	18fb      	adds	r3, r7, r3
 80097dc:	781b      	ldrb	r3, [r3, #0]
}
 80097de:	0018      	movs	r0, r3
 80097e0:	46bd      	mov	sp, r7
 80097e2:	b00b      	add	sp, #44	@ 0x2c
 80097e4:	bd90      	pop	{r4, r7, pc}
 80097e6:	46c0      	nop			@ (mov r8, r8)
 80097e8:	fffffefd 	.word	0xfffffefd
 80097ec:	00008003 	.word	0x00008003
 80097f0:	ffff7ffc 	.word	0xffff7ffc
 80097f4:	0002f1ff 	.word	0x0002f1ff
 80097f8:	40012708 	.word	0x40012708

080097fc <__NVIC_EnableIRQ>:
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	0002      	movs	r2, r0
 8009804:	1dfb      	adds	r3, r7, #7
 8009806:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009808:	1dfb      	adds	r3, r7, #7
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b7f      	cmp	r3, #127	@ 0x7f
 800980e:	d809      	bhi.n	8009824 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009810:	1dfb      	adds	r3, r7, #7
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	001a      	movs	r2, r3
 8009816:	231f      	movs	r3, #31
 8009818:	401a      	ands	r2, r3
 800981a:	4b04      	ldr	r3, [pc, #16]	@ (800982c <__NVIC_EnableIRQ+0x30>)
 800981c:	2101      	movs	r1, #1
 800981e:	4091      	lsls	r1, r2
 8009820:	000a      	movs	r2, r1
 8009822:	601a      	str	r2, [r3, #0]
}
 8009824:	46c0      	nop			@ (mov r8, r8)
 8009826:	46bd      	mov	sp, r7
 8009828:	b002      	add	sp, #8
 800982a:	bd80      	pop	{r7, pc}
 800982c:	e000e100 	.word	0xe000e100

08009830 <__NVIC_SetPriority>:
{
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	0002      	movs	r2, r0
 8009838:	6039      	str	r1, [r7, #0]
 800983a:	1dfb      	adds	r3, r7, #7
 800983c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800983e:	1dfb      	adds	r3, r7, #7
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b7f      	cmp	r3, #127	@ 0x7f
 8009844:	d828      	bhi.n	8009898 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009846:	4a2f      	ldr	r2, [pc, #188]	@ (8009904 <__NVIC_SetPriority+0xd4>)
 8009848:	1dfb      	adds	r3, r7, #7
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b25b      	sxtb	r3, r3
 800984e:	089b      	lsrs	r3, r3, #2
 8009850:	33c0      	adds	r3, #192	@ 0xc0
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	589b      	ldr	r3, [r3, r2]
 8009856:	1dfa      	adds	r2, r7, #7
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	0011      	movs	r1, r2
 800985c:	2203      	movs	r2, #3
 800985e:	400a      	ands	r2, r1
 8009860:	00d2      	lsls	r2, r2, #3
 8009862:	21ff      	movs	r1, #255	@ 0xff
 8009864:	4091      	lsls	r1, r2
 8009866:	000a      	movs	r2, r1
 8009868:	43d2      	mvns	r2, r2
 800986a:	401a      	ands	r2, r3
 800986c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	019b      	lsls	r3, r3, #6
 8009872:	22ff      	movs	r2, #255	@ 0xff
 8009874:	401a      	ands	r2, r3
 8009876:	1dfb      	adds	r3, r7, #7
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	0018      	movs	r0, r3
 800987c:	2303      	movs	r3, #3
 800987e:	4003      	ands	r3, r0
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009884:	481f      	ldr	r0, [pc, #124]	@ (8009904 <__NVIC_SetPriority+0xd4>)
 8009886:	1dfb      	adds	r3, r7, #7
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	b25b      	sxtb	r3, r3
 800988c:	089b      	lsrs	r3, r3, #2
 800988e:	430a      	orrs	r2, r1
 8009890:	33c0      	adds	r3, #192	@ 0xc0
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	501a      	str	r2, [r3, r0]
}
 8009896:	e031      	b.n	80098fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009898:	4a1b      	ldr	r2, [pc, #108]	@ (8009908 <__NVIC_SetPriority+0xd8>)
 800989a:	1dfb      	adds	r3, r7, #7
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	0019      	movs	r1, r3
 80098a0:	230f      	movs	r3, #15
 80098a2:	400b      	ands	r3, r1
 80098a4:	3b08      	subs	r3, #8
 80098a6:	089b      	lsrs	r3, r3, #2
 80098a8:	3306      	adds	r3, #6
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	18d3      	adds	r3, r2, r3
 80098ae:	3304      	adds	r3, #4
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	1dfa      	adds	r2, r7, #7
 80098b4:	7812      	ldrb	r2, [r2, #0]
 80098b6:	0011      	movs	r1, r2
 80098b8:	2203      	movs	r2, #3
 80098ba:	400a      	ands	r2, r1
 80098bc:	00d2      	lsls	r2, r2, #3
 80098be:	21ff      	movs	r1, #255	@ 0xff
 80098c0:	4091      	lsls	r1, r2
 80098c2:	000a      	movs	r2, r1
 80098c4:	43d2      	mvns	r2, r2
 80098c6:	401a      	ands	r2, r3
 80098c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	019b      	lsls	r3, r3, #6
 80098ce:	22ff      	movs	r2, #255	@ 0xff
 80098d0:	401a      	ands	r2, r3
 80098d2:	1dfb      	adds	r3, r7, #7
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	0018      	movs	r0, r3
 80098d8:	2303      	movs	r3, #3
 80098da:	4003      	ands	r3, r0
 80098dc:	00db      	lsls	r3, r3, #3
 80098de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80098e0:	4809      	ldr	r0, [pc, #36]	@ (8009908 <__NVIC_SetPriority+0xd8>)
 80098e2:	1dfb      	adds	r3, r7, #7
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	001c      	movs	r4, r3
 80098e8:	230f      	movs	r3, #15
 80098ea:	4023      	ands	r3, r4
 80098ec:	3b08      	subs	r3, #8
 80098ee:	089b      	lsrs	r3, r3, #2
 80098f0:	430a      	orrs	r2, r1
 80098f2:	3306      	adds	r3, #6
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	18c3      	adds	r3, r0, r3
 80098f8:	3304      	adds	r3, #4
 80098fa:	601a      	str	r2, [r3, #0]
}
 80098fc:	46c0      	nop			@ (mov r8, r8)
 80098fe:	46bd      	mov	sp, r7
 8009900:	b003      	add	sp, #12
 8009902:	bd90      	pop	{r4, r7, pc}
 8009904:	e000e100 	.word	0xe000e100
 8009908:	e000ed00 	.word	0xe000ed00

0800990c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	1e5a      	subs	r2, r3, #1
 8009918:	2380      	movs	r3, #128	@ 0x80
 800991a:	045b      	lsls	r3, r3, #17
 800991c:	429a      	cmp	r2, r3
 800991e:	d301      	bcc.n	8009924 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009920:	2301      	movs	r3, #1
 8009922:	e010      	b.n	8009946 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009924:	4b0a      	ldr	r3, [pc, #40]	@ (8009950 <SysTick_Config+0x44>)
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	3a01      	subs	r2, #1
 800992a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800992c:	2301      	movs	r3, #1
 800992e:	425b      	negs	r3, r3
 8009930:	2103      	movs	r1, #3
 8009932:	0018      	movs	r0, r3
 8009934:	f7ff ff7c 	bl	8009830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009938:	4b05      	ldr	r3, [pc, #20]	@ (8009950 <SysTick_Config+0x44>)
 800993a:	2200      	movs	r2, #0
 800993c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800993e:	4b04      	ldr	r3, [pc, #16]	@ (8009950 <SysTick_Config+0x44>)
 8009940:	2207      	movs	r2, #7
 8009942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009944:	2300      	movs	r3, #0
}
 8009946:	0018      	movs	r0, r3
 8009948:	46bd      	mov	sp, r7
 800994a:	b002      	add	sp, #8
 800994c:	bd80      	pop	{r7, pc}
 800994e:	46c0      	nop			@ (mov r8, r8)
 8009950:	e000e010 	.word	0xe000e010

08009954 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	210f      	movs	r1, #15
 8009960:	187b      	adds	r3, r7, r1
 8009962:	1c02      	adds	r2, r0, #0
 8009964:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	187b      	adds	r3, r7, r1
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b25b      	sxtb	r3, r3
 800996e:	0011      	movs	r1, r2
 8009970:	0018      	movs	r0, r3
 8009972:	f7ff ff5d 	bl	8009830 <__NVIC_SetPriority>
}
 8009976:	46c0      	nop			@ (mov r8, r8)
 8009978:	46bd      	mov	sp, r7
 800997a:	b004      	add	sp, #16
 800997c:	bd80      	pop	{r7, pc}

0800997e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	0002      	movs	r2, r0
 8009986:	1dfb      	adds	r3, r7, #7
 8009988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800998a:	1dfb      	adds	r3, r7, #7
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	b25b      	sxtb	r3, r3
 8009990:	0018      	movs	r0, r3
 8009992:	f7ff ff33 	bl	80097fc <__NVIC_EnableIRQ>
}
 8009996:	46c0      	nop			@ (mov r8, r8)
 8009998:	46bd      	mov	sp, r7
 800999a:	b002      	add	sp, #8
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	0018      	movs	r0, r3
 80099aa:	f7ff ffaf 	bl	800990c <SysTick_Config>
 80099ae:	0003      	movs	r3, r0
}
 80099b0:	0018      	movs	r0, r3
 80099b2:	46bd      	mov	sp, r7
 80099b4:	b002      	add	sp, #8
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e056      	b.n	8009a78 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7f5b      	ldrb	r3, [r3, #29]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d106      	bne.n	80099e2 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	0018      	movs	r0, r3
 80099de:	f7fc f921 	bl	8005c24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2202      	movs	r2, #2
 80099e6:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	791b      	ldrb	r3, [r3, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10c      	bne.n	8009a0a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a22      	ldr	r2, [pc, #136]	@ (8009a80 <HAL_CRC_Init+0xc8>)
 80099f6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2118      	movs	r1, #24
 8009a04:	438a      	bics	r2, r1
 8009a06:	609a      	str	r2, [r3, #8]
 8009a08:	e00b      	b.n	8009a22 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6899      	ldr	r1, [r3, #8]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	0018      	movs	r0, r3
 8009a16:	f000 f94e 	bl	8009cb6 <HAL_CRCEx_Polynomial_Set>
 8009a1a:	1e03      	subs	r3, r0, #0
 8009a1c:	d001      	beq.n	8009a22 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e02a      	b.n	8009a78 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	795b      	ldrb	r3, [r3, #5]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d105      	bne.n	8009a36 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	4252      	negs	r2, r2
 8009a32:	611a      	str	r2, [r3, #16]
 8009a34:	e004      	b.n	8009a40 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	6912      	ldr	r2, [r2, #16]
 8009a3e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	2260      	movs	r2, #96	@ 0x60
 8009a48:	4393      	bics	r3, r2
 8009a4a:	0019      	movs	r1, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	695a      	ldr	r2, [r3, #20]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	2280      	movs	r2, #128	@ 0x80
 8009a60:	4393      	bics	r3, r2
 8009a62:	0019      	movs	r1, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	0018      	movs	r0, r3
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	b002      	add	sp, #8
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	04c11db7 	.word	0x04c11db7

08009a84 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009a90:	2300      	movs	r3, #0
 8009a92:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2202      	movs	r2, #2
 8009a98:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d005      	beq.n	8009abe <HAL_CRC_Calculate+0x3a>
 8009ab2:	d82d      	bhi.n	8009b10 <HAL_CRC_Calculate+0x8c>
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d019      	beq.n	8009aec <HAL_CRC_Calculate+0x68>
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d020      	beq.n	8009afe <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8009abc:	e028      	b.n	8009b10 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	e00a      	b.n	8009ada <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	18d2      	adds	r2, r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d3f0      	bcc.n	8009ac4 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	613b      	str	r3, [r7, #16]
      break;
 8009aea:	e012      	b.n	8009b12 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	0018      	movs	r0, r3
 8009af4:	f000 f815 	bl	8009b22 <CRC_Handle_8>
 8009af8:	0003      	movs	r3, r0
 8009afa:	613b      	str	r3, [r7, #16]
      break;
 8009afc:	e009      	b.n	8009b12 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	0018      	movs	r0, r3
 8009b06:	f000 f89f 	bl	8009c48 <CRC_Handle_16>
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	613b      	str	r3, [r7, #16]
      break;
 8009b0e:	e000      	b.n	8009b12 <HAL_CRC_Calculate+0x8e>
      break;
 8009b10:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2201      	movs	r2, #1
 8009b16:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009b18:	693b      	ldr	r3, [r7, #16]
}
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	b006      	add	sp, #24
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b088      	sub	sp, #32
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009b2e:	2300      	movs	r3, #0
 8009b30:	61fb      	str	r3, [r7, #28]
 8009b32:	e023      	b.n	8009b7c <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	18d3      	adds	r3, r2, r3
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	3301      	adds	r3, #1
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	18cb      	adds	r3, r1, r3
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009b4e:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	3302      	adds	r3, #2
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	18cb      	adds	r3, r1, r3
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009b5e:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	3303      	adds	r3, #3
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	18cb      	adds	r3, r1, r3
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009b72:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	61fb      	str	r3, [r7, #28]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	089b      	lsrs	r3, r3, #2
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d3d6      	bcc.n	8009b34 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2203      	movs	r2, #3
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	d055      	beq.n	8009c3a <CRC_Handle_8+0x118>
  {
    if ((BufferLength % 4U) == 1U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2203      	movs	r2, #3
 8009b92:	4013      	ands	r3, r2
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d107      	bne.n	8009ba8 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	18d2      	adds	r2, r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2203      	movs	r2, #3
 8009bac:	4013      	ands	r3, r2
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d11a      	bne.n	8009be8 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	18d3      	adds	r3, r2, r3
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b21b      	sxth	r3, r3
 8009bbe:	021b      	lsls	r3, r3, #8
 8009bc0:	b21a      	sxth	r2, r3
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	18cb      	adds	r3, r1, r3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	b21b      	sxth	r3, r3
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b21a      	sxth	r2, r3
 8009bd4:	211a      	movs	r1, #26
 8009bd6:	187b      	adds	r3, r7, r1
 8009bd8:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	187a      	adds	r2, r7, r1
 8009be4:	8812      	ldrh	r2, [r2, #0]
 8009be6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2203      	movs	r2, #3
 8009bec:	4013      	ands	r3, r2
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d123      	bne.n	8009c3a <CRC_Handle_8+0x118>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	18d3      	adds	r3, r2, r3
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	b21b      	sxth	r3, r3
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	b21a      	sxth	r2, r3
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	3301      	adds	r3, #1
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	18cb      	adds	r3, r1, r3
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	b21b      	sxth	r3, r3
 8009c10:	4313      	orrs	r3, r2
 8009c12:	b21a      	sxth	r2, r3
 8009c14:	211a      	movs	r1, #26
 8009c16:	187b      	adds	r3, r7, r1
 8009c18:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	187a      	adds	r2, r7, r1
 8009c24:	8812      	ldrh	r2, [r2, #0]
 8009c26:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	3302      	adds	r3, #2
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	18d2      	adds	r2, r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	7812      	ldrb	r2, [r2, #0]
 8009c38:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
}
 8009c40:	0018      	movs	r0, r3
 8009c42:	46bd      	mov	sp, r7
 8009c44:	b008      	add	sp, #32
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]
 8009c58:	e013      	b.n	8009c82 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	18d3      	adds	r3, r2, r3
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	041a      	lsls	r2, r3, #16
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	68b9      	ldr	r1, [r7, #8]
 8009c6e:	18cb      	adds	r3, r1, r3
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	0019      	movs	r1, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	085b      	lsrs	r3, r3, #1
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d3e6      	bcc.n	8009c5a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	4013      	ands	r3, r2
 8009c92:	d009      	beq.n	8009ca8 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	18d3      	adds	r3, r2, r3
 8009ca2:	881a      	ldrh	r2, [r3, #0]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
}
 8009cae:	0018      	movs	r0, r3
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	b006      	add	sp, #24
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b086      	sub	sp, #24
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cc2:	2117      	movs	r1, #23
 8009cc4:	187b      	adds	r3, r7, r1
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009cca:	231f      	movs	r3, #31
 8009ccc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	d103      	bne.n	8009cde <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8009cd6:	187b      	adds	r3, r7, r1
 8009cd8:	2201      	movs	r2, #1
 8009cda:	701a      	strb	r2, [r3, #0]
 8009cdc:	e045      	b.n	8009d6a <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009cde:	46c0      	nop			@ (mov r8, r8)
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	1e5a      	subs	r2, r3, #1
 8009ce4:	613a      	str	r2, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d008      	beq.n	8009cfc <HAL_CRCEx_Polynomial_Set+0x46>
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	221f      	movs	r2, #31
 8009cee:	4013      	ands	r3, r2
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	40da      	lsrs	r2, r3
 8009cf4:	0013      	movs	r3, r2
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	d0f1      	beq.n	8009ce0 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b18      	cmp	r3, #24
 8009d00:	d00f      	beq.n	8009d22 <HAL_CRCEx_Polynomial_Set+0x6c>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b18      	cmp	r3, #24
 8009d06:	d824      	bhi.n	8009d52 <HAL_CRCEx_Polynomial_Set+0x9c>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	d011      	beq.n	8009d32 <HAL_CRCEx_Polynomial_Set+0x7c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b10      	cmp	r3, #16
 8009d12:	d81e      	bhi.n	8009d52 <HAL_CRCEx_Polynomial_Set+0x9c>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d020      	beq.n	8009d5c <HAL_CRCEx_Polynomial_Set+0xa6>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d010      	beq.n	8009d42 <HAL_CRCEx_Polynomial_Set+0x8c>
 8009d20:	e017      	b.n	8009d52 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b06      	cmp	r3, #6
 8009d26:	d91b      	bls.n	8009d60 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8009d28:	2317      	movs	r3, #23
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009d30:	e016      	b.n	8009d60 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b07      	cmp	r3, #7
 8009d36:	d915      	bls.n	8009d64 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8009d38:	2317      	movs	r3, #23
 8009d3a:	18fb      	adds	r3, r7, r3
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009d40:	e010      	b.n	8009d64 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b0f      	cmp	r3, #15
 8009d46:	d90f      	bls.n	8009d68 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8009d48:	2317      	movs	r3, #23
 8009d4a:	18fb      	adds	r3, r7, r3
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8009d50:	e00a      	b.n	8009d68 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009d52:	2317      	movs	r3, #23
 8009d54:	18fb      	adds	r3, r7, r3
 8009d56:	2201      	movs	r2, #1
 8009d58:	701a      	strb	r2, [r3, #0]
        break;
 8009d5a:	e006      	b.n	8009d6a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8009d5c:	46c0      	nop			@ (mov r8, r8)
 8009d5e:	e004      	b.n	8009d6a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8009d60:	46c0      	nop			@ (mov r8, r8)
 8009d62:	e002      	b.n	8009d6a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8009d64:	46c0      	nop			@ (mov r8, r8)
 8009d66:	e000      	b.n	8009d6a <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8009d68:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8009d6a:	2317      	movs	r3, #23
 8009d6c:	18fb      	adds	r3, r7, r3
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10e      	bne.n	8009d92 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2218      	movs	r2, #24
 8009d84:	4393      	bics	r3, r2
 8009d86:	0019      	movs	r1, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009d92:	2317      	movs	r3, #23
 8009d94:	18fb      	adds	r3, r7, r3
 8009d96:	781b      	ldrb	r3, [r3, #0]
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	b006      	add	sp, #24
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e04f      	b.n	8009e52 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2225      	movs	r2, #37	@ 0x25
 8009db6:	5c9b      	ldrb	r3, [r3, r2]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d008      	beq.n	8009dd0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2224      	movs	r2, #36	@ 0x24
 8009dc8:	2100      	movs	r1, #0
 8009dca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e040      	b.n	8009e52 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	210e      	movs	r1, #14
 8009ddc:	438a      	bics	r2, r1
 8009dde:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dea:	491c      	ldr	r1, [pc, #112]	@ (8009e5c <HAL_DMA_Abort+0xbc>)
 8009dec:	400a      	ands	r2, r1
 8009dee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	438a      	bics	r2, r1
 8009dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e04:	221c      	movs	r2, #28
 8009e06:	401a      	ands	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4091      	lsls	r1, r2
 8009e10:	000a      	movs	r2, r1
 8009e12:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009e1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00c      	beq.n	8009e40 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e30:	490a      	ldr	r1, [pc, #40]	@ (8009e5c <HAL_DMA_Abort+0xbc>)
 8009e32:	400a      	ands	r2, r1
 8009e34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009e3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2225      	movs	r2, #37	@ 0x25
 8009e44:	2101      	movs	r1, #1
 8009e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2224      	movs	r2, #36	@ 0x24
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	0018      	movs	r0, r3
 8009e54:	46bd      	mov	sp, r7
 8009e56:	b002      	add	sp, #8
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	46c0      	nop			@ (mov r8, r8)
 8009e5c:	fffffeff 	.word	0xfffffeff

08009e60 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e68:	210f      	movs	r1, #15
 8009e6a:	187b      	adds	r3, r7, r1
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2225      	movs	r2, #37	@ 0x25
 8009e74:	5c9b      	ldrb	r3, [r3, r2]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d006      	beq.n	8009e8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2204      	movs	r2, #4
 8009e80:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009e82:	187b      	adds	r3, r7, r1
 8009e84:	2201      	movs	r2, #1
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	e048      	b.n	8009f1c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	210e      	movs	r1, #14
 8009e96:	438a      	bics	r2, r1
 8009e98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	438a      	bics	r2, r1
 8009ea8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eb4:	491d      	ldr	r1, [pc, #116]	@ (8009f2c <HAL_DMA_Abort_IT+0xcc>)
 8009eb6:	400a      	ands	r2, r1
 8009eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ebe:	221c      	movs	r2, #28
 8009ec0:	401a      	ands	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	4091      	lsls	r1, r2
 8009eca:	000a      	movs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ed6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00c      	beq.n	8009efa <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eea:	4910      	ldr	r1, [pc, #64]	@ (8009f2c <HAL_DMA_Abort_IT+0xcc>)
 8009eec:	400a      	ands	r2, r1
 8009eee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009ef8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2225      	movs	r2, #37	@ 0x25
 8009efe:	2101      	movs	r1, #1
 8009f00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2224      	movs	r2, #36	@ 0x24
 8009f06:	2100      	movs	r1, #0
 8009f08:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d004      	beq.n	8009f1c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	0010      	movs	r0, r2
 8009f1a:	4798      	blx	r3
    }
  }
  return status;
 8009f1c:	230f      	movs	r3, #15
 8009f1e:	18fb      	adds	r3, r7, r3
 8009f20:	781b      	ldrb	r3, [r3, #0]
}
 8009f22:	0018      	movs	r0, r3
 8009f24:	46bd      	mov	sp, r7
 8009f26:	b004      	add	sp, #16
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	46c0      	nop			@ (mov r8, r8)
 8009f2c:	fffffeff 	.word	0xfffffeff

08009f30 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009f30:	b5b0      	push	{r4, r5, r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	603a      	str	r2, [r7, #0]
 8009f3c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f3e:	4b21      	ldr	r3, [pc, #132]	@ (8009fc4 <HAL_FLASH_Program+0x94>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_FLASH_Program+0x1a>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e038      	b.n	8009fbc <HAL_FLASH_Program+0x8c>
 8009f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc4 <HAL_FLASH_Program+0x94>)
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f50:	4b1c      	ldr	r3, [pc, #112]	@ (8009fc4 <HAL_FLASH_Program+0x94>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009f56:	2517      	movs	r5, #23
 8009f58:	197c      	adds	r4, r7, r5
 8009f5a:	23fa      	movs	r3, #250	@ 0xfa
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f000 f87a 	bl	800a058 <FLASH_WaitForLastOperation>
 8009f64:	0003      	movs	r3, r0
 8009f66:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8009f68:	197b      	adds	r3, r7, r5
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d11f      	bne.n	8009fb0 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d106      	bne.n	8009f84 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	0008      	movs	r0, r1
 8009f7e:	f000 f8b9 	bl	800a0f4 <FLASH_Program_DoubleWord>
 8009f82:	e005      	b.n	8009f90 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	0011      	movs	r1, r2
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f006 f824 	bl	800ffd8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009f90:	2317      	movs	r3, #23
 8009f92:	18fc      	adds	r4, r7, r3
 8009f94:	23fa      	movs	r3, #250	@ 0xfa
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f000 f85d 	bl	800a058 <FLASH_WaitForLastOperation>
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8009fa2:	4b09      	ldr	r3, [pc, #36]	@ (8009fc8 <HAL_FLASH_Program+0x98>)
 8009fa4:	695a      	ldr	r2, [r3, #20]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	43d9      	mvns	r1, r3
 8009faa:	4b07      	ldr	r3, [pc, #28]	@ (8009fc8 <HAL_FLASH_Program+0x98>)
 8009fac:	400a      	ands	r2, r1
 8009fae:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009fb0:	4b04      	ldr	r3, [pc, #16]	@ (8009fc4 <HAL_FLASH_Program+0x94>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009fb6:	2317      	movs	r3, #23
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	781b      	ldrb	r3, [r3, #0]
}
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	b006      	add	sp, #24
 8009fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8009fc4:	20001e84 	.word	0x20001e84
 8009fc8:	40022000 	.word	0x40022000

08009fcc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009fd2:	1dfb      	adds	r3, r7, #7
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	@ (800a008 <HAL_FLASH_Unlock+0x3c>)
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	da0c      	bge.n	8009ffa <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009fe0:	4b09      	ldr	r3, [pc, #36]	@ (800a008 <HAL_FLASH_Unlock+0x3c>)
 8009fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800a00c <HAL_FLASH_Unlock+0x40>)
 8009fe4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009fe6:	4b08      	ldr	r3, [pc, #32]	@ (800a008 <HAL_FLASH_Unlock+0x3c>)
 8009fe8:	4a09      	ldr	r2, [pc, #36]	@ (800a010 <HAL_FLASH_Unlock+0x44>)
 8009fea:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009fec:	4b06      	ldr	r3, [pc, #24]	@ (800a008 <HAL_FLASH_Unlock+0x3c>)
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da02      	bge.n	8009ffa <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8009ff4:	1dfb      	adds	r3, r7, #7
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8009ffa:	1dfb      	adds	r3, r7, #7
 8009ffc:	781b      	ldrb	r3, [r3, #0]
}
 8009ffe:	0018      	movs	r0, r3
 800a000:	46bd      	mov	sp, r7
 800a002:	b002      	add	sp, #8
 800a004:	bd80      	pop	{r7, pc}
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	40022000 	.word	0x40022000
 800a00c:	45670123 	.word	0x45670123
 800a010:	cdef89ab 	.word	0xcdef89ab

0800a014 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800a01a:	1dfb      	adds	r3, r7, #7
 800a01c:	2201      	movs	r2, #1
 800a01e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a020:	23fa      	movs	r3, #250	@ 0xfa
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	0018      	movs	r0, r3
 800a026:	f000 f817 	bl	800a058 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a02a:	4b0a      	ldr	r3, [pc, #40]	@ (800a054 <HAL_FLASH_Lock+0x40>)
 800a02c:	695a      	ldr	r2, [r3, #20]
 800a02e:	4b09      	ldr	r3, [pc, #36]	@ (800a054 <HAL_FLASH_Lock+0x40>)
 800a030:	2180      	movs	r1, #128	@ 0x80
 800a032:	0609      	lsls	r1, r1, #24
 800a034:	430a      	orrs	r2, r1
 800a036:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800a038:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <HAL_FLASH_Lock+0x40>)
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	da02      	bge.n	800a046 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 800a040:	1dfb      	adds	r3, r7, #7
 800a042:	2200      	movs	r2, #0
 800a044:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a046:	1dfb      	adds	r3, r7, #7
 800a048:	781b      	ldrb	r3, [r3, #0]
}
 800a04a:	0018      	movs	r0, r3
 800a04c:	46bd      	mov	sp, r7
 800a04e:	b002      	add	sp, #8
 800a050:	bd80      	pop	{r7, pc}
 800a052:	46c0      	nop			@ (mov r8, r8)
 800a054:	40022000 	.word	0x40022000

0800a058 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800a060:	f7fe fcf4 	bl	8008a4c <HAL_GetTick>
 800a064:	0003      	movs	r3, r0
 800a066:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800a068:	23c0      	movs	r3, #192	@ 0xc0
 800a06a:	029b      	lsls	r3, r3, #10
 800a06c:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800a06e:	e00c      	b.n	800a08a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3301      	adds	r3, #1
 800a074:	d009      	beq.n	800a08a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800a076:	f7fe fce9 	bl	8008a4c <HAL_GetTick>
 800a07a:	0002      	movs	r2, r0
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d801      	bhi.n	800a08a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e028      	b.n	800a0dc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800a08a:	4b16      	ldr	r3, [pc, #88]	@ (800a0e4 <FLASH_WaitForLastOperation+0x8c>)
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	4013      	ands	r3, r2
 800a092:	d1ed      	bne.n	800a070 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800a094:	4b13      	ldr	r3, [pc, #76]	@ (800a0e4 <FLASH_WaitForLastOperation+0x8c>)
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	4a13      	ldr	r2, [pc, #76]	@ (800a0e8 <FLASH_WaitForLastOperation+0x90>)
 800a09a:	4013      	ands	r3, r2
 800a09c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800a09e:	4b11      	ldr	r3, [pc, #68]	@ (800a0e4 <FLASH_WaitForLastOperation+0x8c>)
 800a0a0:	4a12      	ldr	r2, [pc, #72]	@ (800a0ec <FLASH_WaitForLastOperation+0x94>)
 800a0a2:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d011      	beq.n	800a0ce <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800a0aa:	4b11      	ldr	r3, [pc, #68]	@ (800a0f0 <FLASH_WaitForLastOperation+0x98>)
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e013      	b.n	800a0dc <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	d009      	beq.n	800a0ce <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800a0ba:	f7fe fcc7 	bl	8008a4c <HAL_GetTick>
 800a0be:	0002      	movs	r2, r0
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d801      	bhi.n	800a0ce <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e006      	b.n	800a0dc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800a0ce:	4b05      	ldr	r3, [pc, #20]	@ (800a0e4 <FLASH_WaitForLastOperation+0x8c>)
 800a0d0:	691a      	ldr	r2, [r3, #16]
 800a0d2:	2380      	movs	r3, #128	@ 0x80
 800a0d4:	02db      	lsls	r3, r3, #11
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	d1ec      	bne.n	800a0b4 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	0018      	movs	r0, r3
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	b004      	add	sp, #16
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40022000 	.word	0x40022000
 800a0e8:	0000c3fa 	.word	0x0000c3fa
 800a0ec:	0008c3fb 	.word	0x0008c3fb
 800a0f0:	20001e84 	.word	0x20001e84

0800a0f4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a0f4:	b5b0      	push	{r4, r5, r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	603a      	str	r2, [r7, #0]
 800a0fe:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a100:	4b0b      	ldr	r3, [pc, #44]	@ (800a130 <FLASH_Program_DoubleWord+0x3c>)
 800a102:	695a      	ldr	r2, [r3, #20]
 800a104:	4b0a      	ldr	r3, [pc, #40]	@ (800a130 <FLASH_Program_DoubleWord+0x3c>)
 800a106:	2101      	movs	r1, #1
 800a108:	430a      	orrs	r2, r1
 800a10a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a112:	f3bf 8f6f 	isb	sy
}
 800a116:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	001c      	movs	r4, r3
 800a11c:	2300      	movs	r3, #0
 800a11e:	001d      	movs	r5, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	3304      	adds	r3, #4
 800a124:	0022      	movs	r2, r4
 800a126:	601a      	str	r2, [r3, #0]
}
 800a128:	46c0      	nop			@ (mov r8, r8)
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b004      	add	sp, #16
 800a12e:	bdb0      	pop	{r4, r5, r7, pc}
 800a130:	40022000 	.word	0x40022000

0800a134 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a134:	b5b0      	push	{r4, r5, r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a13e:	4b33      	ldr	r3, [pc, #204]	@ (800a20c <HAL_FLASHEx_Erase+0xd8>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_FLASHEx_Erase+0x16>
 800a146:	2302      	movs	r3, #2
 800a148:	e05c      	b.n	800a204 <HAL_FLASHEx_Erase+0xd0>
 800a14a:	4b30      	ldr	r3, [pc, #192]	@ (800a20c <HAL_FLASHEx_Erase+0xd8>)
 800a14c:	2201      	movs	r2, #1
 800a14e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a150:	4b2e      	ldr	r3, [pc, #184]	@ (800a20c <HAL_FLASHEx_Erase+0xd8>)
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a156:	250f      	movs	r5, #15
 800a158:	197c      	adds	r4, r7, r5
 800a15a:	23fa      	movs	r3, #250	@ 0xfa
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	0018      	movs	r0, r3
 800a160:	f7ff ff7a 	bl	800a058 <FLASH_WaitForLastOperation>
 800a164:	0003      	movs	r3, r0
 800a166:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800a168:	002c      	movs	r4, r5
 800a16a:	193b      	adds	r3, r7, r4
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d142      	bne.n	800a1f8 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b04      	cmp	r3, #4
 800a178:	d10d      	bne.n	800a196 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	0018      	movs	r0, r3
 800a180:	f000 f848 	bl	800a214 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a184:	193c      	adds	r4, r7, r4
 800a186:	23fa      	movs	r3, #250	@ 0xfa
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	0018      	movs	r0, r3
 800a18c:	f7ff ff64 	bl	800a058 <FLASH_WaitForLastOperation>
 800a190:	0003      	movs	r3, r0
 800a192:	7023      	strb	r3, [r4, #0]
 800a194:	e030      	b.n	800a1f8 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2201      	movs	r2, #1
 800a19a:	4252      	negs	r2, r2
 800a19c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	60bb      	str	r3, [r7, #8]
 800a1a4:	e01a      	b.n	800a1dc <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	0011      	movs	r1, r2
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 f844 	bl	800a23c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800a1b4:	250f      	movs	r5, #15
 800a1b6:	197c      	adds	r4, r7, r5
 800a1b8:	23fa      	movs	r3, #250	@ 0xfa
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f7ff ff4b 	bl	800a058 <FLASH_WaitForLastOperation>
 800a1c2:	0003      	movs	r3, r0
 800a1c4:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800a1c6:	197b      	adds	r3, r7, r5
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	601a      	str	r2, [r3, #0]
          break;
 800a1d4:	e00a      	b.n	800a1ec <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	60bb      	str	r3, [r7, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689a      	ldr	r2, [r3, #8]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	18d3      	adds	r3, r2, r3
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d3dc      	bcc.n	800a1a6 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a1ec:	4b08      	ldr	r3, [pc, #32]	@ (800a210 <HAL_FLASHEx_Erase+0xdc>)
 800a1ee:	695a      	ldr	r2, [r3, #20]
 800a1f0:	4b07      	ldr	r3, [pc, #28]	@ (800a210 <HAL_FLASHEx_Erase+0xdc>)
 800a1f2:	2102      	movs	r1, #2
 800a1f4:	438a      	bics	r2, r1
 800a1f6:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a1f8:	4b04      	ldr	r3, [pc, #16]	@ (800a20c <HAL_FLASHEx_Erase+0xd8>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800a1fe:	230f      	movs	r3, #15
 800a200:	18fb      	adds	r3, r7, r3
 800a202:	781b      	ldrb	r3, [r3, #0]
}
 800a204:	0018      	movs	r0, r3
 800a206:	46bd      	mov	sp, r7
 800a208:	b004      	add	sp, #16
 800a20a:	bdb0      	pop	{r4, r5, r7, pc}
 800a20c:	20001e84 	.word	0x20001e84
 800a210:	40022000 	.word	0x40022000

0800a214 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800a21c:	4b06      	ldr	r3, [pc, #24]	@ (800a238 <FLASH_MassErase+0x24>)
 800a21e:	695a      	ldr	r2, [r3, #20]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	431a      	orrs	r2, r3
 800a224:	4b04      	ldr	r3, [pc, #16]	@ (800a238 <FLASH_MassErase+0x24>)
 800a226:	2180      	movs	r1, #128	@ 0x80
 800a228:	0249      	lsls	r1, r1, #9
 800a22a:	430a      	orrs	r2, r1
 800a22c:	615a      	str	r2, [r3, #20]
}
 800a22e:	46c0      	nop			@ (mov r8, r8)
 800a230:	46bd      	mov	sp, r7
 800a232:	b002      	add	sp, #8
 800a234:	bd80      	pop	{r7, pc}
 800a236:	46c0      	nop			@ (mov r8, r8)
 800a238:	40022000 	.word	0x40022000

0800a23c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800a246:	4b0f      	ldr	r3, [pc, #60]	@ (800a284 <FLASH_PageErase+0x48>)
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	4a0f      	ldr	r2, [pc, #60]	@ (800a288 <FLASH_PageErase+0x4c>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b04      	cmp	r3, #4
 800a254:	d005      	beq.n	800a262 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2280      	movs	r2, #128	@ 0x80
 800a25a:	0192      	lsls	r2, r2, #6
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e003      	b.n	800a26a <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4a09      	ldr	r2, [pc, #36]	@ (800a28c <FLASH_PageErase+0x50>)
 800a266:	4013      	ands	r3, r2
 800a268:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	00da      	lsls	r2, r3, #3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	431a      	orrs	r2, r3
 800a272:	4b04      	ldr	r3, [pc, #16]	@ (800a284 <FLASH_PageErase+0x48>)
 800a274:	4906      	ldr	r1, [pc, #24]	@ (800a290 <FLASH_PageErase+0x54>)
 800a276:	430a      	orrs	r2, r1
 800a278:	615a      	str	r2, [r3, #20]
}
 800a27a:	46c0      	nop			@ (mov r8, r8)
 800a27c:	46bd      	mov	sp, r7
 800a27e:	b004      	add	sp, #16
 800a280:	bd80      	pop	{r7, pc}
 800a282:	46c0      	nop			@ (mov r8, r8)
 800a284:	40022000 	.word	0x40022000
 800a288:	ffffe007 	.word	0xffffe007
 800a28c:	ffffdfff 	.word	0xffffdfff
 800a290:	00010002 	.word	0x00010002

0800a294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a2a2:	e14d      	b.n	800a540 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4091      	lsls	r1, r2
 800a2ae:	000a      	movs	r2, r1
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d100      	bne.n	800a2bc <HAL_GPIO_Init+0x28>
 800a2ba:	e13e      	b.n	800a53a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d005      	beq.n	800a2d4 <HAL_GPIO_Init+0x40>
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d130      	bne.n	800a336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	2203      	movs	r2, #3
 800a2e0:	409a      	lsls	r2, r3
 800a2e2:	0013      	movs	r3, r2
 800a2e4:	43da      	mvns	r2, r3
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	68da      	ldr	r2, [r3, #12]
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	409a      	lsls	r2, r3
 800a2f6:	0013      	movs	r3, r2
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a30a:	2201      	movs	r2, #1
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	409a      	lsls	r2, r3
 800a310:	0013      	movs	r3, r2
 800a312:	43da      	mvns	r2, r3
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	4013      	ands	r3, r2
 800a318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	091b      	lsrs	r3, r3, #4
 800a320:	2201      	movs	r2, #1
 800a322:	401a      	ands	r2, r3
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	409a      	lsls	r2, r3
 800a328:	0013      	movs	r3, r2
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	2203      	movs	r2, #3
 800a33c:	4013      	ands	r3, r2
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d017      	beq.n	800a372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	2203      	movs	r2, #3
 800a34e:	409a      	lsls	r2, r3
 800a350:	0013      	movs	r3, r2
 800a352:	43da      	mvns	r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	4013      	ands	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	409a      	lsls	r2, r3
 800a364:	0013      	movs	r3, r2
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	4313      	orrs	r3, r2
 800a36a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2203      	movs	r2, #3
 800a378:	4013      	ands	r3, r2
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d123      	bne.n	800a3c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	08da      	lsrs	r2, r3, #3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3208      	adds	r2, #8
 800a386:	0092      	lsls	r2, r2, #2
 800a388:	58d3      	ldr	r3, [r2, r3]
 800a38a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2207      	movs	r2, #7
 800a390:	4013      	ands	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	220f      	movs	r2, #15
 800a396:	409a      	lsls	r2, r3
 800a398:	0013      	movs	r3, r2
 800a39a:	43da      	mvns	r2, r3
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2107      	movs	r1, #7
 800a3aa:	400b      	ands	r3, r1
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	409a      	lsls	r2, r3
 800a3b0:	0013      	movs	r3, r2
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	08da      	lsrs	r2, r3, #3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3208      	adds	r2, #8
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	6939      	ldr	r1, [r7, #16]
 800a3c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	409a      	lsls	r2, r3
 800a3d4:	0013      	movs	r3, r2
 800a3d6:	43da      	mvns	r2, r3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	401a      	ands	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	409a      	lsls	r2, r3
 800a3ec:	0013      	movs	r3, r2
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	23c0      	movs	r3, #192	@ 0xc0
 800a400:	029b      	lsls	r3, r3, #10
 800a402:	4013      	ands	r3, r2
 800a404:	d100      	bne.n	800a408 <HAL_GPIO_Init+0x174>
 800a406:	e098      	b.n	800a53a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a408:	4a53      	ldr	r2, [pc, #332]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	089b      	lsrs	r3, r3, #2
 800a40e:	3318      	adds	r3, #24
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	589b      	ldr	r3, [r3, r2]
 800a414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2203      	movs	r2, #3
 800a41a:	4013      	ands	r3, r2
 800a41c:	00db      	lsls	r3, r3, #3
 800a41e:	220f      	movs	r2, #15
 800a420:	409a      	lsls	r2, r3
 800a422:	0013      	movs	r3, r2
 800a424:	43da      	mvns	r2, r3
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4013      	ands	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	23a0      	movs	r3, #160	@ 0xa0
 800a430:	05db      	lsls	r3, r3, #23
 800a432:	429a      	cmp	r2, r3
 800a434:	d019      	beq.n	800a46a <HAL_GPIO_Init+0x1d6>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a48      	ldr	r2, [pc, #288]	@ (800a55c <HAL_GPIO_Init+0x2c8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d013      	beq.n	800a466 <HAL_GPIO_Init+0x1d2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a47      	ldr	r2, [pc, #284]	@ (800a560 <HAL_GPIO_Init+0x2cc>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00d      	beq.n	800a462 <HAL_GPIO_Init+0x1ce>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a46      	ldr	r2, [pc, #280]	@ (800a564 <HAL_GPIO_Init+0x2d0>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d007      	beq.n	800a45e <HAL_GPIO_Init+0x1ca>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a45      	ldr	r2, [pc, #276]	@ (800a568 <HAL_GPIO_Init+0x2d4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d101      	bne.n	800a45a <HAL_GPIO_Init+0x1c6>
 800a456:	2304      	movs	r3, #4
 800a458:	e008      	b.n	800a46c <HAL_GPIO_Init+0x1d8>
 800a45a:	2305      	movs	r3, #5
 800a45c:	e006      	b.n	800a46c <HAL_GPIO_Init+0x1d8>
 800a45e:	2303      	movs	r3, #3
 800a460:	e004      	b.n	800a46c <HAL_GPIO_Init+0x1d8>
 800a462:	2302      	movs	r3, #2
 800a464:	e002      	b.n	800a46c <HAL_GPIO_Init+0x1d8>
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <HAL_GPIO_Init+0x1d8>
 800a46a:	2300      	movs	r3, #0
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	2103      	movs	r1, #3
 800a470:	400a      	ands	r2, r1
 800a472:	00d2      	lsls	r2, r2, #3
 800a474:	4093      	lsls	r3, r2
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	4313      	orrs	r3, r2
 800a47a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a47c:	4936      	ldr	r1, [pc, #216]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	089b      	lsrs	r3, r3, #2
 800a482:	3318      	adds	r3, #24
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a48a:	4b33      	ldr	r3, [pc, #204]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	43da      	mvns	r2, r3
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4013      	ands	r3, r2
 800a498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	2380      	movs	r3, #128	@ 0x80
 800a4a0:	035b      	lsls	r3, r3, #13
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	d003      	beq.n	800a4ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a4ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a4b4:	4b28      	ldr	r3, [pc, #160]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	43da      	mvns	r2, r3
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	2380      	movs	r3, #128	@ 0x80
 800a4ca:	039b      	lsls	r3, r3, #14
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a4d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a4de:	4a1e      	ldr	r2, [pc, #120]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a4e0:	2384      	movs	r3, #132	@ 0x84
 800a4e2:	58d3      	ldr	r3, [r2, r3]
 800a4e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	43da      	mvns	r2, r3
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	2380      	movs	r3, #128	@ 0x80
 800a4f6:	029b      	lsls	r3, r3, #10
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	d003      	beq.n	800a504 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4313      	orrs	r3, r2
 800a502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a504:	4914      	ldr	r1, [pc, #80]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a506:	2284      	movs	r2, #132	@ 0x84
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a50c:	4a12      	ldr	r2, [pc, #72]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a50e:	2380      	movs	r3, #128	@ 0x80
 800a510:	58d3      	ldr	r3, [r2, r3]
 800a512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	43da      	mvns	r2, r3
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	4013      	ands	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	2380      	movs	r3, #128	@ 0x80
 800a524:	025b      	lsls	r3, r3, #9
 800a526:	4013      	ands	r3, r2
 800a528:	d003      	beq.n	800a532 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a532:	4909      	ldr	r1, [pc, #36]	@ (800a558 <HAL_GPIO_Init+0x2c4>)
 800a534:	2280      	movs	r2, #128	@ 0x80
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	3301      	adds	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	40da      	lsrs	r2, r3
 800a548:	1e13      	subs	r3, r2, #0
 800a54a:	d000      	beq.n	800a54e <HAL_GPIO_Init+0x2ba>
 800a54c:	e6aa      	b.n	800a2a4 <HAL_GPIO_Init+0x10>
  }
}
 800a54e:	46c0      	nop			@ (mov r8, r8)
 800a550:	46c0      	nop			@ (mov r8, r8)
 800a552:	46bd      	mov	sp, r7
 800a554:	b006      	add	sp, #24
 800a556:	bd80      	pop	{r7, pc}
 800a558:	40021800 	.word	0x40021800
 800a55c:	50000400 	.word	0x50000400
 800a560:	50000800 	.word	0x50000800
 800a564:	50000c00 	.word	0x50000c00
 800a568:	50001000 	.word	0x50001000

0800a56c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	000a      	movs	r2, r1
 800a576:	1cbb      	adds	r3, r7, #2
 800a578:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	1cba      	adds	r2, r7, #2
 800a580:	8812      	ldrh	r2, [r2, #0]
 800a582:	4013      	ands	r3, r2
 800a584:	d004      	beq.n	800a590 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a586:	230f      	movs	r3, #15
 800a588:	18fb      	adds	r3, r7, r3
 800a58a:	2201      	movs	r2, #1
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	e003      	b.n	800a598 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a590:	230f      	movs	r3, #15
 800a592:	18fb      	adds	r3, r7, r3
 800a594:	2200      	movs	r2, #0
 800a596:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a598:	230f      	movs	r3, #15
 800a59a:	18fb      	adds	r3, r7, r3
 800a59c:	781b      	ldrb	r3, [r3, #0]
}
 800a59e:	0018      	movs	r0, r3
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	b004      	add	sp, #16
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	0008      	movs	r0, r1
 800a5b0:	0011      	movs	r1, r2
 800a5b2:	1cbb      	adds	r3, r7, #2
 800a5b4:	1c02      	adds	r2, r0, #0
 800a5b6:	801a      	strh	r2, [r3, #0]
 800a5b8:	1c7b      	adds	r3, r7, #1
 800a5ba:	1c0a      	adds	r2, r1, #0
 800a5bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5be:	1c7b      	adds	r3, r7, #1
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d004      	beq.n	800a5d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a5c6:	1cbb      	adds	r3, r7, #2
 800a5c8:	881a      	ldrh	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a5ce:	e003      	b.n	800a5d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a5d0:	1cbb      	adds	r3, r7, #2
 800a5d2:	881a      	ldrh	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a5d8:	46c0      	nop			@ (mov r8, r8)
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	b002      	add	sp, #8
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	0002      	movs	r2, r0
 800a5e8:	1dbb      	adds	r3, r7, #6
 800a5ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800a5ec:	4b10      	ldr	r3, [pc, #64]	@ (800a630 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	1dba      	adds	r2, r7, #6
 800a5f2:	8812      	ldrh	r2, [r2, #0]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	d008      	beq.n	800a60a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a5f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a630 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a5fa:	1dba      	adds	r2, r7, #6
 800a5fc:	8812      	ldrh	r2, [r2, #0]
 800a5fe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a600:	1dbb      	adds	r3, r7, #6
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	0018      	movs	r0, r3
 800a606:	f7fc f9f7 	bl	80069f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800a60a:	4b09      	ldr	r3, [pc, #36]	@ (800a630 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	1dba      	adds	r2, r7, #6
 800a610:	8812      	ldrh	r2, [r2, #0]
 800a612:	4013      	ands	r3, r2
 800a614:	d008      	beq.n	800a628 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a616:	4b06      	ldr	r3, [pc, #24]	@ (800a630 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a618:	1dba      	adds	r2, r7, #6
 800a61a:	8812      	ldrh	r2, [r2, #0]
 800a61c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a61e:	1dbb      	adds	r3, r7, #6
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	0018      	movs	r0, r3
 800a624:	f7fc f9f7 	bl	8006a16 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a628:	46c0      	nop			@ (mov r8, r8)
 800a62a:	46bd      	mov	sp, r7
 800a62c:	b002      	add	sp, #8
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	40021800 	.word	0x40021800

0800a634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e08f      	b.n	800a766 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2241      	movs	r2, #65	@ 0x41
 800a64a:	5c9b      	ldrb	r3, [r3, r2]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d107      	bne.n	800a662 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2240      	movs	r2, #64	@ 0x40
 800a656:	2100      	movs	r1, #0
 800a658:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	0018      	movs	r0, r3
 800a65e:	f7fc f83b 	bl	80066d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2241      	movs	r2, #65	@ 0x41
 800a666:	2124      	movs	r1, #36	@ 0x24
 800a668:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2101      	movs	r1, #1
 800a676:	438a      	bics	r2, r1
 800a678:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	493b      	ldr	r1, [pc, #236]	@ (800a770 <HAL_I2C_Init+0x13c>)
 800a684:	400a      	ands	r2, r1
 800a686:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689a      	ldr	r2, [r3, #8]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4938      	ldr	r1, [pc, #224]	@ (800a774 <HAL_I2C_Init+0x140>)
 800a694:	400a      	ands	r2, r1
 800a696:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d108      	bne.n	800a6b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2180      	movs	r1, #128	@ 0x80
 800a6aa:	0209      	lsls	r1, r1, #8
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	609a      	str	r2, [r3, #8]
 800a6b0:	e007      	b.n	800a6c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	689a      	ldr	r2, [r3, #8]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2184      	movs	r1, #132	@ 0x84
 800a6bc:	0209      	lsls	r1, r1, #8
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d109      	bne.n	800a6de <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2180      	movs	r1, #128	@ 0x80
 800a6d6:	0109      	lsls	r1, r1, #4
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	605a      	str	r2, [r3, #4]
 800a6dc:	e007      	b.n	800a6ee <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4923      	ldr	r1, [pc, #140]	@ (800a778 <HAL_I2C_Init+0x144>)
 800a6ea:	400a      	ands	r2, r1
 800a6ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4920      	ldr	r1, [pc, #128]	@ (800a77c <HAL_I2C_Init+0x148>)
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	491a      	ldr	r1, [pc, #104]	@ (800a774 <HAL_I2C_Init+0x140>)
 800a70a:	400a      	ands	r2, r1
 800a70c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	691a      	ldr	r2, [r3, #16]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	431a      	orrs	r2, r3
 800a718:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	69d9      	ldr	r1, [r3, #28]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a1a      	ldr	r2, [r3, #32]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2101      	movs	r1, #1
 800a744:	430a      	orrs	r2, r1
 800a746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2241      	movs	r2, #65	@ 0x41
 800a752:	2120      	movs	r1, #32
 800a754:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2242      	movs	r2, #66	@ 0x42
 800a760:	2100      	movs	r1, #0
 800a762:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	0018      	movs	r0, r3
 800a768:	46bd      	mov	sp, r7
 800a76a:	b002      	add	sp, #8
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	46c0      	nop			@ (mov r8, r8)
 800a770:	f0ffffff 	.word	0xf0ffffff
 800a774:	ffff7fff 	.word	0xffff7fff
 800a778:	fffff7ff 	.word	0xfffff7ff
 800a77c:	02008000 	.word	0x02008000

0800a780 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a780:	b590      	push	{r4, r7, lr}
 800a782:	b089      	sub	sp, #36	@ 0x24
 800a784:	af02      	add	r7, sp, #8
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	000c      	movs	r4, r1
 800a78a:	0010      	movs	r0, r2
 800a78c:	0019      	movs	r1, r3
 800a78e:	230a      	movs	r3, #10
 800a790:	18fb      	adds	r3, r7, r3
 800a792:	1c22      	adds	r2, r4, #0
 800a794:	801a      	strh	r2, [r3, #0]
 800a796:	2308      	movs	r3, #8
 800a798:	18fb      	adds	r3, r7, r3
 800a79a:	1c02      	adds	r2, r0, #0
 800a79c:	801a      	strh	r2, [r3, #0]
 800a79e:	1dbb      	adds	r3, r7, #6
 800a7a0:	1c0a      	adds	r2, r1, #0
 800a7a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2241      	movs	r2, #65	@ 0x41
 800a7a8:	5c9b      	ldrb	r3, [r3, r2]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b20      	cmp	r3, #32
 800a7ae:	d000      	beq.n	800a7b2 <HAL_I2C_Mem_Write+0x32>
 800a7b0:	e10c      	b.n	800a9cc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d004      	beq.n	800a7c2 <HAL_I2C_Mem_Write+0x42>
 800a7b8:	232c      	movs	r3, #44	@ 0x2c
 800a7ba:	18fb      	adds	r3, r7, r3
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d105      	bne.n	800a7ce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2280      	movs	r2, #128	@ 0x80
 800a7c6:	0092      	lsls	r2, r2, #2
 800a7c8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e0ff      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2240      	movs	r2, #64	@ 0x40
 800a7d2:	5c9b      	ldrb	r3, [r3, r2]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_I2C_Mem_Write+0x5c>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e0f8      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2240      	movs	r2, #64	@ 0x40
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a7e4:	f7fe f932 	bl	8008a4c <HAL_GetTick>
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a7ec:	2380      	movs	r3, #128	@ 0x80
 800a7ee:	0219      	lsls	r1, r3, #8
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	2319      	movs	r3, #25
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f000 fc07 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800a7fe:	1e03      	subs	r3, r0, #0
 800a800:	d001      	beq.n	800a806 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e0e3      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2241      	movs	r2, #65	@ 0x41
 800a80a:	2121      	movs	r1, #33	@ 0x21
 800a80c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2242      	movs	r2, #66	@ 0x42
 800a812:	2140      	movs	r1, #64	@ 0x40
 800a814:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a820:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	222c      	movs	r2, #44	@ 0x2c
 800a826:	18ba      	adds	r2, r7, r2
 800a828:	8812      	ldrh	r2, [r2, #0]
 800a82a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a832:	1dbb      	adds	r3, r7, #6
 800a834:	881c      	ldrh	r4, [r3, #0]
 800a836:	2308      	movs	r3, #8
 800a838:	18fb      	adds	r3, r7, r3
 800a83a:	881a      	ldrh	r2, [r3, #0]
 800a83c:	230a      	movs	r3, #10
 800a83e:	18fb      	adds	r3, r7, r3
 800a840:	8819      	ldrh	r1, [r3, #0]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	0023      	movs	r3, r4
 800a84e:	f000 faf5 	bl	800ae3c <I2C_RequestMemoryWrite>
 800a852:	1e03      	subs	r3, r0, #0
 800a854:	d005      	beq.n	800a862 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2240      	movs	r2, #64	@ 0x40
 800a85a:	2100      	movs	r1, #0
 800a85c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e0b5      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a866:	b29b      	uxth	r3, r3
 800a868:	2bff      	cmp	r3, #255	@ 0xff
 800a86a:	d911      	bls.n	800a890 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	22ff      	movs	r2, #255	@ 0xff
 800a870:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a876:	b2da      	uxtb	r2, r3
 800a878:	2380      	movs	r3, #128	@ 0x80
 800a87a:	045c      	lsls	r4, r3, #17
 800a87c:	230a      	movs	r3, #10
 800a87e:	18fb      	adds	r3, r7, r3
 800a880:	8819      	ldrh	r1, [r3, #0]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	2300      	movs	r3, #0
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	0023      	movs	r3, r4
 800a88a:	f000 fd99 	bl	800b3c0 <I2C_TransferConfig>
 800a88e:	e012      	b.n	800a8b6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a894:	b29a      	uxth	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	2380      	movs	r3, #128	@ 0x80
 800a8a2:	049c      	lsls	r4, r3, #18
 800a8a4:	230a      	movs	r3, #10
 800a8a6:	18fb      	adds	r3, r7, r3
 800a8a8:	8819      	ldrh	r1, [r3, #0]
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	0023      	movs	r3, r4
 800a8b2:	f000 fd85 	bl	800b3c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	0018      	movs	r0, r3
 800a8be:	f000 fbfd 	bl	800b0bc <I2C_WaitOnTXISFlagUntilTimeout>
 800a8c2:	1e03      	subs	r3, r0, #0
 800a8c4:	d001      	beq.n	800a8ca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e081      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ce:	781a      	ldrb	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d03a      	beq.n	800a97a <HAL_I2C_Mem_Write+0x1fa>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d136      	bne.n	800a97a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a90c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	0013      	movs	r3, r2
 800a916:	2200      	movs	r2, #0
 800a918:	2180      	movs	r1, #128	@ 0x80
 800a91a:	f000 fb77 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800a91e:	1e03      	subs	r3, r0, #0
 800a920:	d001      	beq.n	800a926 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e053      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	2bff      	cmp	r3, #255	@ 0xff
 800a92e:	d911      	bls.n	800a954 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	22ff      	movs	r2, #255	@ 0xff
 800a934:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	2380      	movs	r3, #128	@ 0x80
 800a93e:	045c      	lsls	r4, r3, #17
 800a940:	230a      	movs	r3, #10
 800a942:	18fb      	adds	r3, r7, r3
 800a944:	8819      	ldrh	r1, [r3, #0]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	2300      	movs	r3, #0
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	0023      	movs	r3, r4
 800a94e:	f000 fd37 	bl	800b3c0 <I2C_TransferConfig>
 800a952:	e012      	b.n	800a97a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a958:	b29a      	uxth	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a962:	b2da      	uxtb	r2, r3
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	049c      	lsls	r4, r3, #18
 800a968:	230a      	movs	r3, #10
 800a96a:	18fb      	adds	r3, r7, r3
 800a96c:	8819      	ldrh	r1, [r3, #0]
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	2300      	movs	r3, #0
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	0023      	movs	r3, r4
 800a976:	f000 fd23 	bl	800b3c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a97e:	b29b      	uxth	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	d198      	bne.n	800a8b6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	0018      	movs	r0, r3
 800a98c:	f000 fbdc 	bl	800b148 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a990:	1e03      	subs	r3, r0, #0
 800a992:	d001      	beq.n	800a998 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e01a      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2220      	movs	r2, #32
 800a99e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	490b      	ldr	r1, [pc, #44]	@ (800a9d8 <HAL_I2C_Mem_Write+0x258>)
 800a9ac:	400a      	ands	r2, r1
 800a9ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2241      	movs	r2, #65	@ 0x41
 800a9b4:	2120      	movs	r1, #32
 800a9b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2242      	movs	r2, #66	@ 0x42
 800a9bc:	2100      	movs	r1, #0
 800a9be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2240      	movs	r2, #64	@ 0x40
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e000      	b.n	800a9ce <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800a9cc:	2302      	movs	r3, #2
  }
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b007      	add	sp, #28
 800a9d4:	bd90      	pop	{r4, r7, pc}
 800a9d6:	46c0      	nop			@ (mov r8, r8)
 800a9d8:	fe00e800 	.word	0xfe00e800

0800a9dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9dc:	b590      	push	{r4, r7, lr}
 800a9de:	b089      	sub	sp, #36	@ 0x24
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	000c      	movs	r4, r1
 800a9e6:	0010      	movs	r0, r2
 800a9e8:	0019      	movs	r1, r3
 800a9ea:	230a      	movs	r3, #10
 800a9ec:	18fb      	adds	r3, r7, r3
 800a9ee:	1c22      	adds	r2, r4, #0
 800a9f0:	801a      	strh	r2, [r3, #0]
 800a9f2:	2308      	movs	r3, #8
 800a9f4:	18fb      	adds	r3, r7, r3
 800a9f6:	1c02      	adds	r2, r0, #0
 800a9f8:	801a      	strh	r2, [r3, #0]
 800a9fa:	1dbb      	adds	r3, r7, #6
 800a9fc:	1c0a      	adds	r2, r1, #0
 800a9fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2241      	movs	r2, #65	@ 0x41
 800aa04:	5c9b      	ldrb	r3, [r3, r2]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b20      	cmp	r3, #32
 800aa0a:	d000      	beq.n	800aa0e <HAL_I2C_Mem_Read+0x32>
 800aa0c:	e110      	b.n	800ac30 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <HAL_I2C_Mem_Read+0x42>
 800aa14:	232c      	movs	r3, #44	@ 0x2c
 800aa16:	18fb      	adds	r3, r7, r3
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d105      	bne.n	800aa2a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2280      	movs	r2, #128	@ 0x80
 800aa22:	0092      	lsls	r2, r2, #2
 800aa24:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e103      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2240      	movs	r2, #64	@ 0x40
 800aa2e:	5c9b      	ldrb	r3, [r3, r2]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d101      	bne.n	800aa38 <HAL_I2C_Mem_Read+0x5c>
 800aa34:	2302      	movs	r3, #2
 800aa36:	e0fc      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2240      	movs	r2, #64	@ 0x40
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aa40:	f7fe f804 	bl	8008a4c <HAL_GetTick>
 800aa44:	0003      	movs	r3, r0
 800aa46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa48:	2380      	movs	r3, #128	@ 0x80
 800aa4a:	0219      	lsls	r1, r3, #8
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	2319      	movs	r3, #25
 800aa54:	2201      	movs	r2, #1
 800aa56:	f000 fad9 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800aa5a:	1e03      	subs	r3, r0, #0
 800aa5c:	d001      	beq.n	800aa62 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e0e7      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2241      	movs	r2, #65	@ 0x41
 800aa66:	2122      	movs	r1, #34	@ 0x22
 800aa68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2242      	movs	r2, #66	@ 0x42
 800aa6e:	2140      	movs	r1, #64	@ 0x40
 800aa70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	222c      	movs	r2, #44	@ 0x2c
 800aa82:	18ba      	adds	r2, r7, r2
 800aa84:	8812      	ldrh	r2, [r2, #0]
 800aa86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa8e:	1dbb      	adds	r3, r7, #6
 800aa90:	881c      	ldrh	r4, [r3, #0]
 800aa92:	2308      	movs	r3, #8
 800aa94:	18fb      	adds	r3, r7, r3
 800aa96:	881a      	ldrh	r2, [r3, #0]
 800aa98:	230a      	movs	r3, #10
 800aa9a:	18fb      	adds	r3, r7, r3
 800aa9c:	8819      	ldrh	r1, [r3, #0]
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	0023      	movs	r3, r4
 800aaaa:	f000 fa2b 	bl	800af04 <I2C_RequestMemoryRead>
 800aaae:	1e03      	subs	r3, r0, #0
 800aab0:	d005      	beq.n	800aabe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2240      	movs	r2, #64	@ 0x40
 800aab6:	2100      	movs	r1, #0
 800aab8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e0b9      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	2bff      	cmp	r3, #255	@ 0xff
 800aac6:	d911      	bls.n	800aaec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	22ff      	movs	r2, #255	@ 0xff
 800aacc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	2380      	movs	r3, #128	@ 0x80
 800aad6:	045c      	lsls	r4, r3, #17
 800aad8:	230a      	movs	r3, #10
 800aada:	18fb      	adds	r3, r7, r3
 800aadc:	8819      	ldrh	r1, [r3, #0]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	4b56      	ldr	r3, [pc, #344]	@ (800ac3c <HAL_I2C_Mem_Read+0x260>)
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	0023      	movs	r3, r4
 800aae6:	f000 fc6b 	bl	800b3c0 <I2C_TransferConfig>
 800aaea:	e012      	b.n	800ab12 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	2380      	movs	r3, #128	@ 0x80
 800aafe:	049c      	lsls	r4, r3, #18
 800ab00:	230a      	movs	r3, #10
 800ab02:	18fb      	adds	r3, r7, r3
 800ab04:	8819      	ldrh	r1, [r3, #0]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	4b4c      	ldr	r3, [pc, #304]	@ (800ac3c <HAL_I2C_Mem_Read+0x260>)
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	0023      	movs	r3, r4
 800ab0e:	f000 fc57 	bl	800b3c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	0013      	movs	r3, r2
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2104      	movs	r1, #4
 800ab20:	f000 fa74 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800ab24:	1e03      	subs	r3, r0, #0
 800ab26:	d001      	beq.n	800ab2c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e082      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d03a      	beq.n	800abde <HAL_I2C_Mem_Read+0x202>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d136      	bne.n	800abde <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	0013      	movs	r3, r2
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2180      	movs	r1, #128	@ 0x80
 800ab7e:	f000 fa45 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800ab82:	1e03      	subs	r3, r0, #0
 800ab84:	d001      	beq.n	800ab8a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e053      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	2bff      	cmp	r3, #255	@ 0xff
 800ab92:	d911      	bls.n	800abb8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	22ff      	movs	r2, #255	@ 0xff
 800ab98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	2380      	movs	r3, #128	@ 0x80
 800aba2:	045c      	lsls	r4, r3, #17
 800aba4:	230a      	movs	r3, #10
 800aba6:	18fb      	adds	r3, r7, r3
 800aba8:	8819      	ldrh	r1, [r3, #0]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	2300      	movs	r3, #0
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	0023      	movs	r3, r4
 800abb2:	f000 fc05 	bl	800b3c0 <I2C_TransferConfig>
 800abb6:	e012      	b.n	800abde <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	2380      	movs	r3, #128	@ 0x80
 800abca:	049c      	lsls	r4, r3, #18
 800abcc:	230a      	movs	r3, #10
 800abce:	18fb      	adds	r3, r7, r3
 800abd0:	8819      	ldrh	r1, [r3, #0]
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	2300      	movs	r3, #0
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	0023      	movs	r3, r4
 800abda:	f000 fbf1 	bl	800b3c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d194      	bne.n	800ab12 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	0018      	movs	r0, r3
 800abf0:	f000 faaa 	bl	800b148 <I2C_WaitOnSTOPFlagUntilTimeout>
 800abf4:	1e03      	subs	r3, r0, #0
 800abf6:	d001      	beq.n	800abfc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e01a      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2220      	movs	r2, #32
 800ac02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	490c      	ldr	r1, [pc, #48]	@ (800ac40 <HAL_I2C_Mem_Read+0x264>)
 800ac10:	400a      	ands	r2, r1
 800ac12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2241      	movs	r2, #65	@ 0x41
 800ac18:	2120      	movs	r1, #32
 800ac1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2242      	movs	r2, #66	@ 0x42
 800ac20:	2100      	movs	r1, #0
 800ac22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2240      	movs	r2, #64	@ 0x40
 800ac28:	2100      	movs	r1, #0
 800ac2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	e000      	b.n	800ac32 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800ac30:	2302      	movs	r3, #2
  }
}
 800ac32:	0018      	movs	r0, r3
 800ac34:	46bd      	mov	sp, r7
 800ac36:	b007      	add	sp, #28
 800ac38:	bd90      	pop	{r4, r7, pc}
 800ac3a:	46c0      	nop			@ (mov r8, r8)
 800ac3c:	80002400 	.word	0x80002400
 800ac40:	fe00e800 	.word	0xfe00e800

0800ac44 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08a      	sub	sp, #40	@ 0x28
 800ac48:	af02      	add	r7, sp, #8
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	607a      	str	r2, [r7, #4]
 800ac4e:	603b      	str	r3, [r7, #0]
 800ac50:	230a      	movs	r3, #10
 800ac52:	18fb      	adds	r3, r7, r3
 800ac54:	1c0a      	adds	r2, r1, #0
 800ac56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2241      	movs	r2, #65	@ 0x41
 800ac60:	5c9b      	ldrb	r3, [r3, r2]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b20      	cmp	r3, #32
 800ac66:	d000      	beq.n	800ac6a <HAL_I2C_IsDeviceReady+0x26>
 800ac68:	e0df      	b.n	800ae2a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	699a      	ldr	r2, [r3, #24]
 800ac70:	2380      	movs	r3, #128	@ 0x80
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	401a      	ands	r2, r3
 800ac76:	2380      	movs	r3, #128	@ 0x80
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d101      	bne.n	800ac82 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	e0d4      	b.n	800ae2c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2240      	movs	r2, #64	@ 0x40
 800ac86:	5c9b      	ldrb	r3, [r3, r2]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_I2C_IsDeviceReady+0x4c>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e0cd      	b.n	800ae2c <HAL_I2C_IsDeviceReady+0x1e8>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2240      	movs	r2, #64	@ 0x40
 800ac94:	2101      	movs	r1, #1
 800ac96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2241      	movs	r2, #65	@ 0x41
 800ac9c:	2124      	movs	r1, #36	@ 0x24
 800ac9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d107      	bne.n	800acbe <HAL_I2C_IsDeviceReady+0x7a>
 800acae:	230a      	movs	r3, #10
 800acb0:	18fb      	adds	r3, r7, r3
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	059b      	lsls	r3, r3, #22
 800acb6:	0d9b      	lsrs	r3, r3, #22
 800acb8:	4a5e      	ldr	r2, [pc, #376]	@ (800ae34 <HAL_I2C_IsDeviceReady+0x1f0>)
 800acba:	431a      	orrs	r2, r3
 800acbc:	e006      	b.n	800accc <HAL_I2C_IsDeviceReady+0x88>
 800acbe:	230a      	movs	r3, #10
 800acc0:	18fb      	adds	r3, r7, r3
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	059b      	lsls	r3, r3, #22
 800acc6:	0d9b      	lsrs	r3, r3, #22
 800acc8:	4a5b      	ldr	r2, [pc, #364]	@ (800ae38 <HAL_I2C_IsDeviceReady+0x1f4>)
 800acca:	431a      	orrs	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800acd2:	f7fd febb 	bl	8008a4c <HAL_GetTick>
 800acd6:	0003      	movs	r3, r0
 800acd8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	2220      	movs	r2, #32
 800ace2:	4013      	ands	r3, r2
 800ace4:	3b20      	subs	r3, #32
 800ace6:	425a      	negs	r2, r3
 800ace8:	4153      	adcs	r3, r2
 800acea:	b2da      	uxtb	r2, r3
 800acec:	231f      	movs	r3, #31
 800acee:	18fb      	adds	r3, r7, r3
 800acf0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	2210      	movs	r2, #16
 800acfa:	4013      	ands	r3, r2
 800acfc:	3b10      	subs	r3, #16
 800acfe:	425a      	negs	r2, r3
 800ad00:	4153      	adcs	r3, r2
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	231e      	movs	r3, #30
 800ad06:	18fb      	adds	r3, r7, r3
 800ad08:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ad0a:	e035      	b.n	800ad78 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	d01a      	beq.n	800ad48 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ad12:	f7fd fe9b 	bl	8008a4c <HAL_GetTick>
 800ad16:	0002      	movs	r2, r0
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d302      	bcc.n	800ad28 <HAL_I2C_IsDeviceReady+0xe4>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10f      	bne.n	800ad48 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2241      	movs	r2, #65	@ 0x41
 800ad2c:	2120      	movs	r1, #32
 800ad2e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad34:	2220      	movs	r2, #32
 800ad36:	431a      	orrs	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2240      	movs	r2, #64	@ 0x40
 800ad40:	2100      	movs	r1, #0
 800ad42:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e071      	b.n	800ae2c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	4013      	ands	r3, r2
 800ad52:	3b20      	subs	r3, #32
 800ad54:	425a      	negs	r2, r3
 800ad56:	4153      	adcs	r3, r2
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	231f      	movs	r3, #31
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	2210      	movs	r2, #16
 800ad68:	4013      	ands	r3, r2
 800ad6a:	3b10      	subs	r3, #16
 800ad6c:	425a      	negs	r2, r3
 800ad6e:	4153      	adcs	r3, r2
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	231e      	movs	r3, #30
 800ad74:	18fb      	adds	r3, r7, r3
 800ad76:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ad78:	231f      	movs	r3, #31
 800ad7a:	18fb      	adds	r3, r7, r3
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d104      	bne.n	800ad8c <HAL_I2C_IsDeviceReady+0x148>
 800ad82:	231e      	movs	r3, #30
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d0bf      	beq.n	800ad0c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	2210      	movs	r2, #16
 800ad94:	4013      	ands	r3, r2
 800ad96:	2b10      	cmp	r3, #16
 800ad98:	d01a      	beq.n	800add0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	0013      	movs	r3, r2
 800ada4:	2200      	movs	r2, #0
 800ada6:	2120      	movs	r1, #32
 800ada8:	f000 f930 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800adac:	1e03      	subs	r3, r0, #0
 800adae:	d001      	beq.n	800adb4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e03b      	b.n	800ae2c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2220      	movs	r2, #32
 800adba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2241      	movs	r2, #65	@ 0x41
 800adc0:	2120      	movs	r1, #32
 800adc2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2240      	movs	r2, #64	@ 0x40
 800adc8:	2100      	movs	r1, #0
 800adca:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	e02d      	b.n	800ae2c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	0013      	movs	r3, r2
 800adda:	2200      	movs	r2, #0
 800addc:	2120      	movs	r1, #32
 800adde:	f000 f915 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800ade2:	1e03      	subs	r3, r0, #0
 800ade4:	d001      	beq.n	800adea <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e020      	b.n	800ae2c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2210      	movs	r2, #16
 800adf0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2220      	movs	r2, #32
 800adf8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3301      	adds	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d900      	bls.n	800ae0a <HAL_I2C_IsDeviceReady+0x1c6>
 800ae08:	e74d      	b.n	800aca6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2241      	movs	r2, #65	@ 0x41
 800ae0e:	2120      	movs	r1, #32
 800ae10:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae16:	2220      	movs	r2, #32
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2240      	movs	r2, #64	@ 0x40
 800ae22:	2100      	movs	r1, #0
 800ae24:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e000      	b.n	800ae2c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800ae2a:	2302      	movs	r3, #2
  }
}
 800ae2c:	0018      	movs	r0, r3
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	b008      	add	sp, #32
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	02002000 	.word	0x02002000
 800ae38:	02002800 	.word	0x02002800

0800ae3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ae3c:	b5b0      	push	{r4, r5, r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	000c      	movs	r4, r1
 800ae46:	0010      	movs	r0, r2
 800ae48:	0019      	movs	r1, r3
 800ae4a:	250a      	movs	r5, #10
 800ae4c:	197b      	adds	r3, r7, r5
 800ae4e:	1c22      	adds	r2, r4, #0
 800ae50:	801a      	strh	r2, [r3, #0]
 800ae52:	2308      	movs	r3, #8
 800ae54:	18fb      	adds	r3, r7, r3
 800ae56:	1c02      	adds	r2, r0, #0
 800ae58:	801a      	strh	r2, [r3, #0]
 800ae5a:	1dbb      	adds	r3, r7, #6
 800ae5c:	1c0a      	adds	r2, r1, #0
 800ae5e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ae60:	1dbb      	adds	r3, r7, #6
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	2380      	movs	r3, #128	@ 0x80
 800ae68:	045c      	lsls	r4, r3, #17
 800ae6a:	197b      	adds	r3, r7, r5
 800ae6c:	8819      	ldrh	r1, [r3, #0]
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	4b23      	ldr	r3, [pc, #140]	@ (800af00 <I2C_RequestMemoryWrite+0xc4>)
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	0023      	movs	r3, r4
 800ae76:	f000 faa3 	bl	800b3c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae7c:	6a39      	ldr	r1, [r7, #32]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	0018      	movs	r0, r3
 800ae82:	f000 f91b 	bl	800b0bc <I2C_WaitOnTXISFlagUntilTimeout>
 800ae86:	1e03      	subs	r3, r0, #0
 800ae88:	d001      	beq.n	800ae8e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e033      	b.n	800aef6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae8e:	1dbb      	adds	r3, r7, #6
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d107      	bne.n	800aea6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae96:	2308      	movs	r3, #8
 800ae98:	18fb      	adds	r3, r7, r3
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	629a      	str	r2, [r3, #40]	@ 0x28
 800aea4:	e019      	b.n	800aeda <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aea6:	2308      	movs	r3, #8
 800aea8:	18fb      	adds	r3, r7, r3
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	0a1b      	lsrs	r3, r3, #8
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeba:	6a39      	ldr	r1, [r7, #32]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	0018      	movs	r0, r3
 800aec0:	f000 f8fc 	bl	800b0bc <I2C_WaitOnTXISFlagUntilTimeout>
 800aec4:	1e03      	subs	r3, r0, #0
 800aec6:	d001      	beq.n	800aecc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e014      	b.n	800aef6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aecc:	2308      	movs	r3, #8
 800aece:	18fb      	adds	r3, r7, r3
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800aeda:	6a3a      	ldr	r2, [r7, #32]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	0013      	movs	r3, r2
 800aee4:	2200      	movs	r2, #0
 800aee6:	2180      	movs	r1, #128	@ 0x80
 800aee8:	f000 f890 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800aeec:	1e03      	subs	r3, r0, #0
 800aeee:	d001      	beq.n	800aef4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e000      	b.n	800aef6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	0018      	movs	r0, r3
 800aef8:	46bd      	mov	sp, r7
 800aefa:	b004      	add	sp, #16
 800aefc:	bdb0      	pop	{r4, r5, r7, pc}
 800aefe:	46c0      	nop			@ (mov r8, r8)
 800af00:	80002000 	.word	0x80002000

0800af04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800af04:	b5b0      	push	{r4, r5, r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af02      	add	r7, sp, #8
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	000c      	movs	r4, r1
 800af0e:	0010      	movs	r0, r2
 800af10:	0019      	movs	r1, r3
 800af12:	250a      	movs	r5, #10
 800af14:	197b      	adds	r3, r7, r5
 800af16:	1c22      	adds	r2, r4, #0
 800af18:	801a      	strh	r2, [r3, #0]
 800af1a:	2308      	movs	r3, #8
 800af1c:	18fb      	adds	r3, r7, r3
 800af1e:	1c02      	adds	r2, r0, #0
 800af20:	801a      	strh	r2, [r3, #0]
 800af22:	1dbb      	adds	r3, r7, #6
 800af24:	1c0a      	adds	r2, r1, #0
 800af26:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800af28:	1dbb      	adds	r3, r7, #6
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	197b      	adds	r3, r7, r5
 800af30:	8819      	ldrh	r1, [r3, #0]
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	4b23      	ldr	r3, [pc, #140]	@ (800afc4 <I2C_RequestMemoryRead+0xc0>)
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	2300      	movs	r3, #0
 800af3a:	f000 fa41 	bl	800b3c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af40:	6a39      	ldr	r1, [r7, #32]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	0018      	movs	r0, r3
 800af46:	f000 f8b9 	bl	800b0bc <I2C_WaitOnTXISFlagUntilTimeout>
 800af4a:	1e03      	subs	r3, r0, #0
 800af4c:	d001      	beq.n	800af52 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e033      	b.n	800afba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af52:	1dbb      	adds	r3, r7, #6
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d107      	bne.n	800af6a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af5a:	2308      	movs	r3, #8
 800af5c:	18fb      	adds	r3, r7, r3
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	b2da      	uxtb	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	629a      	str	r2, [r3, #40]	@ 0x28
 800af68:	e019      	b.n	800af9e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800af6a:	2308      	movs	r3, #8
 800af6c:	18fb      	adds	r3, r7, r3
 800af6e:	881b      	ldrh	r3, [r3, #0]
 800af70:	0a1b      	lsrs	r3, r3, #8
 800af72:	b29b      	uxth	r3, r3
 800af74:	b2da      	uxtb	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af7e:	6a39      	ldr	r1, [r7, #32]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	0018      	movs	r0, r3
 800af84:	f000 f89a 	bl	800b0bc <I2C_WaitOnTXISFlagUntilTimeout>
 800af88:	1e03      	subs	r3, r0, #0
 800af8a:	d001      	beq.n	800af90 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e014      	b.n	800afba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af90:	2308      	movs	r3, #8
 800af92:	18fb      	adds	r3, r7, r3
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	b2da      	uxtb	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800af9e:	6a3a      	ldr	r2, [r7, #32]
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	0013      	movs	r3, r2
 800afa8:	2200      	movs	r2, #0
 800afaa:	2140      	movs	r1, #64	@ 0x40
 800afac:	f000 f82e 	bl	800b00c <I2C_WaitOnFlagUntilTimeout>
 800afb0:	1e03      	subs	r3, r0, #0
 800afb2:	d001      	beq.n	800afb8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e000      	b.n	800afba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	0018      	movs	r0, r3
 800afbc:	46bd      	mov	sp, r7
 800afbe:	b004      	add	sp, #16
 800afc0:	bdb0      	pop	{r4, r5, r7, pc}
 800afc2:	46c0      	nop			@ (mov r8, r8)
 800afc4:	80002000 	.word	0x80002000

0800afc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	2202      	movs	r2, #2
 800afd8:	4013      	ands	r3, r2
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d103      	bne.n	800afe6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2200      	movs	r2, #0
 800afe4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	2201      	movs	r2, #1
 800afee:	4013      	ands	r3, r2
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d007      	beq.n	800b004 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	699a      	ldr	r2, [r3, #24]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2101      	movs	r1, #1
 800b000:	430a      	orrs	r2, r1
 800b002:	619a      	str	r2, [r3, #24]
  }
}
 800b004:	46c0      	nop			@ (mov r8, r8)
 800b006:	46bd      	mov	sp, r7
 800b008:	b002      	add	sp, #8
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	1dfb      	adds	r3, r7, #7
 800b01a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b01c:	e03a      	b.n	800b094 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b01e:	69ba      	ldr	r2, [r7, #24]
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	0018      	movs	r0, r3
 800b026:	f000 f8d3 	bl	800b1d0 <I2C_IsErrorOccurred>
 800b02a:	1e03      	subs	r3, r0, #0
 800b02c:	d001      	beq.n	800b032 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e040      	b.n	800b0b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	3301      	adds	r3, #1
 800b036:	d02d      	beq.n	800b094 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b038:	f7fd fd08 	bl	8008a4c <HAL_GetTick>
 800b03c:	0002      	movs	r2, r0
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	429a      	cmp	r2, r3
 800b046:	d302      	bcc.n	800b04e <I2C_WaitOnFlagUntilTimeout+0x42>
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d122      	bne.n	800b094 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	4013      	ands	r3, r2
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	425a      	negs	r2, r3
 800b05e:	4153      	adcs	r3, r2
 800b060:	b2db      	uxtb	r3, r3
 800b062:	001a      	movs	r2, r3
 800b064:	1dfb      	adds	r3, r7, #7
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d113      	bne.n	800b094 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b070:	2220      	movs	r2, #32
 800b072:	431a      	orrs	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2241      	movs	r2, #65	@ 0x41
 800b07c:	2120      	movs	r1, #32
 800b07e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2242      	movs	r2, #66	@ 0x42
 800b084:	2100      	movs	r1, #0
 800b086:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2240      	movs	r2, #64	@ 0x40
 800b08c:	2100      	movs	r1, #0
 800b08e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e00f      	b.n	800b0b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	4013      	ands	r3, r2
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	425a      	negs	r2, r3
 800b0a4:	4153      	adcs	r3, r2
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	001a      	movs	r2, r3
 800b0aa:	1dfb      	adds	r3, r7, #7
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d0b5      	beq.n	800b01e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	b004      	add	sp, #16
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b0c8:	e032      	b.n	800b130 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f000 f87d 	bl	800b1d0 <I2C_IsErrorOccurred>
 800b0d6:	1e03      	subs	r3, r0, #0
 800b0d8:	d001      	beq.n	800b0de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e030      	b.n	800b140 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	d025      	beq.n	800b130 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e4:	f7fd fcb2 	bl	8008a4c <HAL_GetTick>
 800b0e8:	0002      	movs	r2, r0
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d302      	bcc.n	800b0fa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d11a      	bne.n	800b130 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	2202      	movs	r2, #2
 800b102:	4013      	ands	r3, r2
 800b104:	2b02      	cmp	r3, #2
 800b106:	d013      	beq.n	800b130 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b10c:	2220      	movs	r2, #32
 800b10e:	431a      	orrs	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2241      	movs	r2, #65	@ 0x41
 800b118:	2120      	movs	r1, #32
 800b11a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2242      	movs	r2, #66	@ 0x42
 800b120:	2100      	movs	r1, #0
 800b122:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2240      	movs	r2, #64	@ 0x40
 800b128:	2100      	movs	r1, #0
 800b12a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e007      	b.n	800b140 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	2202      	movs	r2, #2
 800b138:	4013      	ands	r3, r2
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d1c5      	bne.n	800b0ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	0018      	movs	r0, r3
 800b142:	46bd      	mov	sp, r7
 800b144:	b004      	add	sp, #16
 800b146:	bd80      	pop	{r7, pc}

0800b148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b154:	e02f      	b.n	800b1b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	68b9      	ldr	r1, [r7, #8]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	0018      	movs	r0, r3
 800b15e:	f000 f837 	bl	800b1d0 <I2C_IsErrorOccurred>
 800b162:	1e03      	subs	r3, r0, #0
 800b164:	d001      	beq.n	800b16a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e02d      	b.n	800b1c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b16a:	f7fd fc6f 	bl	8008a4c <HAL_GetTick>
 800b16e:	0002      	movs	r2, r0
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	429a      	cmp	r2, r3
 800b178:	d302      	bcc.n	800b180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d11a      	bne.n	800b1b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	699b      	ldr	r3, [r3, #24]
 800b186:	2220      	movs	r2, #32
 800b188:	4013      	ands	r3, r2
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	d013      	beq.n	800b1b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b192:	2220      	movs	r2, #32
 800b194:	431a      	orrs	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2241      	movs	r2, #65	@ 0x41
 800b19e:	2120      	movs	r1, #32
 800b1a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2242      	movs	r2, #66	@ 0x42
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2240      	movs	r2, #64	@ 0x40
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e007      	b.n	800b1c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	2220      	movs	r2, #32
 800b1be:	4013      	ands	r3, r2
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d1c8      	bne.n	800b156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	b004      	add	sp, #16
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08a      	sub	sp, #40	@ 0x28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1dc:	2327      	movs	r3, #39	@ 0x27
 800b1de:	18fb      	adds	r3, r7, r3
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	2210      	movs	r2, #16
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	d100      	bne.n	800b1fe <I2C_IsErrorOccurred+0x2e>
 800b1fc:	e079      	b.n	800b2f2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2210      	movs	r2, #16
 800b204:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b206:	e057      	b.n	800b2b8 <I2C_IsErrorOccurred+0xe8>
 800b208:	2227      	movs	r2, #39	@ 0x27
 800b20a:	18bb      	adds	r3, r7, r2
 800b20c:	18ba      	adds	r2, r7, r2
 800b20e:	7812      	ldrb	r2, [r2, #0]
 800b210:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	3301      	adds	r3, #1
 800b216:	d04f      	beq.n	800b2b8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b218:	f7fd fc18 	bl	8008a4c <HAL_GetTick>
 800b21c:	0002      	movs	r2, r0
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	429a      	cmp	r2, r3
 800b226:	d302      	bcc.n	800b22e <I2C_IsErrorOccurred+0x5e>
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d144      	bne.n	800b2b8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	2380      	movs	r3, #128	@ 0x80
 800b236:	01db      	lsls	r3, r3, #7
 800b238:	4013      	ands	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b23c:	2013      	movs	r0, #19
 800b23e:	183b      	adds	r3, r7, r0
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	2142      	movs	r1, #66	@ 0x42
 800b244:	5c52      	ldrb	r2, [r2, r1]
 800b246:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	699a      	ldr	r2, [r3, #24]
 800b24e:	2380      	movs	r3, #128	@ 0x80
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	401a      	ands	r2, r3
 800b254:	2380      	movs	r3, #128	@ 0x80
 800b256:	021b      	lsls	r3, r3, #8
 800b258:	429a      	cmp	r2, r3
 800b25a:	d126      	bne.n	800b2aa <I2C_IsErrorOccurred+0xda>
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	2380      	movs	r3, #128	@ 0x80
 800b260:	01db      	lsls	r3, r3, #7
 800b262:	429a      	cmp	r2, r3
 800b264:	d021      	beq.n	800b2aa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800b266:	183b      	adds	r3, r7, r0
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d01d      	beq.n	800b2aa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2180      	movs	r1, #128	@ 0x80
 800b27a:	01c9      	lsls	r1, r1, #7
 800b27c:	430a      	orrs	r2, r1
 800b27e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b280:	f7fd fbe4 	bl	8008a4c <HAL_GetTick>
 800b284:	0003      	movs	r3, r0
 800b286:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b288:	e00f      	b.n	800b2aa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b28a:	f7fd fbdf 	bl	8008a4c <HAL_GetTick>
 800b28e:	0002      	movs	r2, r0
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	2b19      	cmp	r3, #25
 800b296:	d908      	bls.n	800b2aa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	2220      	movs	r2, #32
 800b29c:	4313      	orrs	r3, r2
 800b29e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b2a0:	2327      	movs	r3, #39	@ 0x27
 800b2a2:	18fb      	adds	r3, r7, r3
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	701a      	strb	r2, [r3, #0]

              break;
 800b2a8:	e006      	b.n	800b2b8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	2b20      	cmp	r3, #32
 800b2b6:	d1e8      	bne.n	800b28a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	2b20      	cmp	r3, #32
 800b2c4:	d004      	beq.n	800b2d0 <I2C_IsErrorOccurred+0x100>
 800b2c6:	2327      	movs	r3, #39	@ 0x27
 800b2c8:	18fb      	adds	r3, r7, r3
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d09b      	beq.n	800b208 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b2d0:	2327      	movs	r3, #39	@ 0x27
 800b2d2:	18fb      	adds	r3, r7, r3
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d103      	bne.n	800b2e2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	2204      	movs	r2, #4
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b2ea:	2327      	movs	r3, #39	@ 0x27
 800b2ec:	18fb      	adds	r3, r7, r3
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	2380      	movs	r3, #128	@ 0x80
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	4013      	ands	r3, r2
 800b302:	d00c      	beq.n	800b31e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	2201      	movs	r2, #1
 800b308:	4313      	orrs	r3, r2
 800b30a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2280      	movs	r2, #128	@ 0x80
 800b312:	0052      	lsls	r2, r2, #1
 800b314:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b316:	2327      	movs	r3, #39	@ 0x27
 800b318:	18fb      	adds	r3, r7, r3
 800b31a:	2201      	movs	r2, #1
 800b31c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b31e:	69ba      	ldr	r2, [r7, #24]
 800b320:	2380      	movs	r3, #128	@ 0x80
 800b322:	00db      	lsls	r3, r3, #3
 800b324:	4013      	ands	r3, r2
 800b326:	d00c      	beq.n	800b342 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	2208      	movs	r2, #8
 800b32c:	4313      	orrs	r3, r2
 800b32e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2280      	movs	r2, #128	@ 0x80
 800b336:	00d2      	lsls	r2, r2, #3
 800b338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b33a:	2327      	movs	r3, #39	@ 0x27
 800b33c:	18fb      	adds	r3, r7, r3
 800b33e:	2201      	movs	r2, #1
 800b340:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b342:	69ba      	ldr	r2, [r7, #24]
 800b344:	2380      	movs	r3, #128	@ 0x80
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4013      	ands	r3, r2
 800b34a:	d00c      	beq.n	800b366 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	2202      	movs	r2, #2
 800b350:	4313      	orrs	r3, r2
 800b352:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2280      	movs	r2, #128	@ 0x80
 800b35a:	0092      	lsls	r2, r2, #2
 800b35c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b35e:	2327      	movs	r3, #39	@ 0x27
 800b360:	18fb      	adds	r3, r7, r3
 800b362:	2201      	movs	r2, #1
 800b364:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800b366:	2327      	movs	r3, #39	@ 0x27
 800b368:	18fb      	adds	r3, r7, r3
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d01d      	beq.n	800b3ac <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	0018      	movs	r0, r3
 800b374:	f7ff fe28 	bl	800afc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	490e      	ldr	r1, [pc, #56]	@ (800b3bc <I2C_IsErrorOccurred+0x1ec>)
 800b384:	400a      	ands	r2, r1
 800b386:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	431a      	orrs	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2241      	movs	r2, #65	@ 0x41
 800b398:	2120      	movs	r1, #32
 800b39a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2242      	movs	r2, #66	@ 0x42
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2240      	movs	r2, #64	@ 0x40
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800b3ac:	2327      	movs	r3, #39	@ 0x27
 800b3ae:	18fb      	adds	r3, r7, r3
 800b3b0:	781b      	ldrb	r3, [r3, #0]
}
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b00a      	add	sp, #40	@ 0x28
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	46c0      	nop			@ (mov r8, r8)
 800b3bc:	fe00e800 	.word	0xfe00e800

0800b3c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	0008      	movs	r0, r1
 800b3ca:	0011      	movs	r1, r2
 800b3cc:	607b      	str	r3, [r7, #4]
 800b3ce:	240a      	movs	r4, #10
 800b3d0:	193b      	adds	r3, r7, r4
 800b3d2:	1c02      	adds	r2, r0, #0
 800b3d4:	801a      	strh	r2, [r3, #0]
 800b3d6:	2009      	movs	r0, #9
 800b3d8:	183b      	adds	r3, r7, r0
 800b3da:	1c0a      	adds	r2, r1, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3de:	193b      	adds	r3, r7, r4
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	059b      	lsls	r3, r3, #22
 800b3e4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3e6:	183b      	adds	r3, r7, r0
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	0419      	lsls	r1, r3, #16
 800b3ec:	23ff      	movs	r3, #255	@ 0xff
 800b3ee:	041b      	lsls	r3, r3, #16
 800b3f0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3f2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b40a:	0d51      	lsrs	r1, r2, #21
 800b40c:	2280      	movs	r2, #128	@ 0x80
 800b40e:	00d2      	lsls	r2, r2, #3
 800b410:	400a      	ands	r2, r1
 800b412:	4907      	ldr	r1, [pc, #28]	@ (800b430 <I2C_TransferConfig+0x70>)
 800b414:	430a      	orrs	r2, r1
 800b416:	43d2      	mvns	r2, r2
 800b418:	401a      	ands	r2, r3
 800b41a:	0011      	movs	r1, r2
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	697a      	ldr	r2, [r7, #20]
 800b422:	430a      	orrs	r2, r1
 800b424:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b426:	46c0      	nop			@ (mov r8, r8)
 800b428:	46bd      	mov	sp, r7
 800b42a:	b007      	add	sp, #28
 800b42c:	bd90      	pop	{r4, r7, pc}
 800b42e:	46c0      	nop			@ (mov r8, r8)
 800b430:	03ff63ff 	.word	0x03ff63ff

0800b434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2241      	movs	r2, #65	@ 0x41
 800b442:	5c9b      	ldrb	r3, [r3, r2]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b20      	cmp	r3, #32
 800b448:	d138      	bne.n	800b4bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2240      	movs	r2, #64	@ 0x40
 800b44e:	5c9b      	ldrb	r3, [r3, r2]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b454:	2302      	movs	r3, #2
 800b456:	e032      	b.n	800b4be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2240      	movs	r2, #64	@ 0x40
 800b45c:	2101      	movs	r1, #1
 800b45e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2241      	movs	r2, #65	@ 0x41
 800b464:	2124      	movs	r1, #36	@ 0x24
 800b466:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2101      	movs	r1, #1
 800b474:	438a      	bics	r2, r1
 800b476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4911      	ldr	r1, [pc, #68]	@ (800b4c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800b484:	400a      	ands	r2, r1
 800b486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6819      	ldr	r1, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2241      	movs	r2, #65	@ 0x41
 800b4ac:	2120      	movs	r1, #32
 800b4ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2240      	movs	r2, #64	@ 0x40
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e000      	b.n	800b4be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b4bc:	2302      	movs	r3, #2
  }
}
 800b4be:	0018      	movs	r0, r3
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	b002      	add	sp, #8
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	46c0      	nop			@ (mov r8, r8)
 800b4c8:	ffffefff 	.word	0xffffefff

0800b4cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2241      	movs	r2, #65	@ 0x41
 800b4da:	5c9b      	ldrb	r3, [r3, r2]
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b20      	cmp	r3, #32
 800b4e0:	d139      	bne.n	800b556 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2240      	movs	r2, #64	@ 0x40
 800b4e6:	5c9b      	ldrb	r3, [r3, r2]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d101      	bne.n	800b4f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e033      	b.n	800b558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2240      	movs	r2, #64	@ 0x40
 800b4f4:	2101      	movs	r1, #1
 800b4f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2241      	movs	r2, #65	@ 0x41
 800b4fc:	2124      	movs	r1, #36	@ 0x24
 800b4fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2101      	movs	r1, #1
 800b50c:	438a      	bics	r2, r1
 800b50e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4a11      	ldr	r2, [pc, #68]	@ (800b560 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b51c:	4013      	ands	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	021b      	lsls	r3, r3, #8
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2101      	movs	r1, #1
 800b53e:	430a      	orrs	r2, r1
 800b540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2241      	movs	r2, #65	@ 0x41
 800b546:	2120      	movs	r1, #32
 800b548:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2240      	movs	r2, #64	@ 0x40
 800b54e:	2100      	movs	r1, #0
 800b550:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	e000      	b.n	800b558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b556:	2302      	movs	r3, #2
  }
}
 800b558:	0018      	movs	r0, r3
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b004      	add	sp, #16
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	fffff0ff 	.word	0xfffff0ff

0800b564 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e03d      	b.n	800b5f2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a20      	ldr	r2, [pc, #128]	@ (800b5fc <HAL_IWDG_Init+0x98>)
 800b57c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a1f      	ldr	r2, [pc, #124]	@ (800b600 <HAL_IWDG_Init+0x9c>)
 800b584:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6852      	ldr	r2, [r2, #4]
 800b58e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	6892      	ldr	r2, [r2, #8]
 800b598:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b59a:	f7fd fa57 	bl	8008a4c <HAL_GetTick>
 800b59e:	0003      	movs	r3, r0
 800b5a0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b5a2:	e00e      	b.n	800b5c2 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b5a4:	f7fd fa52 	bl	8008a4c <HAL_GetTick>
 800b5a8:	0002      	movs	r2, r0
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	2b31      	cmp	r3, #49	@ 0x31
 800b5b0:	d907      	bls.n	800b5c2 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	2207      	movs	r2, #7
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	d001      	beq.n	800b5c2 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e017      	b.n	800b5f2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	2207      	movs	r2, #7
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	d1ea      	bne.n	800b5a4 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	691a      	ldr	r2, [r3, #16]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d005      	beq.n	800b5e8 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	68d2      	ldr	r2, [r2, #12]
 800b5e4:	611a      	str	r2, [r3, #16]
 800b5e6:	e003      	b.n	800b5f0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a05      	ldr	r2, [pc, #20]	@ (800b604 <HAL_IWDG_Init+0xa0>)
 800b5ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	b004      	add	sp, #16
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	46c0      	nop			@ (mov r8, r8)
 800b5fc:	0000cccc 	.word	0x0000cccc
 800b600:	00005555 	.word	0x00005555
 800b604:	0000aaaa 	.word	0x0000aaaa

0800b608 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a03      	ldr	r2, [pc, #12]	@ (800b624 <HAL_IWDG_Refresh+0x1c>)
 800b616:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	0018      	movs	r0, r3
 800b61c:	46bd      	mov	sp, r7
 800b61e:	b002      	add	sp, #8
 800b620:	bd80      	pop	{r7, pc}
 800b622:	46c0      	nop			@ (mov r8, r8)
 800b624:	0000aaaa 	.word	0x0000aaaa

0800b628 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b62c:	4b04      	ldr	r3, [pc, #16]	@ (800b640 <HAL_PWR_EnableBkUpAccess+0x18>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	4b03      	ldr	r3, [pc, #12]	@ (800b640 <HAL_PWR_EnableBkUpAccess+0x18>)
 800b632:	2180      	movs	r1, #128	@ 0x80
 800b634:	0049      	lsls	r1, r1, #1
 800b636:	430a      	orrs	r2, r1
 800b638:	601a      	str	r2, [r3, #0]
}
 800b63a:	46c0      	nop			@ (mov r8, r8)
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	40007000 	.word	0x40007000

0800b644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b64c:	4b19      	ldr	r3, [pc, #100]	@ (800b6b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a19      	ldr	r2, [pc, #100]	@ (800b6b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b652:	4013      	ands	r3, r2
 800b654:	0019      	movs	r1, r3
 800b656:	4b17      	ldr	r3, [pc, #92]	@ (800b6b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	2380      	movs	r3, #128	@ 0x80
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	429a      	cmp	r2, r3
 800b666:	d11f      	bne.n	800b6a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b668:	4b14      	ldr	r3, [pc, #80]	@ (800b6bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	0013      	movs	r3, r2
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	189b      	adds	r3, r3, r2
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	4912      	ldr	r1, [pc, #72]	@ (800b6c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b676:	0018      	movs	r0, r3
 800b678:	f7f9 fe50 	bl	800531c <__udivsi3>
 800b67c:	0003      	movs	r3, r0
 800b67e:	3301      	adds	r3, #1
 800b680:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b682:	e008      	b.n	800b696 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	e001      	b.n	800b696 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e009      	b.n	800b6aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b696:	4b07      	ldr	r3, [pc, #28]	@ (800b6b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b698:	695a      	ldr	r2, [r3, #20]
 800b69a:	2380      	movs	r3, #128	@ 0x80
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	401a      	ands	r2, r3
 800b6a0:	2380      	movs	r3, #128	@ 0x80
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d0ed      	beq.n	800b684 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	b004      	add	sp, #16
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	46c0      	nop			@ (mov r8, r8)
 800b6b4:	40007000 	.word	0x40007000
 800b6b8:	fffff9ff 	.word	0xfffff9ff
 800b6bc:	20000018 	.word	0x20000018
 800b6c0:	000f4240 	.word	0x000f4240

0800b6c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b6c8:	4b03      	ldr	r3, [pc, #12]	@ (800b6d8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b6ca:	689a      	ldr	r2, [r3, #8]
 800b6cc:	23e0      	movs	r3, #224	@ 0xe0
 800b6ce:	01db      	lsls	r3, r3, #7
 800b6d0:	4013      	ands	r3, r2
}
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	40021000 	.word	0x40021000

0800b6dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d102      	bne.n	800b6f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f000 fb50 	bl	800bd90 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	d100      	bne.n	800b6fc <HAL_RCC_OscConfig+0x20>
 800b6fa:	e07c      	b.n	800b7f6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6fc:	4bc3      	ldr	r3, [pc, #780]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	2238      	movs	r2, #56	@ 0x38
 800b702:	4013      	ands	r3, r2
 800b704:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b706:	4bc1      	ldr	r3, [pc, #772]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	2203      	movs	r2, #3
 800b70c:	4013      	ands	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	2b10      	cmp	r3, #16
 800b714:	d102      	bne.n	800b71c <HAL_RCC_OscConfig+0x40>
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d002      	beq.n	800b722 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	2b08      	cmp	r3, #8
 800b720:	d10b      	bne.n	800b73a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b722:	4bba      	ldr	r3, [pc, #744]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	2380      	movs	r3, #128	@ 0x80
 800b728:	029b      	lsls	r3, r3, #10
 800b72a:	4013      	ands	r3, r2
 800b72c:	d062      	beq.n	800b7f4 <HAL_RCC_OscConfig+0x118>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d15e      	bne.n	800b7f4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e32a      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	2380      	movs	r3, #128	@ 0x80
 800b740:	025b      	lsls	r3, r3, #9
 800b742:	429a      	cmp	r2, r3
 800b744:	d107      	bne.n	800b756 <HAL_RCC_OscConfig+0x7a>
 800b746:	4bb1      	ldr	r3, [pc, #708]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	4bb0      	ldr	r3, [pc, #704]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b74c:	2180      	movs	r1, #128	@ 0x80
 800b74e:	0249      	lsls	r1, r1, #9
 800b750:	430a      	orrs	r2, r1
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	e020      	b.n	800b798 <HAL_RCC_OscConfig+0xbc>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	23a0      	movs	r3, #160	@ 0xa0
 800b75c:	02db      	lsls	r3, r3, #11
 800b75e:	429a      	cmp	r2, r3
 800b760:	d10e      	bne.n	800b780 <HAL_RCC_OscConfig+0xa4>
 800b762:	4baa      	ldr	r3, [pc, #680]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	4ba9      	ldr	r3, [pc, #676]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b768:	2180      	movs	r1, #128	@ 0x80
 800b76a:	02c9      	lsls	r1, r1, #11
 800b76c:	430a      	orrs	r2, r1
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	4ba6      	ldr	r3, [pc, #664]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	4ba5      	ldr	r3, [pc, #660]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b776:	2180      	movs	r1, #128	@ 0x80
 800b778:	0249      	lsls	r1, r1, #9
 800b77a:	430a      	orrs	r2, r1
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	e00b      	b.n	800b798 <HAL_RCC_OscConfig+0xbc>
 800b780:	4ba2      	ldr	r3, [pc, #648]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	4ba1      	ldr	r3, [pc, #644]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b786:	49a2      	ldr	r1, [pc, #648]	@ (800ba10 <HAL_RCC_OscConfig+0x334>)
 800b788:	400a      	ands	r2, r1
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	4b9f      	ldr	r3, [pc, #636]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	4b9e      	ldr	r3, [pc, #632]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b792:	49a0      	ldr	r1, [pc, #640]	@ (800ba14 <HAL_RCC_OscConfig+0x338>)
 800b794:	400a      	ands	r2, r1
 800b796:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d014      	beq.n	800b7ca <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7a0:	f7fd f954 	bl	8008a4c <HAL_GetTick>
 800b7a4:	0003      	movs	r3, r0
 800b7a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7a8:	e008      	b.n	800b7bc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7aa:	f7fd f94f 	bl	8008a4c <HAL_GetTick>
 800b7ae:	0002      	movs	r2, r0
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	2b64      	cmp	r3, #100	@ 0x64
 800b7b6:	d901      	bls.n	800b7bc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e2e9      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7bc:	4b93      	ldr	r3, [pc, #588]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	2380      	movs	r3, #128	@ 0x80
 800b7c2:	029b      	lsls	r3, r3, #10
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	d0f0      	beq.n	800b7aa <HAL_RCC_OscConfig+0xce>
 800b7c8:	e015      	b.n	800b7f6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ca:	f7fd f93f 	bl	8008a4c <HAL_GetTick>
 800b7ce:	0003      	movs	r3, r0
 800b7d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b7d2:	e008      	b.n	800b7e6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b7d4:	f7fd f93a 	bl	8008a4c <HAL_GetTick>
 800b7d8:	0002      	movs	r2, r0
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	2b64      	cmp	r3, #100	@ 0x64
 800b7e0:	d901      	bls.n	800b7e6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e2d4      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b7e6:	4b89      	ldr	r3, [pc, #548]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	2380      	movs	r3, #128	@ 0x80
 800b7ec:	029b      	lsls	r3, r3, #10
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	d1f0      	bne.n	800b7d4 <HAL_RCC_OscConfig+0xf8>
 800b7f2:	e000      	b.n	800b7f6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7f4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	d100      	bne.n	800b802 <HAL_RCC_OscConfig+0x126>
 800b800:	e099      	b.n	800b936 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b802:	4b82      	ldr	r3, [pc, #520]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	2238      	movs	r2, #56	@ 0x38
 800b808:	4013      	ands	r3, r2
 800b80a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b80c:	4b7f      	ldr	r3, [pc, #508]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	2203      	movs	r2, #3
 800b812:	4013      	ands	r3, r2
 800b814:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	2b10      	cmp	r3, #16
 800b81a:	d102      	bne.n	800b822 <HAL_RCC_OscConfig+0x146>
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d002      	beq.n	800b828 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d135      	bne.n	800b894 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b828:	4b78      	ldr	r3, [pc, #480]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	2380      	movs	r3, #128	@ 0x80
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	4013      	ands	r3, r2
 800b832:	d005      	beq.n	800b840 <HAL_RCC_OscConfig+0x164>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e2a7      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b840:	4b72      	ldr	r3, [pc, #456]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	4a74      	ldr	r2, [pc, #464]	@ (800ba18 <HAL_RCC_OscConfig+0x33c>)
 800b846:	4013      	ands	r3, r2
 800b848:	0019      	movs	r1, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	021a      	lsls	r2, r3, #8
 800b850:	4b6e      	ldr	r3, [pc, #440]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b852:	430a      	orrs	r2, r1
 800b854:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d112      	bne.n	800b882 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b85c:	4b6b      	ldr	r3, [pc, #428]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a6e      	ldr	r2, [pc, #440]	@ (800ba1c <HAL_RCC_OscConfig+0x340>)
 800b862:	4013      	ands	r3, r2
 800b864:	0019      	movs	r1, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	691a      	ldr	r2, [r3, #16]
 800b86a:	4b68      	ldr	r3, [pc, #416]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b86c:	430a      	orrs	r2, r1
 800b86e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b870:	4b66      	ldr	r3, [pc, #408]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	0adb      	lsrs	r3, r3, #11
 800b876:	2207      	movs	r2, #7
 800b878:	4013      	ands	r3, r2
 800b87a:	4a69      	ldr	r2, [pc, #420]	@ (800ba20 <HAL_RCC_OscConfig+0x344>)
 800b87c:	40da      	lsrs	r2, r3
 800b87e:	4b69      	ldr	r3, [pc, #420]	@ (800ba24 <HAL_RCC_OscConfig+0x348>)
 800b880:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b882:	4b69      	ldr	r3, [pc, #420]	@ (800ba28 <HAL_RCC_OscConfig+0x34c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	0018      	movs	r0, r3
 800b888:	f7fd f884 	bl	8008994 <HAL_InitTick>
 800b88c:	1e03      	subs	r3, r0, #0
 800b88e:	d051      	beq.n	800b934 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	e27d      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d030      	beq.n	800b8fe <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b89c:	4b5b      	ldr	r3, [pc, #364]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a5e      	ldr	r2, [pc, #376]	@ (800ba1c <HAL_RCC_OscConfig+0x340>)
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	0019      	movs	r1, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	691a      	ldr	r2, [r3, #16]
 800b8aa:	4b58      	ldr	r3, [pc, #352]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b8b0:	4b56      	ldr	r3, [pc, #344]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	4b55      	ldr	r3, [pc, #340]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b8b6:	2180      	movs	r1, #128	@ 0x80
 800b8b8:	0049      	lsls	r1, r1, #1
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8be:	f7fd f8c5 	bl	8008a4c <HAL_GetTick>
 800b8c2:	0003      	movs	r3, r0
 800b8c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8c6:	e008      	b.n	800b8da <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8c8:	f7fd f8c0 	bl	8008a4c <HAL_GetTick>
 800b8cc:	0002      	movs	r2, r0
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d901      	bls.n	800b8da <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	e25a      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8da:	4b4c      	ldr	r3, [pc, #304]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	2380      	movs	r3, #128	@ 0x80
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	d0f0      	beq.n	800b8c8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8e6:	4b49      	ldr	r3, [pc, #292]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	4a4b      	ldr	r2, [pc, #300]	@ (800ba18 <HAL_RCC_OscConfig+0x33c>)
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	0019      	movs	r1, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	021a      	lsls	r2, r3, #8
 800b8f6:	4b45      	ldr	r3, [pc, #276]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b8f8:	430a      	orrs	r2, r1
 800b8fa:	605a      	str	r2, [r3, #4]
 800b8fc:	e01b      	b.n	800b936 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b8fe:	4b43      	ldr	r3, [pc, #268]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	4b42      	ldr	r3, [pc, #264]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b904:	4949      	ldr	r1, [pc, #292]	@ (800ba2c <HAL_RCC_OscConfig+0x350>)
 800b906:	400a      	ands	r2, r1
 800b908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b90a:	f7fd f89f 	bl	8008a4c <HAL_GetTick>
 800b90e:	0003      	movs	r3, r0
 800b910:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b912:	e008      	b.n	800b926 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b914:	f7fd f89a 	bl	8008a4c <HAL_GetTick>
 800b918:	0002      	movs	r2, r0
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d901      	bls.n	800b926 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
 800b924:	e234      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b926:	4b39      	ldr	r3, [pc, #228]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	2380      	movs	r3, #128	@ 0x80
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	4013      	ands	r3, r2
 800b930:	d1f0      	bne.n	800b914 <HAL_RCC_OscConfig+0x238>
 800b932:	e000      	b.n	800b936 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b934:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2208      	movs	r2, #8
 800b93c:	4013      	ands	r3, r2
 800b93e:	d047      	beq.n	800b9d0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b940:	4b32      	ldr	r3, [pc, #200]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	2238      	movs	r2, #56	@ 0x38
 800b946:	4013      	ands	r3, r2
 800b948:	2b18      	cmp	r3, #24
 800b94a:	d10a      	bne.n	800b962 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b94c:	4b2f      	ldr	r3, [pc, #188]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b94e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b950:	2202      	movs	r2, #2
 800b952:	4013      	ands	r3, r2
 800b954:	d03c      	beq.n	800b9d0 <HAL_RCC_OscConfig+0x2f4>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d138      	bne.n	800b9d0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e216      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d019      	beq.n	800b99e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b96a:	4b28      	ldr	r3, [pc, #160]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b96c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b96e:	4b27      	ldr	r3, [pc, #156]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b970:	2101      	movs	r1, #1
 800b972:	430a      	orrs	r2, r1
 800b974:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b976:	f7fd f869 	bl	8008a4c <HAL_GetTick>
 800b97a:	0003      	movs	r3, r0
 800b97c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b97e:	e008      	b.n	800b992 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b980:	f7fd f864 	bl	8008a4c <HAL_GetTick>
 800b984:	0002      	movs	r2, r0
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d901      	bls.n	800b992 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	e1fe      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b992:	4b1e      	ldr	r3, [pc, #120]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b996:	2202      	movs	r2, #2
 800b998:	4013      	ands	r3, r2
 800b99a:	d0f1      	beq.n	800b980 <HAL_RCC_OscConfig+0x2a4>
 800b99c:	e018      	b.n	800b9d0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b99e:	4b1b      	ldr	r3, [pc, #108]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b9a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	438a      	bics	r2, r1
 800b9a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9aa:	f7fd f84f 	bl	8008a4c <HAL_GetTick>
 800b9ae:	0003      	movs	r3, r0
 800b9b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9b2:	e008      	b.n	800b9c6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9b4:	f7fd f84a 	bl	8008a4c <HAL_GetTick>
 800b9b8:	0002      	movs	r2, r0
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d901      	bls.n	800b9c6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e1e4      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9c6:	4b11      	ldr	r3, [pc, #68]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b9c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	d1f1      	bne.n	800b9b4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	d100      	bne.n	800b9dc <HAL_RCC_OscConfig+0x300>
 800b9da:	e0c7      	b.n	800bb6c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9dc:	231f      	movs	r3, #31
 800b9de:	18fb      	adds	r3, r7, r3
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b9e4:	4b09      	ldr	r3, [pc, #36]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	2238      	movs	r2, #56	@ 0x38
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	2b20      	cmp	r3, #32
 800b9ee:	d11f      	bne.n	800ba30 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b9f0:	4b06      	ldr	r3, [pc, #24]	@ (800ba0c <HAL_RCC_OscConfig+0x330>)
 800b9f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	d100      	bne.n	800b9fc <HAL_RCC_OscConfig+0x320>
 800b9fa:	e0b7      	b.n	800bb6c <HAL_RCC_OscConfig+0x490>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d000      	beq.n	800ba06 <HAL_RCC_OscConfig+0x32a>
 800ba04:	e0b2      	b.n	800bb6c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e1c2      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
 800ba0a:	46c0      	nop			@ (mov r8, r8)
 800ba0c:	40021000 	.word	0x40021000
 800ba10:	fffeffff 	.word	0xfffeffff
 800ba14:	fffbffff 	.word	0xfffbffff
 800ba18:	ffff80ff 	.word	0xffff80ff
 800ba1c:	ffffc7ff 	.word	0xffffc7ff
 800ba20:	00f42400 	.word	0x00f42400
 800ba24:	20000018 	.word	0x20000018
 800ba28:	2000003c 	.word	0x2000003c
 800ba2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ba30:	4bb5      	ldr	r3, [pc, #724]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800ba32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba34:	2380      	movs	r3, #128	@ 0x80
 800ba36:	055b      	lsls	r3, r3, #21
 800ba38:	4013      	ands	r3, r2
 800ba3a:	d101      	bne.n	800ba40 <HAL_RCC_OscConfig+0x364>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e000      	b.n	800ba42 <HAL_RCC_OscConfig+0x366>
 800ba40:	2300      	movs	r3, #0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d011      	beq.n	800ba6a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800ba46:	4bb0      	ldr	r3, [pc, #704]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800ba48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba4a:	4baf      	ldr	r3, [pc, #700]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800ba4c:	2180      	movs	r1, #128	@ 0x80
 800ba4e:	0549      	lsls	r1, r1, #21
 800ba50:	430a      	orrs	r2, r1
 800ba52:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ba54:	4bac      	ldr	r3, [pc, #688]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800ba56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba58:	2380      	movs	r3, #128	@ 0x80
 800ba5a:	055b      	lsls	r3, r3, #21
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]
 800ba60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800ba62:	231f      	movs	r3, #31
 800ba64:	18fb      	adds	r3, r7, r3
 800ba66:	2201      	movs	r2, #1
 800ba68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba6a:	4ba8      	ldr	r3, [pc, #672]	@ (800bd0c <HAL_RCC_OscConfig+0x630>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	2380      	movs	r3, #128	@ 0x80
 800ba70:	005b      	lsls	r3, r3, #1
 800ba72:	4013      	ands	r3, r2
 800ba74:	d11a      	bne.n	800baac <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba76:	4ba5      	ldr	r3, [pc, #660]	@ (800bd0c <HAL_RCC_OscConfig+0x630>)
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	4ba4      	ldr	r3, [pc, #656]	@ (800bd0c <HAL_RCC_OscConfig+0x630>)
 800ba7c:	2180      	movs	r1, #128	@ 0x80
 800ba7e:	0049      	lsls	r1, r1, #1
 800ba80:	430a      	orrs	r2, r1
 800ba82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800ba84:	f7fc ffe2 	bl	8008a4c <HAL_GetTick>
 800ba88:	0003      	movs	r3, r0
 800ba8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba8c:	e008      	b.n	800baa0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba8e:	f7fc ffdd 	bl	8008a4c <HAL_GetTick>
 800ba92:	0002      	movs	r2, r0
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d901      	bls.n	800baa0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e177      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800baa0:	4b9a      	ldr	r3, [pc, #616]	@ (800bd0c <HAL_RCC_OscConfig+0x630>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	2380      	movs	r3, #128	@ 0x80
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	4013      	ands	r3, r2
 800baaa:	d0f0      	beq.n	800ba8e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d106      	bne.n	800bac2 <HAL_RCC_OscConfig+0x3e6>
 800bab4:	4b94      	ldr	r3, [pc, #592]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bab6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bab8:	4b93      	ldr	r3, [pc, #588]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800baba:	2101      	movs	r1, #1
 800babc:	430a      	orrs	r2, r1
 800babe:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bac0:	e01c      	b.n	800bafc <HAL_RCC_OscConfig+0x420>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	d10c      	bne.n	800bae4 <HAL_RCC_OscConfig+0x408>
 800baca:	4b8f      	ldr	r3, [pc, #572]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bacc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bace:	4b8e      	ldr	r3, [pc, #568]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bad0:	2104      	movs	r1, #4
 800bad2:	430a      	orrs	r2, r1
 800bad4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bad6:	4b8c      	ldr	r3, [pc, #560]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bada:	4b8b      	ldr	r3, [pc, #556]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800badc:	2101      	movs	r1, #1
 800bade:	430a      	orrs	r2, r1
 800bae0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bae2:	e00b      	b.n	800bafc <HAL_RCC_OscConfig+0x420>
 800bae4:	4b88      	ldr	r3, [pc, #544]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bae6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bae8:	4b87      	ldr	r3, [pc, #540]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800baea:	2101      	movs	r1, #1
 800baec:	438a      	bics	r2, r1
 800baee:	65da      	str	r2, [r3, #92]	@ 0x5c
 800baf0:	4b85      	ldr	r3, [pc, #532]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800baf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800baf4:	4b84      	ldr	r3, [pc, #528]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800baf6:	2104      	movs	r1, #4
 800baf8:	438a      	bics	r2, r1
 800bafa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d014      	beq.n	800bb2e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb04:	f7fc ffa2 	bl	8008a4c <HAL_GetTick>
 800bb08:	0003      	movs	r3, r0
 800bb0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb0c:	e009      	b.n	800bb22 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb0e:	f7fc ff9d 	bl	8008a4c <HAL_GetTick>
 800bb12:	0002      	movs	r2, r0
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	4a7d      	ldr	r2, [pc, #500]	@ (800bd10 <HAL_RCC_OscConfig+0x634>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d901      	bls.n	800bb22 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e136      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb22:	4b79      	ldr	r3, [pc, #484]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bb24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb26:	2202      	movs	r2, #2
 800bb28:	4013      	ands	r3, r2
 800bb2a:	d0f0      	beq.n	800bb0e <HAL_RCC_OscConfig+0x432>
 800bb2c:	e013      	b.n	800bb56 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb2e:	f7fc ff8d 	bl	8008a4c <HAL_GetTick>
 800bb32:	0003      	movs	r3, r0
 800bb34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb36:	e009      	b.n	800bb4c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb38:	f7fc ff88 	bl	8008a4c <HAL_GetTick>
 800bb3c:	0002      	movs	r2, r0
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	4a73      	ldr	r2, [pc, #460]	@ (800bd10 <HAL_RCC_OscConfig+0x634>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d901      	bls.n	800bb4c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e121      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb4c:	4b6e      	ldr	r3, [pc, #440]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bb4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb50:	2202      	movs	r2, #2
 800bb52:	4013      	ands	r3, r2
 800bb54:	d1f0      	bne.n	800bb38 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800bb56:	231f      	movs	r3, #31
 800bb58:	18fb      	adds	r3, r7, r3
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d105      	bne.n	800bb6c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800bb60:	4b69      	ldr	r3, [pc, #420]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bb62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb64:	4b68      	ldr	r3, [pc, #416]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bb66:	496b      	ldr	r1, [pc, #428]	@ (800bd14 <HAL_RCC_OscConfig+0x638>)
 800bb68:	400a      	ands	r2, r1
 800bb6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2220      	movs	r2, #32
 800bb72:	4013      	ands	r3, r2
 800bb74:	d039      	beq.n	800bbea <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	69db      	ldr	r3, [r3, #28]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d01b      	beq.n	800bbb6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb7e:	4b62      	ldr	r3, [pc, #392]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	4b61      	ldr	r3, [pc, #388]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bb84:	2180      	movs	r1, #128	@ 0x80
 800bb86:	03c9      	lsls	r1, r1, #15
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb8c:	f7fc ff5e 	bl	8008a4c <HAL_GetTick>
 800bb90:	0003      	movs	r3, r0
 800bb92:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800bb94:	e008      	b.n	800bba8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb96:	f7fc ff59 	bl	8008a4c <HAL_GetTick>
 800bb9a:	0002      	movs	r2, r0
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d901      	bls.n	800bba8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e0f3      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800bba8:	4b57      	ldr	r3, [pc, #348]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	2380      	movs	r3, #128	@ 0x80
 800bbae:	041b      	lsls	r3, r3, #16
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	d0f0      	beq.n	800bb96 <HAL_RCC_OscConfig+0x4ba>
 800bbb4:	e019      	b.n	800bbea <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bbb6:	4b54      	ldr	r3, [pc, #336]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	4b53      	ldr	r3, [pc, #332]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bbbc:	4956      	ldr	r1, [pc, #344]	@ (800bd18 <HAL_RCC_OscConfig+0x63c>)
 800bbbe:	400a      	ands	r2, r1
 800bbc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbc2:	f7fc ff43 	bl	8008a4c <HAL_GetTick>
 800bbc6:	0003      	movs	r3, r0
 800bbc8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800bbca:	e008      	b.n	800bbde <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bbcc:	f7fc ff3e 	bl	8008a4c <HAL_GetTick>
 800bbd0:	0002      	movs	r2, r0
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d901      	bls.n	800bbde <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e0d8      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800bbde:	4b4a      	ldr	r3, [pc, #296]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	2380      	movs	r3, #128	@ 0x80
 800bbe4:	041b      	lsls	r3, r3, #16
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	d1f0      	bne.n	800bbcc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d100      	bne.n	800bbf4 <HAL_RCC_OscConfig+0x518>
 800bbf2:	e0cc      	b.n	800bd8e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbf4:	4b44      	ldr	r3, [pc, #272]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	2238      	movs	r2, #56	@ 0x38
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	2b10      	cmp	r3, #16
 800bbfe:	d100      	bne.n	800bc02 <HAL_RCC_OscConfig+0x526>
 800bc00:	e07b      	b.n	800bcfa <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d156      	bne.n	800bcb8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc0a:	4b3f      	ldr	r3, [pc, #252]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	4b3e      	ldr	r3, [pc, #248]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc10:	4942      	ldr	r1, [pc, #264]	@ (800bd1c <HAL_RCC_OscConfig+0x640>)
 800bc12:	400a      	ands	r2, r1
 800bc14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc16:	f7fc ff19 	bl	8008a4c <HAL_GetTick>
 800bc1a:	0003      	movs	r3, r0
 800bc1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc1e:	e008      	b.n	800bc32 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc20:	f7fc ff14 	bl	8008a4c <HAL_GetTick>
 800bc24:	0002      	movs	r2, r0
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d901      	bls.n	800bc32 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e0ae      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc32:	4b35      	ldr	r3, [pc, #212]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	2380      	movs	r3, #128	@ 0x80
 800bc38:	049b      	lsls	r3, r3, #18
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	d1f0      	bne.n	800bc20 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc3e:	4b32      	ldr	r3, [pc, #200]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	4a37      	ldr	r2, [pc, #220]	@ (800bd20 <HAL_RCC_OscConfig+0x644>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	0019      	movs	r1, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc50:	431a      	orrs	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	431a      	orrs	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc5e:	431a      	orrs	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc64:	431a      	orrs	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6a:	431a      	orrs	r2, r3
 800bc6c:	4b26      	ldr	r3, [pc, #152]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc6e:	430a      	orrs	r2, r1
 800bc70:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc72:	4b25      	ldr	r3, [pc, #148]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	4b24      	ldr	r3, [pc, #144]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc78:	2180      	movs	r1, #128	@ 0x80
 800bc7a:	0449      	lsls	r1, r1, #17
 800bc7c:	430a      	orrs	r2, r1
 800bc7e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800bc80:	4b21      	ldr	r3, [pc, #132]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc82:	68da      	ldr	r2, [r3, #12]
 800bc84:	4b20      	ldr	r3, [pc, #128]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bc86:	2180      	movs	r1, #128	@ 0x80
 800bc88:	0549      	lsls	r1, r1, #21
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc8e:	f7fc fedd 	bl	8008a4c <HAL_GetTick>
 800bc92:	0003      	movs	r3, r0
 800bc94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc96:	e008      	b.n	800bcaa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc98:	f7fc fed8 	bl	8008a4c <HAL_GetTick>
 800bc9c:	0002      	movs	r2, r0
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d901      	bls.n	800bcaa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e072      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcaa:	4b17      	ldr	r3, [pc, #92]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	2380      	movs	r3, #128	@ 0x80
 800bcb0:	049b      	lsls	r3, r3, #18
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	d0f0      	beq.n	800bc98 <HAL_RCC_OscConfig+0x5bc>
 800bcb6:	e06a      	b.n	800bd8e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcb8:	4b13      	ldr	r3, [pc, #76]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	4b12      	ldr	r3, [pc, #72]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bcbe:	4917      	ldr	r1, [pc, #92]	@ (800bd1c <HAL_RCC_OscConfig+0x640>)
 800bcc0:	400a      	ands	r2, r1
 800bcc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc4:	f7fc fec2 	bl	8008a4c <HAL_GetTick>
 800bcc8:	0003      	movs	r3, r0
 800bcca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bccc:	e008      	b.n	800bce0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcce:	f7fc febd 	bl	8008a4c <HAL_GetTick>
 800bcd2:	0002      	movs	r2, r0
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d901      	bls.n	800bce0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e057      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bce0:	4b09      	ldr	r3, [pc, #36]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	2380      	movs	r3, #128	@ 0x80
 800bce6:	049b      	lsls	r3, r3, #18
 800bce8:	4013      	ands	r3, r2
 800bcea:	d1f0      	bne.n	800bcce <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800bcec:	4b06      	ldr	r3, [pc, #24]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bcee:	68da      	ldr	r2, [r3, #12]
 800bcf0:	4b05      	ldr	r3, [pc, #20]	@ (800bd08 <HAL_RCC_OscConfig+0x62c>)
 800bcf2:	490c      	ldr	r1, [pc, #48]	@ (800bd24 <HAL_RCC_OscConfig+0x648>)
 800bcf4:	400a      	ands	r2, r1
 800bcf6:	60da      	str	r2, [r3, #12]
 800bcf8:	e049      	b.n	800bd8e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d112      	bne.n	800bd28 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e044      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
 800bd06:	46c0      	nop			@ (mov r8, r8)
 800bd08:	40021000 	.word	0x40021000
 800bd0c:	40007000 	.word	0x40007000
 800bd10:	00002710 	.word	0x00002710
 800bd14:	efffffff 	.word	0xefffffff
 800bd18:	ffbfffff 	.word	0xffbfffff
 800bd1c:	feffffff 	.word	0xfeffffff
 800bd20:	11c1808c 	.word	0x11c1808c
 800bd24:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800bd28:	4b1b      	ldr	r3, [pc, #108]	@ (800bd98 <HAL_RCC_OscConfig+0x6bc>)
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2203      	movs	r2, #3
 800bd32:	401a      	ands	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d126      	bne.n	800bd8a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2270      	movs	r2, #112	@ 0x70
 800bd40:	401a      	ands	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d11f      	bne.n	800bd8a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	23fe      	movs	r3, #254	@ 0xfe
 800bd4e:	01db      	lsls	r3, r3, #7
 800bd50:	401a      	ands	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd56:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d116      	bne.n	800bd8a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	23f8      	movs	r3, #248	@ 0xf8
 800bd60:	039b      	lsls	r3, r3, #14
 800bd62:	401a      	ands	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d10e      	bne.n	800bd8a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bd6c:	697a      	ldr	r2, [r7, #20]
 800bd6e:	23e0      	movs	r3, #224	@ 0xe0
 800bd70:	051b      	lsls	r3, r3, #20
 800bd72:	401a      	ands	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d106      	bne.n	800bd8a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	0f5b      	lsrs	r3, r3, #29
 800bd80:	075a      	lsls	r2, r3, #29
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d001      	beq.n	800bd8e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e000      	b.n	800bd90 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	0018      	movs	r0, r3
 800bd92:	46bd      	mov	sp, r7
 800bd94:	b008      	add	sp, #32
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	40021000 	.word	0x40021000

0800bd9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e0e9      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bdb0:	4b76      	ldr	r3, [pc, #472]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2207      	movs	r2, #7
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d91e      	bls.n	800bdfc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdbe:	4b73      	ldr	r3, [pc, #460]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2207      	movs	r2, #7
 800bdc4:	4393      	bics	r3, r2
 800bdc6:	0019      	movs	r1, r3
 800bdc8:	4b70      	ldr	r3, [pc, #448]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bdd0:	f7fc fe3c 	bl	8008a4c <HAL_GetTick>
 800bdd4:	0003      	movs	r3, r0
 800bdd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bdd8:	e009      	b.n	800bdee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdda:	f7fc fe37 	bl	8008a4c <HAL_GetTick>
 800bdde:	0002      	movs	r2, r0
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	4a6a      	ldr	r2, [pc, #424]	@ (800bf90 <HAL_RCC_ClockConfig+0x1f4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d901      	bls.n	800bdee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	e0ca      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bdee:	4b67      	ldr	r3, [pc, #412]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2207      	movs	r2, #7
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d1ee      	bne.n	800bdda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2202      	movs	r2, #2
 800be02:	4013      	ands	r3, r2
 800be04:	d015      	beq.n	800be32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2204      	movs	r2, #4
 800be0c:	4013      	ands	r3, r2
 800be0e:	d006      	beq.n	800be1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800be10:	4b60      	ldr	r3, [pc, #384]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	4b5f      	ldr	r3, [pc, #380]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be16:	21e0      	movs	r1, #224	@ 0xe0
 800be18:	01c9      	lsls	r1, r1, #7
 800be1a:	430a      	orrs	r2, r1
 800be1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be1e:	4b5d      	ldr	r3, [pc, #372]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	4a5d      	ldr	r2, [pc, #372]	@ (800bf98 <HAL_RCC_ClockConfig+0x1fc>)
 800be24:	4013      	ands	r3, r2
 800be26:	0019      	movs	r1, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	4b59      	ldr	r3, [pc, #356]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be2e:	430a      	orrs	r2, r1
 800be30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2201      	movs	r2, #1
 800be38:	4013      	ands	r3, r2
 800be3a:	d057      	beq.n	800beec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d107      	bne.n	800be54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be44:	4b53      	ldr	r3, [pc, #332]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	2380      	movs	r3, #128	@ 0x80
 800be4a:	029b      	lsls	r3, r3, #10
 800be4c:	4013      	ands	r3, r2
 800be4e:	d12b      	bne.n	800bea8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e097      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d107      	bne.n	800be6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be5c:	4b4d      	ldr	r3, [pc, #308]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	2380      	movs	r3, #128	@ 0x80
 800be62:	049b      	lsls	r3, r3, #18
 800be64:	4013      	ands	r3, r2
 800be66:	d11f      	bne.n	800bea8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e08b      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d107      	bne.n	800be84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be74:	4b47      	ldr	r3, [pc, #284]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	2380      	movs	r3, #128	@ 0x80
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	4013      	ands	r3, r2
 800be7e:	d113      	bne.n	800bea8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e07f      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d106      	bne.n	800be9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800be8c:	4b41      	ldr	r3, [pc, #260]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be90:	2202      	movs	r2, #2
 800be92:	4013      	ands	r3, r2
 800be94:	d108      	bne.n	800bea8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	e074      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be9a:	4b3e      	ldr	r3, [pc, #248]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800be9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be9e:	2202      	movs	r2, #2
 800bea0:	4013      	ands	r3, r2
 800bea2:	d101      	bne.n	800bea8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e06d      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bea8:	4b3a      	ldr	r3, [pc, #232]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	2207      	movs	r2, #7
 800beae:	4393      	bics	r3, r2
 800beb0:	0019      	movs	r1, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685a      	ldr	r2, [r3, #4]
 800beb6:	4b37      	ldr	r3, [pc, #220]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800beb8:	430a      	orrs	r2, r1
 800beba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bebc:	f7fc fdc6 	bl	8008a4c <HAL_GetTick>
 800bec0:	0003      	movs	r3, r0
 800bec2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bec4:	e009      	b.n	800beda <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bec6:	f7fc fdc1 	bl	8008a4c <HAL_GetTick>
 800beca:	0002      	movs	r2, r0
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	4a2f      	ldr	r2, [pc, #188]	@ (800bf90 <HAL_RCC_ClockConfig+0x1f4>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d901      	bls.n	800beda <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	e054      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beda:	4b2e      	ldr	r3, [pc, #184]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2238      	movs	r2, #56	@ 0x38
 800bee0:	401a      	ands	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	429a      	cmp	r2, r3
 800beea:	d1ec      	bne.n	800bec6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800beec:	4b27      	ldr	r3, [pc, #156]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2207      	movs	r2, #7
 800bef2:	4013      	ands	r3, r2
 800bef4:	683a      	ldr	r2, [r7, #0]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d21e      	bcs.n	800bf38 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800befa:	4b24      	ldr	r3, [pc, #144]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2207      	movs	r2, #7
 800bf00:	4393      	bics	r3, r2
 800bf02:	0019      	movs	r1, r3
 800bf04:	4b21      	ldr	r3, [pc, #132]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bf0c:	f7fc fd9e 	bl	8008a4c <HAL_GetTick>
 800bf10:	0003      	movs	r3, r0
 800bf12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bf14:	e009      	b.n	800bf2a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf16:	f7fc fd99 	bl	8008a4c <HAL_GetTick>
 800bf1a:	0002      	movs	r2, r0
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	4a1b      	ldr	r2, [pc, #108]	@ (800bf90 <HAL_RCC_ClockConfig+0x1f4>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d901      	bls.n	800bf2a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e02c      	b.n	800bf84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bf2a:	4b18      	ldr	r3, [pc, #96]	@ (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2207      	movs	r2, #7
 800bf30:	4013      	ands	r3, r2
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d1ee      	bne.n	800bf16 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2204      	movs	r2, #4
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d009      	beq.n	800bf56 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800bf42:	4b14      	ldr	r3, [pc, #80]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	4a15      	ldr	r2, [pc, #84]	@ (800bf9c <HAL_RCC_ClockConfig+0x200>)
 800bf48:	4013      	ands	r3, r2
 800bf4a:	0019      	movs	r1, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68da      	ldr	r2, [r3, #12]
 800bf50:	4b10      	ldr	r3, [pc, #64]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800bf52:	430a      	orrs	r2, r1
 800bf54:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800bf56:	f000 f829 	bl	800bfac <HAL_RCC_GetSysClockFreq>
 800bf5a:	0001      	movs	r1, r0
 800bf5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	0a1b      	lsrs	r3, r3, #8
 800bf62:	220f      	movs	r2, #15
 800bf64:	401a      	ands	r2, r3
 800bf66:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa0 <HAL_RCC_ClockConfig+0x204>)
 800bf68:	0092      	lsls	r2, r2, #2
 800bf6a:	58d3      	ldr	r3, [r2, r3]
 800bf6c:	221f      	movs	r2, #31
 800bf6e:	4013      	ands	r3, r2
 800bf70:	000a      	movs	r2, r1
 800bf72:	40da      	lsrs	r2, r3
 800bf74:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa4 <HAL_RCC_ClockConfig+0x208>)
 800bf76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bf78:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa8 <HAL_RCC_ClockConfig+0x20c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	0018      	movs	r0, r3
 800bf7e:	f7fc fd09 	bl	8008994 <HAL_InitTick>
 800bf82:	0003      	movs	r3, r0
}
 800bf84:	0018      	movs	r0, r3
 800bf86:	46bd      	mov	sp, r7
 800bf88:	b004      	add	sp, #16
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	40022000 	.word	0x40022000
 800bf90:	00001388 	.word	0x00001388
 800bf94:	40021000 	.word	0x40021000
 800bf98:	fffff0ff 	.word	0xfffff0ff
 800bf9c:	ffff8fff 	.word	0xffff8fff
 800bfa0:	08011a00 	.word	0x08011a00
 800bfa4:	20000018 	.word	0x20000018
 800bfa8:	2000003c 	.word	0x2000003c

0800bfac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bfb2:	4b3c      	ldr	r3, [pc, #240]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	2238      	movs	r2, #56	@ 0x38
 800bfb8:	4013      	ands	r3, r2
 800bfba:	d10f      	bne.n	800bfdc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bfbc:	4b39      	ldr	r3, [pc, #228]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	0adb      	lsrs	r3, r3, #11
 800bfc2:	2207      	movs	r2, #7
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	409a      	lsls	r2, r3
 800bfca:	0013      	movs	r3, r2
 800bfcc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	4835      	ldr	r0, [pc, #212]	@ (800c0a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bfd2:	f7f9 f9a3 	bl	800531c <__udivsi3>
 800bfd6:	0003      	movs	r3, r0
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	e05d      	b.n	800c098 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bfdc:	4b31      	ldr	r3, [pc, #196]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	2238      	movs	r2, #56	@ 0x38
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d102      	bne.n	800bfee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bfe8:	4b30      	ldr	r3, [pc, #192]	@ (800c0ac <HAL_RCC_GetSysClockFreq+0x100>)
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	e054      	b.n	800c098 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bfee:	4b2d      	ldr	r3, [pc, #180]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	2238      	movs	r2, #56	@ 0x38
 800bff4:	4013      	ands	r3, r2
 800bff6:	2b10      	cmp	r3, #16
 800bff8:	d138      	bne.n	800c06c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bffa:	4b2a      	ldr	r3, [pc, #168]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	2203      	movs	r2, #3
 800c000:	4013      	ands	r3, r2
 800c002:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c004:	4b27      	ldr	r3, [pc, #156]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	091b      	lsrs	r3, r3, #4
 800c00a:	2207      	movs	r2, #7
 800c00c:	4013      	ands	r3, r2
 800c00e:	3301      	adds	r3, #1
 800c010:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2b03      	cmp	r3, #3
 800c016:	d10d      	bne.n	800c034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c018:	68b9      	ldr	r1, [r7, #8]
 800c01a:	4824      	ldr	r0, [pc, #144]	@ (800c0ac <HAL_RCC_GetSysClockFreq+0x100>)
 800c01c:	f7f9 f97e 	bl	800531c <__udivsi3>
 800c020:	0003      	movs	r3, r0
 800c022:	0019      	movs	r1, r3
 800c024:	4b1f      	ldr	r3, [pc, #124]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	0a1b      	lsrs	r3, r3, #8
 800c02a:	227f      	movs	r2, #127	@ 0x7f
 800c02c:	4013      	ands	r3, r2
 800c02e:	434b      	muls	r3, r1
 800c030:	617b      	str	r3, [r7, #20]
        break;
 800c032:	e00d      	b.n	800c050 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800c034:	68b9      	ldr	r1, [r7, #8]
 800c036:	481c      	ldr	r0, [pc, #112]	@ (800c0a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800c038:	f7f9 f970 	bl	800531c <__udivsi3>
 800c03c:	0003      	movs	r3, r0
 800c03e:	0019      	movs	r1, r3
 800c040:	4b18      	ldr	r3, [pc, #96]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	0a1b      	lsrs	r3, r3, #8
 800c046:	227f      	movs	r2, #127	@ 0x7f
 800c048:	4013      	ands	r3, r2
 800c04a:	434b      	muls	r3, r1
 800c04c:	617b      	str	r3, [r7, #20]
        break;
 800c04e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800c050:	4b14      	ldr	r3, [pc, #80]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	0f5b      	lsrs	r3, r3, #29
 800c056:	2207      	movs	r2, #7
 800c058:	4013      	ands	r3, r2
 800c05a:	3301      	adds	r3, #1
 800c05c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	6978      	ldr	r0, [r7, #20]
 800c062:	f7f9 f95b 	bl	800531c <__udivsi3>
 800c066:	0003      	movs	r3, r0
 800c068:	613b      	str	r3, [r7, #16]
 800c06a:	e015      	b.n	800c098 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800c06c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	2238      	movs	r2, #56	@ 0x38
 800c072:	4013      	ands	r3, r2
 800c074:	2b20      	cmp	r3, #32
 800c076:	d103      	bne.n	800c080 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800c078:	2380      	movs	r3, #128	@ 0x80
 800c07a:	021b      	lsls	r3, r3, #8
 800c07c:	613b      	str	r3, [r7, #16]
 800c07e:	e00b      	b.n	800c098 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800c080:	4b08      	ldr	r3, [pc, #32]	@ (800c0a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	2238      	movs	r2, #56	@ 0x38
 800c086:	4013      	ands	r3, r2
 800c088:	2b18      	cmp	r3, #24
 800c08a:	d103      	bne.n	800c094 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800c08c:	23fa      	movs	r3, #250	@ 0xfa
 800c08e:	01db      	lsls	r3, r3, #7
 800c090:	613b      	str	r3, [r7, #16]
 800c092:	e001      	b.n	800c098 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800c094:	2300      	movs	r3, #0
 800c096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c098:	693b      	ldr	r3, [r7, #16]
}
 800c09a:	0018      	movs	r0, r3
 800c09c:	46bd      	mov	sp, r7
 800c09e:	b006      	add	sp, #24
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	46c0      	nop			@ (mov r8, r8)
 800c0a4:	40021000 	.word	0x40021000
 800c0a8:	00f42400 	.word	0x00f42400
 800c0ac:	007a1200 	.word	0x007a1200

0800c0b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0b4:	4b02      	ldr	r3, [pc, #8]	@ (800c0c0 <HAL_RCC_GetHCLKFreq+0x10>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
}
 800c0b8:	0018      	movs	r0, r3
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	46c0      	nop			@ (mov r8, r8)
 800c0c0:	20000018 	.word	0x20000018

0800c0c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0c4:	b5b0      	push	{r4, r5, r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c0c8:	f7ff fff2 	bl	800c0b0 <HAL_RCC_GetHCLKFreq>
 800c0cc:	0004      	movs	r4, r0
 800c0ce:	f7ff faf9 	bl	800b6c4 <LL_RCC_GetAPB1Prescaler>
 800c0d2:	0003      	movs	r3, r0
 800c0d4:	0b1a      	lsrs	r2, r3, #12
 800c0d6:	4b05      	ldr	r3, [pc, #20]	@ (800c0ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800c0d8:	0092      	lsls	r2, r2, #2
 800c0da:	58d3      	ldr	r3, [r2, r3]
 800c0dc:	221f      	movs	r2, #31
 800c0de:	4013      	ands	r3, r2
 800c0e0:	40dc      	lsrs	r4, r3
 800c0e2:	0023      	movs	r3, r4
}
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	08011a40 	.word	0x08011a40

0800c0f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800c0f8:	2313      	movs	r3, #19
 800c0fa:	18fb      	adds	r3, r7, r3
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c100:	2312      	movs	r3, #18
 800c102:	18fb      	adds	r3, r7, r3
 800c104:	2200      	movs	r2, #0
 800c106:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	2380      	movs	r3, #128	@ 0x80
 800c10e:	029b      	lsls	r3, r3, #10
 800c110:	4013      	ands	r3, r2
 800c112:	d100      	bne.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800c114:	e0ad      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c116:	2011      	movs	r0, #17
 800c118:	183b      	adds	r3, r7, r0
 800c11a:	2200      	movs	r2, #0
 800c11c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c11e:	4b47      	ldr	r3, [pc, #284]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c122:	2380      	movs	r3, #128	@ 0x80
 800c124:	055b      	lsls	r3, r3, #21
 800c126:	4013      	ands	r3, r2
 800c128:	d110      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c12a:	4b44      	ldr	r3, [pc, #272]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c12c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c12e:	4b43      	ldr	r3, [pc, #268]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c130:	2180      	movs	r1, #128	@ 0x80
 800c132:	0549      	lsls	r1, r1, #21
 800c134:	430a      	orrs	r2, r1
 800c136:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c138:	4b40      	ldr	r3, [pc, #256]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c13a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c13c:	2380      	movs	r3, #128	@ 0x80
 800c13e:	055b      	lsls	r3, r3, #21
 800c140:	4013      	ands	r3, r2
 800c142:	60bb      	str	r3, [r7, #8]
 800c144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c146:	183b      	adds	r3, r7, r0
 800c148:	2201      	movs	r2, #1
 800c14a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c14c:	4b3c      	ldr	r3, [pc, #240]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	4b3b      	ldr	r3, [pc, #236]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c152:	2180      	movs	r1, #128	@ 0x80
 800c154:	0049      	lsls	r1, r1, #1
 800c156:	430a      	orrs	r2, r1
 800c158:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c15a:	f7fc fc77 	bl	8008a4c <HAL_GetTick>
 800c15e:	0003      	movs	r3, r0
 800c160:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c162:	e00b      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c164:	f7fc fc72 	bl	8008a4c <HAL_GetTick>
 800c168:	0002      	movs	r2, r0
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d904      	bls.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800c172:	2313      	movs	r3, #19
 800c174:	18fb      	adds	r3, r7, r3
 800c176:	2203      	movs	r2, #3
 800c178:	701a      	strb	r2, [r3, #0]
        break;
 800c17a:	e005      	b.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c17c:	4b30      	ldr	r3, [pc, #192]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	2380      	movs	r3, #128	@ 0x80
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	4013      	ands	r3, r2
 800c186:	d0ed      	beq.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800c188:	2313      	movs	r3, #19
 800c18a:	18fb      	adds	r3, r7, r3
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d15e      	bne.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c192:	4b2a      	ldr	r3, [pc, #168]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c194:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c196:	23c0      	movs	r3, #192	@ 0xc0
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4013      	ands	r3, r2
 800c19c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d019      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a8:	697a      	ldr	r2, [r7, #20]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d014      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c1ae:	4b23      	ldr	r3, [pc, #140]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1b2:	4a24      	ldr	r2, [pc, #144]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c1b8:	4b20      	ldr	r3, [pc, #128]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c1bc:	4b1f      	ldr	r3, [pc, #124]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1be:	2180      	movs	r1, #128	@ 0x80
 800c1c0:	0249      	lsls	r1, r1, #9
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c1c6:	4b1d      	ldr	r3, [pc, #116]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c1ca:	4b1c      	ldr	r3, [pc, #112]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1cc:	491e      	ldr	r1, [pc, #120]	@ (800c248 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800c1ce:	400a      	ands	r2, r1
 800c1d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c1d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	4013      	ands	r3, r2
 800c1de:	d016      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1e0:	f7fc fc34 	bl	8008a4c <HAL_GetTick>
 800c1e4:	0003      	movs	r3, r0
 800c1e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1e8:	e00c      	b.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1ea:	f7fc fc2f 	bl	8008a4c <HAL_GetTick>
 800c1ee:	0002      	movs	r2, r0
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	4a15      	ldr	r2, [pc, #84]	@ (800c24c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d904      	bls.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800c1fa:	2313      	movs	r3, #19
 800c1fc:	18fb      	adds	r3, r7, r3
 800c1fe:	2203      	movs	r2, #3
 800c200:	701a      	strb	r2, [r3, #0]
            break;
 800c202:	e004      	b.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c204:	4b0d      	ldr	r3, [pc, #52]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c208:	2202      	movs	r2, #2
 800c20a:	4013      	ands	r3, r2
 800c20c:	d0ed      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800c20e:	2313      	movs	r3, #19
 800c210:	18fb      	adds	r3, r7, r3
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10a      	bne.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c218:	4b08      	ldr	r3, [pc, #32]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c21a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c21c:	4a09      	ldr	r2, [pc, #36]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c21e:	4013      	ands	r3, r2
 800c220:	0019      	movs	r1, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c226:	4b05      	ldr	r3, [pc, #20]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c228:	430a      	orrs	r2, r1
 800c22a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c22c:	e016      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c22e:	2312      	movs	r3, #18
 800c230:	18fb      	adds	r3, r7, r3
 800c232:	2213      	movs	r2, #19
 800c234:	18ba      	adds	r2, r7, r2
 800c236:	7812      	ldrb	r2, [r2, #0]
 800c238:	701a      	strb	r2, [r3, #0]
 800c23a:	e00f      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800c23c:	40021000 	.word	0x40021000
 800c240:	40007000 	.word	0x40007000
 800c244:	fffffcff 	.word	0xfffffcff
 800c248:	fffeffff 	.word	0xfffeffff
 800c24c:	00002710 	.word	0x00002710
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c250:	2312      	movs	r3, #18
 800c252:	18fb      	adds	r3, r7, r3
 800c254:	2213      	movs	r2, #19
 800c256:	18ba      	adds	r2, r7, r2
 800c258:	7812      	ldrb	r2, [r2, #0]
 800c25a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c25c:	2311      	movs	r3, #17
 800c25e:	18fb      	adds	r3, r7, r3
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d105      	bne.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c266:	4bb6      	ldr	r3, [pc, #728]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c26a:	4bb5      	ldr	r3, [pc, #724]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c26c:	49b5      	ldr	r1, [pc, #724]	@ (800c544 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800c26e:	400a      	ands	r2, r1
 800c270:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2201      	movs	r2, #1
 800c278:	4013      	ands	r3, r2
 800c27a:	d009      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c27c:	4bb0      	ldr	r3, [pc, #704]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c27e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c280:	2203      	movs	r2, #3
 800c282:	4393      	bics	r3, r2
 800c284:	0019      	movs	r1, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	4bad      	ldr	r3, [pc, #692]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c28c:	430a      	orrs	r2, r1
 800c28e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2202      	movs	r2, #2
 800c296:	4013      	ands	r3, r2
 800c298:	d009      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c29a:	4ba9      	ldr	r3, [pc, #676]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c29e:	220c      	movs	r2, #12
 800c2a0:	4393      	bics	r3, r2
 800c2a2:	0019      	movs	r1, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	689a      	ldr	r2, [r3, #8]
 800c2a8:	4ba5      	ldr	r3, [pc, #660]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2aa:	430a      	orrs	r2, r1
 800c2ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2204      	movs	r2, #4
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	d009      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c2b8:	4ba1      	ldr	r3, [pc, #644]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2bc:	2230      	movs	r2, #48	@ 0x30
 800c2be:	4393      	bics	r3, r2
 800c2c0:	0019      	movs	r1, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	4b9e      	ldr	r3, [pc, #632]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2c8:	430a      	orrs	r2, r1
 800c2ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2210      	movs	r2, #16
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	d009      	beq.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2d6:	4b9a      	ldr	r3, [pc, #616]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2da:	4a9b      	ldr	r2, [pc, #620]	@ (800c548 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	0019      	movs	r1, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691a      	ldr	r2, [r3, #16]
 800c2e4:	4b96      	ldr	r3, [pc, #600]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	2380      	movs	r3, #128	@ 0x80
 800c2f0:	015b      	lsls	r3, r3, #5
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	d009      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800c2f6:	4b92      	ldr	r3, [pc, #584]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2fa:	4a94      	ldr	r2, [pc, #592]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	0019      	movs	r1, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	695a      	ldr	r2, [r3, #20]
 800c304:	4b8e      	ldr	r3, [pc, #568]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c306:	430a      	orrs	r2, r1
 800c308:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	2380      	movs	r3, #128	@ 0x80
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4013      	ands	r3, r2
 800c314:	d009      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c316:	4b8a      	ldr	r3, [pc, #552]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c31a:	4a8d      	ldr	r2, [pc, #564]	@ (800c550 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	0019      	movs	r1, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c324:	4b86      	ldr	r3, [pc, #536]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c326:	430a      	orrs	r2, r1
 800c328:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	2380      	movs	r3, #128	@ 0x80
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	4013      	ands	r3, r2
 800c334:	d009      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c336:	4b82      	ldr	r3, [pc, #520]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c33a:	4a86      	ldr	r2, [pc, #536]	@ (800c554 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800c33c:	4013      	ands	r3, r2
 800c33e:	0019      	movs	r1, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c344:	4b7e      	ldr	r3, [pc, #504]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c346:	430a      	orrs	r2, r1
 800c348:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2220      	movs	r2, #32
 800c350:	4013      	ands	r3, r2
 800c352:	d009      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c354:	4b7a      	ldr	r3, [pc, #488]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c358:	4a7f      	ldr	r2, [pc, #508]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c35a:	4013      	ands	r3, r2
 800c35c:	0019      	movs	r1, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	699a      	ldr	r2, [r3, #24]
 800c362:	4b77      	ldr	r3, [pc, #476]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c364:	430a      	orrs	r2, r1
 800c366:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2240      	movs	r2, #64	@ 0x40
 800c36e:	4013      	ands	r3, r2
 800c370:	d009      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c372:	4b73      	ldr	r3, [pc, #460]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c376:	4a79      	ldr	r2, [pc, #484]	@ (800c55c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c378:	4013      	ands	r3, r2
 800c37a:	0019      	movs	r1, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	69da      	ldr	r2, [r3, #28]
 800c380:	4b6f      	ldr	r3, [pc, #444]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c382:	430a      	orrs	r2, r1
 800c384:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	2380      	movs	r3, #128	@ 0x80
 800c38c:	01db      	lsls	r3, r3, #7
 800c38e:	4013      	ands	r3, r2
 800c390:	d015      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c392:	4b6b      	ldr	r3, [pc, #428]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	0899      	lsrs	r1, r3, #2
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c39e:	4b68      	ldr	r3, [pc, #416]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3a8:	2380      	movs	r3, #128	@ 0x80
 800c3aa:	05db      	lsls	r3, r3, #23
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d106      	bne.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c3b0:	4b63      	ldr	r3, [pc, #396]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3b2:	68da      	ldr	r2, [r3, #12]
 800c3b4:	4b62      	ldr	r3, [pc, #392]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3b6:	2180      	movs	r1, #128	@ 0x80
 800c3b8:	0249      	lsls	r1, r1, #9
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	2380      	movs	r3, #128	@ 0x80
 800c3c4:	031b      	lsls	r3, r3, #12
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	d009      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c3ca:	4b5d      	ldr	r3, [pc, #372]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ce:	2240      	movs	r2, #64	@ 0x40
 800c3d0:	4393      	bics	r3, r2
 800c3d2:	0019      	movs	r1, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3d8:	4b59      	ldr	r3, [pc, #356]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	2380      	movs	r3, #128	@ 0x80
 800c3e4:	039b      	lsls	r3, r3, #14
 800c3e6:	4013      	ands	r3, r2
 800c3e8:	d016      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800c3ea:	4b55      	ldr	r3, [pc, #340]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ee:	4a5c      	ldr	r2, [pc, #368]	@ (800c560 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	0019      	movs	r1, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3f8:	4b51      	ldr	r3, [pc, #324]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c402:	2380      	movs	r3, #128	@ 0x80
 800c404:	03db      	lsls	r3, r3, #15
 800c406:	429a      	cmp	r2, r3
 800c408:	d106      	bne.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c40a:	4b4d      	ldr	r3, [pc, #308]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c40c:	68da      	ldr	r2, [r3, #12]
 800c40e:	4b4c      	ldr	r3, [pc, #304]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c410:	2180      	movs	r1, #128	@ 0x80
 800c412:	0449      	lsls	r1, r1, #17
 800c414:	430a      	orrs	r2, r1
 800c416:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	2380      	movs	r3, #128	@ 0x80
 800c41e:	03db      	lsls	r3, r3, #15
 800c420:	4013      	ands	r3, r2
 800c422:	d016      	beq.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800c424:	4b46      	ldr	r3, [pc, #280]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c428:	4a4e      	ldr	r2, [pc, #312]	@ (800c564 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c42a:	4013      	ands	r3, r2
 800c42c:	0019      	movs	r1, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c432:	4b43      	ldr	r3, [pc, #268]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c434:	430a      	orrs	r2, r1
 800c436:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c43c:	2380      	movs	r3, #128	@ 0x80
 800c43e:	045b      	lsls	r3, r3, #17
 800c440:	429a      	cmp	r2, r3
 800c442:	d106      	bne.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c444:	4b3e      	ldr	r3, [pc, #248]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	4b3d      	ldr	r3, [pc, #244]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c44a:	2180      	movs	r1, #128	@ 0x80
 800c44c:	0449      	lsls	r1, r1, #17
 800c44e:	430a      	orrs	r2, r1
 800c450:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	2380      	movs	r3, #128	@ 0x80
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	4013      	ands	r3, r2
 800c45c:	d014      	beq.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800c45e:	4b38      	ldr	r3, [pc, #224]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c462:	2203      	movs	r2, #3
 800c464:	4393      	bics	r3, r2
 800c466:	0019      	movs	r1, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a1a      	ldr	r2, [r3, #32]
 800c46c:	4b34      	ldr	r3, [pc, #208]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c46e:	430a      	orrs	r2, r1
 800c470:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d106      	bne.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c47a:	4b31      	ldr	r3, [pc, #196]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c47c:	68da      	ldr	r2, [r3, #12]
 800c47e:	4b30      	ldr	r3, [pc, #192]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c480:	2180      	movs	r1, #128	@ 0x80
 800c482:	0249      	lsls	r1, r1, #9
 800c484:	430a      	orrs	r2, r1
 800c486:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	2380      	movs	r3, #128	@ 0x80
 800c48e:	019b      	lsls	r3, r3, #6
 800c490:	4013      	ands	r3, r2
 800c492:	d014      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800c494:	4b2a      	ldr	r3, [pc, #168]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c498:	220c      	movs	r2, #12
 800c49a:	4393      	bics	r3, r2
 800c49c:	0019      	movs	r1, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4a2:	4b27      	ldr	r3, [pc, #156]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d106      	bne.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c4b0:	4b23      	ldr	r3, [pc, #140]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4b2:	68da      	ldr	r2, [r3, #12]
 800c4b4:	4b22      	ldr	r3, [pc, #136]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4b6:	2180      	movs	r1, #128	@ 0x80
 800c4b8:	0249      	lsls	r1, r1, #9
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	2380      	movs	r3, #128	@ 0x80
 800c4c4:	045b      	lsls	r3, r3, #17
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	d016      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ce:	4a22      	ldr	r2, [pc, #136]	@ (800c558 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	0019      	movs	r1, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4d8:	4b19      	ldr	r3, [pc, #100]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4e2:	2380      	movs	r3, #128	@ 0x80
 800c4e4:	019b      	lsls	r3, r3, #6
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d106      	bne.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c4ea:	4b15      	ldr	r3, [pc, #84]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4ec:	68da      	ldr	r2, [r3, #12]
 800c4ee:	4b14      	ldr	r3, [pc, #80]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4f0:	2180      	movs	r1, #128	@ 0x80
 800c4f2:	0449      	lsls	r1, r1, #17
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	2380      	movs	r3, #128	@ 0x80
 800c4fe:	049b      	lsls	r3, r3, #18
 800c500:	4013      	ands	r3, r2
 800c502:	d016      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c504:	4b0e      	ldr	r3, [pc, #56]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c508:	4a10      	ldr	r2, [pc, #64]	@ (800c54c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	0019      	movs	r1, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c512:	4b0b      	ldr	r3, [pc, #44]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c514:	430a      	orrs	r2, r1
 800c516:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c51c:	2380      	movs	r3, #128	@ 0x80
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	429a      	cmp	r2, r3
 800c522:	d106      	bne.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c524:	4b06      	ldr	r3, [pc, #24]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c526:	68da      	ldr	r2, [r3, #12]
 800c528:	4b05      	ldr	r3, [pc, #20]	@ (800c540 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c52a:	2180      	movs	r1, #128	@ 0x80
 800c52c:	0449      	lsls	r1, r1, #17
 800c52e:	430a      	orrs	r2, r1
 800c530:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c532:	2312      	movs	r3, #18
 800c534:	18fb      	adds	r3, r7, r3
 800c536:	781b      	ldrb	r3, [r3, #0]
}
 800c538:	0018      	movs	r0, r3
 800c53a:	46bd      	mov	sp, r7
 800c53c:	b006      	add	sp, #24
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	40021000 	.word	0x40021000
 800c544:	efffffff 	.word	0xefffffff
 800c548:	fffff3ff 	.word	0xfffff3ff
 800c54c:	fffffcff 	.word	0xfffffcff
 800c550:	fff3ffff 	.word	0xfff3ffff
 800c554:	ffcfffff 	.word	0xffcfffff
 800c558:	ffffcfff 	.word	0xffffcfff
 800c55c:	ffff3fff 	.word	0xffff3fff
 800c560:	ffbfffff 	.word	0xffbfffff
 800c564:	feffffff 	.word	0xfeffffff

0800c568 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c568:	b5b0      	push	{r4, r5, r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c570:	230f      	movs	r3, #15
 800c572:	18fb      	adds	r3, r7, r3
 800c574:	2201      	movs	r2, #1
 800c576:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d100      	bne.n	800c580 <HAL_RTC_Init+0x18>
 800c57e:	e08c      	b.n	800c69a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2229      	movs	r2, #41	@ 0x29
 800c584:	5c9b      	ldrb	r3, [r3, r2]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10b      	bne.n	800c5a4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2228      	movs	r2, #40	@ 0x28
 800c590:	2100      	movs	r1, #0
 800c592:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2288      	movs	r2, #136	@ 0x88
 800c598:	0212      	lsls	r2, r2, #8
 800c59a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	0018      	movs	r0, r3
 800c5a0:	f7fa fc3c 	bl	8006e1c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2229      	movs	r2, #41	@ 0x29
 800c5a8:	2102      	movs	r1, #2
 800c5aa:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	2210      	movs	r2, #16
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	2b10      	cmp	r3, #16
 800c5b8:	d062      	beq.n	800c680 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	22ca      	movs	r2, #202	@ 0xca
 800c5c0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2253      	movs	r2, #83	@ 0x53
 800c5c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c5ca:	250f      	movs	r5, #15
 800c5cc:	197c      	adds	r4, r7, r5
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f000 f891 	bl	800c6f8 <RTC_EnterInitMode>
 800c5d6:	0003      	movs	r3, r0
 800c5d8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800c5da:	0028      	movs	r0, r5
 800c5dc:	183b      	adds	r3, r7, r0
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d12c      	bne.n	800c63e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	699a      	ldr	r2, [r3, #24]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	492e      	ldr	r1, [pc, #184]	@ (800c6a8 <HAL_RTC_Init+0x140>)
 800c5f0:	400a      	ands	r2, r1
 800c5f2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6999      	ldr	r1, [r3, #24]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	689a      	ldr	r2, [r3, #8]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	695b      	ldr	r3, [r3, #20]
 800c602:	431a      	orrs	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	431a      	orrs	r2, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	6912      	ldr	r2, [r2, #16]
 800c61a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6919      	ldr	r1, [r3, #16]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	041a      	lsls	r2, r3, #16
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	430a      	orrs	r2, r1
 800c62e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c630:	183c      	adds	r4, r7, r0
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	0018      	movs	r0, r3
 800c636:	f000 f8a1 	bl	800c77c <RTC_ExitInitMode>
 800c63a:	0003      	movs	r3, r0
 800c63c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800c63e:	230f      	movs	r3, #15
 800c640:	18fb      	adds	r3, r7, r3
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d116      	bne.n	800c676 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	699a      	ldr	r2, [r3, #24]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	00d2      	lsls	r2, r2, #3
 800c654:	08d2      	lsrs	r2, r2, #3
 800c656:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6999      	ldr	r1, [r3, #24]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	431a      	orrs	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	431a      	orrs	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	430a      	orrs	r2, r1
 800c674:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	22ff      	movs	r2, #255	@ 0xff
 800c67c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c67e:	e003      	b.n	800c688 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c680:	230f      	movs	r3, #15
 800c682:	18fb      	adds	r3, r7, r3
 800c684:	2200      	movs	r2, #0
 800c686:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800c688:	230f      	movs	r3, #15
 800c68a:	18fb      	adds	r3, r7, r3
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d103      	bne.n	800c69a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2229      	movs	r2, #41	@ 0x29
 800c696:	2101      	movs	r1, #1
 800c698:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800c69a:	230f      	movs	r3, #15
 800c69c:	18fb      	adds	r3, r7, r3
 800c69e:	781b      	ldrb	r3, [r3, #0]
}
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	b004      	add	sp, #16
 800c6a6:	bdb0      	pop	{r4, r5, r7, pc}
 800c6a8:	fb8fffbf 	.word	0xfb8fffbf

0800c6ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c6f4 <HAL_RTC_WaitForSynchro+0x48>)
 800c6ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c6bc:	f7fc f9c6 	bl	8008a4c <HAL_GetTick>
 800c6c0:	0003      	movs	r3, r0
 800c6c2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c6c4:	e00a      	b.n	800c6dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c6c6:	f7fc f9c1 	bl	8008a4c <HAL_GetTick>
 800c6ca:	0002      	movs	r2, r0
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	1ad2      	subs	r2, r2, r3
 800c6d0:	23fa      	movs	r3, #250	@ 0xfa
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d901      	bls.n	800c6dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c6d8:	2303      	movs	r3, #3
 800c6da:	e006      	b.n	800c6ea <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	2220      	movs	r2, #32
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	d0ee      	beq.n	800c6c6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	b004      	add	sp, #16
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	46c0      	nop			@ (mov r8, r8)
 800c6f4:	0001005f 	.word	0x0001005f

0800c6f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800c700:	230f      	movs	r3, #15
 800c702:	18fb      	adds	r3, r7, r3
 800c704:	2200      	movs	r2, #0
 800c706:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	2240      	movs	r2, #64	@ 0x40
 800c710:	4013      	ands	r3, r2
 800c712:	d12c      	bne.n	800c76e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2180      	movs	r1, #128	@ 0x80
 800c720:	430a      	orrs	r2, r1
 800c722:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c724:	f7fc f992 	bl	8008a4c <HAL_GetTick>
 800c728:	0003      	movs	r3, r0
 800c72a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c72c:	e014      	b.n	800c758 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800c72e:	f7fc f98d 	bl	8008a4c <HAL_GetTick>
 800c732:	0002      	movs	r2, r0
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	1ad2      	subs	r2, r2, r3
 800c738:	200f      	movs	r0, #15
 800c73a:	183b      	adds	r3, r7, r0
 800c73c:	1839      	adds	r1, r7, r0
 800c73e:	7809      	ldrb	r1, [r1, #0]
 800c740:	7019      	strb	r1, [r3, #0]
 800c742:	23fa      	movs	r3, #250	@ 0xfa
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	429a      	cmp	r2, r3
 800c748:	d906      	bls.n	800c758 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800c74a:	183b      	adds	r3, r7, r0
 800c74c:	2203      	movs	r2, #3
 800c74e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2229      	movs	r2, #41	@ 0x29
 800c754:	2103      	movs	r1, #3
 800c756:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	2240      	movs	r2, #64	@ 0x40
 800c760:	4013      	ands	r3, r2
 800c762:	d104      	bne.n	800c76e <RTC_EnterInitMode+0x76>
 800c764:	230f      	movs	r3, #15
 800c766:	18fb      	adds	r3, r7, r3
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	d1df      	bne.n	800c72e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c76e:	230f      	movs	r3, #15
 800c770:	18fb      	adds	r3, r7, r3
 800c772:	781b      	ldrb	r3, [r3, #0]
}
 800c774:	0018      	movs	r0, r3
 800c776:	46bd      	mov	sp, r7
 800c778:	b004      	add	sp, #16
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c77c:	b590      	push	{r4, r7, lr}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c784:	240f      	movs	r4, #15
 800c786:	193b      	adds	r3, r7, r4
 800c788:	2200      	movs	r2, #0
 800c78a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c78c:	4b1c      	ldr	r3, [pc, #112]	@ (800c800 <RTC_ExitInitMode+0x84>)
 800c78e:	68da      	ldr	r2, [r3, #12]
 800c790:	4b1b      	ldr	r3, [pc, #108]	@ (800c800 <RTC_ExitInitMode+0x84>)
 800c792:	2180      	movs	r1, #128	@ 0x80
 800c794:	438a      	bics	r2, r1
 800c796:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c798:	4b19      	ldr	r3, [pc, #100]	@ (800c800 <RTC_ExitInitMode+0x84>)
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	2220      	movs	r2, #32
 800c79e:	4013      	ands	r3, r2
 800c7a0:	d10d      	bne.n	800c7be <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	0018      	movs	r0, r3
 800c7a6:	f7ff ff81 	bl	800c6ac <HAL_RTC_WaitForSynchro>
 800c7aa:	1e03      	subs	r3, r0, #0
 800c7ac:	d021      	beq.n	800c7f2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2229      	movs	r2, #41	@ 0x29
 800c7b2:	2103      	movs	r1, #3
 800c7b4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800c7b6:	193b      	adds	r3, r7, r4
 800c7b8:	2203      	movs	r2, #3
 800c7ba:	701a      	strb	r2, [r3, #0]
 800c7bc:	e019      	b.n	800c7f2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c7be:	4b10      	ldr	r3, [pc, #64]	@ (800c800 <RTC_ExitInitMode+0x84>)
 800c7c0:	699a      	ldr	r2, [r3, #24]
 800c7c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c800 <RTC_ExitInitMode+0x84>)
 800c7c4:	2120      	movs	r1, #32
 800c7c6:	438a      	bics	r2, r1
 800c7c8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	0018      	movs	r0, r3
 800c7ce:	f7ff ff6d 	bl	800c6ac <HAL_RTC_WaitForSynchro>
 800c7d2:	1e03      	subs	r3, r0, #0
 800c7d4:	d007      	beq.n	800c7e6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2229      	movs	r2, #41	@ 0x29
 800c7da:	2103      	movs	r1, #3
 800c7dc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800c7de:	230f      	movs	r3, #15
 800c7e0:	18fb      	adds	r3, r7, r3
 800c7e2:	2203      	movs	r2, #3
 800c7e4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c7e6:	4b06      	ldr	r3, [pc, #24]	@ (800c800 <RTC_ExitInitMode+0x84>)
 800c7e8:	699a      	ldr	r2, [r3, #24]
 800c7ea:	4b05      	ldr	r3, [pc, #20]	@ (800c800 <RTC_ExitInitMode+0x84>)
 800c7ec:	2120      	movs	r1, #32
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	619a      	str	r2, [r3, #24]
  }

  return status;
 800c7f2:	230f      	movs	r3, #15
 800c7f4:	18fb      	adds	r3, r7, r3
 800c7f6:	781b      	ldrb	r3, [r3, #0]
}
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	b005      	add	sp, #20
 800c7fe:	bd90      	pop	{r4, r7, pc}
 800c800:	40002800 	.word	0x40002800

0800c804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e04a      	b.n	800c8ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	223d      	movs	r2, #61	@ 0x3d
 800c81a:	5c9b      	ldrb	r3, [r3, r2]
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d107      	bne.n	800c832 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	223c      	movs	r2, #60	@ 0x3c
 800c826:	2100      	movs	r1, #0
 800c828:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	0018      	movs	r0, r3
 800c82e:	f7fa fea7 	bl	8007580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	223d      	movs	r2, #61	@ 0x3d
 800c836:	2102      	movs	r1, #2
 800c838:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3304      	adds	r3, #4
 800c842:	0019      	movs	r1, r3
 800c844:	0010      	movs	r0, r2
 800c846:	f000 fc0f 	bl	800d068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2248      	movs	r2, #72	@ 0x48
 800c84e:	2101      	movs	r1, #1
 800c850:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	223e      	movs	r2, #62	@ 0x3e
 800c856:	2101      	movs	r1, #1
 800c858:	5499      	strb	r1, [r3, r2]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	223f      	movs	r2, #63	@ 0x3f
 800c85e:	2101      	movs	r1, #1
 800c860:	5499      	strb	r1, [r3, r2]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2240      	movs	r2, #64	@ 0x40
 800c866:	2101      	movs	r1, #1
 800c868:	5499      	strb	r1, [r3, r2]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2241      	movs	r2, #65	@ 0x41
 800c86e:	2101      	movs	r1, #1
 800c870:	5499      	strb	r1, [r3, r2]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2242      	movs	r2, #66	@ 0x42
 800c876:	2101      	movs	r1, #1
 800c878:	5499      	strb	r1, [r3, r2]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2243      	movs	r2, #67	@ 0x43
 800c87e:	2101      	movs	r1, #1
 800c880:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2244      	movs	r2, #68	@ 0x44
 800c886:	2101      	movs	r1, #1
 800c888:	5499      	strb	r1, [r3, r2]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2245      	movs	r2, #69	@ 0x45
 800c88e:	2101      	movs	r1, #1
 800c890:	5499      	strb	r1, [r3, r2]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2246      	movs	r2, #70	@ 0x46
 800c896:	2101      	movs	r1, #1
 800c898:	5499      	strb	r1, [r3, r2]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2247      	movs	r2, #71	@ 0x47
 800c89e:	2101      	movs	r1, #1
 800c8a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	223d      	movs	r2, #61	@ 0x3d
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	b002      	add	sp, #8
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	223d      	movs	r2, #61	@ 0x3d
 800c8c0:	5c9b      	ldrb	r3, [r3, r2]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d001      	beq.n	800c8cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e047      	b.n	800c95c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	223d      	movs	r2, #61	@ 0x3d
 800c8d0:	2102      	movs	r1, #2
 800c8d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2101      	movs	r1, #1
 800c8e0:	430a      	orrs	r2, r1
 800c8e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a1e      	ldr	r2, [pc, #120]	@ (800c964 <HAL_TIM_Base_Start_IT+0xb0>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d014      	beq.n	800c918 <HAL_TIM_Base_Start_IT+0x64>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	2380      	movs	r3, #128	@ 0x80
 800c8f4:	05db      	lsls	r3, r3, #23
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d00e      	beq.n	800c918 <HAL_TIM_Base_Start_IT+0x64>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a1a      	ldr	r2, [pc, #104]	@ (800c968 <HAL_TIM_Base_Start_IT+0xb4>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d009      	beq.n	800c918 <HAL_TIM_Base_Start_IT+0x64>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a18      	ldr	r2, [pc, #96]	@ (800c96c <HAL_TIM_Base_Start_IT+0xb8>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d004      	beq.n	800c918 <HAL_TIM_Base_Start_IT+0x64>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a17      	ldr	r2, [pc, #92]	@ (800c970 <HAL_TIM_Base_Start_IT+0xbc>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d116      	bne.n	800c946 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	4a15      	ldr	r2, [pc, #84]	@ (800c974 <HAL_TIM_Base_Start_IT+0xc0>)
 800c920:	4013      	ands	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b06      	cmp	r3, #6
 800c928:	d016      	beq.n	800c958 <HAL_TIM_Base_Start_IT+0xa4>
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	2380      	movs	r3, #128	@ 0x80
 800c92e:	025b      	lsls	r3, r3, #9
 800c930:	429a      	cmp	r2, r3
 800c932:	d011      	beq.n	800c958 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2101      	movs	r1, #1
 800c940:	430a      	orrs	r2, r1
 800c942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c944:	e008      	b.n	800c958 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2101      	movs	r1, #1
 800c952:	430a      	orrs	r2, r1
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	e000      	b.n	800c95a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c958:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	0018      	movs	r0, r3
 800c95e:	46bd      	mov	sp, r7
 800c960:	b004      	add	sp, #16
 800c962:	bd80      	pop	{r7, pc}
 800c964:	40012c00 	.word	0x40012c00
 800c968:	40000400 	.word	0x40000400
 800c96c:	40000800 	.word	0x40000800
 800c970:	40014000 	.word	0x40014000
 800c974:	00010007 	.word	0x00010007

0800c978 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e04a      	b.n	800ca20 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	223d      	movs	r2, #61	@ 0x3d
 800c98e:	5c9b      	ldrb	r3, [r3, r2]
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	d107      	bne.n	800c9a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	223c      	movs	r2, #60	@ 0x3c
 800c99a:	2100      	movs	r1, #0
 800c99c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	f7fa fdcf 	bl	8007544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	223d      	movs	r2, #61	@ 0x3d
 800c9aa:	2102      	movs	r1, #2
 800c9ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	0019      	movs	r1, r3
 800c9b8:	0010      	movs	r0, r2
 800c9ba:	f000 fb55 	bl	800d068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2248      	movs	r2, #72	@ 0x48
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	223e      	movs	r2, #62	@ 0x3e
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	5499      	strb	r1, [r3, r2]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	223f      	movs	r2, #63	@ 0x3f
 800c9d2:	2101      	movs	r1, #1
 800c9d4:	5499      	strb	r1, [r3, r2]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2240      	movs	r2, #64	@ 0x40
 800c9da:	2101      	movs	r1, #1
 800c9dc:	5499      	strb	r1, [r3, r2]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2241      	movs	r2, #65	@ 0x41
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	5499      	strb	r1, [r3, r2]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2242      	movs	r2, #66	@ 0x42
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	5499      	strb	r1, [r3, r2]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2243      	movs	r2, #67	@ 0x43
 800c9f2:	2101      	movs	r1, #1
 800c9f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2244      	movs	r2, #68	@ 0x44
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	5499      	strb	r1, [r3, r2]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2245      	movs	r2, #69	@ 0x45
 800ca02:	2101      	movs	r1, #1
 800ca04:	5499      	strb	r1, [r3, r2]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2246      	movs	r2, #70	@ 0x46
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	5499      	strb	r1, [r3, r2]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2247      	movs	r2, #71	@ 0x47
 800ca12:	2101      	movs	r1, #1
 800ca14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	223d      	movs	r2, #61	@ 0x3d
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	0018      	movs	r0, r3
 800ca22:	46bd      	mov	sp, r7
 800ca24:	b002      	add	sp, #8
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d108      	bne.n	800ca4a <HAL_TIM_PWM_Start+0x22>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	223e      	movs	r2, #62	@ 0x3e
 800ca3c:	5c9b      	ldrb	r3, [r3, r2]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	3b01      	subs	r3, #1
 800ca42:	1e5a      	subs	r2, r3, #1
 800ca44:	4193      	sbcs	r3, r2
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	e037      	b.n	800caba <HAL_TIM_PWM_Start+0x92>
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d108      	bne.n	800ca62 <HAL_TIM_PWM_Start+0x3a>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	223f      	movs	r2, #63	@ 0x3f
 800ca54:	5c9b      	ldrb	r3, [r3, r2]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	1e5a      	subs	r2, r3, #1
 800ca5c:	4193      	sbcs	r3, r2
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	e02b      	b.n	800caba <HAL_TIM_PWM_Start+0x92>
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	2b08      	cmp	r3, #8
 800ca66:	d108      	bne.n	800ca7a <HAL_TIM_PWM_Start+0x52>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2240      	movs	r2, #64	@ 0x40
 800ca6c:	5c9b      	ldrb	r3, [r3, r2]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	3b01      	subs	r3, #1
 800ca72:	1e5a      	subs	r2, r3, #1
 800ca74:	4193      	sbcs	r3, r2
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	e01f      	b.n	800caba <HAL_TIM_PWM_Start+0x92>
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b0c      	cmp	r3, #12
 800ca7e:	d108      	bne.n	800ca92 <HAL_TIM_PWM_Start+0x6a>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2241      	movs	r2, #65	@ 0x41
 800ca84:	5c9b      	ldrb	r3, [r3, r2]
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	1e5a      	subs	r2, r3, #1
 800ca8c:	4193      	sbcs	r3, r2
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	e013      	b.n	800caba <HAL_TIM_PWM_Start+0x92>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b10      	cmp	r3, #16
 800ca96:	d108      	bne.n	800caaa <HAL_TIM_PWM_Start+0x82>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2242      	movs	r2, #66	@ 0x42
 800ca9c:	5c9b      	ldrb	r3, [r3, r2]
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	3b01      	subs	r3, #1
 800caa2:	1e5a      	subs	r2, r3, #1
 800caa4:	4193      	sbcs	r3, r2
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	e007      	b.n	800caba <HAL_TIM_PWM_Start+0x92>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2243      	movs	r2, #67	@ 0x43
 800caae:	5c9b      	ldrb	r3, [r3, r2]
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	3b01      	subs	r3, #1
 800cab4:	1e5a      	subs	r2, r3, #1
 800cab6:	4193      	sbcs	r3, r2
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e090      	b.n	800cbe4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d104      	bne.n	800cad2 <HAL_TIM_PWM_Start+0xaa>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	223e      	movs	r2, #62	@ 0x3e
 800cacc:	2102      	movs	r1, #2
 800cace:	5499      	strb	r1, [r3, r2]
 800cad0:	e023      	b.n	800cb1a <HAL_TIM_PWM_Start+0xf2>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b04      	cmp	r3, #4
 800cad6:	d104      	bne.n	800cae2 <HAL_TIM_PWM_Start+0xba>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	223f      	movs	r2, #63	@ 0x3f
 800cadc:	2102      	movs	r1, #2
 800cade:	5499      	strb	r1, [r3, r2]
 800cae0:	e01b      	b.n	800cb1a <HAL_TIM_PWM_Start+0xf2>
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b08      	cmp	r3, #8
 800cae6:	d104      	bne.n	800caf2 <HAL_TIM_PWM_Start+0xca>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2240      	movs	r2, #64	@ 0x40
 800caec:	2102      	movs	r1, #2
 800caee:	5499      	strb	r1, [r3, r2]
 800caf0:	e013      	b.n	800cb1a <HAL_TIM_PWM_Start+0xf2>
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	2b0c      	cmp	r3, #12
 800caf6:	d104      	bne.n	800cb02 <HAL_TIM_PWM_Start+0xda>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2241      	movs	r2, #65	@ 0x41
 800cafc:	2102      	movs	r1, #2
 800cafe:	5499      	strb	r1, [r3, r2]
 800cb00:	e00b      	b.n	800cb1a <HAL_TIM_PWM_Start+0xf2>
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b10      	cmp	r3, #16
 800cb06:	d104      	bne.n	800cb12 <HAL_TIM_PWM_Start+0xea>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2242      	movs	r2, #66	@ 0x42
 800cb0c:	2102      	movs	r1, #2
 800cb0e:	5499      	strb	r1, [r3, r2]
 800cb10:	e003      	b.n	800cb1a <HAL_TIM_PWM_Start+0xf2>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2243      	movs	r2, #67	@ 0x43
 800cb16:	2102      	movs	r1, #2
 800cb18:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	2201      	movs	r2, #1
 800cb22:	0018      	movs	r0, r3
 800cb24:	f000 fdfc 	bl	800d720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a2f      	ldr	r2, [pc, #188]	@ (800cbec <HAL_TIM_PWM_Start+0x1c4>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d00e      	beq.n	800cb50 <HAL_TIM_PWM_Start+0x128>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a2e      	ldr	r2, [pc, #184]	@ (800cbf0 <HAL_TIM_PWM_Start+0x1c8>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d009      	beq.n	800cb50 <HAL_TIM_PWM_Start+0x128>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a2c      	ldr	r2, [pc, #176]	@ (800cbf4 <HAL_TIM_PWM_Start+0x1cc>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d004      	beq.n	800cb50 <HAL_TIM_PWM_Start+0x128>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a2b      	ldr	r2, [pc, #172]	@ (800cbf8 <HAL_TIM_PWM_Start+0x1d0>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d101      	bne.n	800cb54 <HAL_TIM_PWM_Start+0x12c>
 800cb50:	2301      	movs	r3, #1
 800cb52:	e000      	b.n	800cb56 <HAL_TIM_PWM_Start+0x12e>
 800cb54:	2300      	movs	r3, #0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d008      	beq.n	800cb6c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2180      	movs	r1, #128	@ 0x80
 800cb66:	0209      	lsls	r1, r1, #8
 800cb68:	430a      	orrs	r2, r1
 800cb6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a1e      	ldr	r2, [pc, #120]	@ (800cbec <HAL_TIM_PWM_Start+0x1c4>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d014      	beq.n	800cba0 <HAL_TIM_PWM_Start+0x178>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	2380      	movs	r3, #128	@ 0x80
 800cb7c:	05db      	lsls	r3, r3, #23
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d00e      	beq.n	800cba0 <HAL_TIM_PWM_Start+0x178>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a1d      	ldr	r2, [pc, #116]	@ (800cbfc <HAL_TIM_PWM_Start+0x1d4>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d009      	beq.n	800cba0 <HAL_TIM_PWM_Start+0x178>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a1b      	ldr	r2, [pc, #108]	@ (800cc00 <HAL_TIM_PWM_Start+0x1d8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d004      	beq.n	800cba0 <HAL_TIM_PWM_Start+0x178>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a15      	ldr	r2, [pc, #84]	@ (800cbf0 <HAL_TIM_PWM_Start+0x1c8>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d116      	bne.n	800cbce <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	4a17      	ldr	r2, [pc, #92]	@ (800cc04 <HAL_TIM_PWM_Start+0x1dc>)
 800cba8:	4013      	ands	r3, r2
 800cbaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b06      	cmp	r3, #6
 800cbb0:	d016      	beq.n	800cbe0 <HAL_TIM_PWM_Start+0x1b8>
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	2380      	movs	r3, #128	@ 0x80
 800cbb6:	025b      	lsls	r3, r3, #9
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d011      	beq.n	800cbe0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbcc:	e008      	b.n	800cbe0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2101      	movs	r1, #1
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e000      	b.n	800cbe2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbe0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	b004      	add	sp, #16
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	40012c00 	.word	0x40012c00
 800cbf0:	40014000 	.word	0x40014000
 800cbf4:	40014400 	.word	0x40014400
 800cbf8:	40014800 	.word	0x40014800
 800cbfc:	40000400 	.word	0x40000400
 800cc00:	40000800 	.word	0x40000800
 800cc04:	00010007 	.word	0x00010007

0800cc08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	691b      	ldr	r3, [r3, #16]
 800cc1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2202      	movs	r2, #2
 800cc24:	4013      	ands	r3, r2
 800cc26:	d021      	beq.n	800cc6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	d01d      	beq.n	800cc6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2203      	movs	r2, #3
 800cc36:	4252      	negs	r2, r2
 800cc38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	2203      	movs	r2, #3
 800cc48:	4013      	ands	r3, r2
 800cc4a:	d004      	beq.n	800cc56 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	0018      	movs	r0, r3
 800cc50:	f000 f9f2 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800cc54:	e007      	b.n	800cc66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	0018      	movs	r0, r3
 800cc5a:	f000 f9e5 	bl	800d028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	0018      	movs	r0, r3
 800cc62:	f000 f9f1 	bl	800d048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	2204      	movs	r2, #4
 800cc70:	4013      	ands	r3, r2
 800cc72:	d022      	beq.n	800ccba <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2204      	movs	r2, #4
 800cc78:	4013      	ands	r3, r2
 800cc7a:	d01e      	beq.n	800ccba <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2205      	movs	r2, #5
 800cc82:	4252      	negs	r2, r2
 800cc84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2202      	movs	r2, #2
 800cc8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	699a      	ldr	r2, [r3, #24]
 800cc92:	23c0      	movs	r3, #192	@ 0xc0
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4013      	ands	r3, r2
 800cc98:	d004      	beq.n	800cca4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	0018      	movs	r0, r3
 800cc9e:	f000 f9cb 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800cca2:	e007      	b.n	800ccb4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	0018      	movs	r0, r3
 800cca8:	f000 f9be 	bl	800d028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	0018      	movs	r0, r3
 800ccb0:	f000 f9ca 	bl	800d048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2208      	movs	r2, #8
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	d021      	beq.n	800cd06 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2208      	movs	r2, #8
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	d01d      	beq.n	800cd06 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2209      	movs	r2, #9
 800ccd0:	4252      	negs	r2, r2
 800ccd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2204      	movs	r2, #4
 800ccd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	2203      	movs	r2, #3
 800cce2:	4013      	ands	r3, r2
 800cce4:	d004      	beq.n	800ccf0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	0018      	movs	r0, r3
 800ccea:	f000 f9a5 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800ccee:	e007      	b.n	800cd00 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	f000 f998 	bl	800d028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	f000 f9a4 	bl	800d048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2210      	movs	r2, #16
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	d022      	beq.n	800cd54 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2210      	movs	r2, #16
 800cd12:	4013      	ands	r3, r2
 800cd14:	d01e      	beq.n	800cd54 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2211      	movs	r2, #17
 800cd1c:	4252      	negs	r2, r2
 800cd1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2208      	movs	r2, #8
 800cd24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	69da      	ldr	r2, [r3, #28]
 800cd2c:	23c0      	movs	r3, #192	@ 0xc0
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4013      	ands	r3, r2
 800cd32:	d004      	beq.n	800cd3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	0018      	movs	r0, r3
 800cd38:	f000 f97e 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800cd3c:	e007      	b.n	800cd4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	0018      	movs	r0, r3
 800cd42:	f000 f971 	bl	800d028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	0018      	movs	r0, r3
 800cd4a:	f000 f97d 	bl	800d048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2201      	movs	r2, #1
 800cd58:	4013      	ands	r3, r2
 800cd5a:	d00c      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	4013      	ands	r3, r2
 800cd62:	d008      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2202      	movs	r2, #2
 800cd6a:	4252      	negs	r2, r2
 800cd6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	0018      	movs	r0, r3
 800cd72:	f000 f951 	bl	800d018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2280      	movs	r2, #128	@ 0x80
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	d104      	bne.n	800cd88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	2380      	movs	r3, #128	@ 0x80
 800cd82:	019b      	lsls	r3, r3, #6
 800cd84:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd86:	d00b      	beq.n	800cda0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2280      	movs	r2, #128	@ 0x80
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	d007      	beq.n	800cda0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a1e      	ldr	r2, [pc, #120]	@ (800ce10 <HAL_TIM_IRQHandler+0x208>)
 800cd96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	0018      	movs	r0, r3
 800cd9c:	f000 fdfe 	bl	800d99c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	2380      	movs	r3, #128	@ 0x80
 800cda4:	005b      	lsls	r3, r3, #1
 800cda6:	4013      	ands	r3, r2
 800cda8:	d00b      	beq.n	800cdc2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2280      	movs	r2, #128	@ 0x80
 800cdae:	4013      	ands	r3, r2
 800cdb0:	d007      	beq.n	800cdc2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a17      	ldr	r2, [pc, #92]	@ (800ce14 <HAL_TIM_IRQHandler+0x20c>)
 800cdb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f000 fdf5 	bl	800d9ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2240      	movs	r2, #64	@ 0x40
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	d00c      	beq.n	800cde4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2240      	movs	r2, #64	@ 0x40
 800cdce:	4013      	ands	r3, r2
 800cdd0:	d008      	beq.n	800cde4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2241      	movs	r2, #65	@ 0x41
 800cdd8:	4252      	negs	r2, r2
 800cdda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	0018      	movs	r0, r3
 800cde0:	f000 f93a 	bl	800d058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2220      	movs	r2, #32
 800cde8:	4013      	ands	r3, r2
 800cdea:	d00c      	beq.n	800ce06 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2220      	movs	r2, #32
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	d008      	beq.n	800ce06 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2221      	movs	r2, #33	@ 0x21
 800cdfa:	4252      	negs	r2, r2
 800cdfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	0018      	movs	r0, r3
 800ce02:	f000 fdc3 	bl	800d98c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce06:	46c0      	nop			@ (mov r8, r8)
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	b004      	add	sp, #16
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	46c0      	nop			@ (mov r8, r8)
 800ce10:	ffffdf7f 	.word	0xffffdf7f
 800ce14:	fffffeff 	.word	0xfffffeff

0800ce18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce24:	2317      	movs	r3, #23
 800ce26:	18fb      	adds	r3, r7, r3
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	223c      	movs	r2, #60	@ 0x3c
 800ce30:	5c9b      	ldrb	r3, [r3, r2]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d101      	bne.n	800ce3a <HAL_TIM_PWM_ConfigChannel+0x22>
 800ce36:	2302      	movs	r3, #2
 800ce38:	e0e5      	b.n	800d006 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	223c      	movs	r2, #60	@ 0x3c
 800ce3e:	2101      	movs	r1, #1
 800ce40:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b14      	cmp	r3, #20
 800ce46:	d900      	bls.n	800ce4a <HAL_TIM_PWM_ConfigChannel+0x32>
 800ce48:	e0d1      	b.n	800cfee <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	009a      	lsls	r2, r3, #2
 800ce4e:	4b70      	ldr	r3, [pc, #448]	@ (800d010 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800ce50:	18d3      	adds	r3, r2, r3
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	0011      	movs	r1, r2
 800ce5e:	0018      	movs	r0, r3
 800ce60:	f000 f99a 	bl	800d198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	699a      	ldr	r2, [r3, #24]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2108      	movs	r1, #8
 800ce70:	430a      	orrs	r2, r1
 800ce72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	699a      	ldr	r2, [r3, #24]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2104      	movs	r1, #4
 800ce80:	438a      	bics	r2, r1
 800ce82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6999      	ldr	r1, [r3, #24]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	691a      	ldr	r2, [r3, #16]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	619a      	str	r2, [r3, #24]
      break;
 800ce96:	e0af      	b.n	800cff8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	0011      	movs	r1, r2
 800cea0:	0018      	movs	r0, r3
 800cea2:	f000 fa03 	bl	800d2ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	699a      	ldr	r2, [r3, #24]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2180      	movs	r1, #128	@ 0x80
 800ceb2:	0109      	lsls	r1, r1, #4
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	699a      	ldr	r2, [r3, #24]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4954      	ldr	r1, [pc, #336]	@ (800d014 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800cec4:	400a      	ands	r2, r1
 800cec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6999      	ldr	r1, [r3, #24]
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	021a      	lsls	r2, r3, #8
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	430a      	orrs	r2, r1
 800ceda:	619a      	str	r2, [r3, #24]
      break;
 800cedc:	e08c      	b.n	800cff8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	0011      	movs	r1, r2
 800cee6:	0018      	movs	r0, r3
 800cee8:	f000 fa64 	bl	800d3b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	69da      	ldr	r2, [r3, #28]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2108      	movs	r1, #8
 800cef8:	430a      	orrs	r2, r1
 800cefa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69da      	ldr	r2, [r3, #28]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2104      	movs	r1, #4
 800cf08:	438a      	bics	r2, r1
 800cf0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	69d9      	ldr	r1, [r3, #28]
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	691a      	ldr	r2, [r3, #16]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	61da      	str	r2, [r3, #28]
      break;
 800cf1e:	e06b      	b.n	800cff8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	0011      	movs	r1, r2
 800cf28:	0018      	movs	r0, r3
 800cf2a:	f000 facb 	bl	800d4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	69da      	ldr	r2, [r3, #28]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2180      	movs	r1, #128	@ 0x80
 800cf3a:	0109      	lsls	r1, r1, #4
 800cf3c:	430a      	orrs	r2, r1
 800cf3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	69da      	ldr	r2, [r3, #28]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4932      	ldr	r1, [pc, #200]	@ (800d014 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800cf4c:	400a      	ands	r2, r1
 800cf4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	69d9      	ldr	r1, [r3, #28]
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	021a      	lsls	r2, r3, #8
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	430a      	orrs	r2, r1
 800cf62:	61da      	str	r2, [r3, #28]
      break;
 800cf64:	e048      	b.n	800cff8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	0011      	movs	r1, r2
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f000 fb12 	bl	800d598 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2108      	movs	r1, #8
 800cf80:	430a      	orrs	r2, r1
 800cf82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2104      	movs	r1, #4
 800cf90:	438a      	bics	r2, r1
 800cf92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	691a      	ldr	r2, [r3, #16]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cfa6:	e027      	b.n	800cff8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	0011      	movs	r1, r2
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	f000 fb51 	bl	800d658 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2180      	movs	r1, #128	@ 0x80
 800cfc2:	0109      	lsls	r1, r1, #4
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4910      	ldr	r1, [pc, #64]	@ (800d014 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800cfd4:	400a      	ands	r2, r1
 800cfd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	021a      	lsls	r2, r3, #8
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	430a      	orrs	r2, r1
 800cfea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cfec:	e004      	b.n	800cff8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800cfee:	2317      	movs	r3, #23
 800cff0:	18fb      	adds	r3, r7, r3
 800cff2:	2201      	movs	r2, #1
 800cff4:	701a      	strb	r2, [r3, #0]
      break;
 800cff6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	223c      	movs	r2, #60	@ 0x3c
 800cffc:	2100      	movs	r1, #0
 800cffe:	5499      	strb	r1, [r3, r2]

  return status;
 800d000:	2317      	movs	r3, #23
 800d002:	18fb      	adds	r3, r7, r3
 800d004:	781b      	ldrb	r3, [r3, #0]
}
 800d006:	0018      	movs	r0, r3
 800d008:	46bd      	mov	sp, r7
 800d00a:	b006      	add	sp, #24
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	46c0      	nop			@ (mov r8, r8)
 800d010:	08011a88 	.word	0x08011a88
 800d014:	fffffbff 	.word	0xfffffbff

0800d018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d020:	46c0      	nop			@ (mov r8, r8)
 800d022:	46bd      	mov	sp, r7
 800d024:	b002      	add	sp, #8
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d030:	46c0      	nop			@ (mov r8, r8)
 800d032:	46bd      	mov	sp, r7
 800d034:	b002      	add	sp, #8
 800d036:	bd80      	pop	{r7, pc}

0800d038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d040:	46c0      	nop			@ (mov r8, r8)
 800d042:	46bd      	mov	sp, r7
 800d044:	b002      	add	sp, #8
 800d046:	bd80      	pop	{r7, pc}

0800d048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d050:	46c0      	nop			@ (mov r8, r8)
 800d052:	46bd      	mov	sp, r7
 800d054:	b002      	add	sp, #8
 800d056:	bd80      	pop	{r7, pc}

0800d058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d060:	46c0      	nop			@ (mov r8, r8)
 800d062:	46bd      	mov	sp, r7
 800d064:	b002      	add	sp, #8
 800d066:	bd80      	pop	{r7, pc}

0800d068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a3f      	ldr	r2, [pc, #252]	@ (800d178 <TIM_Base_SetConfig+0x110>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d00c      	beq.n	800d09a <TIM_Base_SetConfig+0x32>
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	2380      	movs	r3, #128	@ 0x80
 800d084:	05db      	lsls	r3, r3, #23
 800d086:	429a      	cmp	r2, r3
 800d088:	d007      	beq.n	800d09a <TIM_Base_SetConfig+0x32>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a3b      	ldr	r2, [pc, #236]	@ (800d17c <TIM_Base_SetConfig+0x114>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d003      	beq.n	800d09a <TIM_Base_SetConfig+0x32>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a3a      	ldr	r2, [pc, #232]	@ (800d180 <TIM_Base_SetConfig+0x118>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d108      	bne.n	800d0ac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2270      	movs	r2, #112	@ 0x70
 800d09e:	4393      	bics	r3, r2
 800d0a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a32      	ldr	r2, [pc, #200]	@ (800d178 <TIM_Base_SetConfig+0x110>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d01c      	beq.n	800d0ee <TIM_Base_SetConfig+0x86>
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	2380      	movs	r3, #128	@ 0x80
 800d0b8:	05db      	lsls	r3, r3, #23
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d017      	beq.n	800d0ee <TIM_Base_SetConfig+0x86>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a2e      	ldr	r2, [pc, #184]	@ (800d17c <TIM_Base_SetConfig+0x114>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d013      	beq.n	800d0ee <TIM_Base_SetConfig+0x86>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a2d      	ldr	r2, [pc, #180]	@ (800d180 <TIM_Base_SetConfig+0x118>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d00f      	beq.n	800d0ee <TIM_Base_SetConfig+0x86>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a2c      	ldr	r2, [pc, #176]	@ (800d184 <TIM_Base_SetConfig+0x11c>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d00b      	beq.n	800d0ee <TIM_Base_SetConfig+0x86>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a2b      	ldr	r2, [pc, #172]	@ (800d188 <TIM_Base_SetConfig+0x120>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d007      	beq.n	800d0ee <TIM_Base_SetConfig+0x86>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a2a      	ldr	r2, [pc, #168]	@ (800d18c <TIM_Base_SetConfig+0x124>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d003      	beq.n	800d0ee <TIM_Base_SetConfig+0x86>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a29      	ldr	r2, [pc, #164]	@ (800d190 <TIM_Base_SetConfig+0x128>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d108      	bne.n	800d100 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4a28      	ldr	r2, [pc, #160]	@ (800d194 <TIM_Base_SetConfig+0x12c>)
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2280      	movs	r2, #128	@ 0x80
 800d104:	4393      	bics	r3, r2
 800d106:	001a      	movs	r2, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	695b      	ldr	r3, [r3, #20]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	689a      	ldr	r2, [r3, #8]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a13      	ldr	r2, [pc, #76]	@ (800d178 <TIM_Base_SetConfig+0x110>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d00b      	beq.n	800d146 <TIM_Base_SetConfig+0xde>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a15      	ldr	r2, [pc, #84]	@ (800d188 <TIM_Base_SetConfig+0x120>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d007      	beq.n	800d146 <TIM_Base_SetConfig+0xde>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4a14      	ldr	r2, [pc, #80]	@ (800d18c <TIM_Base_SetConfig+0x124>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d003      	beq.n	800d146 <TIM_Base_SetConfig+0xde>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a13      	ldr	r2, [pc, #76]	@ (800d190 <TIM_Base_SetConfig+0x128>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d103      	bne.n	800d14e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	691a      	ldr	r2, [r3, #16]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2201      	movs	r2, #1
 800d152:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	2201      	movs	r2, #1
 800d15a:	4013      	ands	r3, r2
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d106      	bne.n	800d16e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	2201      	movs	r2, #1
 800d166:	4393      	bics	r3, r2
 800d168:	001a      	movs	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	611a      	str	r2, [r3, #16]
  }
}
 800d16e:	46c0      	nop			@ (mov r8, r8)
 800d170:	46bd      	mov	sp, r7
 800d172:	b004      	add	sp, #16
 800d174:	bd80      	pop	{r7, pc}
 800d176:	46c0      	nop			@ (mov r8, r8)
 800d178:	40012c00 	.word	0x40012c00
 800d17c:	40000400 	.word	0x40000400
 800d180:	40000800 	.word	0x40000800
 800d184:	40002000 	.word	0x40002000
 800d188:	40014000 	.word	0x40014000
 800d18c:	40014400 	.word	0x40014400
 800d190:	40014800 	.word	0x40014800
 800d194:	fffffcff 	.word	0xfffffcff

0800d198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a1b      	ldr	r3, [r3, #32]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	4393      	bics	r3, r2
 800d1b0:	001a      	movs	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4a32      	ldr	r2, [pc, #200]	@ (800d290 <TIM_OC1_SetConfig+0xf8>)
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2203      	movs	r2, #3
 800d1ce:	4393      	bics	r3, r2
 800d1d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	4393      	bics	r3, r2
 800d1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a28      	ldr	r2, [pc, #160]	@ (800d294 <TIM_OC1_SetConfig+0xfc>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d00b      	beq.n	800d20e <TIM_OC1_SetConfig+0x76>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a27      	ldr	r2, [pc, #156]	@ (800d298 <TIM_OC1_SetConfig+0x100>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d007      	beq.n	800d20e <TIM_OC1_SetConfig+0x76>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a26      	ldr	r2, [pc, #152]	@ (800d29c <TIM_OC1_SetConfig+0x104>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d003      	beq.n	800d20e <TIM_OC1_SetConfig+0x76>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a25      	ldr	r2, [pc, #148]	@ (800d2a0 <TIM_OC1_SetConfig+0x108>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d10c      	bne.n	800d228 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2208      	movs	r2, #8
 800d212:	4393      	bics	r3, r2
 800d214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2204      	movs	r2, #4
 800d224:	4393      	bics	r3, r2
 800d226:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4a1a      	ldr	r2, [pc, #104]	@ (800d294 <TIM_OC1_SetConfig+0xfc>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d00b      	beq.n	800d248 <TIM_OC1_SetConfig+0xb0>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a19      	ldr	r2, [pc, #100]	@ (800d298 <TIM_OC1_SetConfig+0x100>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d007      	beq.n	800d248 <TIM_OC1_SetConfig+0xb0>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a18      	ldr	r2, [pc, #96]	@ (800d29c <TIM_OC1_SetConfig+0x104>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d003      	beq.n	800d248 <TIM_OC1_SetConfig+0xb0>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a17      	ldr	r2, [pc, #92]	@ (800d2a0 <TIM_OC1_SetConfig+0x108>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d111      	bne.n	800d26c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	4a16      	ldr	r2, [pc, #88]	@ (800d2a4 <TIM_OC1_SetConfig+0x10c>)
 800d24c:	4013      	ands	r3, r2
 800d24e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	4a15      	ldr	r2, [pc, #84]	@ (800d2a8 <TIM_OC1_SetConfig+0x110>)
 800d254:	4013      	ands	r3, r2
 800d256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	4313      	orrs	r3, r2
 800d260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	693a      	ldr	r2, [r7, #16]
 800d268:	4313      	orrs	r3, r2
 800d26a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	693a      	ldr	r2, [r7, #16]
 800d270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	621a      	str	r2, [r3, #32]
}
 800d286:	46c0      	nop			@ (mov r8, r8)
 800d288:	46bd      	mov	sp, r7
 800d28a:	b006      	add	sp, #24
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	46c0      	nop			@ (mov r8, r8)
 800d290:	fffeff8f 	.word	0xfffeff8f
 800d294:	40012c00 	.word	0x40012c00
 800d298:	40014000 	.word	0x40014000
 800d29c:	40014400 	.word	0x40014400
 800d2a0:	40014800 	.word	0x40014800
 800d2a4:	fffffeff 	.word	0xfffffeff
 800d2a8:	fffffdff 	.word	0xfffffdff

0800d2ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a1b      	ldr	r3, [r3, #32]
 800d2c0:	2210      	movs	r2, #16
 800d2c2:	4393      	bics	r3, r2
 800d2c4:	001a      	movs	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	4a2e      	ldr	r2, [pc, #184]	@ (800d394 <TIM_OC2_SetConfig+0xe8>)
 800d2da:	4013      	ands	r3, r2
 800d2dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d398 <TIM_OC2_SetConfig+0xec>)
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	021b      	lsls	r3, r3, #8
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	2220      	movs	r2, #32
 800d2f6:	4393      	bics	r3, r2
 800d2f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	697a      	ldr	r2, [r7, #20]
 800d302:	4313      	orrs	r3, r2
 800d304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a24      	ldr	r2, [pc, #144]	@ (800d39c <TIM_OC2_SetConfig+0xf0>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d10d      	bne.n	800d32a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2280      	movs	r2, #128	@ 0x80
 800d312:	4393      	bics	r3, r2
 800d314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	011b      	lsls	r3, r3, #4
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	4313      	orrs	r3, r2
 800d320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2240      	movs	r2, #64	@ 0x40
 800d326:	4393      	bics	r3, r2
 800d328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a1b      	ldr	r2, [pc, #108]	@ (800d39c <TIM_OC2_SetConfig+0xf0>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d00b      	beq.n	800d34a <TIM_OC2_SetConfig+0x9e>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a1a      	ldr	r2, [pc, #104]	@ (800d3a0 <TIM_OC2_SetConfig+0xf4>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d007      	beq.n	800d34a <TIM_OC2_SetConfig+0x9e>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a19      	ldr	r2, [pc, #100]	@ (800d3a4 <TIM_OC2_SetConfig+0xf8>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d003      	beq.n	800d34a <TIM_OC2_SetConfig+0x9e>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a18      	ldr	r2, [pc, #96]	@ (800d3a8 <TIM_OC2_SetConfig+0xfc>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d113      	bne.n	800d372 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	4a17      	ldr	r2, [pc, #92]	@ (800d3ac <TIM_OC2_SetConfig+0x100>)
 800d34e:	4013      	ands	r3, r2
 800d350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	4a16      	ldr	r2, [pc, #88]	@ (800d3b0 <TIM_OC2_SetConfig+0x104>)
 800d356:	4013      	ands	r3, r2
 800d358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	693a      	ldr	r2, [r7, #16]
 800d362:	4313      	orrs	r3, r2
 800d364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	4313      	orrs	r3, r2
 800d370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	621a      	str	r2, [r3, #32]
}
 800d38c:	46c0      	nop			@ (mov r8, r8)
 800d38e:	46bd      	mov	sp, r7
 800d390:	b006      	add	sp, #24
 800d392:	bd80      	pop	{r7, pc}
 800d394:	feff8fff 	.word	0xfeff8fff
 800d398:	fffffcff 	.word	0xfffffcff
 800d39c:	40012c00 	.word	0x40012c00
 800d3a0:	40014000 	.word	0x40014000
 800d3a4:	40014400 	.word	0x40014400
 800d3a8:	40014800 	.word	0x40014800
 800d3ac:	fffffbff 	.word	0xfffffbff
 800d3b0:	fffff7ff 	.word	0xfffff7ff

0800d3b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a1b      	ldr	r3, [r3, #32]
 800d3c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a1b      	ldr	r3, [r3, #32]
 800d3c8:	4a33      	ldr	r2, [pc, #204]	@ (800d498 <TIM_OC3_SetConfig+0xe4>)
 800d3ca:	401a      	ands	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	69db      	ldr	r3, [r3, #28]
 800d3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4a2f      	ldr	r2, [pc, #188]	@ (800d49c <TIM_OC3_SetConfig+0xe8>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2203      	movs	r2, #3
 800d3e8:	4393      	bics	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	4a29      	ldr	r2, [pc, #164]	@ (800d4a0 <TIM_OC3_SetConfig+0xec>)
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	4313      	orrs	r3, r2
 800d408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a25      	ldr	r2, [pc, #148]	@ (800d4a4 <TIM_OC3_SetConfig+0xf0>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d10d      	bne.n	800d42e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	4a24      	ldr	r2, [pc, #144]	@ (800d4a8 <TIM_OC3_SetConfig+0xf4>)
 800d416:	4013      	ands	r3, r2
 800d418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	697a      	ldr	r2, [r7, #20]
 800d422:	4313      	orrs	r3, r2
 800d424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	4a20      	ldr	r2, [pc, #128]	@ (800d4ac <TIM_OC3_SetConfig+0xf8>)
 800d42a:	4013      	ands	r3, r2
 800d42c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a1c      	ldr	r2, [pc, #112]	@ (800d4a4 <TIM_OC3_SetConfig+0xf0>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d00b      	beq.n	800d44e <TIM_OC3_SetConfig+0x9a>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a1d      	ldr	r2, [pc, #116]	@ (800d4b0 <TIM_OC3_SetConfig+0xfc>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d007      	beq.n	800d44e <TIM_OC3_SetConfig+0x9a>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a1c      	ldr	r2, [pc, #112]	@ (800d4b4 <TIM_OC3_SetConfig+0x100>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d003      	beq.n	800d44e <TIM_OC3_SetConfig+0x9a>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a1b      	ldr	r2, [pc, #108]	@ (800d4b8 <TIM_OC3_SetConfig+0x104>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d113      	bne.n	800d476 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	4a1a      	ldr	r2, [pc, #104]	@ (800d4bc <TIM_OC3_SetConfig+0x108>)
 800d452:	4013      	ands	r3, r2
 800d454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	4a19      	ldr	r2, [pc, #100]	@ (800d4c0 <TIM_OC3_SetConfig+0x10c>)
 800d45a:	4013      	ands	r3, r2
 800d45c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	695b      	ldr	r3, [r3, #20]
 800d462:	011b      	lsls	r3, r3, #4
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	4313      	orrs	r3, r2
 800d468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	699b      	ldr	r3, [r3, #24]
 800d46e:	011b      	lsls	r3, r3, #4
 800d470:	693a      	ldr	r2, [r7, #16]
 800d472:	4313      	orrs	r3, r2
 800d474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	621a      	str	r2, [r3, #32]
}
 800d490:	46c0      	nop			@ (mov r8, r8)
 800d492:	46bd      	mov	sp, r7
 800d494:	b006      	add	sp, #24
 800d496:	bd80      	pop	{r7, pc}
 800d498:	fffffeff 	.word	0xfffffeff
 800d49c:	fffeff8f 	.word	0xfffeff8f
 800d4a0:	fffffdff 	.word	0xfffffdff
 800d4a4:	40012c00 	.word	0x40012c00
 800d4a8:	fffff7ff 	.word	0xfffff7ff
 800d4ac:	fffffbff 	.word	0xfffffbff
 800d4b0:	40014000 	.word	0x40014000
 800d4b4:	40014400 	.word	0x40014400
 800d4b8:	40014800 	.word	0x40014800
 800d4bc:	ffffefff 	.word	0xffffefff
 800d4c0:	ffffdfff 	.word	0xffffdfff

0800d4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a1b      	ldr	r3, [r3, #32]
 800d4d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a1b      	ldr	r3, [r3, #32]
 800d4d8:	4a26      	ldr	r2, [pc, #152]	@ (800d574 <TIM_OC4_SetConfig+0xb0>)
 800d4da:	401a      	ands	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	69db      	ldr	r3, [r3, #28]
 800d4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	4a22      	ldr	r2, [pc, #136]	@ (800d578 <TIM_OC4_SetConfig+0xb4>)
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	4a21      	ldr	r2, [pc, #132]	@ (800d57c <TIM_OC4_SetConfig+0xb8>)
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	021b      	lsls	r3, r3, #8
 800d502:	68fa      	ldr	r2, [r7, #12]
 800d504:	4313      	orrs	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	4a1d      	ldr	r2, [pc, #116]	@ (800d580 <TIM_OC4_SetConfig+0xbc>)
 800d50c:	4013      	ands	r3, r2
 800d50e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	031b      	lsls	r3, r3, #12
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	4313      	orrs	r3, r2
 800d51a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4a19      	ldr	r2, [pc, #100]	@ (800d584 <TIM_OC4_SetConfig+0xc0>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d00b      	beq.n	800d53c <TIM_OC4_SetConfig+0x78>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a18      	ldr	r2, [pc, #96]	@ (800d588 <TIM_OC4_SetConfig+0xc4>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d007      	beq.n	800d53c <TIM_OC4_SetConfig+0x78>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	4a17      	ldr	r2, [pc, #92]	@ (800d58c <TIM_OC4_SetConfig+0xc8>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d003      	beq.n	800d53c <TIM_OC4_SetConfig+0x78>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4a16      	ldr	r2, [pc, #88]	@ (800d590 <TIM_OC4_SetConfig+0xcc>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d109      	bne.n	800d550 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	4a15      	ldr	r2, [pc, #84]	@ (800d594 <TIM_OC4_SetConfig+0xd0>)
 800d540:	4013      	ands	r3, r2
 800d542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	695b      	ldr	r3, [r3, #20]
 800d548:	019b      	lsls	r3, r3, #6
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68fa      	ldr	r2, [r7, #12]
 800d55a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	621a      	str	r2, [r3, #32]
}
 800d56a:	46c0      	nop			@ (mov r8, r8)
 800d56c:	46bd      	mov	sp, r7
 800d56e:	b006      	add	sp, #24
 800d570:	bd80      	pop	{r7, pc}
 800d572:	46c0      	nop			@ (mov r8, r8)
 800d574:	ffffefff 	.word	0xffffefff
 800d578:	feff8fff 	.word	0xfeff8fff
 800d57c:	fffffcff 	.word	0xfffffcff
 800d580:	ffffdfff 	.word	0xffffdfff
 800d584:	40012c00 	.word	0x40012c00
 800d588:	40014000 	.word	0x40014000
 800d58c:	40014400 	.word	0x40014400
 800d590:	40014800 	.word	0x40014800
 800d594:	ffffbfff 	.word	0xffffbfff

0800d598 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	4a23      	ldr	r2, [pc, #140]	@ (800d63c <TIM_OC5_SetConfig+0xa4>)
 800d5ae:	401a      	ands	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	4a1f      	ldr	r2, [pc, #124]	@ (800d640 <TIM_OC5_SetConfig+0xa8>)
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	4a1b      	ldr	r2, [pc, #108]	@ (800d644 <TIM_OC5_SetConfig+0xac>)
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	041b      	lsls	r3, r3, #16
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a17      	ldr	r2, [pc, #92]	@ (800d648 <TIM_OC5_SetConfig+0xb0>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d00b      	beq.n	800d606 <TIM_OC5_SetConfig+0x6e>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a16      	ldr	r2, [pc, #88]	@ (800d64c <TIM_OC5_SetConfig+0xb4>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d007      	beq.n	800d606 <TIM_OC5_SetConfig+0x6e>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a15      	ldr	r2, [pc, #84]	@ (800d650 <TIM_OC5_SetConfig+0xb8>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d003      	beq.n	800d606 <TIM_OC5_SetConfig+0x6e>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	4a14      	ldr	r2, [pc, #80]	@ (800d654 <TIM_OC5_SetConfig+0xbc>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d109      	bne.n	800d61a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	4a0c      	ldr	r2, [pc, #48]	@ (800d63c <TIM_OC5_SetConfig+0xa4>)
 800d60a:	4013      	ands	r3, r2
 800d60c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	021b      	lsls	r3, r3, #8
 800d614:	697a      	ldr	r2, [r7, #20]
 800d616:	4313      	orrs	r3, r2
 800d618:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	693a      	ldr	r2, [r7, #16]
 800d632:	621a      	str	r2, [r3, #32]
}
 800d634:	46c0      	nop			@ (mov r8, r8)
 800d636:	46bd      	mov	sp, r7
 800d638:	b006      	add	sp, #24
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	fffeffff 	.word	0xfffeffff
 800d640:	fffeff8f 	.word	0xfffeff8f
 800d644:	fffdffff 	.word	0xfffdffff
 800d648:	40012c00 	.word	0x40012c00
 800d64c:	40014000 	.word	0x40014000
 800d650:	40014400 	.word	0x40014400
 800d654:	40014800 	.word	0x40014800

0800d658 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a1b      	ldr	r3, [r3, #32]
 800d666:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a1b      	ldr	r3, [r3, #32]
 800d66c:	4a24      	ldr	r2, [pc, #144]	@ (800d700 <TIM_OC6_SetConfig+0xa8>)
 800d66e:	401a      	ands	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	4a20      	ldr	r2, [pc, #128]	@ (800d704 <TIM_OC6_SetConfig+0xac>)
 800d684:	4013      	ands	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	021b      	lsls	r3, r3, #8
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	4313      	orrs	r3, r2
 800d692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	4a1c      	ldr	r2, [pc, #112]	@ (800d708 <TIM_OC6_SetConfig+0xb0>)
 800d698:	4013      	ands	r3, r2
 800d69a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	051b      	lsls	r3, r3, #20
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4a18      	ldr	r2, [pc, #96]	@ (800d70c <TIM_OC6_SetConfig+0xb4>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d00b      	beq.n	800d6c8 <TIM_OC6_SetConfig+0x70>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4a17      	ldr	r2, [pc, #92]	@ (800d710 <TIM_OC6_SetConfig+0xb8>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d007      	beq.n	800d6c8 <TIM_OC6_SetConfig+0x70>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a16      	ldr	r2, [pc, #88]	@ (800d714 <TIM_OC6_SetConfig+0xbc>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d003      	beq.n	800d6c8 <TIM_OC6_SetConfig+0x70>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a15      	ldr	r2, [pc, #84]	@ (800d718 <TIM_OC6_SetConfig+0xc0>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d109      	bne.n	800d6dc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	4a14      	ldr	r2, [pc, #80]	@ (800d71c <TIM_OC6_SetConfig+0xc4>)
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	695b      	ldr	r3, [r3, #20]
 800d6d4:	029b      	lsls	r3, r3, #10
 800d6d6:	697a      	ldr	r2, [r7, #20]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	621a      	str	r2, [r3, #32]
}
 800d6f6:	46c0      	nop			@ (mov r8, r8)
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	b006      	add	sp, #24
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	46c0      	nop			@ (mov r8, r8)
 800d700:	ffefffff 	.word	0xffefffff
 800d704:	feff8fff 	.word	0xfeff8fff
 800d708:	ffdfffff 	.word	0xffdfffff
 800d70c:	40012c00 	.word	0x40012c00
 800d710:	40014000 	.word	0x40014000
 800d714:	40014400 	.word	0x40014400
 800d718:	40014800 	.word	0x40014800
 800d71c:	fffbffff 	.word	0xfffbffff

0800d720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	221f      	movs	r2, #31
 800d730:	4013      	ands	r3, r2
 800d732:	2201      	movs	r2, #1
 800d734:	409a      	lsls	r2, r3
 800d736:	0013      	movs	r3, r2
 800d738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6a1b      	ldr	r3, [r3, #32]
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	43d2      	mvns	r2, r2
 800d742:	401a      	ands	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6a1a      	ldr	r2, [r3, #32]
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	211f      	movs	r1, #31
 800d750:	400b      	ands	r3, r1
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	4099      	lsls	r1, r3
 800d756:	000b      	movs	r3, r1
 800d758:	431a      	orrs	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	621a      	str	r2, [r3, #32]
}
 800d75e:	46c0      	nop			@ (mov r8, r8)
 800d760:	46bd      	mov	sp, r7
 800d762:	b006      	add	sp, #24
 800d764:	bd80      	pop	{r7, pc}
	...

0800d768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	223c      	movs	r2, #60	@ 0x3c
 800d776:	5c9b      	ldrb	r3, [r3, r2]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d101      	bne.n	800d780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d77c:	2302      	movs	r3, #2
 800d77e:	e05a      	b.n	800d836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	223c      	movs	r2, #60	@ 0x3c
 800d784:	2101      	movs	r1, #1
 800d786:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	223d      	movs	r2, #61	@ 0x3d
 800d78c:	2102      	movs	r1, #2
 800d78e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a26      	ldr	r2, [pc, #152]	@ (800d840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d108      	bne.n	800d7bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	4a25      	ldr	r2, [pc, #148]	@ (800d844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2270      	movs	r2, #112	@ 0x70
 800d7c0:	4393      	bics	r3, r2
 800d7c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a19      	ldr	r2, [pc, #100]	@ (800d840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d014      	beq.n	800d80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	2380      	movs	r3, #128	@ 0x80
 800d7e6:	05db      	lsls	r3, r3, #23
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d00e      	beq.n	800d80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a15      	ldr	r2, [pc, #84]	@ (800d848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d009      	beq.n	800d80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a14      	ldr	r2, [pc, #80]	@ (800d84c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d004      	beq.n	800d80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a12      	ldr	r2, [pc, #72]	@ (800d850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d10c      	bne.n	800d824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2280      	movs	r2, #128	@ 0x80
 800d80e:	4393      	bics	r3, r2
 800d810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	4313      	orrs	r3, r2
 800d81a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	223d      	movs	r2, #61	@ 0x3d
 800d828:	2101      	movs	r1, #1
 800d82a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	223c      	movs	r2, #60	@ 0x3c
 800d830:	2100      	movs	r1, #0
 800d832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	0018      	movs	r0, r3
 800d838:	46bd      	mov	sp, r7
 800d83a:	b004      	add	sp, #16
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	46c0      	nop			@ (mov r8, r8)
 800d840:	40012c00 	.word	0x40012c00
 800d844:	ff0fffff 	.word	0xff0fffff
 800d848:	40000400 	.word	0x40000400
 800d84c:	40000800 	.word	0x40000800
 800d850:	40014000 	.word	0x40014000

0800d854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d85e:	2300      	movs	r3, #0
 800d860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	223c      	movs	r2, #60	@ 0x3c
 800d866:	5c9b      	ldrb	r3, [r3, r2]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d101      	bne.n	800d870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d86c:	2302      	movs	r3, #2
 800d86e:	e06f      	b.n	800d950 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	223c      	movs	r2, #60	@ 0x3c
 800d874:	2101      	movs	r1, #1
 800d876:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	22ff      	movs	r2, #255	@ 0xff
 800d87c:	4393      	bics	r3, r2
 800d87e:	001a      	movs	r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	4313      	orrs	r3, r2
 800d886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	4a33      	ldr	r2, [pc, #204]	@ (800d958 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800d88c:	401a      	ands	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	4313      	orrs	r3, r2
 800d894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4a30      	ldr	r2, [pc, #192]	@ (800d95c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800d89a:	401a      	ands	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	4a2e      	ldr	r2, [pc, #184]	@ (800d960 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800d8a8:	401a      	ands	r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4a2b      	ldr	r2, [pc, #172]	@ (800d964 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800d8b6:	401a      	ands	r2, r3
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4a29      	ldr	r2, [pc, #164]	@ (800d968 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d8c4:	401a      	ands	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	4a26      	ldr	r2, [pc, #152]	@ (800d96c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800d8d2:	401a      	ands	r2, r3
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	4a24      	ldr	r2, [pc, #144]	@ (800d970 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d8e0:	401a      	ands	r2, r3
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	699b      	ldr	r3, [r3, #24]
 800d8e6:	041b      	lsls	r3, r3, #16
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	4a21      	ldr	r2, [pc, #132]	@ (800d974 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d8f0:	401a      	ands	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a1e      	ldr	r2, [pc, #120]	@ (800d978 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d11c      	bne.n	800d93e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	4a1d      	ldr	r2, [pc, #116]	@ (800d97c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800d908:	401a      	ands	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d90e:	051b      	lsls	r3, r3, #20
 800d910:	4313      	orrs	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4a1a      	ldr	r2, [pc, #104]	@ (800d980 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800d918:	401a      	ands	r2, r3
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	4313      	orrs	r3, r2
 800d920:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	4a17      	ldr	r2, [pc, #92]	@ (800d984 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800d926:	401a      	ands	r2, r3
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d92c:	4313      	orrs	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	4a15      	ldr	r2, [pc, #84]	@ (800d988 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d934:	401a      	ands	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93a:	4313      	orrs	r3, r2
 800d93c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	223c      	movs	r2, #60	@ 0x3c
 800d94a:	2100      	movs	r1, #0
 800d94c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	0018      	movs	r0, r3
 800d952:	46bd      	mov	sp, r7
 800d954:	b004      	add	sp, #16
 800d956:	bd80      	pop	{r7, pc}
 800d958:	fffffcff 	.word	0xfffffcff
 800d95c:	fffffbff 	.word	0xfffffbff
 800d960:	fffff7ff 	.word	0xfffff7ff
 800d964:	ffffefff 	.word	0xffffefff
 800d968:	ffffdfff 	.word	0xffffdfff
 800d96c:	ffffbfff 	.word	0xffffbfff
 800d970:	fff0ffff 	.word	0xfff0ffff
 800d974:	efffffff 	.word	0xefffffff
 800d978:	40012c00 	.word	0x40012c00
 800d97c:	ff0fffff 	.word	0xff0fffff
 800d980:	feffffff 	.word	0xfeffffff
 800d984:	fdffffff 	.word	0xfdffffff
 800d988:	dfffffff 	.word	0xdfffffff

0800d98c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d994:	46c0      	nop			@ (mov r8, r8)
 800d996:	46bd      	mov	sp, r7
 800d998:	b002      	add	sp, #8
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9a4:	46c0      	nop			@ (mov r8, r8)
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	b002      	add	sp, #8
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d9b4:	46c0      	nop			@ (mov r8, r8)
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	b002      	add	sp, #8
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e046      	b.n	800da5c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2288      	movs	r2, #136	@ 0x88
 800d9d2:	589b      	ldr	r3, [r3, r2]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d107      	bne.n	800d9e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2284      	movs	r2, #132	@ 0x84
 800d9dc:	2100      	movs	r1, #0
 800d9de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	0018      	movs	r0, r3
 800d9e4:	f7fa fcea 	bl	80083bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2288      	movs	r2, #136	@ 0x88
 800d9ec:	2124      	movs	r1, #36	@ 0x24
 800d9ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	438a      	bics	r2, r1
 800d9fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	0018      	movs	r0, r3
 800da0c:	f000 fec4 	bl	800e798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	0018      	movs	r0, r3
 800da14:	f000 fb6a 	bl	800e0ec <UART_SetConfig>
 800da18:	0003      	movs	r3, r0
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d101      	bne.n	800da22 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	e01c      	b.n	800da5c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	685a      	ldr	r2, [r3, #4]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	490d      	ldr	r1, [pc, #52]	@ (800da64 <HAL_UART_Init+0xa8>)
 800da2e:	400a      	ands	r2, r1
 800da30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	689a      	ldr	r2, [r3, #8]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	212a      	movs	r1, #42	@ 0x2a
 800da3e:	438a      	bics	r2, r1
 800da40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2101      	movs	r1, #1
 800da4e:	430a      	orrs	r2, r1
 800da50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	0018      	movs	r0, r3
 800da56:	f000 ff53 	bl	800e900 <UART_CheckIdleState>
 800da5a:	0003      	movs	r3, r0
}
 800da5c:	0018      	movs	r0, r3
 800da5e:	46bd      	mov	sp, r7
 800da60:	b002      	add	sp, #8
 800da62:	bd80      	pop	{r7, pc}
 800da64:	ffffb7ff 	.word	0xffffb7ff

0800da68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da68:	b5b0      	push	{r4, r5, r7, lr}
 800da6a:	b0aa      	sub	sp, #168	@ 0xa8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	22a4      	movs	r2, #164	@ 0xa4
 800da78:	18b9      	adds	r1, r7, r2
 800da7a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	20a0      	movs	r0, #160	@ 0xa0
 800da84:	1839      	adds	r1, r7, r0
 800da86:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	249c      	movs	r4, #156	@ 0x9c
 800da90:	1939      	adds	r1, r7, r4
 800da92:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da94:	0011      	movs	r1, r2
 800da96:	18bb      	adds	r3, r7, r2
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4aa2      	ldr	r2, [pc, #648]	@ (800dd24 <HAL_UART_IRQHandler+0x2bc>)
 800da9c:	4013      	ands	r3, r2
 800da9e:	2298      	movs	r2, #152	@ 0x98
 800daa0:	18bd      	adds	r5, r7, r2
 800daa2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800daa4:	18bb      	adds	r3, r7, r2
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d11a      	bne.n	800dae2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800daac:	187b      	adds	r3, r7, r1
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2220      	movs	r2, #32
 800dab2:	4013      	ands	r3, r2
 800dab4:	d015      	beq.n	800dae2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dab6:	183b      	adds	r3, r7, r0
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2220      	movs	r2, #32
 800dabc:	4013      	ands	r3, r2
 800dabe:	d105      	bne.n	800dacc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dac0:	193b      	adds	r3, r7, r4
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	2380      	movs	r3, #128	@ 0x80
 800dac6:	055b      	lsls	r3, r3, #21
 800dac8:	4013      	ands	r3, r2
 800daca:	d00a      	beq.n	800dae2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d100      	bne.n	800dad6 <HAL_UART_IRQHandler+0x6e>
 800dad4:	e2dc      	b.n	800e090 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	0010      	movs	r0, r2
 800dade:	4798      	blx	r3
      }
      return;
 800dae0:	e2d6      	b.n	800e090 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dae2:	2398      	movs	r3, #152	@ 0x98
 800dae4:	18fb      	adds	r3, r7, r3
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d100      	bne.n	800daee <HAL_UART_IRQHandler+0x86>
 800daec:	e122      	b.n	800dd34 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800daee:	239c      	movs	r3, #156	@ 0x9c
 800daf0:	18fb      	adds	r3, r7, r3
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a8c      	ldr	r2, [pc, #560]	@ (800dd28 <HAL_UART_IRQHandler+0x2c0>)
 800daf6:	4013      	ands	r3, r2
 800daf8:	d106      	bne.n	800db08 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dafa:	23a0      	movs	r3, #160	@ 0xa0
 800dafc:	18fb      	adds	r3, r7, r3
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a8a      	ldr	r2, [pc, #552]	@ (800dd2c <HAL_UART_IRQHandler+0x2c4>)
 800db02:	4013      	ands	r3, r2
 800db04:	d100      	bne.n	800db08 <HAL_UART_IRQHandler+0xa0>
 800db06:	e115      	b.n	800dd34 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db08:	23a4      	movs	r3, #164	@ 0xa4
 800db0a:	18fb      	adds	r3, r7, r3
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2201      	movs	r2, #1
 800db10:	4013      	ands	r3, r2
 800db12:	d012      	beq.n	800db3a <HAL_UART_IRQHandler+0xd2>
 800db14:	23a0      	movs	r3, #160	@ 0xa0
 800db16:	18fb      	adds	r3, r7, r3
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	2380      	movs	r3, #128	@ 0x80
 800db1c:	005b      	lsls	r3, r3, #1
 800db1e:	4013      	ands	r3, r2
 800db20:	d00b      	beq.n	800db3a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2201      	movs	r2, #1
 800db28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2290      	movs	r2, #144	@ 0x90
 800db2e:	589b      	ldr	r3, [r3, r2]
 800db30:	2201      	movs	r2, #1
 800db32:	431a      	orrs	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2190      	movs	r1, #144	@ 0x90
 800db38:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db3a:	23a4      	movs	r3, #164	@ 0xa4
 800db3c:	18fb      	adds	r3, r7, r3
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2202      	movs	r2, #2
 800db42:	4013      	ands	r3, r2
 800db44:	d011      	beq.n	800db6a <HAL_UART_IRQHandler+0x102>
 800db46:	239c      	movs	r3, #156	@ 0x9c
 800db48:	18fb      	adds	r3, r7, r3
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2201      	movs	r2, #1
 800db4e:	4013      	ands	r3, r2
 800db50:	d00b      	beq.n	800db6a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2202      	movs	r2, #2
 800db58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2290      	movs	r2, #144	@ 0x90
 800db5e:	589b      	ldr	r3, [r3, r2]
 800db60:	2204      	movs	r2, #4
 800db62:	431a      	orrs	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2190      	movs	r1, #144	@ 0x90
 800db68:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db6a:	23a4      	movs	r3, #164	@ 0xa4
 800db6c:	18fb      	adds	r3, r7, r3
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2204      	movs	r2, #4
 800db72:	4013      	ands	r3, r2
 800db74:	d011      	beq.n	800db9a <HAL_UART_IRQHandler+0x132>
 800db76:	239c      	movs	r3, #156	@ 0x9c
 800db78:	18fb      	adds	r3, r7, r3
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2201      	movs	r2, #1
 800db7e:	4013      	ands	r3, r2
 800db80:	d00b      	beq.n	800db9a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2204      	movs	r2, #4
 800db88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2290      	movs	r2, #144	@ 0x90
 800db8e:	589b      	ldr	r3, [r3, r2]
 800db90:	2202      	movs	r2, #2
 800db92:	431a      	orrs	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2190      	movs	r1, #144	@ 0x90
 800db98:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800db9a:	23a4      	movs	r3, #164	@ 0xa4
 800db9c:	18fb      	adds	r3, r7, r3
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2208      	movs	r2, #8
 800dba2:	4013      	ands	r3, r2
 800dba4:	d017      	beq.n	800dbd6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dba6:	23a0      	movs	r3, #160	@ 0xa0
 800dba8:	18fb      	adds	r3, r7, r3
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2220      	movs	r2, #32
 800dbae:	4013      	ands	r3, r2
 800dbb0:	d105      	bne.n	800dbbe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dbb2:	239c      	movs	r3, #156	@ 0x9c
 800dbb4:	18fb      	adds	r3, r7, r3
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a5b      	ldr	r2, [pc, #364]	@ (800dd28 <HAL_UART_IRQHandler+0x2c0>)
 800dbba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dbbc:	d00b      	beq.n	800dbd6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2208      	movs	r2, #8
 800dbc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2290      	movs	r2, #144	@ 0x90
 800dbca:	589b      	ldr	r3, [r3, r2]
 800dbcc:	2208      	movs	r2, #8
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2190      	movs	r1, #144	@ 0x90
 800dbd4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dbd6:	23a4      	movs	r3, #164	@ 0xa4
 800dbd8:	18fb      	adds	r3, r7, r3
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	2380      	movs	r3, #128	@ 0x80
 800dbde:	011b      	lsls	r3, r3, #4
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	d013      	beq.n	800dc0c <HAL_UART_IRQHandler+0x1a4>
 800dbe4:	23a0      	movs	r3, #160	@ 0xa0
 800dbe6:	18fb      	adds	r3, r7, r3
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	2380      	movs	r3, #128	@ 0x80
 800dbec:	04db      	lsls	r3, r3, #19
 800dbee:	4013      	ands	r3, r2
 800dbf0:	d00c      	beq.n	800dc0c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2280      	movs	r2, #128	@ 0x80
 800dbf8:	0112      	lsls	r2, r2, #4
 800dbfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2290      	movs	r2, #144	@ 0x90
 800dc00:	589b      	ldr	r3, [r3, r2]
 800dc02:	2220      	movs	r2, #32
 800dc04:	431a      	orrs	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2190      	movs	r1, #144	@ 0x90
 800dc0a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2290      	movs	r2, #144	@ 0x90
 800dc10:	589b      	ldr	r3, [r3, r2]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d100      	bne.n	800dc18 <HAL_UART_IRQHandler+0x1b0>
 800dc16:	e23d      	b.n	800e094 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc18:	23a4      	movs	r3, #164	@ 0xa4
 800dc1a:	18fb      	adds	r3, r7, r3
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2220      	movs	r2, #32
 800dc20:	4013      	ands	r3, r2
 800dc22:	d015      	beq.n	800dc50 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc24:	23a0      	movs	r3, #160	@ 0xa0
 800dc26:	18fb      	adds	r3, r7, r3
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2220      	movs	r2, #32
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	d106      	bne.n	800dc3e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc30:	239c      	movs	r3, #156	@ 0x9c
 800dc32:	18fb      	adds	r3, r7, r3
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	2380      	movs	r3, #128	@ 0x80
 800dc38:	055b      	lsls	r3, r3, #21
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	d008      	beq.n	800dc50 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d004      	beq.n	800dc50 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	0010      	movs	r0, r2
 800dc4e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2290      	movs	r2, #144	@ 0x90
 800dc54:	589b      	ldr	r3, [r3, r2]
 800dc56:	2194      	movs	r1, #148	@ 0x94
 800dc58:	187a      	adds	r2, r7, r1
 800dc5a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	2240      	movs	r2, #64	@ 0x40
 800dc64:	4013      	ands	r3, r2
 800dc66:	2b40      	cmp	r3, #64	@ 0x40
 800dc68:	d004      	beq.n	800dc74 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dc6a:	187b      	adds	r3, r7, r1
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2228      	movs	r2, #40	@ 0x28
 800dc70:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc72:	d04c      	beq.n	800dd0e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	0018      	movs	r0, r3
 800dc78:	f000 ff5c 	bl	800eb34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	2240      	movs	r2, #64	@ 0x40
 800dc84:	4013      	ands	r3, r2
 800dc86:	2b40      	cmp	r3, #64	@ 0x40
 800dc88:	d13c      	bne.n	800dd04 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc8a:	f3ef 8310 	mrs	r3, PRIMASK
 800dc8e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800dc90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc92:	2090      	movs	r0, #144	@ 0x90
 800dc94:	183a      	adds	r2, r7, r0
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	2301      	movs	r3, #1
 800dc9a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc9e:	f383 8810 	msr	PRIMASK, r3
}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689a      	ldr	r2, [r3, #8]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2140      	movs	r1, #64	@ 0x40
 800dcb0:	438a      	bics	r2, r1
 800dcb2:	609a      	str	r2, [r3, #8]
 800dcb4:	183b      	adds	r3, r7, r0
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcbc:	f383 8810 	msr	PRIMASK, r3
}
 800dcc0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2280      	movs	r2, #128	@ 0x80
 800dcc6:	589b      	ldr	r3, [r3, r2]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d016      	beq.n	800dcfa <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2280      	movs	r2, #128	@ 0x80
 800dcd0:	589b      	ldr	r3, [r3, r2]
 800dcd2:	4a17      	ldr	r2, [pc, #92]	@ (800dd30 <HAL_UART_IRQHandler+0x2c8>)
 800dcd4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2280      	movs	r2, #128	@ 0x80
 800dcda:	589b      	ldr	r3, [r3, r2]
 800dcdc:	0018      	movs	r0, r3
 800dcde:	f7fc f8bf 	bl	8009e60 <HAL_DMA_Abort_IT>
 800dce2:	1e03      	subs	r3, r0, #0
 800dce4:	d01c      	beq.n	800dd20 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2280      	movs	r2, #128	@ 0x80
 800dcea:	589b      	ldr	r3, [r3, r2]
 800dcec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	2180      	movs	r1, #128	@ 0x80
 800dcf2:	5852      	ldr	r2, [r2, r1]
 800dcf4:	0010      	movs	r0, r2
 800dcf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcf8:	e012      	b.n	800dd20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	0018      	movs	r0, r3
 800dcfe:	f000 f9e1 	bl	800e0c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd02:	e00d      	b.n	800dd20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	0018      	movs	r0, r3
 800dd08:	f000 f9dc 	bl	800e0c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd0c:	e008      	b.n	800dd20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	0018      	movs	r0, r3
 800dd12:	f000 f9d7 	bl	800e0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2290      	movs	r2, #144	@ 0x90
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800dd1e:	e1b9      	b.n	800e094 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd20:	46c0      	nop			@ (mov r8, r8)
    return;
 800dd22:	e1b7      	b.n	800e094 <HAL_UART_IRQHandler+0x62c>
 800dd24:	0000080f 	.word	0x0000080f
 800dd28:	10000001 	.word	0x10000001
 800dd2c:	04000120 	.word	0x04000120
 800dd30:	0800ec01 	.word	0x0800ec01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d000      	beq.n	800dd3e <HAL_UART_IRQHandler+0x2d6>
 800dd3c:	e13e      	b.n	800dfbc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dd3e:	23a4      	movs	r3, #164	@ 0xa4
 800dd40:	18fb      	adds	r3, r7, r3
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2210      	movs	r2, #16
 800dd46:	4013      	ands	r3, r2
 800dd48:	d100      	bne.n	800dd4c <HAL_UART_IRQHandler+0x2e4>
 800dd4a:	e137      	b.n	800dfbc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dd4c:	23a0      	movs	r3, #160	@ 0xa0
 800dd4e:	18fb      	adds	r3, r7, r3
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2210      	movs	r2, #16
 800dd54:	4013      	ands	r3, r2
 800dd56:	d100      	bne.n	800dd5a <HAL_UART_IRQHandler+0x2f2>
 800dd58:	e130      	b.n	800dfbc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2210      	movs	r2, #16
 800dd60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	2240      	movs	r2, #64	@ 0x40
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	2b40      	cmp	r3, #64	@ 0x40
 800dd6e:	d000      	beq.n	800dd72 <HAL_UART_IRQHandler+0x30a>
 800dd70:	e0a4      	b.n	800debc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2280      	movs	r2, #128	@ 0x80
 800dd76:	589b      	ldr	r3, [r3, r2]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	217e      	movs	r1, #126	@ 0x7e
 800dd7e:	187b      	adds	r3, r7, r1
 800dd80:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800dd82:	187b      	adds	r3, r7, r1
 800dd84:	881b      	ldrh	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d100      	bne.n	800dd8c <HAL_UART_IRQHandler+0x324>
 800dd8a:	e185      	b.n	800e098 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	225c      	movs	r2, #92	@ 0x5c
 800dd90:	5a9b      	ldrh	r3, [r3, r2]
 800dd92:	187a      	adds	r2, r7, r1
 800dd94:	8812      	ldrh	r2, [r2, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d300      	bcc.n	800dd9c <HAL_UART_IRQHandler+0x334>
 800dd9a:	e17d      	b.n	800e098 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	187a      	adds	r2, r7, r1
 800dda0:	215e      	movs	r1, #94	@ 0x5e
 800dda2:	8812      	ldrh	r2, [r2, #0]
 800dda4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2280      	movs	r2, #128	@ 0x80
 800ddaa:	589b      	ldr	r3, [r3, r2]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2220      	movs	r2, #32
 800ddb2:	4013      	ands	r3, r2
 800ddb4:	d170      	bne.n	800de98 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddb6:	f3ef 8310 	mrs	r3, PRIMASK
 800ddba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc6:	f383 8810 	msr	PRIMASK, r3
}
 800ddca:	46c0      	nop			@ (mov r8, r8)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	49b4      	ldr	r1, [pc, #720]	@ (800e0a8 <HAL_UART_IRQHandler+0x640>)
 800ddd8:	400a      	ands	r2, r1
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddde:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde2:	f383 8810 	msr	PRIMASK, r3
}
 800dde6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dde8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ddee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddf0:	677b      	str	r3, [r7, #116]	@ 0x74
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddf8:	f383 8810 	msr	PRIMASK, r3
}
 800ddfc:	46c0      	nop			@ (mov r8, r8)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2101      	movs	r1, #1
 800de0a:	438a      	bics	r2, r1
 800de0c:	609a      	str	r2, [r3, #8]
 800de0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de10:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de14:	f383 8810 	msr	PRIMASK, r3
}
 800de18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de1a:	f3ef 8310 	mrs	r3, PRIMASK
 800de1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800de20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de22:	673b      	str	r3, [r7, #112]	@ 0x70
 800de24:	2301      	movs	r3, #1
 800de26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de2a:	f383 8810 	msr	PRIMASK, r3
}
 800de2e:	46c0      	nop			@ (mov r8, r8)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	689a      	ldr	r2, [r3, #8]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2140      	movs	r1, #64	@ 0x40
 800de3c:	438a      	bics	r2, r1
 800de3e:	609a      	str	r2, [r3, #8]
 800de40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de42:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de46:	f383 8810 	msr	PRIMASK, r3
}
 800de4a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	228c      	movs	r2, #140	@ 0x8c
 800de50:	2120      	movs	r1, #32
 800de52:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de5a:	f3ef 8310 	mrs	r3, PRIMASK
 800de5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800de60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800de64:	2301      	movs	r3, #1
 800de66:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de6a:	f383 8810 	msr	PRIMASK, r3
}
 800de6e:	46c0      	nop			@ (mov r8, r8)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2110      	movs	r1, #16
 800de7c:	438a      	bics	r2, r1
 800de7e:	601a      	str	r2, [r3, #0]
 800de80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de86:	f383 8810 	msr	PRIMASK, r3
}
 800de8a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2280      	movs	r2, #128	@ 0x80
 800de90:	589b      	ldr	r3, [r3, r2]
 800de92:	0018      	movs	r0, r3
 800de94:	f7fb ff84 	bl	8009da0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2202      	movs	r2, #2
 800de9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	225c      	movs	r2, #92	@ 0x5c
 800dea2:	5a9a      	ldrh	r2, [r3, r2]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	215e      	movs	r1, #94	@ 0x5e
 800dea8:	5a5b      	ldrh	r3, [r3, r1]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	b29a      	uxth	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	0011      	movs	r1, r2
 800deb4:	0018      	movs	r0, r3
 800deb6:	f000 f90d 	bl	800e0d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800deba:	e0ed      	b.n	800e098 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	225c      	movs	r2, #92	@ 0x5c
 800dec0:	5a99      	ldrh	r1, [r3, r2]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	225e      	movs	r2, #94	@ 0x5e
 800dec6:	5a9b      	ldrh	r3, [r3, r2]
 800dec8:	b29a      	uxth	r2, r3
 800deca:	208e      	movs	r0, #142	@ 0x8e
 800decc:	183b      	adds	r3, r7, r0
 800dece:	1a8a      	subs	r2, r1, r2
 800ded0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	225e      	movs	r2, #94	@ 0x5e
 800ded6:	5a9b      	ldrh	r3, [r3, r2]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d100      	bne.n	800dee0 <HAL_UART_IRQHandler+0x478>
 800dede:	e0dd      	b.n	800e09c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800dee0:	183b      	adds	r3, r7, r0
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d100      	bne.n	800deea <HAL_UART_IRQHandler+0x482>
 800dee8:	e0d8      	b.n	800e09c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deea:	f3ef 8310 	mrs	r3, PRIMASK
 800deee:	60fb      	str	r3, [r7, #12]
  return(result);
 800def0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800def2:	2488      	movs	r4, #136	@ 0x88
 800def4:	193a      	adds	r2, r7, r4
 800def6:	6013      	str	r3, [r2, #0]
 800def8:	2301      	movs	r3, #1
 800defa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	f383 8810 	msr	PRIMASK, r3
}
 800df02:	46c0      	nop			@ (mov r8, r8)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4967      	ldr	r1, [pc, #412]	@ (800e0ac <HAL_UART_IRQHandler+0x644>)
 800df10:	400a      	ands	r2, r1
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	193b      	adds	r3, r7, r4
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	f383 8810 	msr	PRIMASK, r3
}
 800df20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df22:	f3ef 8310 	mrs	r3, PRIMASK
 800df26:	61bb      	str	r3, [r7, #24]
  return(result);
 800df28:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df2a:	2484      	movs	r4, #132	@ 0x84
 800df2c:	193a      	adds	r2, r7, r4
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	2301      	movs	r3, #1
 800df32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	f383 8810 	msr	PRIMASK, r3
}
 800df3a:	46c0      	nop			@ (mov r8, r8)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	689a      	ldr	r2, [r3, #8]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	495a      	ldr	r1, [pc, #360]	@ (800e0b0 <HAL_UART_IRQHandler+0x648>)
 800df48:	400a      	ands	r2, r1
 800df4a:	609a      	str	r2, [r3, #8]
 800df4c:	193b      	adds	r3, r7, r4
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df52:	6a3b      	ldr	r3, [r7, #32]
 800df54:	f383 8810 	msr	PRIMASK, r3
}
 800df58:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	228c      	movs	r2, #140	@ 0x8c
 800df5e:	2120      	movs	r1, #32
 800df60:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df6e:	f3ef 8310 	mrs	r3, PRIMASK
 800df72:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800df74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df76:	2480      	movs	r4, #128	@ 0x80
 800df78:	193a      	adds	r2, r7, r4
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	2301      	movs	r3, #1
 800df7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df82:	f383 8810 	msr	PRIMASK, r3
}
 800df86:	46c0      	nop			@ (mov r8, r8)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2110      	movs	r1, #16
 800df94:	438a      	bics	r2, r1
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	193b      	adds	r3, r7, r4
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa0:	f383 8810 	msr	PRIMASK, r3
}
 800dfa4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfac:	183b      	adds	r3, r7, r0
 800dfae:	881a      	ldrh	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	0011      	movs	r1, r2
 800dfb4:	0018      	movs	r0, r3
 800dfb6:	f000 f88d 	bl	800e0d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfba:	e06f      	b.n	800e09c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dfbc:	23a4      	movs	r3, #164	@ 0xa4
 800dfbe:	18fb      	adds	r3, r7, r3
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	2380      	movs	r3, #128	@ 0x80
 800dfc4:	035b      	lsls	r3, r3, #13
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	d010      	beq.n	800dfec <HAL_UART_IRQHandler+0x584>
 800dfca:	239c      	movs	r3, #156	@ 0x9c
 800dfcc:	18fb      	adds	r3, r7, r3
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	2380      	movs	r3, #128	@ 0x80
 800dfd2:	03db      	lsls	r3, r3, #15
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	d009      	beq.n	800dfec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2280      	movs	r2, #128	@ 0x80
 800dfde:	0352      	lsls	r2, r2, #13
 800dfe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	0018      	movs	r0, r3
 800dfe6:	f000 fe4e 	bl	800ec86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dfea:	e05a      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dfec:	23a4      	movs	r3, #164	@ 0xa4
 800dfee:	18fb      	adds	r3, r7, r3
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2280      	movs	r2, #128	@ 0x80
 800dff4:	4013      	ands	r3, r2
 800dff6:	d016      	beq.n	800e026 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dff8:	23a0      	movs	r3, #160	@ 0xa0
 800dffa:	18fb      	adds	r3, r7, r3
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2280      	movs	r2, #128	@ 0x80
 800e000:	4013      	ands	r3, r2
 800e002:	d106      	bne.n	800e012 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e004:	239c      	movs	r3, #156	@ 0x9c
 800e006:	18fb      	adds	r3, r7, r3
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	2380      	movs	r3, #128	@ 0x80
 800e00c:	041b      	lsls	r3, r3, #16
 800e00e:	4013      	ands	r3, r2
 800e010:	d009      	beq.n	800e026 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e016:	2b00      	cmp	r3, #0
 800e018:	d042      	beq.n	800e0a0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	0010      	movs	r0, r2
 800e022:	4798      	blx	r3
    }
    return;
 800e024:	e03c      	b.n	800e0a0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e026:	23a4      	movs	r3, #164	@ 0xa4
 800e028:	18fb      	adds	r3, r7, r3
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2240      	movs	r2, #64	@ 0x40
 800e02e:	4013      	ands	r3, r2
 800e030:	d00a      	beq.n	800e048 <HAL_UART_IRQHandler+0x5e0>
 800e032:	23a0      	movs	r3, #160	@ 0xa0
 800e034:	18fb      	adds	r3, r7, r3
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2240      	movs	r2, #64	@ 0x40
 800e03a:	4013      	ands	r3, r2
 800e03c:	d004      	beq.n	800e048 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	0018      	movs	r0, r3
 800e042:	f000 fdf4 	bl	800ec2e <UART_EndTransmit_IT>
    return;
 800e046:	e02c      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e048:	23a4      	movs	r3, #164	@ 0xa4
 800e04a:	18fb      	adds	r3, r7, r3
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	2380      	movs	r3, #128	@ 0x80
 800e050:	041b      	lsls	r3, r3, #16
 800e052:	4013      	ands	r3, r2
 800e054:	d00b      	beq.n	800e06e <HAL_UART_IRQHandler+0x606>
 800e056:	23a0      	movs	r3, #160	@ 0xa0
 800e058:	18fb      	adds	r3, r7, r3
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	2380      	movs	r3, #128	@ 0x80
 800e05e:	05db      	lsls	r3, r3, #23
 800e060:	4013      	ands	r3, r2
 800e062:	d004      	beq.n	800e06e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	0018      	movs	r0, r3
 800e068:	f000 fe1d 	bl	800eca6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e06c:	e019      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e06e:	23a4      	movs	r3, #164	@ 0xa4
 800e070:	18fb      	adds	r3, r7, r3
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	2380      	movs	r3, #128	@ 0x80
 800e076:	045b      	lsls	r3, r3, #17
 800e078:	4013      	ands	r3, r2
 800e07a:	d012      	beq.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
 800e07c:	23a0      	movs	r3, #160	@ 0xa0
 800e07e:	18fb      	adds	r3, r7, r3
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	da0d      	bge.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	0018      	movs	r0, r3
 800e08a:	f000 fe04 	bl	800ec96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e08e:	e008      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
      return;
 800e090:	46c0      	nop			@ (mov r8, r8)
 800e092:	e006      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
    return;
 800e094:	46c0      	nop			@ (mov r8, r8)
 800e096:	e004      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
      return;
 800e098:	46c0      	nop			@ (mov r8, r8)
 800e09a:	e002      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
      return;
 800e09c:	46c0      	nop			@ (mov r8, r8)
 800e09e:	e000      	b.n	800e0a2 <HAL_UART_IRQHandler+0x63a>
    return;
 800e0a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	b02a      	add	sp, #168	@ 0xa8
 800e0a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e0a8:	fffffeff 	.word	0xfffffeff
 800e0ac:	fffffedf 	.word	0xfffffedf
 800e0b0:	effffffe 	.word	0xeffffffe

0800e0b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e0bc:	46c0      	nop			@ (mov r8, r8)
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	b002      	add	sp, #8
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e0cc:	46c0      	nop			@ (mov r8, r8)
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	b002      	add	sp, #8
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	000a      	movs	r2, r1
 800e0de:	1cbb      	adds	r3, r7, #2
 800e0e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0e2:	46c0      	nop			@ (mov r8, r8)
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	b002      	add	sp, #8
 800e0e8:	bd80      	pop	{r7, pc}
	...

0800e0ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0ec:	b5b0      	push	{r4, r5, r7, lr}
 800e0ee:	b090      	sub	sp, #64	@ 0x40
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0f4:	231a      	movs	r3, #26
 800e0f6:	2220      	movs	r2, #32
 800e0f8:	189b      	adds	r3, r3, r2
 800e0fa:	19db      	adds	r3, r3, r7
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e102:	689a      	ldr	r2, [r3, #8]
 800e104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	431a      	orrs	r2, r3
 800e10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	431a      	orrs	r2, r3
 800e110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e112:	69db      	ldr	r3, [r3, #28]
 800e114:	4313      	orrs	r3, r2
 800e116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4ac1      	ldr	r2, [pc, #772]	@ (800e424 <UART_SetConfig+0x338>)
 800e120:	4013      	ands	r3, r2
 800e122:	0019      	movs	r1, r3
 800e124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e12a:	430b      	orrs	r3, r1
 800e12c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	4abc      	ldr	r2, [pc, #752]	@ (800e428 <UART_SetConfig+0x33c>)
 800e136:	4013      	ands	r3, r2
 800e138:	0018      	movs	r0, r3
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	68d9      	ldr	r1, [r3, #12]
 800e13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	0003      	movs	r3, r0
 800e144:	430b      	orrs	r3, r1
 800e146:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4ab6      	ldr	r2, [pc, #728]	@ (800e42c <UART_SetConfig+0x340>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d009      	beq.n	800e16c <UART_SetConfig+0x80>
 800e158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4ab4      	ldr	r2, [pc, #720]	@ (800e430 <UART_SetConfig+0x344>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d004      	beq.n	800e16c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e164:	6a1b      	ldr	r3, [r3, #32]
 800e166:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e168:	4313      	orrs	r3, r2
 800e16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	4ab0      	ldr	r2, [pc, #704]	@ (800e434 <UART_SetConfig+0x348>)
 800e174:	4013      	ands	r3, r2
 800e176:	0019      	movs	r1, r3
 800e178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e17e:	430b      	orrs	r3, r1
 800e180:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e188:	220f      	movs	r2, #15
 800e18a:	4393      	bics	r3, r2
 800e18c:	0018      	movs	r0, r3
 800e18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e190:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	0003      	movs	r3, r0
 800e198:	430b      	orrs	r3, r1
 800e19a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4aa5      	ldr	r2, [pc, #660]	@ (800e438 <UART_SetConfig+0x34c>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d131      	bne.n	800e20a <UART_SetConfig+0x11e>
 800e1a6:	4ba5      	ldr	r3, [pc, #660]	@ (800e43c <UART_SetConfig+0x350>)
 800e1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1aa:	2203      	movs	r2, #3
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d01d      	beq.n	800e1ee <UART_SetConfig+0x102>
 800e1b2:	d823      	bhi.n	800e1fc <UART_SetConfig+0x110>
 800e1b4:	2b02      	cmp	r3, #2
 800e1b6:	d00c      	beq.n	800e1d2 <UART_SetConfig+0xe6>
 800e1b8:	d820      	bhi.n	800e1fc <UART_SetConfig+0x110>
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <UART_SetConfig+0xd8>
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d00e      	beq.n	800e1e0 <UART_SetConfig+0xf4>
 800e1c2:	e01b      	b.n	800e1fc <UART_SetConfig+0x110>
 800e1c4:	231b      	movs	r3, #27
 800e1c6:	2220      	movs	r2, #32
 800e1c8:	189b      	adds	r3, r3, r2
 800e1ca:	19db      	adds	r3, r3, r7
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	701a      	strb	r2, [r3, #0]
 800e1d0:	e154      	b.n	800e47c <UART_SetConfig+0x390>
 800e1d2:	231b      	movs	r3, #27
 800e1d4:	2220      	movs	r2, #32
 800e1d6:	189b      	adds	r3, r3, r2
 800e1d8:	19db      	adds	r3, r3, r7
 800e1da:	2202      	movs	r2, #2
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	e14d      	b.n	800e47c <UART_SetConfig+0x390>
 800e1e0:	231b      	movs	r3, #27
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	189b      	adds	r3, r3, r2
 800e1e6:	19db      	adds	r3, r3, r7
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	701a      	strb	r2, [r3, #0]
 800e1ec:	e146      	b.n	800e47c <UART_SetConfig+0x390>
 800e1ee:	231b      	movs	r3, #27
 800e1f0:	2220      	movs	r2, #32
 800e1f2:	189b      	adds	r3, r3, r2
 800e1f4:	19db      	adds	r3, r3, r7
 800e1f6:	2208      	movs	r2, #8
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	e13f      	b.n	800e47c <UART_SetConfig+0x390>
 800e1fc:	231b      	movs	r3, #27
 800e1fe:	2220      	movs	r2, #32
 800e200:	189b      	adds	r3, r3, r2
 800e202:	19db      	adds	r3, r3, r7
 800e204:	2210      	movs	r2, #16
 800e206:	701a      	strb	r2, [r3, #0]
 800e208:	e138      	b.n	800e47c <UART_SetConfig+0x390>
 800e20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a8c      	ldr	r2, [pc, #560]	@ (800e440 <UART_SetConfig+0x354>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d131      	bne.n	800e278 <UART_SetConfig+0x18c>
 800e214:	4b89      	ldr	r3, [pc, #548]	@ (800e43c <UART_SetConfig+0x350>)
 800e216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e218:	220c      	movs	r2, #12
 800e21a:	4013      	ands	r3, r2
 800e21c:	2b0c      	cmp	r3, #12
 800e21e:	d01d      	beq.n	800e25c <UART_SetConfig+0x170>
 800e220:	d823      	bhi.n	800e26a <UART_SetConfig+0x17e>
 800e222:	2b08      	cmp	r3, #8
 800e224:	d00c      	beq.n	800e240 <UART_SetConfig+0x154>
 800e226:	d820      	bhi.n	800e26a <UART_SetConfig+0x17e>
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <UART_SetConfig+0x146>
 800e22c:	2b04      	cmp	r3, #4
 800e22e:	d00e      	beq.n	800e24e <UART_SetConfig+0x162>
 800e230:	e01b      	b.n	800e26a <UART_SetConfig+0x17e>
 800e232:	231b      	movs	r3, #27
 800e234:	2220      	movs	r2, #32
 800e236:	189b      	adds	r3, r3, r2
 800e238:	19db      	adds	r3, r3, r7
 800e23a:	2200      	movs	r2, #0
 800e23c:	701a      	strb	r2, [r3, #0]
 800e23e:	e11d      	b.n	800e47c <UART_SetConfig+0x390>
 800e240:	231b      	movs	r3, #27
 800e242:	2220      	movs	r2, #32
 800e244:	189b      	adds	r3, r3, r2
 800e246:	19db      	adds	r3, r3, r7
 800e248:	2202      	movs	r2, #2
 800e24a:	701a      	strb	r2, [r3, #0]
 800e24c:	e116      	b.n	800e47c <UART_SetConfig+0x390>
 800e24e:	231b      	movs	r3, #27
 800e250:	2220      	movs	r2, #32
 800e252:	189b      	adds	r3, r3, r2
 800e254:	19db      	adds	r3, r3, r7
 800e256:	2204      	movs	r2, #4
 800e258:	701a      	strb	r2, [r3, #0]
 800e25a:	e10f      	b.n	800e47c <UART_SetConfig+0x390>
 800e25c:	231b      	movs	r3, #27
 800e25e:	2220      	movs	r2, #32
 800e260:	189b      	adds	r3, r3, r2
 800e262:	19db      	adds	r3, r3, r7
 800e264:	2208      	movs	r2, #8
 800e266:	701a      	strb	r2, [r3, #0]
 800e268:	e108      	b.n	800e47c <UART_SetConfig+0x390>
 800e26a:	231b      	movs	r3, #27
 800e26c:	2220      	movs	r2, #32
 800e26e:	189b      	adds	r3, r3, r2
 800e270:	19db      	adds	r3, r3, r7
 800e272:	2210      	movs	r2, #16
 800e274:	701a      	strb	r2, [r3, #0]
 800e276:	e101      	b.n	800e47c <UART_SetConfig+0x390>
 800e278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a71      	ldr	r2, [pc, #452]	@ (800e444 <UART_SetConfig+0x358>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d131      	bne.n	800e2e6 <UART_SetConfig+0x1fa>
 800e282:	4b6e      	ldr	r3, [pc, #440]	@ (800e43c <UART_SetConfig+0x350>)
 800e284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e286:	2230      	movs	r2, #48	@ 0x30
 800e288:	4013      	ands	r3, r2
 800e28a:	2b30      	cmp	r3, #48	@ 0x30
 800e28c:	d01d      	beq.n	800e2ca <UART_SetConfig+0x1de>
 800e28e:	d823      	bhi.n	800e2d8 <UART_SetConfig+0x1ec>
 800e290:	2b20      	cmp	r3, #32
 800e292:	d00c      	beq.n	800e2ae <UART_SetConfig+0x1c2>
 800e294:	d820      	bhi.n	800e2d8 <UART_SetConfig+0x1ec>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <UART_SetConfig+0x1b4>
 800e29a:	2b10      	cmp	r3, #16
 800e29c:	d00e      	beq.n	800e2bc <UART_SetConfig+0x1d0>
 800e29e:	e01b      	b.n	800e2d8 <UART_SetConfig+0x1ec>
 800e2a0:	231b      	movs	r3, #27
 800e2a2:	2220      	movs	r2, #32
 800e2a4:	189b      	adds	r3, r3, r2
 800e2a6:	19db      	adds	r3, r3, r7
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	701a      	strb	r2, [r3, #0]
 800e2ac:	e0e6      	b.n	800e47c <UART_SetConfig+0x390>
 800e2ae:	231b      	movs	r3, #27
 800e2b0:	2220      	movs	r2, #32
 800e2b2:	189b      	adds	r3, r3, r2
 800e2b4:	19db      	adds	r3, r3, r7
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	701a      	strb	r2, [r3, #0]
 800e2ba:	e0df      	b.n	800e47c <UART_SetConfig+0x390>
 800e2bc:	231b      	movs	r3, #27
 800e2be:	2220      	movs	r2, #32
 800e2c0:	189b      	adds	r3, r3, r2
 800e2c2:	19db      	adds	r3, r3, r7
 800e2c4:	2204      	movs	r2, #4
 800e2c6:	701a      	strb	r2, [r3, #0]
 800e2c8:	e0d8      	b.n	800e47c <UART_SetConfig+0x390>
 800e2ca:	231b      	movs	r3, #27
 800e2cc:	2220      	movs	r2, #32
 800e2ce:	189b      	adds	r3, r3, r2
 800e2d0:	19db      	adds	r3, r3, r7
 800e2d2:	2208      	movs	r2, #8
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	e0d1      	b.n	800e47c <UART_SetConfig+0x390>
 800e2d8:	231b      	movs	r3, #27
 800e2da:	2220      	movs	r2, #32
 800e2dc:	189b      	adds	r3, r3, r2
 800e2de:	19db      	adds	r3, r3, r7
 800e2e0:	2210      	movs	r2, #16
 800e2e2:	701a      	strb	r2, [r3, #0]
 800e2e4:	e0ca      	b.n	800e47c <UART_SetConfig+0x390>
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4a57      	ldr	r2, [pc, #348]	@ (800e448 <UART_SetConfig+0x35c>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d106      	bne.n	800e2fe <UART_SetConfig+0x212>
 800e2f0:	231b      	movs	r3, #27
 800e2f2:	2220      	movs	r2, #32
 800e2f4:	189b      	adds	r3, r3, r2
 800e2f6:	19db      	adds	r3, r3, r7
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	701a      	strb	r2, [r3, #0]
 800e2fc:	e0be      	b.n	800e47c <UART_SetConfig+0x390>
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a52      	ldr	r2, [pc, #328]	@ (800e44c <UART_SetConfig+0x360>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d106      	bne.n	800e316 <UART_SetConfig+0x22a>
 800e308:	231b      	movs	r3, #27
 800e30a:	2220      	movs	r2, #32
 800e30c:	189b      	adds	r3, r3, r2
 800e30e:	19db      	adds	r3, r3, r7
 800e310:	2200      	movs	r2, #0
 800e312:	701a      	strb	r2, [r3, #0]
 800e314:	e0b2      	b.n	800e47c <UART_SetConfig+0x390>
 800e316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a4d      	ldr	r2, [pc, #308]	@ (800e450 <UART_SetConfig+0x364>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d106      	bne.n	800e32e <UART_SetConfig+0x242>
 800e320:	231b      	movs	r3, #27
 800e322:	2220      	movs	r2, #32
 800e324:	189b      	adds	r3, r3, r2
 800e326:	19db      	adds	r3, r3, r7
 800e328:	2200      	movs	r2, #0
 800e32a:	701a      	strb	r2, [r3, #0]
 800e32c:	e0a6      	b.n	800e47c <UART_SetConfig+0x390>
 800e32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a3e      	ldr	r2, [pc, #248]	@ (800e42c <UART_SetConfig+0x340>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d13e      	bne.n	800e3b6 <UART_SetConfig+0x2ca>
 800e338:	4b40      	ldr	r3, [pc, #256]	@ (800e43c <UART_SetConfig+0x350>)
 800e33a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e33c:	23c0      	movs	r3, #192	@ 0xc0
 800e33e:	011b      	lsls	r3, r3, #4
 800e340:	4013      	ands	r3, r2
 800e342:	22c0      	movs	r2, #192	@ 0xc0
 800e344:	0112      	lsls	r2, r2, #4
 800e346:	4293      	cmp	r3, r2
 800e348:	d027      	beq.n	800e39a <UART_SetConfig+0x2ae>
 800e34a:	22c0      	movs	r2, #192	@ 0xc0
 800e34c:	0112      	lsls	r2, r2, #4
 800e34e:	4293      	cmp	r3, r2
 800e350:	d82a      	bhi.n	800e3a8 <UART_SetConfig+0x2bc>
 800e352:	2280      	movs	r2, #128	@ 0x80
 800e354:	0112      	lsls	r2, r2, #4
 800e356:	4293      	cmp	r3, r2
 800e358:	d011      	beq.n	800e37e <UART_SetConfig+0x292>
 800e35a:	2280      	movs	r2, #128	@ 0x80
 800e35c:	0112      	lsls	r2, r2, #4
 800e35e:	4293      	cmp	r3, r2
 800e360:	d822      	bhi.n	800e3a8 <UART_SetConfig+0x2bc>
 800e362:	2b00      	cmp	r3, #0
 800e364:	d004      	beq.n	800e370 <UART_SetConfig+0x284>
 800e366:	2280      	movs	r2, #128	@ 0x80
 800e368:	00d2      	lsls	r2, r2, #3
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d00e      	beq.n	800e38c <UART_SetConfig+0x2a0>
 800e36e:	e01b      	b.n	800e3a8 <UART_SetConfig+0x2bc>
 800e370:	231b      	movs	r3, #27
 800e372:	2220      	movs	r2, #32
 800e374:	189b      	adds	r3, r3, r2
 800e376:	19db      	adds	r3, r3, r7
 800e378:	2200      	movs	r2, #0
 800e37a:	701a      	strb	r2, [r3, #0]
 800e37c:	e07e      	b.n	800e47c <UART_SetConfig+0x390>
 800e37e:	231b      	movs	r3, #27
 800e380:	2220      	movs	r2, #32
 800e382:	189b      	adds	r3, r3, r2
 800e384:	19db      	adds	r3, r3, r7
 800e386:	2202      	movs	r2, #2
 800e388:	701a      	strb	r2, [r3, #0]
 800e38a:	e077      	b.n	800e47c <UART_SetConfig+0x390>
 800e38c:	231b      	movs	r3, #27
 800e38e:	2220      	movs	r2, #32
 800e390:	189b      	adds	r3, r3, r2
 800e392:	19db      	adds	r3, r3, r7
 800e394:	2204      	movs	r2, #4
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	e070      	b.n	800e47c <UART_SetConfig+0x390>
 800e39a:	231b      	movs	r3, #27
 800e39c:	2220      	movs	r2, #32
 800e39e:	189b      	adds	r3, r3, r2
 800e3a0:	19db      	adds	r3, r3, r7
 800e3a2:	2208      	movs	r2, #8
 800e3a4:	701a      	strb	r2, [r3, #0]
 800e3a6:	e069      	b.n	800e47c <UART_SetConfig+0x390>
 800e3a8:	231b      	movs	r3, #27
 800e3aa:	2220      	movs	r2, #32
 800e3ac:	189b      	adds	r3, r3, r2
 800e3ae:	19db      	adds	r3, r3, r7
 800e3b0:	2210      	movs	r2, #16
 800e3b2:	701a      	strb	r2, [r3, #0]
 800e3b4:	e062      	b.n	800e47c <UART_SetConfig+0x390>
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a1d      	ldr	r2, [pc, #116]	@ (800e430 <UART_SetConfig+0x344>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d157      	bne.n	800e470 <UART_SetConfig+0x384>
 800e3c0:	4b1e      	ldr	r3, [pc, #120]	@ (800e43c <UART_SetConfig+0x350>)
 800e3c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3c4:	23c0      	movs	r3, #192	@ 0xc0
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	22c0      	movs	r2, #192	@ 0xc0
 800e3cc:	0092      	lsls	r2, r2, #2
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d040      	beq.n	800e454 <UART_SetConfig+0x368>
 800e3d2:	22c0      	movs	r2, #192	@ 0xc0
 800e3d4:	0092      	lsls	r2, r2, #2
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d843      	bhi.n	800e462 <UART_SetConfig+0x376>
 800e3da:	2280      	movs	r2, #128	@ 0x80
 800e3dc:	0092      	lsls	r2, r2, #2
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d011      	beq.n	800e406 <UART_SetConfig+0x31a>
 800e3e2:	2280      	movs	r2, #128	@ 0x80
 800e3e4:	0092      	lsls	r2, r2, #2
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d83b      	bhi.n	800e462 <UART_SetConfig+0x376>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d004      	beq.n	800e3f8 <UART_SetConfig+0x30c>
 800e3ee:	2280      	movs	r2, #128	@ 0x80
 800e3f0:	0052      	lsls	r2, r2, #1
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d00e      	beq.n	800e414 <UART_SetConfig+0x328>
 800e3f6:	e034      	b.n	800e462 <UART_SetConfig+0x376>
 800e3f8:	231b      	movs	r3, #27
 800e3fa:	2220      	movs	r2, #32
 800e3fc:	189b      	adds	r3, r3, r2
 800e3fe:	19db      	adds	r3, r3, r7
 800e400:	2200      	movs	r2, #0
 800e402:	701a      	strb	r2, [r3, #0]
 800e404:	e03a      	b.n	800e47c <UART_SetConfig+0x390>
 800e406:	231b      	movs	r3, #27
 800e408:	2220      	movs	r2, #32
 800e40a:	189b      	adds	r3, r3, r2
 800e40c:	19db      	adds	r3, r3, r7
 800e40e:	2202      	movs	r2, #2
 800e410:	701a      	strb	r2, [r3, #0]
 800e412:	e033      	b.n	800e47c <UART_SetConfig+0x390>
 800e414:	231b      	movs	r3, #27
 800e416:	2220      	movs	r2, #32
 800e418:	189b      	adds	r3, r3, r2
 800e41a:	19db      	adds	r3, r3, r7
 800e41c:	2204      	movs	r2, #4
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e02c      	b.n	800e47c <UART_SetConfig+0x390>
 800e422:	46c0      	nop			@ (mov r8, r8)
 800e424:	cfff69f3 	.word	0xcfff69f3
 800e428:	ffffcfff 	.word	0xffffcfff
 800e42c:	40008000 	.word	0x40008000
 800e430:	40008400 	.word	0x40008400
 800e434:	11fff4ff 	.word	0x11fff4ff
 800e438:	40013800 	.word	0x40013800
 800e43c:	40021000 	.word	0x40021000
 800e440:	40004400 	.word	0x40004400
 800e444:	40004800 	.word	0x40004800
 800e448:	40004c00 	.word	0x40004c00
 800e44c:	40005000 	.word	0x40005000
 800e450:	40013c00 	.word	0x40013c00
 800e454:	231b      	movs	r3, #27
 800e456:	2220      	movs	r2, #32
 800e458:	189b      	adds	r3, r3, r2
 800e45a:	19db      	adds	r3, r3, r7
 800e45c:	2208      	movs	r2, #8
 800e45e:	701a      	strb	r2, [r3, #0]
 800e460:	e00c      	b.n	800e47c <UART_SetConfig+0x390>
 800e462:	231b      	movs	r3, #27
 800e464:	2220      	movs	r2, #32
 800e466:	189b      	adds	r3, r3, r2
 800e468:	19db      	adds	r3, r3, r7
 800e46a:	2210      	movs	r2, #16
 800e46c:	701a      	strb	r2, [r3, #0]
 800e46e:	e005      	b.n	800e47c <UART_SetConfig+0x390>
 800e470:	231b      	movs	r3, #27
 800e472:	2220      	movs	r2, #32
 800e474:	189b      	adds	r3, r3, r2
 800e476:	19db      	adds	r3, r3, r7
 800e478:	2210      	movs	r2, #16
 800e47a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4ac1      	ldr	r2, [pc, #772]	@ (800e788 <UART_SetConfig+0x69c>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d005      	beq.n	800e492 <UART_SetConfig+0x3a6>
 800e486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4ac0      	ldr	r2, [pc, #768]	@ (800e78c <UART_SetConfig+0x6a0>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d000      	beq.n	800e492 <UART_SetConfig+0x3a6>
 800e490:	e093      	b.n	800e5ba <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e492:	231b      	movs	r3, #27
 800e494:	2220      	movs	r2, #32
 800e496:	189b      	adds	r3, r3, r2
 800e498:	19db      	adds	r3, r3, r7
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2b08      	cmp	r3, #8
 800e49e:	d015      	beq.n	800e4cc <UART_SetConfig+0x3e0>
 800e4a0:	dc18      	bgt.n	800e4d4 <UART_SetConfig+0x3e8>
 800e4a2:	2b04      	cmp	r3, #4
 800e4a4:	d00d      	beq.n	800e4c2 <UART_SetConfig+0x3d6>
 800e4a6:	dc15      	bgt.n	800e4d4 <UART_SetConfig+0x3e8>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <UART_SetConfig+0x3c6>
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d005      	beq.n	800e4bc <UART_SetConfig+0x3d0>
 800e4b0:	e010      	b.n	800e4d4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4b2:	f7fd fe07 	bl	800c0c4 <HAL_RCC_GetPCLK1Freq>
 800e4b6:	0003      	movs	r3, r0
 800e4b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4ba:	e014      	b.n	800e4e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e4bc:	4bb4      	ldr	r3, [pc, #720]	@ (800e790 <UART_SetConfig+0x6a4>)
 800e4be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4c0:	e011      	b.n	800e4e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e4c2:	f7fd fd73 	bl	800bfac <HAL_RCC_GetSysClockFreq>
 800e4c6:	0003      	movs	r3, r0
 800e4c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4ca:	e00c      	b.n	800e4e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4cc:	2380      	movs	r3, #128	@ 0x80
 800e4ce:	021b      	lsls	r3, r3, #8
 800e4d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4d2:	e008      	b.n	800e4e6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800e4d8:	231a      	movs	r3, #26
 800e4da:	2220      	movs	r2, #32
 800e4dc:	189b      	adds	r3, r3, r2
 800e4de:	19db      	adds	r3, r3, r7
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	701a      	strb	r2, [r3, #0]
        break;
 800e4e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d100      	bne.n	800e4ee <UART_SetConfig+0x402>
 800e4ec:	e135      	b.n	800e75a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4f2:	4ba8      	ldr	r3, [pc, #672]	@ (800e794 <UART_SetConfig+0x6a8>)
 800e4f4:	0052      	lsls	r2, r2, #1
 800e4f6:	5ad3      	ldrh	r3, [r2, r3]
 800e4f8:	0019      	movs	r1, r3
 800e4fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e4fc:	f7f6 ff0e 	bl	800531c <__udivsi3>
 800e500:	0003      	movs	r3, r0
 800e502:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	685a      	ldr	r2, [r3, #4]
 800e508:	0013      	movs	r3, r2
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	189b      	adds	r3, r3, r2
 800e50e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e510:	429a      	cmp	r2, r3
 800e512:	d305      	bcc.n	800e520 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e51a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d906      	bls.n	800e52e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800e520:	231a      	movs	r3, #26
 800e522:	2220      	movs	r2, #32
 800e524:	189b      	adds	r3, r3, r2
 800e526:	19db      	adds	r3, r3, r7
 800e528:	2201      	movs	r2, #1
 800e52a:	701a      	strb	r2, [r3, #0]
 800e52c:	e044      	b.n	800e5b8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e530:	61bb      	str	r3, [r7, #24]
 800e532:	2300      	movs	r3, #0
 800e534:	61fb      	str	r3, [r7, #28]
 800e536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e53a:	4b96      	ldr	r3, [pc, #600]	@ (800e794 <UART_SetConfig+0x6a8>)
 800e53c:	0052      	lsls	r2, r2, #1
 800e53e:	5ad3      	ldrh	r3, [r2, r3]
 800e540:	613b      	str	r3, [r7, #16]
 800e542:	2300      	movs	r3, #0
 800e544:	617b      	str	r3, [r7, #20]
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	69b8      	ldr	r0, [r7, #24]
 800e54c:	69f9      	ldr	r1, [r7, #28]
 800e54e:	f7f7 f85b 	bl	8005608 <__aeabi_uldivmod>
 800e552:	0002      	movs	r2, r0
 800e554:	000b      	movs	r3, r1
 800e556:	0e11      	lsrs	r1, r2, #24
 800e558:	021d      	lsls	r5, r3, #8
 800e55a:	430d      	orrs	r5, r1
 800e55c:	0214      	lsls	r4, r2, #8
 800e55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	085b      	lsrs	r3, r3, #1
 800e564:	60bb      	str	r3, [r7, #8]
 800e566:	2300      	movs	r3, #0
 800e568:	60fb      	str	r3, [r7, #12]
 800e56a:	68b8      	ldr	r0, [r7, #8]
 800e56c:	68f9      	ldr	r1, [r7, #12]
 800e56e:	1900      	adds	r0, r0, r4
 800e570:	4169      	adcs	r1, r5
 800e572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	603b      	str	r3, [r7, #0]
 800e578:	2300      	movs	r3, #0
 800e57a:	607b      	str	r3, [r7, #4]
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f7f7 f842 	bl	8005608 <__aeabi_uldivmod>
 800e584:	0002      	movs	r2, r0
 800e586:	000b      	movs	r3, r1
 800e588:	0013      	movs	r3, r2
 800e58a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e58c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e58e:	23c0      	movs	r3, #192	@ 0xc0
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	429a      	cmp	r2, r3
 800e594:	d309      	bcc.n	800e5aa <UART_SetConfig+0x4be>
 800e596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e598:	2380      	movs	r3, #128	@ 0x80
 800e59a:	035b      	lsls	r3, r3, #13
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d204      	bcs.n	800e5aa <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5a6:	60da      	str	r2, [r3, #12]
 800e5a8:	e006      	b.n	800e5b8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800e5aa:	231a      	movs	r3, #26
 800e5ac:	2220      	movs	r2, #32
 800e5ae:	189b      	adds	r3, r3, r2
 800e5b0:	19db      	adds	r3, r3, r7
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800e5b6:	e0d0      	b.n	800e75a <UART_SetConfig+0x66e>
 800e5b8:	e0cf      	b.n	800e75a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5bc:	69da      	ldr	r2, [r3, #28]
 800e5be:	2380      	movs	r3, #128	@ 0x80
 800e5c0:	021b      	lsls	r3, r3, #8
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d000      	beq.n	800e5c8 <UART_SetConfig+0x4dc>
 800e5c6:	e070      	b.n	800e6aa <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800e5c8:	231b      	movs	r3, #27
 800e5ca:	2220      	movs	r2, #32
 800e5cc:	189b      	adds	r3, r3, r2
 800e5ce:	19db      	adds	r3, r3, r7
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	2b08      	cmp	r3, #8
 800e5d4:	d015      	beq.n	800e602 <UART_SetConfig+0x516>
 800e5d6:	dc18      	bgt.n	800e60a <UART_SetConfig+0x51e>
 800e5d8:	2b04      	cmp	r3, #4
 800e5da:	d00d      	beq.n	800e5f8 <UART_SetConfig+0x50c>
 800e5dc:	dc15      	bgt.n	800e60a <UART_SetConfig+0x51e>
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <UART_SetConfig+0x4fc>
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	d005      	beq.n	800e5f2 <UART_SetConfig+0x506>
 800e5e6:	e010      	b.n	800e60a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5e8:	f7fd fd6c 	bl	800c0c4 <HAL_RCC_GetPCLK1Freq>
 800e5ec:	0003      	movs	r3, r0
 800e5ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5f0:	e014      	b.n	800e61c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e5f2:	4b67      	ldr	r3, [pc, #412]	@ (800e790 <UART_SetConfig+0x6a4>)
 800e5f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5f6:	e011      	b.n	800e61c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5f8:	f7fd fcd8 	bl	800bfac <HAL_RCC_GetSysClockFreq>
 800e5fc:	0003      	movs	r3, r0
 800e5fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e600:	e00c      	b.n	800e61c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e602:	2380      	movs	r3, #128	@ 0x80
 800e604:	021b      	lsls	r3, r3, #8
 800e606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e608:	e008      	b.n	800e61c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800e60a:	2300      	movs	r3, #0
 800e60c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800e60e:	231a      	movs	r3, #26
 800e610:	2220      	movs	r2, #32
 800e612:	189b      	adds	r3, r3, r2
 800e614:	19db      	adds	r3, r3, r7
 800e616:	2201      	movs	r2, #1
 800e618:	701a      	strb	r2, [r3, #0]
        break;
 800e61a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d100      	bne.n	800e624 <UART_SetConfig+0x538>
 800e622:	e09a      	b.n	800e75a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e628:	4b5a      	ldr	r3, [pc, #360]	@ (800e794 <UART_SetConfig+0x6a8>)
 800e62a:	0052      	lsls	r2, r2, #1
 800e62c:	5ad3      	ldrh	r3, [r2, r3]
 800e62e:	0019      	movs	r1, r3
 800e630:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e632:	f7f6 fe73 	bl	800531c <__udivsi3>
 800e636:	0003      	movs	r3, r0
 800e638:	005a      	lsls	r2, r3, #1
 800e63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	085b      	lsrs	r3, r3, #1
 800e640:	18d2      	adds	r2, r2, r3
 800e642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	0019      	movs	r1, r3
 800e648:	0010      	movs	r0, r2
 800e64a:	f7f6 fe67 	bl	800531c <__udivsi3>
 800e64e:	0003      	movs	r3, r0
 800e650:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	2b0f      	cmp	r3, #15
 800e656:	d921      	bls.n	800e69c <UART_SetConfig+0x5b0>
 800e658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e65a:	2380      	movs	r3, #128	@ 0x80
 800e65c:	025b      	lsls	r3, r3, #9
 800e65e:	429a      	cmp	r2, r3
 800e660:	d21c      	bcs.n	800e69c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e664:	b29a      	uxth	r2, r3
 800e666:	200e      	movs	r0, #14
 800e668:	2420      	movs	r4, #32
 800e66a:	1903      	adds	r3, r0, r4
 800e66c:	19db      	adds	r3, r3, r7
 800e66e:	210f      	movs	r1, #15
 800e670:	438a      	bics	r2, r1
 800e672:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e676:	085b      	lsrs	r3, r3, #1
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2207      	movs	r2, #7
 800e67c:	4013      	ands	r3, r2
 800e67e:	b299      	uxth	r1, r3
 800e680:	1903      	adds	r3, r0, r4
 800e682:	19db      	adds	r3, r3, r7
 800e684:	1902      	adds	r2, r0, r4
 800e686:	19d2      	adds	r2, r2, r7
 800e688:	8812      	ldrh	r2, [r2, #0]
 800e68a:	430a      	orrs	r2, r1
 800e68c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800e68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	1902      	adds	r2, r0, r4
 800e694:	19d2      	adds	r2, r2, r7
 800e696:	8812      	ldrh	r2, [r2, #0]
 800e698:	60da      	str	r2, [r3, #12]
 800e69a:	e05e      	b.n	800e75a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800e69c:	231a      	movs	r3, #26
 800e69e:	2220      	movs	r2, #32
 800e6a0:	189b      	adds	r3, r3, r2
 800e6a2:	19db      	adds	r3, r3, r7
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	701a      	strb	r2, [r3, #0]
 800e6a8:	e057      	b.n	800e75a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e6aa:	231b      	movs	r3, #27
 800e6ac:	2220      	movs	r2, #32
 800e6ae:	189b      	adds	r3, r3, r2
 800e6b0:	19db      	adds	r3, r3, r7
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	2b08      	cmp	r3, #8
 800e6b6:	d015      	beq.n	800e6e4 <UART_SetConfig+0x5f8>
 800e6b8:	dc18      	bgt.n	800e6ec <UART_SetConfig+0x600>
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d00d      	beq.n	800e6da <UART_SetConfig+0x5ee>
 800e6be:	dc15      	bgt.n	800e6ec <UART_SetConfig+0x600>
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <UART_SetConfig+0x5de>
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d005      	beq.n	800e6d4 <UART_SetConfig+0x5e8>
 800e6c8:	e010      	b.n	800e6ec <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6ca:	f7fd fcfb 	bl	800c0c4 <HAL_RCC_GetPCLK1Freq>
 800e6ce:	0003      	movs	r3, r0
 800e6d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6d2:	e014      	b.n	800e6fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e6d4:	4b2e      	ldr	r3, [pc, #184]	@ (800e790 <UART_SetConfig+0x6a4>)
 800e6d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6d8:	e011      	b.n	800e6fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e6da:	f7fd fc67 	bl	800bfac <HAL_RCC_GetSysClockFreq>
 800e6de:	0003      	movs	r3, r0
 800e6e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6e2:	e00c      	b.n	800e6fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6e4:	2380      	movs	r3, #128	@ 0x80
 800e6e6:	021b      	lsls	r3, r3, #8
 800e6e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6ea:	e008      	b.n	800e6fe <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800e6f0:	231a      	movs	r3, #26
 800e6f2:	2220      	movs	r2, #32
 800e6f4:	189b      	adds	r3, r3, r2
 800e6f6:	19db      	adds	r3, r3, r7
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	701a      	strb	r2, [r3, #0]
        break;
 800e6fc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800e6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e700:	2b00      	cmp	r3, #0
 800e702:	d02a      	beq.n	800e75a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e708:	4b22      	ldr	r3, [pc, #136]	@ (800e794 <UART_SetConfig+0x6a8>)
 800e70a:	0052      	lsls	r2, r2, #1
 800e70c:	5ad3      	ldrh	r3, [r2, r3]
 800e70e:	0019      	movs	r1, r3
 800e710:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e712:	f7f6 fe03 	bl	800531c <__udivsi3>
 800e716:	0003      	movs	r3, r0
 800e718:	001a      	movs	r2, r3
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	085b      	lsrs	r3, r3, #1
 800e720:	18d2      	adds	r2, r2, r3
 800e722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	0019      	movs	r1, r3
 800e728:	0010      	movs	r0, r2
 800e72a:	f7f6 fdf7 	bl	800531c <__udivsi3>
 800e72e:	0003      	movs	r3, r0
 800e730:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e734:	2b0f      	cmp	r3, #15
 800e736:	d90a      	bls.n	800e74e <UART_SetConfig+0x662>
 800e738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e73a:	2380      	movs	r3, #128	@ 0x80
 800e73c:	025b      	lsls	r3, r3, #9
 800e73e:	429a      	cmp	r2, r3
 800e740:	d205      	bcs.n	800e74e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e744:	b29a      	uxth	r2, r3
 800e746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	60da      	str	r2, [r3, #12]
 800e74c:	e005      	b.n	800e75a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800e74e:	231a      	movs	r3, #26
 800e750:	2220      	movs	r2, #32
 800e752:	189b      	adds	r3, r3, r2
 800e754:	19db      	adds	r3, r3, r7
 800e756:	2201      	movs	r2, #1
 800e758:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75c:	226a      	movs	r2, #106	@ 0x6a
 800e75e:	2101      	movs	r1, #1
 800e760:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800e762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e764:	2268      	movs	r2, #104	@ 0x68
 800e766:	2101      	movs	r1, #1
 800e768:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76c:	2200      	movs	r2, #0
 800e76e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e772:	2200      	movs	r2, #0
 800e774:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e776:	231a      	movs	r3, #26
 800e778:	2220      	movs	r2, #32
 800e77a:	189b      	adds	r3, r3, r2
 800e77c:	19db      	adds	r3, r3, r7
 800e77e:	781b      	ldrb	r3, [r3, #0]
}
 800e780:	0018      	movs	r0, r3
 800e782:	46bd      	mov	sp, r7
 800e784:	b010      	add	sp, #64	@ 0x40
 800e786:	bdb0      	pop	{r4, r5, r7, pc}
 800e788:	40008000 	.word	0x40008000
 800e78c:	40008400 	.word	0x40008400
 800e790:	00f42400 	.word	0x00f42400
 800e794:	08011adc 	.word	0x08011adc

0800e798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7a4:	2208      	movs	r2, #8
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	d00b      	beq.n	800e7c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	4a4a      	ldr	r2, [pc, #296]	@ (800e8dc <UART_AdvFeatureConfig+0x144>)
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	0019      	movs	r1, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	430a      	orrs	r2, r1
 800e7c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	4013      	ands	r3, r2
 800e7ca:	d00b      	beq.n	800e7e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	4a43      	ldr	r2, [pc, #268]	@ (800e8e0 <UART_AdvFeatureConfig+0x148>)
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	0019      	movs	r1, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	430a      	orrs	r2, r1
 800e7e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7e8:	2202      	movs	r2, #2
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	d00b      	beq.n	800e806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	4a3b      	ldr	r2, [pc, #236]	@ (800e8e4 <UART_AdvFeatureConfig+0x14c>)
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	0019      	movs	r1, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	430a      	orrs	r2, r1
 800e804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e80a:	2204      	movs	r2, #4
 800e80c:	4013      	ands	r3, r2
 800e80e:	d00b      	beq.n	800e828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	4a34      	ldr	r2, [pc, #208]	@ (800e8e8 <UART_AdvFeatureConfig+0x150>)
 800e818:	4013      	ands	r3, r2
 800e81a:	0019      	movs	r1, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	430a      	orrs	r2, r1
 800e826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e82c:	2210      	movs	r2, #16
 800e82e:	4013      	ands	r3, r2
 800e830:	d00b      	beq.n	800e84a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	4a2c      	ldr	r2, [pc, #176]	@ (800e8ec <UART_AdvFeatureConfig+0x154>)
 800e83a:	4013      	ands	r3, r2
 800e83c:	0019      	movs	r1, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	430a      	orrs	r2, r1
 800e848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e84e:	2220      	movs	r2, #32
 800e850:	4013      	ands	r3, r2
 800e852:	d00b      	beq.n	800e86c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	4a25      	ldr	r2, [pc, #148]	@ (800e8f0 <UART_AdvFeatureConfig+0x158>)
 800e85c:	4013      	ands	r3, r2
 800e85e:	0019      	movs	r1, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	430a      	orrs	r2, r1
 800e86a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e870:	2240      	movs	r2, #64	@ 0x40
 800e872:	4013      	ands	r3, r2
 800e874:	d01d      	beq.n	800e8b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8f4 <UART_AdvFeatureConfig+0x15c>)
 800e87e:	4013      	ands	r3, r2
 800e880:	0019      	movs	r1, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	430a      	orrs	r2, r1
 800e88c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e892:	2380      	movs	r3, #128	@ 0x80
 800e894:	035b      	lsls	r3, r3, #13
 800e896:	429a      	cmp	r2, r3
 800e898:	d10b      	bne.n	800e8b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	4a15      	ldr	r2, [pc, #84]	@ (800e8f8 <UART_AdvFeatureConfig+0x160>)
 800e8a2:	4013      	ands	r3, r2
 800e8a4:	0019      	movs	r1, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8b6:	2280      	movs	r2, #128	@ 0x80
 800e8b8:	4013      	ands	r3, r2
 800e8ba:	d00b      	beq.n	800e8d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	4a0e      	ldr	r2, [pc, #56]	@ (800e8fc <UART_AdvFeatureConfig+0x164>)
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	0019      	movs	r1, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	430a      	orrs	r2, r1
 800e8d2:	605a      	str	r2, [r3, #4]
  }
}
 800e8d4:	46c0      	nop			@ (mov r8, r8)
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	b002      	add	sp, #8
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	ffff7fff 	.word	0xffff7fff
 800e8e0:	fffdffff 	.word	0xfffdffff
 800e8e4:	fffeffff 	.word	0xfffeffff
 800e8e8:	fffbffff 	.word	0xfffbffff
 800e8ec:	ffffefff 	.word	0xffffefff
 800e8f0:	ffffdfff 	.word	0xffffdfff
 800e8f4:	ffefffff 	.word	0xffefffff
 800e8f8:	ff9fffff 	.word	0xff9fffff
 800e8fc:	fff7ffff 	.word	0xfff7ffff

0800e900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b092      	sub	sp, #72	@ 0x48
 800e904:	af02      	add	r7, sp, #8
 800e906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2290      	movs	r2, #144	@ 0x90
 800e90c:	2100      	movs	r1, #0
 800e90e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e910:	f7fa f89c 	bl	8008a4c <HAL_GetTick>
 800e914:	0003      	movs	r3, r0
 800e916:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2208      	movs	r2, #8
 800e920:	4013      	ands	r3, r2
 800e922:	2b08      	cmp	r3, #8
 800e924:	d12d      	bne.n	800e982 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e928:	2280      	movs	r2, #128	@ 0x80
 800e92a:	0391      	lsls	r1, r2, #14
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	4a47      	ldr	r2, [pc, #284]	@ (800ea4c <UART_CheckIdleState+0x14c>)
 800e930:	9200      	str	r2, [sp, #0]
 800e932:	2200      	movs	r2, #0
 800e934:	f000 f88e 	bl	800ea54 <UART_WaitOnFlagUntilTimeout>
 800e938:	1e03      	subs	r3, r0, #0
 800e93a:	d022      	beq.n	800e982 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e93c:	f3ef 8310 	mrs	r3, PRIMASK
 800e940:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e944:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e946:	2301      	movs	r3, #1
 800e948:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e94c:	f383 8810 	msr	PRIMASK, r3
}
 800e950:	46c0      	nop			@ (mov r8, r8)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2180      	movs	r1, #128	@ 0x80
 800e95e:	438a      	bics	r2, r1
 800e960:	601a      	str	r2, [r3, #0]
 800e962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e968:	f383 8810 	msr	PRIMASK, r3
}
 800e96c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2288      	movs	r2, #136	@ 0x88
 800e972:	2120      	movs	r1, #32
 800e974:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2284      	movs	r2, #132	@ 0x84
 800e97a:	2100      	movs	r1, #0
 800e97c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e97e:	2303      	movs	r3, #3
 800e980:	e060      	b.n	800ea44 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2204      	movs	r2, #4
 800e98a:	4013      	ands	r3, r2
 800e98c:	2b04      	cmp	r3, #4
 800e98e:	d146      	bne.n	800ea1e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e992:	2280      	movs	r2, #128	@ 0x80
 800e994:	03d1      	lsls	r1, r2, #15
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	4a2c      	ldr	r2, [pc, #176]	@ (800ea4c <UART_CheckIdleState+0x14c>)
 800e99a:	9200      	str	r2, [sp, #0]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f000 f859 	bl	800ea54 <UART_WaitOnFlagUntilTimeout>
 800e9a2:	1e03      	subs	r3, r0, #0
 800e9a4:	d03b      	beq.n	800ea1e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e9aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	f383 8810 	msr	PRIMASK, r3
}
 800e9ba:	46c0      	nop			@ (mov r8, r8)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4922      	ldr	r1, [pc, #136]	@ (800ea50 <UART_CheckIdleState+0x150>)
 800e9c8:	400a      	ands	r2, r1
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	f383 8810 	msr	PRIMASK, r3
}
 800e9d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e9dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800e9de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	f383 8810 	msr	PRIMASK, r3
}
 800e9ec:	46c0      	nop			@ (mov r8, r8)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	689a      	ldr	r2, [r3, #8]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2101      	movs	r1, #1
 800e9fa:	438a      	bics	r2, r1
 800e9fc:	609a      	str	r2, [r3, #8]
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	f383 8810 	msr	PRIMASK, r3
}
 800ea08:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	228c      	movs	r2, #140	@ 0x8c
 800ea0e:	2120      	movs	r1, #32
 800ea10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2284      	movs	r2, #132	@ 0x84
 800ea16:	2100      	movs	r1, #0
 800ea18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea1a:	2303      	movs	r3, #3
 800ea1c:	e012      	b.n	800ea44 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2288      	movs	r2, #136	@ 0x88
 800ea22:	2120      	movs	r1, #32
 800ea24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	228c      	movs	r2, #140	@ 0x8c
 800ea2a:	2120      	movs	r1, #32
 800ea2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2284      	movs	r2, #132	@ 0x84
 800ea3e:	2100      	movs	r1, #0
 800ea40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ea42:	2300      	movs	r3, #0
}
 800ea44:	0018      	movs	r0, r3
 800ea46:	46bd      	mov	sp, r7
 800ea48:	b010      	add	sp, #64	@ 0x40
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	01ffffff 	.word	0x01ffffff
 800ea50:	fffffedf 	.word	0xfffffedf

0800ea54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	603b      	str	r3, [r7, #0]
 800ea60:	1dfb      	adds	r3, r7, #7
 800ea62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea64:	e051      	b.n	800eb0a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	d04e      	beq.n	800eb0a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea6c:	f7f9 ffee 	bl	8008a4c <HAL_GetTick>
 800ea70:	0002      	movs	r2, r0
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	69ba      	ldr	r2, [r7, #24]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d302      	bcc.n	800ea82 <UART_WaitOnFlagUntilTimeout+0x2e>
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d101      	bne.n	800ea86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800ea82:	2303      	movs	r3, #3
 800ea84:	e051      	b.n	800eb2a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2204      	movs	r2, #4
 800ea8e:	4013      	ands	r3, r2
 800ea90:	d03b      	beq.n	800eb0a <UART_WaitOnFlagUntilTimeout+0xb6>
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	2b80      	cmp	r3, #128	@ 0x80
 800ea96:	d038      	beq.n	800eb0a <UART_WaitOnFlagUntilTimeout+0xb6>
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2b40      	cmp	r3, #64	@ 0x40
 800ea9c:	d035      	beq.n	800eb0a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	69db      	ldr	r3, [r3, #28]
 800eaa4:	2208      	movs	r2, #8
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	2b08      	cmp	r3, #8
 800eaaa:	d111      	bne.n	800ead0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2208      	movs	r2, #8
 800eab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	0018      	movs	r0, r3
 800eab8:	f000 f83c 	bl	800eb34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2290      	movs	r2, #144	@ 0x90
 800eac0:	2108      	movs	r1, #8
 800eac2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2284      	movs	r2, #132	@ 0x84
 800eac8:	2100      	movs	r1, #0
 800eaca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800eacc:	2301      	movs	r3, #1
 800eace:	e02c      	b.n	800eb2a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	69da      	ldr	r2, [r3, #28]
 800ead6:	2380      	movs	r3, #128	@ 0x80
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	401a      	ands	r2, r3
 800eadc:	2380      	movs	r3, #128	@ 0x80
 800eade:	011b      	lsls	r3, r3, #4
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d112      	bne.n	800eb0a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2280      	movs	r2, #128	@ 0x80
 800eaea:	0112      	lsls	r2, r2, #4
 800eaec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	f000 f81f 	bl	800eb34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2290      	movs	r2, #144	@ 0x90
 800eafa:	2120      	movs	r1, #32
 800eafc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2284      	movs	r2, #132	@ 0x84
 800eb02:	2100      	movs	r1, #0
 800eb04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800eb06:	2303      	movs	r3, #3
 800eb08:	e00f      	b.n	800eb2a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	69db      	ldr	r3, [r3, #28]
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	4013      	ands	r3, r2
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	1ad3      	subs	r3, r2, r3
 800eb18:	425a      	negs	r2, r3
 800eb1a:	4153      	adcs	r3, r2
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	001a      	movs	r2, r3
 800eb20:	1dfb      	adds	r3, r7, #7
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d09e      	beq.n	800ea66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	0018      	movs	r0, r3
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	b004      	add	sp, #16
 800eb30:	bd80      	pop	{r7, pc}
	...

0800eb34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b08e      	sub	sp, #56	@ 0x38
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb3c:	f3ef 8310 	mrs	r3, PRIMASK
 800eb40:	617b      	str	r3, [r7, #20]
  return(result);
 800eb42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb44:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb46:	2301      	movs	r3, #1
 800eb48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	f383 8810 	msr	PRIMASK, r3
}
 800eb50:	46c0      	nop			@ (mov r8, r8)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4926      	ldr	r1, [pc, #152]	@ (800ebf8 <UART_EndRxTransfer+0xc4>)
 800eb5e:	400a      	ands	r2, r1
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	f383 8810 	msr	PRIMASK, r3
}
 800eb6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb6e:	f3ef 8310 	mrs	r3, PRIMASK
 800eb72:	623b      	str	r3, [r7, #32]
  return(result);
 800eb74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb76:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb78:	2301      	movs	r3, #1
 800eb7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	f383 8810 	msr	PRIMASK, r3
}
 800eb82:	46c0      	nop			@ (mov r8, r8)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	689a      	ldr	r2, [r3, #8]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	491b      	ldr	r1, [pc, #108]	@ (800ebfc <UART_EndRxTransfer+0xc8>)
 800eb90:	400a      	ands	r2, r1
 800eb92:	609a      	str	r2, [r3, #8]
 800eb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb96:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb9a:	f383 8810 	msr	PRIMASK, r3
}
 800eb9e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d118      	bne.n	800ebda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eba8:	f3ef 8310 	mrs	r3, PRIMASK
 800ebac:	60bb      	str	r3, [r7, #8]
  return(result);
 800ebae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f383 8810 	msr	PRIMASK, r3
}
 800ebbc:	46c0      	nop			@ (mov r8, r8)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2110      	movs	r1, #16
 800ebca:	438a      	bics	r2, r1
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	f383 8810 	msr	PRIMASK, r3
}
 800ebd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	228c      	movs	r2, #140	@ 0x8c
 800ebde:	2120      	movs	r1, #32
 800ebe0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ebee:	46c0      	nop			@ (mov r8, r8)
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	b00e      	add	sp, #56	@ 0x38
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	46c0      	nop			@ (mov r8, r8)
 800ebf8:	fffffedf 	.word	0xfffffedf
 800ebfc:	effffffe 	.word	0xeffffffe

0800ec00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	225e      	movs	r2, #94	@ 0x5e
 800ec12:	2100      	movs	r1, #0
 800ec14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2256      	movs	r2, #86	@ 0x56
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	0018      	movs	r0, r3
 800ec22:	f7ff fa4f 	bl	800e0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec26:	46c0      	nop			@ (mov r8, r8)
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	b004      	add	sp, #16
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b086      	sub	sp, #24
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec36:	f3ef 8310 	mrs	r3, PRIMASK
 800ec3a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec3c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec3e:	617b      	str	r3, [r7, #20]
 800ec40:	2301      	movs	r3, #1
 800ec42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f383 8810 	msr	PRIMASK, r3
}
 800ec4a:	46c0      	nop			@ (mov r8, r8)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2140      	movs	r1, #64	@ 0x40
 800ec58:	438a      	bics	r2, r1
 800ec5a:	601a      	str	r2, [r3, #0]
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	f383 8810 	msr	PRIMASK, r3
}
 800ec66:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2288      	movs	r2, #136	@ 0x88
 800ec6c:	2120      	movs	r1, #32
 800ec6e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f7ff fa1b 	bl	800e0b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec7e:	46c0      	nop			@ (mov r8, r8)
 800ec80:	46bd      	mov	sp, r7
 800ec82:	b006      	add	sp, #24
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec8e:	46c0      	nop			@ (mov r8, r8)
 800ec90:	46bd      	mov	sp, r7
 800ec92:	b002      	add	sp, #8
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b082      	sub	sp, #8
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec9e:	46c0      	nop			@ (mov r8, r8)
 800eca0:	46bd      	mov	sp, r7
 800eca2:	b002      	add	sp, #8
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b082      	sub	sp, #8
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ecae:	46c0      	nop			@ (mov r8, r8)
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	b002      	add	sp, #8
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2284      	movs	r2, #132	@ 0x84
 800ecc4:	5c9b      	ldrb	r3, [r3, r2]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d101      	bne.n	800ecce <HAL_UARTEx_DisableFifoMode+0x16>
 800ecca:	2302      	movs	r3, #2
 800eccc:	e027      	b.n	800ed1e <HAL_UARTEx_DisableFifoMode+0x66>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2284      	movs	r2, #132	@ 0x84
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2288      	movs	r2, #136	@ 0x88
 800ecda:	2124      	movs	r1, #36	@ 0x24
 800ecdc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	438a      	bics	r2, r1
 800ecf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	4a0b      	ldr	r2, [pc, #44]	@ (800ed28 <HAL_UARTEx_DisableFifoMode+0x70>)
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2288      	movs	r2, #136	@ 0x88
 800ed10:	2120      	movs	r1, #32
 800ed12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2284      	movs	r2, #132	@ 0x84
 800ed18:	2100      	movs	r1, #0
 800ed1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ed1c:	2300      	movs	r3, #0
}
 800ed1e:	0018      	movs	r0, r3
 800ed20:	46bd      	mov	sp, r7
 800ed22:	b004      	add	sp, #16
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	46c0      	nop			@ (mov r8, r8)
 800ed28:	dfffffff 	.word	0xdfffffff

0800ed2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2284      	movs	r2, #132	@ 0x84
 800ed3a:	5c9b      	ldrb	r3, [r3, r2]
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d101      	bne.n	800ed44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed40:	2302      	movs	r3, #2
 800ed42:	e02e      	b.n	800eda2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2284      	movs	r2, #132	@ 0x84
 800ed48:	2101      	movs	r1, #1
 800ed4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2288      	movs	r2, #136	@ 0x88
 800ed50:	2124      	movs	r1, #36	@ 0x24
 800ed52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2101      	movs	r1, #1
 800ed68:	438a      	bics	r2, r1
 800ed6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	00db      	lsls	r3, r3, #3
 800ed74:	08d9      	lsrs	r1, r3, #3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	430a      	orrs	r2, r1
 800ed7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	0018      	movs	r0, r3
 800ed84:	f000 f854 	bl	800ee30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2288      	movs	r2, #136	@ 0x88
 800ed94:	2120      	movs	r1, #32
 800ed96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2284      	movs	r2, #132	@ 0x84
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	0018      	movs	r0, r3
 800eda4:	46bd      	mov	sp, r7
 800eda6:	b004      	add	sp, #16
 800eda8:	bd80      	pop	{r7, pc}
	...

0800edac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2284      	movs	r2, #132	@ 0x84
 800edba:	5c9b      	ldrb	r3, [r3, r2]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d101      	bne.n	800edc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800edc0:	2302      	movs	r3, #2
 800edc2:	e02f      	b.n	800ee24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2284      	movs	r2, #132	@ 0x84
 800edc8:	2101      	movs	r1, #1
 800edca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2288      	movs	r2, #136	@ 0x88
 800edd0:	2124      	movs	r1, #36	@ 0x24
 800edd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2101      	movs	r1, #1
 800ede8:	438a      	bics	r2, r1
 800edea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	4a0e      	ldr	r2, [pc, #56]	@ (800ee2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800edf4:	4013      	ands	r3, r2
 800edf6:	0019      	movs	r1, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	430a      	orrs	r2, r1
 800ee00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	0018      	movs	r0, r3
 800ee06:	f000 f813 	bl	800ee30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2288      	movs	r2, #136	@ 0x88
 800ee16:	2120      	movs	r1, #32
 800ee18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2284      	movs	r2, #132	@ 0x84
 800ee1e:	2100      	movs	r1, #0
 800ee20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	0018      	movs	r0, r3
 800ee26:	46bd      	mov	sp, r7
 800ee28:	b004      	add	sp, #16
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	f1ffffff 	.word	0xf1ffffff

0800ee30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d108      	bne.n	800ee52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	226a      	movs	r2, #106	@ 0x6a
 800ee44:	2101      	movs	r1, #1
 800ee46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2268      	movs	r2, #104	@ 0x68
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee50:	e043      	b.n	800eeda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee52:	260f      	movs	r6, #15
 800ee54:	19bb      	adds	r3, r7, r6
 800ee56:	2208      	movs	r2, #8
 800ee58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee5a:	200e      	movs	r0, #14
 800ee5c:	183b      	adds	r3, r7, r0
 800ee5e:	2208      	movs	r2, #8
 800ee60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	0e5b      	lsrs	r3, r3, #25
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	240d      	movs	r4, #13
 800ee6e:	193b      	adds	r3, r7, r4
 800ee70:	2107      	movs	r1, #7
 800ee72:	400a      	ands	r2, r1
 800ee74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	0f5b      	lsrs	r3, r3, #29
 800ee7e:	b2da      	uxtb	r2, r3
 800ee80:	250c      	movs	r5, #12
 800ee82:	197b      	adds	r3, r7, r5
 800ee84:	2107      	movs	r1, #7
 800ee86:	400a      	ands	r2, r1
 800ee88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee8a:	183b      	adds	r3, r7, r0
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	197a      	adds	r2, r7, r5
 800ee90:	7812      	ldrb	r2, [r2, #0]
 800ee92:	4914      	ldr	r1, [pc, #80]	@ (800eee4 <UARTEx_SetNbDataToProcess+0xb4>)
 800ee94:	5c8a      	ldrb	r2, [r1, r2]
 800ee96:	435a      	muls	r2, r3
 800ee98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee9a:	197b      	adds	r3, r7, r5
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	4a12      	ldr	r2, [pc, #72]	@ (800eee8 <UARTEx_SetNbDataToProcess+0xb8>)
 800eea0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eea2:	0019      	movs	r1, r3
 800eea4:	f7f6 fac4 	bl	8005430 <__divsi3>
 800eea8:	0003      	movs	r3, r0
 800eeaa:	b299      	uxth	r1, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	226a      	movs	r2, #106	@ 0x6a
 800eeb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eeb2:	19bb      	adds	r3, r7, r6
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	193a      	adds	r2, r7, r4
 800eeb8:	7812      	ldrb	r2, [r2, #0]
 800eeba:	490a      	ldr	r1, [pc, #40]	@ (800eee4 <UARTEx_SetNbDataToProcess+0xb4>)
 800eebc:	5c8a      	ldrb	r2, [r1, r2]
 800eebe:	435a      	muls	r2, r3
 800eec0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800eec2:	193b      	adds	r3, r7, r4
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	4a08      	ldr	r2, [pc, #32]	@ (800eee8 <UARTEx_SetNbDataToProcess+0xb8>)
 800eec8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eeca:	0019      	movs	r1, r3
 800eecc:	f7f6 fab0 	bl	8005430 <__divsi3>
 800eed0:	0003      	movs	r3, r0
 800eed2:	b299      	uxth	r1, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2268      	movs	r2, #104	@ 0x68
 800eed8:	5299      	strh	r1, [r3, r2]
}
 800eeda:	46c0      	nop			@ (mov r8, r8)
 800eedc:	46bd      	mov	sp, r7
 800eede:	b005      	add	sp, #20
 800eee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee2:	46c0      	nop			@ (mov r8, r8)
 800eee4:	08011af4 	.word	0x08011af4
 800eee8:	08011afc 	.word	0x08011afc

0800eeec <malloc>:
 800eeec:	b510      	push	{r4, lr}
 800eeee:	4b03      	ldr	r3, [pc, #12]	@ (800eefc <malloc+0x10>)
 800eef0:	0001      	movs	r1, r0
 800eef2:	6818      	ldr	r0, [r3, #0]
 800eef4:	f000 f830 	bl	800ef58 <_malloc_r>
 800eef8:	bd10      	pop	{r4, pc}
 800eefa:	46c0      	nop			@ (mov r8, r8)
 800eefc:	20000050 	.word	0x20000050

0800ef00 <free>:
 800ef00:	b510      	push	{r4, lr}
 800ef02:	4b03      	ldr	r3, [pc, #12]	@ (800ef10 <free+0x10>)
 800ef04:	0001      	movs	r1, r0
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	f000 fb9e 	bl	800f648 <_free_r>
 800ef0c:	bd10      	pop	{r4, pc}
 800ef0e:	46c0      	nop			@ (mov r8, r8)
 800ef10:	20000050 	.word	0x20000050

0800ef14 <sbrk_aligned>:
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	4e0f      	ldr	r6, [pc, #60]	@ (800ef54 <sbrk_aligned+0x40>)
 800ef18:	000d      	movs	r5, r1
 800ef1a:	6831      	ldr	r1, [r6, #0]
 800ef1c:	0004      	movs	r4, r0
 800ef1e:	2900      	cmp	r1, #0
 800ef20:	d102      	bne.n	800ef28 <sbrk_aligned+0x14>
 800ef22:	f000 fb35 	bl	800f590 <_sbrk_r>
 800ef26:	6030      	str	r0, [r6, #0]
 800ef28:	0029      	movs	r1, r5
 800ef2a:	0020      	movs	r0, r4
 800ef2c:	f000 fb30 	bl	800f590 <_sbrk_r>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	d103      	bne.n	800ef3c <sbrk_aligned+0x28>
 800ef34:	2501      	movs	r5, #1
 800ef36:	426d      	negs	r5, r5
 800ef38:	0028      	movs	r0, r5
 800ef3a:	bd70      	pop	{r4, r5, r6, pc}
 800ef3c:	2303      	movs	r3, #3
 800ef3e:	1cc5      	adds	r5, r0, #3
 800ef40:	439d      	bics	r5, r3
 800ef42:	42a8      	cmp	r0, r5
 800ef44:	d0f8      	beq.n	800ef38 <sbrk_aligned+0x24>
 800ef46:	1a29      	subs	r1, r5, r0
 800ef48:	0020      	movs	r0, r4
 800ef4a:	f000 fb21 	bl	800f590 <_sbrk_r>
 800ef4e:	3001      	adds	r0, #1
 800ef50:	d1f2      	bne.n	800ef38 <sbrk_aligned+0x24>
 800ef52:	e7ef      	b.n	800ef34 <sbrk_aligned+0x20>
 800ef54:	20001ea0 	.word	0x20001ea0

0800ef58 <_malloc_r>:
 800ef58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef5a:	2203      	movs	r2, #3
 800ef5c:	1ccb      	adds	r3, r1, #3
 800ef5e:	4393      	bics	r3, r2
 800ef60:	3308      	adds	r3, #8
 800ef62:	0005      	movs	r5, r0
 800ef64:	001f      	movs	r7, r3
 800ef66:	2b0c      	cmp	r3, #12
 800ef68:	d234      	bcs.n	800efd4 <_malloc_r+0x7c>
 800ef6a:	270c      	movs	r7, #12
 800ef6c:	42b9      	cmp	r1, r7
 800ef6e:	d833      	bhi.n	800efd8 <_malloc_r+0x80>
 800ef70:	0028      	movs	r0, r5
 800ef72:	f000 f871 	bl	800f058 <__malloc_lock>
 800ef76:	4e37      	ldr	r6, [pc, #220]	@ (800f054 <_malloc_r+0xfc>)
 800ef78:	6833      	ldr	r3, [r6, #0]
 800ef7a:	001c      	movs	r4, r3
 800ef7c:	2c00      	cmp	r4, #0
 800ef7e:	d12f      	bne.n	800efe0 <_malloc_r+0x88>
 800ef80:	0039      	movs	r1, r7
 800ef82:	0028      	movs	r0, r5
 800ef84:	f7ff ffc6 	bl	800ef14 <sbrk_aligned>
 800ef88:	0004      	movs	r4, r0
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	d15f      	bne.n	800f04e <_malloc_r+0xf6>
 800ef8e:	6834      	ldr	r4, [r6, #0]
 800ef90:	9400      	str	r4, [sp, #0]
 800ef92:	9b00      	ldr	r3, [sp, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d14a      	bne.n	800f02e <_malloc_r+0xd6>
 800ef98:	2c00      	cmp	r4, #0
 800ef9a:	d052      	beq.n	800f042 <_malloc_r+0xea>
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	0028      	movs	r0, r5
 800efa0:	18e3      	adds	r3, r4, r3
 800efa2:	9900      	ldr	r1, [sp, #0]
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	f000 faf3 	bl	800f590 <_sbrk_r>
 800efaa:	9b01      	ldr	r3, [sp, #4]
 800efac:	4283      	cmp	r3, r0
 800efae:	d148      	bne.n	800f042 <_malloc_r+0xea>
 800efb0:	6823      	ldr	r3, [r4, #0]
 800efb2:	0028      	movs	r0, r5
 800efb4:	1aff      	subs	r7, r7, r3
 800efb6:	0039      	movs	r1, r7
 800efb8:	f7ff ffac 	bl	800ef14 <sbrk_aligned>
 800efbc:	3001      	adds	r0, #1
 800efbe:	d040      	beq.n	800f042 <_malloc_r+0xea>
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	19db      	adds	r3, r3, r7
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	6833      	ldr	r3, [r6, #0]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	2a00      	cmp	r2, #0
 800efcc:	d133      	bne.n	800f036 <_malloc_r+0xde>
 800efce:	9b00      	ldr	r3, [sp, #0]
 800efd0:	6033      	str	r3, [r6, #0]
 800efd2:	e019      	b.n	800f008 <_malloc_r+0xb0>
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	dac9      	bge.n	800ef6c <_malloc_r+0x14>
 800efd8:	230c      	movs	r3, #12
 800efda:	602b      	str	r3, [r5, #0]
 800efdc:	2000      	movs	r0, #0
 800efde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800efe0:	6821      	ldr	r1, [r4, #0]
 800efe2:	1bc9      	subs	r1, r1, r7
 800efe4:	d420      	bmi.n	800f028 <_malloc_r+0xd0>
 800efe6:	290b      	cmp	r1, #11
 800efe8:	d90a      	bls.n	800f000 <_malloc_r+0xa8>
 800efea:	19e2      	adds	r2, r4, r7
 800efec:	6027      	str	r7, [r4, #0]
 800efee:	42a3      	cmp	r3, r4
 800eff0:	d104      	bne.n	800effc <_malloc_r+0xa4>
 800eff2:	6032      	str	r2, [r6, #0]
 800eff4:	6863      	ldr	r3, [r4, #4]
 800eff6:	6011      	str	r1, [r2, #0]
 800eff8:	6053      	str	r3, [r2, #4]
 800effa:	e005      	b.n	800f008 <_malloc_r+0xb0>
 800effc:	605a      	str	r2, [r3, #4]
 800effe:	e7f9      	b.n	800eff4 <_malloc_r+0x9c>
 800f000:	6862      	ldr	r2, [r4, #4]
 800f002:	42a3      	cmp	r3, r4
 800f004:	d10e      	bne.n	800f024 <_malloc_r+0xcc>
 800f006:	6032      	str	r2, [r6, #0]
 800f008:	0028      	movs	r0, r5
 800f00a:	f000 f82d 	bl	800f068 <__malloc_unlock>
 800f00e:	0020      	movs	r0, r4
 800f010:	2207      	movs	r2, #7
 800f012:	300b      	adds	r0, #11
 800f014:	1d23      	adds	r3, r4, #4
 800f016:	4390      	bics	r0, r2
 800f018:	1ac2      	subs	r2, r0, r3
 800f01a:	4298      	cmp	r0, r3
 800f01c:	d0df      	beq.n	800efde <_malloc_r+0x86>
 800f01e:	1a1b      	subs	r3, r3, r0
 800f020:	50a3      	str	r3, [r4, r2]
 800f022:	e7dc      	b.n	800efde <_malloc_r+0x86>
 800f024:	605a      	str	r2, [r3, #4]
 800f026:	e7ef      	b.n	800f008 <_malloc_r+0xb0>
 800f028:	0023      	movs	r3, r4
 800f02a:	6864      	ldr	r4, [r4, #4]
 800f02c:	e7a6      	b.n	800ef7c <_malloc_r+0x24>
 800f02e:	9c00      	ldr	r4, [sp, #0]
 800f030:	6863      	ldr	r3, [r4, #4]
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	e7ad      	b.n	800ef92 <_malloc_r+0x3a>
 800f036:	001a      	movs	r2, r3
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	42a3      	cmp	r3, r4
 800f03c:	d1fb      	bne.n	800f036 <_malloc_r+0xde>
 800f03e:	2300      	movs	r3, #0
 800f040:	e7da      	b.n	800eff8 <_malloc_r+0xa0>
 800f042:	230c      	movs	r3, #12
 800f044:	0028      	movs	r0, r5
 800f046:	602b      	str	r3, [r5, #0]
 800f048:	f000 f80e 	bl	800f068 <__malloc_unlock>
 800f04c:	e7c6      	b.n	800efdc <_malloc_r+0x84>
 800f04e:	6007      	str	r7, [r0, #0]
 800f050:	e7da      	b.n	800f008 <_malloc_r+0xb0>
 800f052:	46c0      	nop			@ (mov r8, r8)
 800f054:	20001ea4 	.word	0x20001ea4

0800f058 <__malloc_lock>:
 800f058:	b510      	push	{r4, lr}
 800f05a:	4802      	ldr	r0, [pc, #8]	@ (800f064 <__malloc_lock+0xc>)
 800f05c:	f000 fae9 	bl	800f632 <__retarget_lock_acquire_recursive>
 800f060:	bd10      	pop	{r4, pc}
 800f062:	46c0      	nop			@ (mov r8, r8)
 800f064:	20001fe8 	.word	0x20001fe8

0800f068 <__malloc_unlock>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	4802      	ldr	r0, [pc, #8]	@ (800f074 <__malloc_unlock+0xc>)
 800f06c:	f000 fae2 	bl	800f634 <__retarget_lock_release_recursive>
 800f070:	bd10      	pop	{r4, pc}
 800f072:	46c0      	nop			@ (mov r8, r8)
 800f074:	20001fe8 	.word	0x20001fe8

0800f078 <std>:
 800f078:	2300      	movs	r3, #0
 800f07a:	b510      	push	{r4, lr}
 800f07c:	0004      	movs	r4, r0
 800f07e:	6003      	str	r3, [r0, #0]
 800f080:	6043      	str	r3, [r0, #4]
 800f082:	6083      	str	r3, [r0, #8]
 800f084:	8181      	strh	r1, [r0, #12]
 800f086:	6643      	str	r3, [r0, #100]	@ 0x64
 800f088:	81c2      	strh	r2, [r0, #14]
 800f08a:	6103      	str	r3, [r0, #16]
 800f08c:	6143      	str	r3, [r0, #20]
 800f08e:	6183      	str	r3, [r0, #24]
 800f090:	0019      	movs	r1, r3
 800f092:	2208      	movs	r2, #8
 800f094:	305c      	adds	r0, #92	@ 0x5c
 800f096:	f000 fa39 	bl	800f50c <memset>
 800f09a:	4b0b      	ldr	r3, [pc, #44]	@ (800f0c8 <std+0x50>)
 800f09c:	6224      	str	r4, [r4, #32]
 800f09e:	6263      	str	r3, [r4, #36]	@ 0x24
 800f0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0cc <std+0x54>)
 800f0a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d0 <std+0x58>)
 800f0a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d4 <std+0x5c>)
 800f0aa:	6323      	str	r3, [r4, #48]	@ 0x30
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d8 <std+0x60>)
 800f0ae:	429c      	cmp	r4, r3
 800f0b0:	d005      	beq.n	800f0be <std+0x46>
 800f0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f0dc <std+0x64>)
 800f0b4:	429c      	cmp	r4, r3
 800f0b6:	d002      	beq.n	800f0be <std+0x46>
 800f0b8:	4b09      	ldr	r3, [pc, #36]	@ (800f0e0 <std+0x68>)
 800f0ba:	429c      	cmp	r4, r3
 800f0bc:	d103      	bne.n	800f0c6 <std+0x4e>
 800f0be:	0020      	movs	r0, r4
 800f0c0:	3058      	adds	r0, #88	@ 0x58
 800f0c2:	f000 fab5 	bl	800f630 <__retarget_lock_init_recursive>
 800f0c6:	bd10      	pop	{r4, pc}
 800f0c8:	0800f2c1 	.word	0x0800f2c1
 800f0cc:	0800f2e9 	.word	0x0800f2e9
 800f0d0:	0800f321 	.word	0x0800f321
 800f0d4:	0800f34d 	.word	0x0800f34d
 800f0d8:	20001ea8 	.word	0x20001ea8
 800f0dc:	20001f10 	.word	0x20001f10
 800f0e0:	20001f78 	.word	0x20001f78

0800f0e4 <stdio_exit_handler>:
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	4a03      	ldr	r2, [pc, #12]	@ (800f0f4 <stdio_exit_handler+0x10>)
 800f0e8:	4903      	ldr	r1, [pc, #12]	@ (800f0f8 <stdio_exit_handler+0x14>)
 800f0ea:	4804      	ldr	r0, [pc, #16]	@ (800f0fc <stdio_exit_handler+0x18>)
 800f0ec:	f000 f86c 	bl	800f1c8 <_fwalk_sglue>
 800f0f0:	bd10      	pop	{r4, pc}
 800f0f2:	46c0      	nop			@ (mov r8, r8)
 800f0f4:	20000044 	.word	0x20000044
 800f0f8:	0800fd9d 	.word	0x0800fd9d
 800f0fc:	20000054 	.word	0x20000054

0800f100 <cleanup_stdio>:
 800f100:	6841      	ldr	r1, [r0, #4]
 800f102:	4b0b      	ldr	r3, [pc, #44]	@ (800f130 <cleanup_stdio+0x30>)
 800f104:	b510      	push	{r4, lr}
 800f106:	0004      	movs	r4, r0
 800f108:	4299      	cmp	r1, r3
 800f10a:	d001      	beq.n	800f110 <cleanup_stdio+0x10>
 800f10c:	f000 fe46 	bl	800fd9c <_fflush_r>
 800f110:	68a1      	ldr	r1, [r4, #8]
 800f112:	4b08      	ldr	r3, [pc, #32]	@ (800f134 <cleanup_stdio+0x34>)
 800f114:	4299      	cmp	r1, r3
 800f116:	d002      	beq.n	800f11e <cleanup_stdio+0x1e>
 800f118:	0020      	movs	r0, r4
 800f11a:	f000 fe3f 	bl	800fd9c <_fflush_r>
 800f11e:	68e1      	ldr	r1, [r4, #12]
 800f120:	4b05      	ldr	r3, [pc, #20]	@ (800f138 <cleanup_stdio+0x38>)
 800f122:	4299      	cmp	r1, r3
 800f124:	d002      	beq.n	800f12c <cleanup_stdio+0x2c>
 800f126:	0020      	movs	r0, r4
 800f128:	f000 fe38 	bl	800fd9c <_fflush_r>
 800f12c:	bd10      	pop	{r4, pc}
 800f12e:	46c0      	nop			@ (mov r8, r8)
 800f130:	20001ea8 	.word	0x20001ea8
 800f134:	20001f10 	.word	0x20001f10
 800f138:	20001f78 	.word	0x20001f78

0800f13c <global_stdio_init.part.0>:
 800f13c:	b510      	push	{r4, lr}
 800f13e:	4b09      	ldr	r3, [pc, #36]	@ (800f164 <global_stdio_init.part.0+0x28>)
 800f140:	4a09      	ldr	r2, [pc, #36]	@ (800f168 <global_stdio_init.part.0+0x2c>)
 800f142:	2104      	movs	r1, #4
 800f144:	601a      	str	r2, [r3, #0]
 800f146:	4809      	ldr	r0, [pc, #36]	@ (800f16c <global_stdio_init.part.0+0x30>)
 800f148:	2200      	movs	r2, #0
 800f14a:	f7ff ff95 	bl	800f078 <std>
 800f14e:	2201      	movs	r2, #1
 800f150:	2109      	movs	r1, #9
 800f152:	4807      	ldr	r0, [pc, #28]	@ (800f170 <global_stdio_init.part.0+0x34>)
 800f154:	f7ff ff90 	bl	800f078 <std>
 800f158:	2202      	movs	r2, #2
 800f15a:	2112      	movs	r1, #18
 800f15c:	4805      	ldr	r0, [pc, #20]	@ (800f174 <global_stdio_init.part.0+0x38>)
 800f15e:	f7ff ff8b 	bl	800f078 <std>
 800f162:	bd10      	pop	{r4, pc}
 800f164:	20001fe0 	.word	0x20001fe0
 800f168:	0800f0e5 	.word	0x0800f0e5
 800f16c:	20001ea8 	.word	0x20001ea8
 800f170:	20001f10 	.word	0x20001f10
 800f174:	20001f78 	.word	0x20001f78

0800f178 <__sfp_lock_acquire>:
 800f178:	b510      	push	{r4, lr}
 800f17a:	4802      	ldr	r0, [pc, #8]	@ (800f184 <__sfp_lock_acquire+0xc>)
 800f17c:	f000 fa59 	bl	800f632 <__retarget_lock_acquire_recursive>
 800f180:	bd10      	pop	{r4, pc}
 800f182:	46c0      	nop			@ (mov r8, r8)
 800f184:	20001fe9 	.word	0x20001fe9

0800f188 <__sfp_lock_release>:
 800f188:	b510      	push	{r4, lr}
 800f18a:	4802      	ldr	r0, [pc, #8]	@ (800f194 <__sfp_lock_release+0xc>)
 800f18c:	f000 fa52 	bl	800f634 <__retarget_lock_release_recursive>
 800f190:	bd10      	pop	{r4, pc}
 800f192:	46c0      	nop			@ (mov r8, r8)
 800f194:	20001fe9 	.word	0x20001fe9

0800f198 <__sinit>:
 800f198:	b510      	push	{r4, lr}
 800f19a:	0004      	movs	r4, r0
 800f19c:	f7ff ffec 	bl	800f178 <__sfp_lock_acquire>
 800f1a0:	6a23      	ldr	r3, [r4, #32]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <__sinit+0x14>
 800f1a6:	f7ff ffef 	bl	800f188 <__sfp_lock_release>
 800f1aa:	bd10      	pop	{r4, pc}
 800f1ac:	4b04      	ldr	r3, [pc, #16]	@ (800f1c0 <__sinit+0x28>)
 800f1ae:	6223      	str	r3, [r4, #32]
 800f1b0:	4b04      	ldr	r3, [pc, #16]	@ (800f1c4 <__sinit+0x2c>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1f6      	bne.n	800f1a6 <__sinit+0xe>
 800f1b8:	f7ff ffc0 	bl	800f13c <global_stdio_init.part.0>
 800f1bc:	e7f3      	b.n	800f1a6 <__sinit+0xe>
 800f1be:	46c0      	nop			@ (mov r8, r8)
 800f1c0:	0800f101 	.word	0x0800f101
 800f1c4:	20001fe0 	.word	0x20001fe0

0800f1c8 <_fwalk_sglue>:
 800f1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1ca:	0014      	movs	r4, r2
 800f1cc:	2600      	movs	r6, #0
 800f1ce:	9000      	str	r0, [sp, #0]
 800f1d0:	9101      	str	r1, [sp, #4]
 800f1d2:	68a5      	ldr	r5, [r4, #8]
 800f1d4:	6867      	ldr	r7, [r4, #4]
 800f1d6:	3f01      	subs	r7, #1
 800f1d8:	d504      	bpl.n	800f1e4 <_fwalk_sglue+0x1c>
 800f1da:	6824      	ldr	r4, [r4, #0]
 800f1dc:	2c00      	cmp	r4, #0
 800f1de:	d1f8      	bne.n	800f1d2 <_fwalk_sglue+0xa>
 800f1e0:	0030      	movs	r0, r6
 800f1e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f1e4:	89ab      	ldrh	r3, [r5, #12]
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d908      	bls.n	800f1fc <_fwalk_sglue+0x34>
 800f1ea:	220e      	movs	r2, #14
 800f1ec:	5eab      	ldrsh	r3, [r5, r2]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	d004      	beq.n	800f1fc <_fwalk_sglue+0x34>
 800f1f2:	0029      	movs	r1, r5
 800f1f4:	9800      	ldr	r0, [sp, #0]
 800f1f6:	9b01      	ldr	r3, [sp, #4]
 800f1f8:	4798      	blx	r3
 800f1fa:	4306      	orrs	r6, r0
 800f1fc:	3568      	adds	r5, #104	@ 0x68
 800f1fe:	e7ea      	b.n	800f1d6 <_fwalk_sglue+0xe>

0800f200 <_puts_r>:
 800f200:	6a03      	ldr	r3, [r0, #32]
 800f202:	b570      	push	{r4, r5, r6, lr}
 800f204:	0005      	movs	r5, r0
 800f206:	000e      	movs	r6, r1
 800f208:	6884      	ldr	r4, [r0, #8]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <_puts_r+0x12>
 800f20e:	f7ff ffc3 	bl	800f198 <__sinit>
 800f212:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f214:	07db      	lsls	r3, r3, #31
 800f216:	d405      	bmi.n	800f224 <_puts_r+0x24>
 800f218:	89a3      	ldrh	r3, [r4, #12]
 800f21a:	059b      	lsls	r3, r3, #22
 800f21c:	d402      	bmi.n	800f224 <_puts_r+0x24>
 800f21e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f220:	f000 fa07 	bl	800f632 <__retarget_lock_acquire_recursive>
 800f224:	89a3      	ldrh	r3, [r4, #12]
 800f226:	071b      	lsls	r3, r3, #28
 800f228:	d502      	bpl.n	800f230 <_puts_r+0x30>
 800f22a:	6923      	ldr	r3, [r4, #16]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d11f      	bne.n	800f270 <_puts_r+0x70>
 800f230:	0021      	movs	r1, r4
 800f232:	0028      	movs	r0, r5
 800f234:	f000 f90c 	bl	800f450 <__swsetup_r>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d019      	beq.n	800f270 <_puts_r+0x70>
 800f23c:	2501      	movs	r5, #1
 800f23e:	426d      	negs	r5, r5
 800f240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f242:	07db      	lsls	r3, r3, #31
 800f244:	d405      	bmi.n	800f252 <_puts_r+0x52>
 800f246:	89a3      	ldrh	r3, [r4, #12]
 800f248:	059b      	lsls	r3, r3, #22
 800f24a:	d402      	bmi.n	800f252 <_puts_r+0x52>
 800f24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f24e:	f000 f9f1 	bl	800f634 <__retarget_lock_release_recursive>
 800f252:	0028      	movs	r0, r5
 800f254:	bd70      	pop	{r4, r5, r6, pc}
 800f256:	3601      	adds	r6, #1
 800f258:	60a3      	str	r3, [r4, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	da04      	bge.n	800f268 <_puts_r+0x68>
 800f25e:	69a2      	ldr	r2, [r4, #24]
 800f260:	429a      	cmp	r2, r3
 800f262:	dc16      	bgt.n	800f292 <_puts_r+0x92>
 800f264:	290a      	cmp	r1, #10
 800f266:	d014      	beq.n	800f292 <_puts_r+0x92>
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	1c5a      	adds	r2, r3, #1
 800f26c:	6022      	str	r2, [r4, #0]
 800f26e:	7019      	strb	r1, [r3, #0]
 800f270:	68a3      	ldr	r3, [r4, #8]
 800f272:	7831      	ldrb	r1, [r6, #0]
 800f274:	3b01      	subs	r3, #1
 800f276:	2900      	cmp	r1, #0
 800f278:	d1ed      	bne.n	800f256 <_puts_r+0x56>
 800f27a:	60a3      	str	r3, [r4, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	da0f      	bge.n	800f2a0 <_puts_r+0xa0>
 800f280:	0022      	movs	r2, r4
 800f282:	0028      	movs	r0, r5
 800f284:	310a      	adds	r1, #10
 800f286:	f000 f8a1 	bl	800f3cc <__swbuf_r>
 800f28a:	3001      	adds	r0, #1
 800f28c:	d0d6      	beq.n	800f23c <_puts_r+0x3c>
 800f28e:	250a      	movs	r5, #10
 800f290:	e7d6      	b.n	800f240 <_puts_r+0x40>
 800f292:	0022      	movs	r2, r4
 800f294:	0028      	movs	r0, r5
 800f296:	f000 f899 	bl	800f3cc <__swbuf_r>
 800f29a:	3001      	adds	r0, #1
 800f29c:	d1e8      	bne.n	800f270 <_puts_r+0x70>
 800f29e:	e7cd      	b.n	800f23c <_puts_r+0x3c>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	1c5a      	adds	r2, r3, #1
 800f2a4:	6022      	str	r2, [r4, #0]
 800f2a6:	220a      	movs	r2, #10
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	e7f0      	b.n	800f28e <_puts_r+0x8e>

0800f2ac <puts>:
 800f2ac:	b510      	push	{r4, lr}
 800f2ae:	4b03      	ldr	r3, [pc, #12]	@ (800f2bc <puts+0x10>)
 800f2b0:	0001      	movs	r1, r0
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	f7ff ffa4 	bl	800f200 <_puts_r>
 800f2b8:	bd10      	pop	{r4, pc}
 800f2ba:	46c0      	nop			@ (mov r8, r8)
 800f2bc:	20000050 	.word	0x20000050

0800f2c0 <__sread>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	000c      	movs	r4, r1
 800f2c4:	250e      	movs	r5, #14
 800f2c6:	5f49      	ldrsh	r1, [r1, r5]
 800f2c8:	f000 f94e 	bl	800f568 <_read_r>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	db03      	blt.n	800f2d8 <__sread+0x18>
 800f2d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f2d2:	181b      	adds	r3, r3, r0
 800f2d4:	6563      	str	r3, [r4, #84]	@ 0x54
 800f2d6:	bd70      	pop	{r4, r5, r6, pc}
 800f2d8:	89a3      	ldrh	r3, [r4, #12]
 800f2da:	4a02      	ldr	r2, [pc, #8]	@ (800f2e4 <__sread+0x24>)
 800f2dc:	4013      	ands	r3, r2
 800f2de:	81a3      	strh	r3, [r4, #12]
 800f2e0:	e7f9      	b.n	800f2d6 <__sread+0x16>
 800f2e2:	46c0      	nop			@ (mov r8, r8)
 800f2e4:	ffffefff 	.word	0xffffefff

0800f2e8 <__swrite>:
 800f2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ea:	001f      	movs	r7, r3
 800f2ec:	898b      	ldrh	r3, [r1, #12]
 800f2ee:	0005      	movs	r5, r0
 800f2f0:	000c      	movs	r4, r1
 800f2f2:	0016      	movs	r6, r2
 800f2f4:	05db      	lsls	r3, r3, #23
 800f2f6:	d505      	bpl.n	800f304 <__swrite+0x1c>
 800f2f8:	230e      	movs	r3, #14
 800f2fa:	5ec9      	ldrsh	r1, [r1, r3]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2302      	movs	r3, #2
 800f300:	f000 f91e 	bl	800f540 <_lseek_r>
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	4a05      	ldr	r2, [pc, #20]	@ (800f31c <__swrite+0x34>)
 800f308:	0028      	movs	r0, r5
 800f30a:	4013      	ands	r3, r2
 800f30c:	81a3      	strh	r3, [r4, #12]
 800f30e:	0032      	movs	r2, r6
 800f310:	230e      	movs	r3, #14
 800f312:	5ee1      	ldrsh	r1, [r4, r3]
 800f314:	003b      	movs	r3, r7
 800f316:	f000 f94d 	bl	800f5b4 <_write_r>
 800f31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f31c:	ffffefff 	.word	0xffffefff

0800f320 <__sseek>:
 800f320:	b570      	push	{r4, r5, r6, lr}
 800f322:	000c      	movs	r4, r1
 800f324:	250e      	movs	r5, #14
 800f326:	5f49      	ldrsh	r1, [r1, r5]
 800f328:	f000 f90a 	bl	800f540 <_lseek_r>
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	1c42      	adds	r2, r0, #1
 800f330:	d103      	bne.n	800f33a <__sseek+0x1a>
 800f332:	4a05      	ldr	r2, [pc, #20]	@ (800f348 <__sseek+0x28>)
 800f334:	4013      	ands	r3, r2
 800f336:	81a3      	strh	r3, [r4, #12]
 800f338:	bd70      	pop	{r4, r5, r6, pc}
 800f33a:	2280      	movs	r2, #128	@ 0x80
 800f33c:	0152      	lsls	r2, r2, #5
 800f33e:	4313      	orrs	r3, r2
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	6560      	str	r0, [r4, #84]	@ 0x54
 800f344:	e7f8      	b.n	800f338 <__sseek+0x18>
 800f346:	46c0      	nop			@ (mov r8, r8)
 800f348:	ffffefff 	.word	0xffffefff

0800f34c <__sclose>:
 800f34c:	b510      	push	{r4, lr}
 800f34e:	230e      	movs	r3, #14
 800f350:	5ec9      	ldrsh	r1, [r1, r3]
 800f352:	f000 f8e3 	bl	800f51c <_close_r>
 800f356:	bd10      	pop	{r4, pc}

0800f358 <_vsniprintf_r>:
 800f358:	b530      	push	{r4, r5, lr}
 800f35a:	0005      	movs	r5, r0
 800f35c:	0014      	movs	r4, r2
 800f35e:	0008      	movs	r0, r1
 800f360:	001a      	movs	r2, r3
 800f362:	b09b      	sub	sp, #108	@ 0x6c
 800f364:	2c00      	cmp	r4, #0
 800f366:	da05      	bge.n	800f374 <_vsniprintf_r+0x1c>
 800f368:	238b      	movs	r3, #139	@ 0x8b
 800f36a:	2001      	movs	r0, #1
 800f36c:	602b      	str	r3, [r5, #0]
 800f36e:	4240      	negs	r0, r0
 800f370:	b01b      	add	sp, #108	@ 0x6c
 800f372:	bd30      	pop	{r4, r5, pc}
 800f374:	2382      	movs	r3, #130	@ 0x82
 800f376:	4669      	mov	r1, sp
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	818b      	strh	r3, [r1, #12]
 800f37c:	2100      	movs	r1, #0
 800f37e:	9000      	str	r0, [sp, #0]
 800f380:	9119      	str	r1, [sp, #100]	@ 0x64
 800f382:	9004      	str	r0, [sp, #16]
 800f384:	428c      	cmp	r4, r1
 800f386:	d000      	beq.n	800f38a <_vsniprintf_r+0x32>
 800f388:	1e61      	subs	r1, r4, #1
 800f38a:	2301      	movs	r3, #1
 800f38c:	9102      	str	r1, [sp, #8]
 800f38e:	9105      	str	r1, [sp, #20]
 800f390:	4669      	mov	r1, sp
 800f392:	425b      	negs	r3, r3
 800f394:	81cb      	strh	r3, [r1, #14]
 800f396:	0028      	movs	r0, r5
 800f398:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f39a:	f000 f9ff 	bl	800f79c <_svfiprintf_r>
 800f39e:	1c43      	adds	r3, r0, #1
 800f3a0:	da01      	bge.n	800f3a6 <_vsniprintf_r+0x4e>
 800f3a2:	238b      	movs	r3, #139	@ 0x8b
 800f3a4:	602b      	str	r3, [r5, #0]
 800f3a6:	2c00      	cmp	r4, #0
 800f3a8:	d0e2      	beq.n	800f370 <_vsniprintf_r+0x18>
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	9b00      	ldr	r3, [sp, #0]
 800f3ae:	701a      	strb	r2, [r3, #0]
 800f3b0:	e7de      	b.n	800f370 <_vsniprintf_r+0x18>
	...

0800f3b4 <vsniprintf>:
 800f3b4:	b513      	push	{r0, r1, r4, lr}
 800f3b6:	4c04      	ldr	r4, [pc, #16]	@ (800f3c8 <vsniprintf+0x14>)
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	0013      	movs	r3, r2
 800f3bc:	000a      	movs	r2, r1
 800f3be:	0001      	movs	r1, r0
 800f3c0:	6820      	ldr	r0, [r4, #0]
 800f3c2:	f7ff ffc9 	bl	800f358 <_vsniprintf_r>
 800f3c6:	bd16      	pop	{r1, r2, r4, pc}
 800f3c8:	20000050 	.word	0x20000050

0800f3cc <__swbuf_r>:
 800f3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ce:	0006      	movs	r6, r0
 800f3d0:	000d      	movs	r5, r1
 800f3d2:	0014      	movs	r4, r2
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d004      	beq.n	800f3e2 <__swbuf_r+0x16>
 800f3d8:	6a03      	ldr	r3, [r0, #32]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d101      	bne.n	800f3e2 <__swbuf_r+0x16>
 800f3de:	f7ff fedb 	bl	800f198 <__sinit>
 800f3e2:	69a3      	ldr	r3, [r4, #24]
 800f3e4:	60a3      	str	r3, [r4, #8]
 800f3e6:	89a3      	ldrh	r3, [r4, #12]
 800f3e8:	071b      	lsls	r3, r3, #28
 800f3ea:	d502      	bpl.n	800f3f2 <__swbuf_r+0x26>
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d109      	bne.n	800f406 <__swbuf_r+0x3a>
 800f3f2:	0021      	movs	r1, r4
 800f3f4:	0030      	movs	r0, r6
 800f3f6:	f000 f82b 	bl	800f450 <__swsetup_r>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d003      	beq.n	800f406 <__swbuf_r+0x3a>
 800f3fe:	2501      	movs	r5, #1
 800f400:	426d      	negs	r5, r5
 800f402:	0028      	movs	r0, r5
 800f404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	6820      	ldr	r0, [r4, #0]
 800f40a:	b2ef      	uxtb	r7, r5
 800f40c:	1ac0      	subs	r0, r0, r3
 800f40e:	6963      	ldr	r3, [r4, #20]
 800f410:	b2ed      	uxtb	r5, r5
 800f412:	4283      	cmp	r3, r0
 800f414:	dc05      	bgt.n	800f422 <__swbuf_r+0x56>
 800f416:	0021      	movs	r1, r4
 800f418:	0030      	movs	r0, r6
 800f41a:	f000 fcbf 	bl	800fd9c <_fflush_r>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d1ed      	bne.n	800f3fe <__swbuf_r+0x32>
 800f422:	68a3      	ldr	r3, [r4, #8]
 800f424:	3001      	adds	r0, #1
 800f426:	3b01      	subs	r3, #1
 800f428:	60a3      	str	r3, [r4, #8]
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	1c5a      	adds	r2, r3, #1
 800f42e:	6022      	str	r2, [r4, #0]
 800f430:	701f      	strb	r7, [r3, #0]
 800f432:	6963      	ldr	r3, [r4, #20]
 800f434:	4283      	cmp	r3, r0
 800f436:	d004      	beq.n	800f442 <__swbuf_r+0x76>
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	07db      	lsls	r3, r3, #31
 800f43c:	d5e1      	bpl.n	800f402 <__swbuf_r+0x36>
 800f43e:	2d0a      	cmp	r5, #10
 800f440:	d1df      	bne.n	800f402 <__swbuf_r+0x36>
 800f442:	0021      	movs	r1, r4
 800f444:	0030      	movs	r0, r6
 800f446:	f000 fca9 	bl	800fd9c <_fflush_r>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d0d9      	beq.n	800f402 <__swbuf_r+0x36>
 800f44e:	e7d6      	b.n	800f3fe <__swbuf_r+0x32>

0800f450 <__swsetup_r>:
 800f450:	4b2d      	ldr	r3, [pc, #180]	@ (800f508 <__swsetup_r+0xb8>)
 800f452:	b570      	push	{r4, r5, r6, lr}
 800f454:	0005      	movs	r5, r0
 800f456:	6818      	ldr	r0, [r3, #0]
 800f458:	000c      	movs	r4, r1
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d004      	beq.n	800f468 <__swsetup_r+0x18>
 800f45e:	6a03      	ldr	r3, [r0, #32]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d101      	bne.n	800f468 <__swsetup_r+0x18>
 800f464:	f7ff fe98 	bl	800f198 <__sinit>
 800f468:	220c      	movs	r2, #12
 800f46a:	5ea3      	ldrsh	r3, [r4, r2]
 800f46c:	071a      	lsls	r2, r3, #28
 800f46e:	d423      	bmi.n	800f4b8 <__swsetup_r+0x68>
 800f470:	06da      	lsls	r2, r3, #27
 800f472:	d407      	bmi.n	800f484 <__swsetup_r+0x34>
 800f474:	2209      	movs	r2, #9
 800f476:	602a      	str	r2, [r5, #0]
 800f478:	2240      	movs	r2, #64	@ 0x40
 800f47a:	2001      	movs	r0, #1
 800f47c:	4313      	orrs	r3, r2
 800f47e:	81a3      	strh	r3, [r4, #12]
 800f480:	4240      	negs	r0, r0
 800f482:	e03a      	b.n	800f4fa <__swsetup_r+0xaa>
 800f484:	075b      	lsls	r3, r3, #29
 800f486:	d513      	bpl.n	800f4b0 <__swsetup_r+0x60>
 800f488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f48a:	2900      	cmp	r1, #0
 800f48c:	d008      	beq.n	800f4a0 <__swsetup_r+0x50>
 800f48e:	0023      	movs	r3, r4
 800f490:	3344      	adds	r3, #68	@ 0x44
 800f492:	4299      	cmp	r1, r3
 800f494:	d002      	beq.n	800f49c <__swsetup_r+0x4c>
 800f496:	0028      	movs	r0, r5
 800f498:	f000 f8d6 	bl	800f648 <_free_r>
 800f49c:	2300      	movs	r3, #0
 800f49e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4a0:	2224      	movs	r2, #36	@ 0x24
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	4393      	bics	r3, r2
 800f4a6:	81a3      	strh	r3, [r4, #12]
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	6063      	str	r3, [r4, #4]
 800f4ac:	6923      	ldr	r3, [r4, #16]
 800f4ae:	6023      	str	r3, [r4, #0]
 800f4b0:	2308      	movs	r3, #8
 800f4b2:	89a2      	ldrh	r2, [r4, #12]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	81a3      	strh	r3, [r4, #12]
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10b      	bne.n	800f4d6 <__swsetup_r+0x86>
 800f4be:	21a0      	movs	r1, #160	@ 0xa0
 800f4c0:	2280      	movs	r2, #128	@ 0x80
 800f4c2:	89a3      	ldrh	r3, [r4, #12]
 800f4c4:	0089      	lsls	r1, r1, #2
 800f4c6:	0092      	lsls	r2, r2, #2
 800f4c8:	400b      	ands	r3, r1
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d003      	beq.n	800f4d6 <__swsetup_r+0x86>
 800f4ce:	0021      	movs	r1, r4
 800f4d0:	0028      	movs	r0, r5
 800f4d2:	f000 fcb9 	bl	800fe48 <__smakebuf_r>
 800f4d6:	220c      	movs	r2, #12
 800f4d8:	5ea3      	ldrsh	r3, [r4, r2]
 800f4da:	2101      	movs	r1, #1
 800f4dc:	001a      	movs	r2, r3
 800f4de:	400a      	ands	r2, r1
 800f4e0:	420b      	tst	r3, r1
 800f4e2:	d00b      	beq.n	800f4fc <__swsetup_r+0xac>
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	60a2      	str	r2, [r4, #8]
 800f4e8:	6962      	ldr	r2, [r4, #20]
 800f4ea:	4252      	negs	r2, r2
 800f4ec:	61a2      	str	r2, [r4, #24]
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	6922      	ldr	r2, [r4, #16]
 800f4f2:	4282      	cmp	r2, r0
 800f4f4:	d101      	bne.n	800f4fa <__swsetup_r+0xaa>
 800f4f6:	061a      	lsls	r2, r3, #24
 800f4f8:	d4be      	bmi.n	800f478 <__swsetup_r+0x28>
 800f4fa:	bd70      	pop	{r4, r5, r6, pc}
 800f4fc:	0799      	lsls	r1, r3, #30
 800f4fe:	d400      	bmi.n	800f502 <__swsetup_r+0xb2>
 800f500:	6962      	ldr	r2, [r4, #20]
 800f502:	60a2      	str	r2, [r4, #8]
 800f504:	e7f3      	b.n	800f4ee <__swsetup_r+0x9e>
 800f506:	46c0      	nop			@ (mov r8, r8)
 800f508:	20000050 	.word	0x20000050

0800f50c <memset>:
 800f50c:	0003      	movs	r3, r0
 800f50e:	1882      	adds	r2, r0, r2
 800f510:	4293      	cmp	r3, r2
 800f512:	d100      	bne.n	800f516 <memset+0xa>
 800f514:	4770      	bx	lr
 800f516:	7019      	strb	r1, [r3, #0]
 800f518:	3301      	adds	r3, #1
 800f51a:	e7f9      	b.n	800f510 <memset+0x4>

0800f51c <_close_r>:
 800f51c:	2300      	movs	r3, #0
 800f51e:	b570      	push	{r4, r5, r6, lr}
 800f520:	4d06      	ldr	r5, [pc, #24]	@ (800f53c <_close_r+0x20>)
 800f522:	0004      	movs	r4, r0
 800f524:	0008      	movs	r0, r1
 800f526:	602b      	str	r3, [r5, #0]
 800f528:	f7f7 fe86 	bl	8007238 <_close>
 800f52c:	1c43      	adds	r3, r0, #1
 800f52e:	d103      	bne.n	800f538 <_close_r+0x1c>
 800f530:	682b      	ldr	r3, [r5, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d000      	beq.n	800f538 <_close_r+0x1c>
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	bd70      	pop	{r4, r5, r6, pc}
 800f53a:	46c0      	nop			@ (mov r8, r8)
 800f53c:	20001fe4 	.word	0x20001fe4

0800f540 <_lseek_r>:
 800f540:	b570      	push	{r4, r5, r6, lr}
 800f542:	0004      	movs	r4, r0
 800f544:	0008      	movs	r0, r1
 800f546:	0011      	movs	r1, r2
 800f548:	001a      	movs	r2, r3
 800f54a:	2300      	movs	r3, #0
 800f54c:	4d05      	ldr	r5, [pc, #20]	@ (800f564 <_lseek_r+0x24>)
 800f54e:	602b      	str	r3, [r5, #0]
 800f550:	f7f7 fe93 	bl	800727a <_lseek>
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	d103      	bne.n	800f560 <_lseek_r+0x20>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d000      	beq.n	800f560 <_lseek_r+0x20>
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	bd70      	pop	{r4, r5, r6, pc}
 800f562:	46c0      	nop			@ (mov r8, r8)
 800f564:	20001fe4 	.word	0x20001fe4

0800f568 <_read_r>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	0004      	movs	r4, r0
 800f56c:	0008      	movs	r0, r1
 800f56e:	0011      	movs	r1, r2
 800f570:	001a      	movs	r2, r3
 800f572:	2300      	movs	r3, #0
 800f574:	4d05      	ldr	r5, [pc, #20]	@ (800f58c <_read_r+0x24>)
 800f576:	602b      	str	r3, [r5, #0]
 800f578:	f7f7 fdf8 	bl	800716c <_read>
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	d103      	bne.n	800f588 <_read_r+0x20>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d000      	beq.n	800f588 <_read_r+0x20>
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	bd70      	pop	{r4, r5, r6, pc}
 800f58a:	46c0      	nop			@ (mov r8, r8)
 800f58c:	20001fe4 	.word	0x20001fe4

0800f590 <_sbrk_r>:
 800f590:	2300      	movs	r3, #0
 800f592:	b570      	push	{r4, r5, r6, lr}
 800f594:	4d06      	ldr	r5, [pc, #24]	@ (800f5b0 <_sbrk_r+0x20>)
 800f596:	0004      	movs	r4, r0
 800f598:	0008      	movs	r0, r1
 800f59a:	602b      	str	r3, [r5, #0]
 800f59c:	f7f7 fe20 	bl	80071e0 <_sbrk>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d103      	bne.n	800f5ac <_sbrk_r+0x1c>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d000      	beq.n	800f5ac <_sbrk_r+0x1c>
 800f5aa:	6023      	str	r3, [r4, #0]
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
 800f5ae:	46c0      	nop			@ (mov r8, r8)
 800f5b0:	20001fe4 	.word	0x20001fe4

0800f5b4 <_write_r>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	0004      	movs	r4, r0
 800f5b8:	0008      	movs	r0, r1
 800f5ba:	0011      	movs	r1, r2
 800f5bc:	001a      	movs	r2, r3
 800f5be:	2300      	movs	r3, #0
 800f5c0:	4d05      	ldr	r5, [pc, #20]	@ (800f5d8 <_write_r+0x24>)
 800f5c2:	602b      	str	r3, [r5, #0]
 800f5c4:	f7f7 fdef 	bl	80071a6 <_write>
 800f5c8:	1c43      	adds	r3, r0, #1
 800f5ca:	d103      	bne.n	800f5d4 <_write_r+0x20>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d000      	beq.n	800f5d4 <_write_r+0x20>
 800f5d2:	6023      	str	r3, [r4, #0]
 800f5d4:	bd70      	pop	{r4, r5, r6, pc}
 800f5d6:	46c0      	nop			@ (mov r8, r8)
 800f5d8:	20001fe4 	.word	0x20001fe4

0800f5dc <__errno>:
 800f5dc:	4b01      	ldr	r3, [pc, #4]	@ (800f5e4 <__errno+0x8>)
 800f5de:	6818      	ldr	r0, [r3, #0]
 800f5e0:	4770      	bx	lr
 800f5e2:	46c0      	nop			@ (mov r8, r8)
 800f5e4:	20000050 	.word	0x20000050

0800f5e8 <__libc_init_array>:
 800f5e8:	b570      	push	{r4, r5, r6, lr}
 800f5ea:	2600      	movs	r6, #0
 800f5ec:	4c0c      	ldr	r4, [pc, #48]	@ (800f620 <__libc_init_array+0x38>)
 800f5ee:	4d0d      	ldr	r5, [pc, #52]	@ (800f624 <__libc_init_array+0x3c>)
 800f5f0:	1b64      	subs	r4, r4, r5
 800f5f2:	10a4      	asrs	r4, r4, #2
 800f5f4:	42a6      	cmp	r6, r4
 800f5f6:	d109      	bne.n	800f60c <__libc_init_array+0x24>
 800f5f8:	2600      	movs	r6, #0
 800f5fa:	f000 fce1 	bl	800ffc0 <_init>
 800f5fe:	4c0a      	ldr	r4, [pc, #40]	@ (800f628 <__libc_init_array+0x40>)
 800f600:	4d0a      	ldr	r5, [pc, #40]	@ (800f62c <__libc_init_array+0x44>)
 800f602:	1b64      	subs	r4, r4, r5
 800f604:	10a4      	asrs	r4, r4, #2
 800f606:	42a6      	cmp	r6, r4
 800f608:	d105      	bne.n	800f616 <__libc_init_array+0x2e>
 800f60a:	bd70      	pop	{r4, r5, r6, pc}
 800f60c:	00b3      	lsls	r3, r6, #2
 800f60e:	58eb      	ldr	r3, [r5, r3]
 800f610:	4798      	blx	r3
 800f612:	3601      	adds	r6, #1
 800f614:	e7ee      	b.n	800f5f4 <__libc_init_array+0xc>
 800f616:	00b3      	lsls	r3, r6, #2
 800f618:	58eb      	ldr	r3, [r5, r3]
 800f61a:	4798      	blx	r3
 800f61c:	3601      	adds	r6, #1
 800f61e:	e7f2      	b.n	800f606 <__libc_init_array+0x1e>
 800f620:	08011b40 	.word	0x08011b40
 800f624:	08011b40 	.word	0x08011b40
 800f628:	08011b44 	.word	0x08011b44
 800f62c:	08011b40 	.word	0x08011b40

0800f630 <__retarget_lock_init_recursive>:
 800f630:	4770      	bx	lr

0800f632 <__retarget_lock_acquire_recursive>:
 800f632:	4770      	bx	lr

0800f634 <__retarget_lock_release_recursive>:
 800f634:	4770      	bx	lr

0800f636 <memcpy>:
 800f636:	2300      	movs	r3, #0
 800f638:	b510      	push	{r4, lr}
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d100      	bne.n	800f640 <memcpy+0xa>
 800f63e:	bd10      	pop	{r4, pc}
 800f640:	5ccc      	ldrb	r4, [r1, r3]
 800f642:	54c4      	strb	r4, [r0, r3]
 800f644:	3301      	adds	r3, #1
 800f646:	e7f8      	b.n	800f63a <memcpy+0x4>

0800f648 <_free_r>:
 800f648:	b570      	push	{r4, r5, r6, lr}
 800f64a:	0005      	movs	r5, r0
 800f64c:	1e0c      	subs	r4, r1, #0
 800f64e:	d010      	beq.n	800f672 <_free_r+0x2a>
 800f650:	3c04      	subs	r4, #4
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	da00      	bge.n	800f65a <_free_r+0x12>
 800f658:	18e4      	adds	r4, r4, r3
 800f65a:	0028      	movs	r0, r5
 800f65c:	f7ff fcfc 	bl	800f058 <__malloc_lock>
 800f660:	4a1d      	ldr	r2, [pc, #116]	@ (800f6d8 <_free_r+0x90>)
 800f662:	6813      	ldr	r3, [r2, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d105      	bne.n	800f674 <_free_r+0x2c>
 800f668:	6063      	str	r3, [r4, #4]
 800f66a:	6014      	str	r4, [r2, #0]
 800f66c:	0028      	movs	r0, r5
 800f66e:	f7ff fcfb 	bl	800f068 <__malloc_unlock>
 800f672:	bd70      	pop	{r4, r5, r6, pc}
 800f674:	42a3      	cmp	r3, r4
 800f676:	d908      	bls.n	800f68a <_free_r+0x42>
 800f678:	6820      	ldr	r0, [r4, #0]
 800f67a:	1821      	adds	r1, r4, r0
 800f67c:	428b      	cmp	r3, r1
 800f67e:	d1f3      	bne.n	800f668 <_free_r+0x20>
 800f680:	6819      	ldr	r1, [r3, #0]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	1809      	adds	r1, r1, r0
 800f686:	6021      	str	r1, [r4, #0]
 800f688:	e7ee      	b.n	800f668 <_free_r+0x20>
 800f68a:	001a      	movs	r2, r3
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <_free_r+0x4e>
 800f692:	42a3      	cmp	r3, r4
 800f694:	d9f9      	bls.n	800f68a <_free_r+0x42>
 800f696:	6811      	ldr	r1, [r2, #0]
 800f698:	1850      	adds	r0, r2, r1
 800f69a:	42a0      	cmp	r0, r4
 800f69c:	d10b      	bne.n	800f6b6 <_free_r+0x6e>
 800f69e:	6820      	ldr	r0, [r4, #0]
 800f6a0:	1809      	adds	r1, r1, r0
 800f6a2:	1850      	adds	r0, r2, r1
 800f6a4:	6011      	str	r1, [r2, #0]
 800f6a6:	4283      	cmp	r3, r0
 800f6a8:	d1e0      	bne.n	800f66c <_free_r+0x24>
 800f6aa:	6818      	ldr	r0, [r3, #0]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	1841      	adds	r1, r0, r1
 800f6b0:	6011      	str	r1, [r2, #0]
 800f6b2:	6053      	str	r3, [r2, #4]
 800f6b4:	e7da      	b.n	800f66c <_free_r+0x24>
 800f6b6:	42a0      	cmp	r0, r4
 800f6b8:	d902      	bls.n	800f6c0 <_free_r+0x78>
 800f6ba:	230c      	movs	r3, #12
 800f6bc:	602b      	str	r3, [r5, #0]
 800f6be:	e7d5      	b.n	800f66c <_free_r+0x24>
 800f6c0:	6820      	ldr	r0, [r4, #0]
 800f6c2:	1821      	adds	r1, r4, r0
 800f6c4:	428b      	cmp	r3, r1
 800f6c6:	d103      	bne.n	800f6d0 <_free_r+0x88>
 800f6c8:	6819      	ldr	r1, [r3, #0]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	1809      	adds	r1, r1, r0
 800f6ce:	6021      	str	r1, [r4, #0]
 800f6d0:	6063      	str	r3, [r4, #4]
 800f6d2:	6054      	str	r4, [r2, #4]
 800f6d4:	e7ca      	b.n	800f66c <_free_r+0x24>
 800f6d6:	46c0      	nop			@ (mov r8, r8)
 800f6d8:	20001ea4 	.word	0x20001ea4

0800f6dc <__ssputs_r>:
 800f6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6de:	688e      	ldr	r6, [r1, #8]
 800f6e0:	b085      	sub	sp, #20
 800f6e2:	001f      	movs	r7, r3
 800f6e4:	000c      	movs	r4, r1
 800f6e6:	680b      	ldr	r3, [r1, #0]
 800f6e8:	9002      	str	r0, [sp, #8]
 800f6ea:	9203      	str	r2, [sp, #12]
 800f6ec:	42be      	cmp	r6, r7
 800f6ee:	d830      	bhi.n	800f752 <__ssputs_r+0x76>
 800f6f0:	210c      	movs	r1, #12
 800f6f2:	5e62      	ldrsh	r2, [r4, r1]
 800f6f4:	2190      	movs	r1, #144	@ 0x90
 800f6f6:	00c9      	lsls	r1, r1, #3
 800f6f8:	420a      	tst	r2, r1
 800f6fa:	d028      	beq.n	800f74e <__ssputs_r+0x72>
 800f6fc:	2003      	movs	r0, #3
 800f6fe:	6921      	ldr	r1, [r4, #16]
 800f700:	1a5b      	subs	r3, r3, r1
 800f702:	9301      	str	r3, [sp, #4]
 800f704:	6963      	ldr	r3, [r4, #20]
 800f706:	4343      	muls	r3, r0
 800f708:	9801      	ldr	r0, [sp, #4]
 800f70a:	0fdd      	lsrs	r5, r3, #31
 800f70c:	18ed      	adds	r5, r5, r3
 800f70e:	1c7b      	adds	r3, r7, #1
 800f710:	181b      	adds	r3, r3, r0
 800f712:	106d      	asrs	r5, r5, #1
 800f714:	42ab      	cmp	r3, r5
 800f716:	d900      	bls.n	800f71a <__ssputs_r+0x3e>
 800f718:	001d      	movs	r5, r3
 800f71a:	0552      	lsls	r2, r2, #21
 800f71c:	d528      	bpl.n	800f770 <__ssputs_r+0x94>
 800f71e:	0029      	movs	r1, r5
 800f720:	9802      	ldr	r0, [sp, #8]
 800f722:	f7ff fc19 	bl	800ef58 <_malloc_r>
 800f726:	1e06      	subs	r6, r0, #0
 800f728:	d02c      	beq.n	800f784 <__ssputs_r+0xa8>
 800f72a:	9a01      	ldr	r2, [sp, #4]
 800f72c:	6921      	ldr	r1, [r4, #16]
 800f72e:	f7ff ff82 	bl	800f636 <memcpy>
 800f732:	89a2      	ldrh	r2, [r4, #12]
 800f734:	4b18      	ldr	r3, [pc, #96]	@ (800f798 <__ssputs_r+0xbc>)
 800f736:	401a      	ands	r2, r3
 800f738:	2380      	movs	r3, #128	@ 0x80
 800f73a:	4313      	orrs	r3, r2
 800f73c:	81a3      	strh	r3, [r4, #12]
 800f73e:	9b01      	ldr	r3, [sp, #4]
 800f740:	6126      	str	r6, [r4, #16]
 800f742:	18f6      	adds	r6, r6, r3
 800f744:	6026      	str	r6, [r4, #0]
 800f746:	003e      	movs	r6, r7
 800f748:	6165      	str	r5, [r4, #20]
 800f74a:	1aed      	subs	r5, r5, r3
 800f74c:	60a5      	str	r5, [r4, #8]
 800f74e:	42be      	cmp	r6, r7
 800f750:	d900      	bls.n	800f754 <__ssputs_r+0x78>
 800f752:	003e      	movs	r6, r7
 800f754:	0032      	movs	r2, r6
 800f756:	9903      	ldr	r1, [sp, #12]
 800f758:	6820      	ldr	r0, [r4, #0]
 800f75a:	f000 fbb6 	bl	800feca <memmove>
 800f75e:	2000      	movs	r0, #0
 800f760:	68a3      	ldr	r3, [r4, #8]
 800f762:	1b9b      	subs	r3, r3, r6
 800f764:	60a3      	str	r3, [r4, #8]
 800f766:	6823      	ldr	r3, [r4, #0]
 800f768:	199b      	adds	r3, r3, r6
 800f76a:	6023      	str	r3, [r4, #0]
 800f76c:	b005      	add	sp, #20
 800f76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f770:	002a      	movs	r2, r5
 800f772:	9802      	ldr	r0, [sp, #8]
 800f774:	f000 fbeb 	bl	800ff4e <_realloc_r>
 800f778:	1e06      	subs	r6, r0, #0
 800f77a:	d1e0      	bne.n	800f73e <__ssputs_r+0x62>
 800f77c:	6921      	ldr	r1, [r4, #16]
 800f77e:	9802      	ldr	r0, [sp, #8]
 800f780:	f7ff ff62 	bl	800f648 <_free_r>
 800f784:	230c      	movs	r3, #12
 800f786:	2001      	movs	r0, #1
 800f788:	9a02      	ldr	r2, [sp, #8]
 800f78a:	4240      	negs	r0, r0
 800f78c:	6013      	str	r3, [r2, #0]
 800f78e:	89a2      	ldrh	r2, [r4, #12]
 800f790:	3334      	adds	r3, #52	@ 0x34
 800f792:	4313      	orrs	r3, r2
 800f794:	81a3      	strh	r3, [r4, #12]
 800f796:	e7e9      	b.n	800f76c <__ssputs_r+0x90>
 800f798:	fffffb7f 	.word	0xfffffb7f

0800f79c <_svfiprintf_r>:
 800f79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f79e:	b0a1      	sub	sp, #132	@ 0x84
 800f7a0:	9003      	str	r0, [sp, #12]
 800f7a2:	001d      	movs	r5, r3
 800f7a4:	898b      	ldrh	r3, [r1, #12]
 800f7a6:	000f      	movs	r7, r1
 800f7a8:	0016      	movs	r6, r2
 800f7aa:	061b      	lsls	r3, r3, #24
 800f7ac:	d511      	bpl.n	800f7d2 <_svfiprintf_r+0x36>
 800f7ae:	690b      	ldr	r3, [r1, #16]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10e      	bne.n	800f7d2 <_svfiprintf_r+0x36>
 800f7b4:	2140      	movs	r1, #64	@ 0x40
 800f7b6:	f7ff fbcf 	bl	800ef58 <_malloc_r>
 800f7ba:	6038      	str	r0, [r7, #0]
 800f7bc:	6138      	str	r0, [r7, #16]
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d105      	bne.n	800f7ce <_svfiprintf_r+0x32>
 800f7c2:	230c      	movs	r3, #12
 800f7c4:	9a03      	ldr	r2, [sp, #12]
 800f7c6:	6013      	str	r3, [r2, #0]
 800f7c8:	2001      	movs	r0, #1
 800f7ca:	4240      	negs	r0, r0
 800f7cc:	e0cf      	b.n	800f96e <_svfiprintf_r+0x1d2>
 800f7ce:	2340      	movs	r3, #64	@ 0x40
 800f7d0:	617b      	str	r3, [r7, #20]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	ac08      	add	r4, sp, #32
 800f7d6:	6163      	str	r3, [r4, #20]
 800f7d8:	3320      	adds	r3, #32
 800f7da:	7663      	strb	r3, [r4, #25]
 800f7dc:	3310      	adds	r3, #16
 800f7de:	76a3      	strb	r3, [r4, #26]
 800f7e0:	9507      	str	r5, [sp, #28]
 800f7e2:	0035      	movs	r5, r6
 800f7e4:	782b      	ldrb	r3, [r5, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <_svfiprintf_r+0x52>
 800f7ea:	2b25      	cmp	r3, #37	@ 0x25
 800f7ec:	d148      	bne.n	800f880 <_svfiprintf_r+0xe4>
 800f7ee:	1bab      	subs	r3, r5, r6
 800f7f0:	9305      	str	r3, [sp, #20]
 800f7f2:	42b5      	cmp	r5, r6
 800f7f4:	d00b      	beq.n	800f80e <_svfiprintf_r+0x72>
 800f7f6:	0032      	movs	r2, r6
 800f7f8:	0039      	movs	r1, r7
 800f7fa:	9803      	ldr	r0, [sp, #12]
 800f7fc:	f7ff ff6e 	bl	800f6dc <__ssputs_r>
 800f800:	3001      	adds	r0, #1
 800f802:	d100      	bne.n	800f806 <_svfiprintf_r+0x6a>
 800f804:	e0ae      	b.n	800f964 <_svfiprintf_r+0x1c8>
 800f806:	6963      	ldr	r3, [r4, #20]
 800f808:	9a05      	ldr	r2, [sp, #20]
 800f80a:	189b      	adds	r3, r3, r2
 800f80c:	6163      	str	r3, [r4, #20]
 800f80e:	782b      	ldrb	r3, [r5, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d100      	bne.n	800f816 <_svfiprintf_r+0x7a>
 800f814:	e0a6      	b.n	800f964 <_svfiprintf_r+0x1c8>
 800f816:	2201      	movs	r2, #1
 800f818:	2300      	movs	r3, #0
 800f81a:	4252      	negs	r2, r2
 800f81c:	6062      	str	r2, [r4, #4]
 800f81e:	a904      	add	r1, sp, #16
 800f820:	3254      	adds	r2, #84	@ 0x54
 800f822:	1852      	adds	r2, r2, r1
 800f824:	1c6e      	adds	r6, r5, #1
 800f826:	6023      	str	r3, [r4, #0]
 800f828:	60e3      	str	r3, [r4, #12]
 800f82a:	60a3      	str	r3, [r4, #8]
 800f82c:	7013      	strb	r3, [r2, #0]
 800f82e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f830:	4b54      	ldr	r3, [pc, #336]	@ (800f984 <_svfiprintf_r+0x1e8>)
 800f832:	2205      	movs	r2, #5
 800f834:	0018      	movs	r0, r3
 800f836:	7831      	ldrb	r1, [r6, #0]
 800f838:	9305      	str	r3, [sp, #20]
 800f83a:	f000 fb7d 	bl	800ff38 <memchr>
 800f83e:	1c75      	adds	r5, r6, #1
 800f840:	2800      	cmp	r0, #0
 800f842:	d11f      	bne.n	800f884 <_svfiprintf_r+0xe8>
 800f844:	6822      	ldr	r2, [r4, #0]
 800f846:	06d3      	lsls	r3, r2, #27
 800f848:	d504      	bpl.n	800f854 <_svfiprintf_r+0xb8>
 800f84a:	2353      	movs	r3, #83	@ 0x53
 800f84c:	a904      	add	r1, sp, #16
 800f84e:	185b      	adds	r3, r3, r1
 800f850:	2120      	movs	r1, #32
 800f852:	7019      	strb	r1, [r3, #0]
 800f854:	0713      	lsls	r3, r2, #28
 800f856:	d504      	bpl.n	800f862 <_svfiprintf_r+0xc6>
 800f858:	2353      	movs	r3, #83	@ 0x53
 800f85a:	a904      	add	r1, sp, #16
 800f85c:	185b      	adds	r3, r3, r1
 800f85e:	212b      	movs	r1, #43	@ 0x2b
 800f860:	7019      	strb	r1, [r3, #0]
 800f862:	7833      	ldrb	r3, [r6, #0]
 800f864:	2b2a      	cmp	r3, #42	@ 0x2a
 800f866:	d016      	beq.n	800f896 <_svfiprintf_r+0xfa>
 800f868:	0035      	movs	r5, r6
 800f86a:	2100      	movs	r1, #0
 800f86c:	200a      	movs	r0, #10
 800f86e:	68e3      	ldr	r3, [r4, #12]
 800f870:	782a      	ldrb	r2, [r5, #0]
 800f872:	1c6e      	adds	r6, r5, #1
 800f874:	3a30      	subs	r2, #48	@ 0x30
 800f876:	2a09      	cmp	r2, #9
 800f878:	d950      	bls.n	800f91c <_svfiprintf_r+0x180>
 800f87a:	2900      	cmp	r1, #0
 800f87c:	d111      	bne.n	800f8a2 <_svfiprintf_r+0x106>
 800f87e:	e017      	b.n	800f8b0 <_svfiprintf_r+0x114>
 800f880:	3501      	adds	r5, #1
 800f882:	e7af      	b.n	800f7e4 <_svfiprintf_r+0x48>
 800f884:	9b05      	ldr	r3, [sp, #20]
 800f886:	6822      	ldr	r2, [r4, #0]
 800f888:	1ac0      	subs	r0, r0, r3
 800f88a:	2301      	movs	r3, #1
 800f88c:	4083      	lsls	r3, r0
 800f88e:	4313      	orrs	r3, r2
 800f890:	002e      	movs	r6, r5
 800f892:	6023      	str	r3, [r4, #0]
 800f894:	e7cc      	b.n	800f830 <_svfiprintf_r+0x94>
 800f896:	9b07      	ldr	r3, [sp, #28]
 800f898:	1d19      	adds	r1, r3, #4
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	9107      	str	r1, [sp, #28]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	db01      	blt.n	800f8a6 <_svfiprintf_r+0x10a>
 800f8a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8a4:	e004      	b.n	800f8b0 <_svfiprintf_r+0x114>
 800f8a6:	425b      	negs	r3, r3
 800f8a8:	60e3      	str	r3, [r4, #12]
 800f8aa:	2302      	movs	r3, #2
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	6023      	str	r3, [r4, #0]
 800f8b0:	782b      	ldrb	r3, [r5, #0]
 800f8b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8b4:	d10c      	bne.n	800f8d0 <_svfiprintf_r+0x134>
 800f8b6:	786b      	ldrb	r3, [r5, #1]
 800f8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8ba:	d134      	bne.n	800f926 <_svfiprintf_r+0x18a>
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	3502      	adds	r5, #2
 800f8c0:	1d1a      	adds	r2, r3, #4
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	9207      	str	r2, [sp, #28]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	da01      	bge.n	800f8ce <_svfiprintf_r+0x132>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	425b      	negs	r3, r3
 800f8ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8d0:	4e2d      	ldr	r6, [pc, #180]	@ (800f988 <_svfiprintf_r+0x1ec>)
 800f8d2:	2203      	movs	r2, #3
 800f8d4:	0030      	movs	r0, r6
 800f8d6:	7829      	ldrb	r1, [r5, #0]
 800f8d8:	f000 fb2e 	bl	800ff38 <memchr>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d006      	beq.n	800f8ee <_svfiprintf_r+0x152>
 800f8e0:	2340      	movs	r3, #64	@ 0x40
 800f8e2:	1b80      	subs	r0, r0, r6
 800f8e4:	4083      	lsls	r3, r0
 800f8e6:	6822      	ldr	r2, [r4, #0]
 800f8e8:	3501      	adds	r5, #1
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	6023      	str	r3, [r4, #0]
 800f8ee:	7829      	ldrb	r1, [r5, #0]
 800f8f0:	2206      	movs	r2, #6
 800f8f2:	4826      	ldr	r0, [pc, #152]	@ (800f98c <_svfiprintf_r+0x1f0>)
 800f8f4:	1c6e      	adds	r6, r5, #1
 800f8f6:	7621      	strb	r1, [r4, #24]
 800f8f8:	f000 fb1e 	bl	800ff38 <memchr>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d038      	beq.n	800f972 <_svfiprintf_r+0x1d6>
 800f900:	4b23      	ldr	r3, [pc, #140]	@ (800f990 <_svfiprintf_r+0x1f4>)
 800f902:	2b00      	cmp	r3, #0
 800f904:	d122      	bne.n	800f94c <_svfiprintf_r+0x1b0>
 800f906:	2207      	movs	r2, #7
 800f908:	9b07      	ldr	r3, [sp, #28]
 800f90a:	3307      	adds	r3, #7
 800f90c:	4393      	bics	r3, r2
 800f90e:	3308      	adds	r3, #8
 800f910:	9307      	str	r3, [sp, #28]
 800f912:	6963      	ldr	r3, [r4, #20]
 800f914:	9a04      	ldr	r2, [sp, #16]
 800f916:	189b      	adds	r3, r3, r2
 800f918:	6163      	str	r3, [r4, #20]
 800f91a:	e762      	b.n	800f7e2 <_svfiprintf_r+0x46>
 800f91c:	4343      	muls	r3, r0
 800f91e:	0035      	movs	r5, r6
 800f920:	2101      	movs	r1, #1
 800f922:	189b      	adds	r3, r3, r2
 800f924:	e7a4      	b.n	800f870 <_svfiprintf_r+0xd4>
 800f926:	2300      	movs	r3, #0
 800f928:	200a      	movs	r0, #10
 800f92a:	0019      	movs	r1, r3
 800f92c:	3501      	adds	r5, #1
 800f92e:	6063      	str	r3, [r4, #4]
 800f930:	782a      	ldrb	r2, [r5, #0]
 800f932:	1c6e      	adds	r6, r5, #1
 800f934:	3a30      	subs	r2, #48	@ 0x30
 800f936:	2a09      	cmp	r2, #9
 800f938:	d903      	bls.n	800f942 <_svfiprintf_r+0x1a6>
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d0c8      	beq.n	800f8d0 <_svfiprintf_r+0x134>
 800f93e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f940:	e7c6      	b.n	800f8d0 <_svfiprintf_r+0x134>
 800f942:	4341      	muls	r1, r0
 800f944:	0035      	movs	r5, r6
 800f946:	2301      	movs	r3, #1
 800f948:	1889      	adds	r1, r1, r2
 800f94a:	e7f1      	b.n	800f930 <_svfiprintf_r+0x194>
 800f94c:	aa07      	add	r2, sp, #28
 800f94e:	9200      	str	r2, [sp, #0]
 800f950:	0021      	movs	r1, r4
 800f952:	003a      	movs	r2, r7
 800f954:	4b0f      	ldr	r3, [pc, #60]	@ (800f994 <_svfiprintf_r+0x1f8>)
 800f956:	9803      	ldr	r0, [sp, #12]
 800f958:	e000      	b.n	800f95c <_svfiprintf_r+0x1c0>
 800f95a:	bf00      	nop
 800f95c:	9004      	str	r0, [sp, #16]
 800f95e:	9b04      	ldr	r3, [sp, #16]
 800f960:	3301      	adds	r3, #1
 800f962:	d1d6      	bne.n	800f912 <_svfiprintf_r+0x176>
 800f964:	89bb      	ldrh	r3, [r7, #12]
 800f966:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f968:	065b      	lsls	r3, r3, #25
 800f96a:	d500      	bpl.n	800f96e <_svfiprintf_r+0x1d2>
 800f96c:	e72c      	b.n	800f7c8 <_svfiprintf_r+0x2c>
 800f96e:	b021      	add	sp, #132	@ 0x84
 800f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f972:	aa07      	add	r2, sp, #28
 800f974:	9200      	str	r2, [sp, #0]
 800f976:	0021      	movs	r1, r4
 800f978:	003a      	movs	r2, r7
 800f97a:	4b06      	ldr	r3, [pc, #24]	@ (800f994 <_svfiprintf_r+0x1f8>)
 800f97c:	9803      	ldr	r0, [sp, #12]
 800f97e:	f000 f87b 	bl	800fa78 <_printf_i>
 800f982:	e7eb      	b.n	800f95c <_svfiprintf_r+0x1c0>
 800f984:	08011b04 	.word	0x08011b04
 800f988:	08011b0a 	.word	0x08011b0a
 800f98c:	08011b0e 	.word	0x08011b0e
 800f990:	00000000 	.word	0x00000000
 800f994:	0800f6dd 	.word	0x0800f6dd

0800f998 <_printf_common>:
 800f998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f99a:	0016      	movs	r6, r2
 800f99c:	9301      	str	r3, [sp, #4]
 800f99e:	688a      	ldr	r2, [r1, #8]
 800f9a0:	690b      	ldr	r3, [r1, #16]
 800f9a2:	000c      	movs	r4, r1
 800f9a4:	9000      	str	r0, [sp, #0]
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	da00      	bge.n	800f9ac <_printf_common+0x14>
 800f9aa:	0013      	movs	r3, r2
 800f9ac:	0022      	movs	r2, r4
 800f9ae:	6033      	str	r3, [r6, #0]
 800f9b0:	3243      	adds	r2, #67	@ 0x43
 800f9b2:	7812      	ldrb	r2, [r2, #0]
 800f9b4:	2a00      	cmp	r2, #0
 800f9b6:	d001      	beq.n	800f9bc <_printf_common+0x24>
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	6033      	str	r3, [r6, #0]
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	069b      	lsls	r3, r3, #26
 800f9c0:	d502      	bpl.n	800f9c8 <_printf_common+0x30>
 800f9c2:	6833      	ldr	r3, [r6, #0]
 800f9c4:	3302      	adds	r3, #2
 800f9c6:	6033      	str	r3, [r6, #0]
 800f9c8:	6822      	ldr	r2, [r4, #0]
 800f9ca:	2306      	movs	r3, #6
 800f9cc:	0015      	movs	r5, r2
 800f9ce:	401d      	ands	r5, r3
 800f9d0:	421a      	tst	r2, r3
 800f9d2:	d027      	beq.n	800fa24 <_printf_common+0x8c>
 800f9d4:	0023      	movs	r3, r4
 800f9d6:	3343      	adds	r3, #67	@ 0x43
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	1e5a      	subs	r2, r3, #1
 800f9dc:	4193      	sbcs	r3, r2
 800f9de:	6822      	ldr	r2, [r4, #0]
 800f9e0:	0692      	lsls	r2, r2, #26
 800f9e2:	d430      	bmi.n	800fa46 <_printf_common+0xae>
 800f9e4:	0022      	movs	r2, r4
 800f9e6:	9901      	ldr	r1, [sp, #4]
 800f9e8:	9800      	ldr	r0, [sp, #0]
 800f9ea:	9d08      	ldr	r5, [sp, #32]
 800f9ec:	3243      	adds	r2, #67	@ 0x43
 800f9ee:	47a8      	blx	r5
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	d025      	beq.n	800fa40 <_printf_common+0xa8>
 800f9f4:	2206      	movs	r2, #6
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	2500      	movs	r5, #0
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	2b04      	cmp	r3, #4
 800f9fe:	d105      	bne.n	800fa0c <_printf_common+0x74>
 800fa00:	6833      	ldr	r3, [r6, #0]
 800fa02:	68e5      	ldr	r5, [r4, #12]
 800fa04:	1aed      	subs	r5, r5, r3
 800fa06:	43eb      	mvns	r3, r5
 800fa08:	17db      	asrs	r3, r3, #31
 800fa0a:	401d      	ands	r5, r3
 800fa0c:	68a3      	ldr	r3, [r4, #8]
 800fa0e:	6922      	ldr	r2, [r4, #16]
 800fa10:	4293      	cmp	r3, r2
 800fa12:	dd01      	ble.n	800fa18 <_printf_common+0x80>
 800fa14:	1a9b      	subs	r3, r3, r2
 800fa16:	18ed      	adds	r5, r5, r3
 800fa18:	2600      	movs	r6, #0
 800fa1a:	42b5      	cmp	r5, r6
 800fa1c:	d120      	bne.n	800fa60 <_printf_common+0xc8>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	e010      	b.n	800fa44 <_printf_common+0xac>
 800fa22:	3501      	adds	r5, #1
 800fa24:	68e3      	ldr	r3, [r4, #12]
 800fa26:	6832      	ldr	r2, [r6, #0]
 800fa28:	1a9b      	subs	r3, r3, r2
 800fa2a:	42ab      	cmp	r3, r5
 800fa2c:	ddd2      	ble.n	800f9d4 <_printf_common+0x3c>
 800fa2e:	0022      	movs	r2, r4
 800fa30:	2301      	movs	r3, #1
 800fa32:	9901      	ldr	r1, [sp, #4]
 800fa34:	9800      	ldr	r0, [sp, #0]
 800fa36:	9f08      	ldr	r7, [sp, #32]
 800fa38:	3219      	adds	r2, #25
 800fa3a:	47b8      	blx	r7
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	d1f0      	bne.n	800fa22 <_printf_common+0x8a>
 800fa40:	2001      	movs	r0, #1
 800fa42:	4240      	negs	r0, r0
 800fa44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa46:	2030      	movs	r0, #48	@ 0x30
 800fa48:	18e1      	adds	r1, r4, r3
 800fa4a:	3143      	adds	r1, #67	@ 0x43
 800fa4c:	7008      	strb	r0, [r1, #0]
 800fa4e:	0021      	movs	r1, r4
 800fa50:	1c5a      	adds	r2, r3, #1
 800fa52:	3145      	adds	r1, #69	@ 0x45
 800fa54:	7809      	ldrb	r1, [r1, #0]
 800fa56:	18a2      	adds	r2, r4, r2
 800fa58:	3243      	adds	r2, #67	@ 0x43
 800fa5a:	3302      	adds	r3, #2
 800fa5c:	7011      	strb	r1, [r2, #0]
 800fa5e:	e7c1      	b.n	800f9e4 <_printf_common+0x4c>
 800fa60:	0022      	movs	r2, r4
 800fa62:	2301      	movs	r3, #1
 800fa64:	9901      	ldr	r1, [sp, #4]
 800fa66:	9800      	ldr	r0, [sp, #0]
 800fa68:	9f08      	ldr	r7, [sp, #32]
 800fa6a:	321a      	adds	r2, #26
 800fa6c:	47b8      	blx	r7
 800fa6e:	3001      	adds	r0, #1
 800fa70:	d0e6      	beq.n	800fa40 <_printf_common+0xa8>
 800fa72:	3601      	adds	r6, #1
 800fa74:	e7d1      	b.n	800fa1a <_printf_common+0x82>
	...

0800fa78 <_printf_i>:
 800fa78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa7a:	b08b      	sub	sp, #44	@ 0x2c
 800fa7c:	9206      	str	r2, [sp, #24]
 800fa7e:	000a      	movs	r2, r1
 800fa80:	3243      	adds	r2, #67	@ 0x43
 800fa82:	9307      	str	r3, [sp, #28]
 800fa84:	9005      	str	r0, [sp, #20]
 800fa86:	9203      	str	r2, [sp, #12]
 800fa88:	7e0a      	ldrb	r2, [r1, #24]
 800fa8a:	000c      	movs	r4, r1
 800fa8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa8e:	2a78      	cmp	r2, #120	@ 0x78
 800fa90:	d809      	bhi.n	800faa6 <_printf_i+0x2e>
 800fa92:	2a62      	cmp	r2, #98	@ 0x62
 800fa94:	d80b      	bhi.n	800faae <_printf_i+0x36>
 800fa96:	2a00      	cmp	r2, #0
 800fa98:	d100      	bne.n	800fa9c <_printf_i+0x24>
 800fa9a:	e0ba      	b.n	800fc12 <_printf_i+0x19a>
 800fa9c:	497a      	ldr	r1, [pc, #488]	@ (800fc88 <_printf_i+0x210>)
 800fa9e:	9104      	str	r1, [sp, #16]
 800faa0:	2a58      	cmp	r2, #88	@ 0x58
 800faa2:	d100      	bne.n	800faa6 <_printf_i+0x2e>
 800faa4:	e08e      	b.n	800fbc4 <_printf_i+0x14c>
 800faa6:	0025      	movs	r5, r4
 800faa8:	3542      	adds	r5, #66	@ 0x42
 800faaa:	702a      	strb	r2, [r5, #0]
 800faac:	e022      	b.n	800faf4 <_printf_i+0x7c>
 800faae:	0010      	movs	r0, r2
 800fab0:	3863      	subs	r0, #99	@ 0x63
 800fab2:	2815      	cmp	r0, #21
 800fab4:	d8f7      	bhi.n	800faa6 <_printf_i+0x2e>
 800fab6:	f7f5 fc27 	bl	8005308 <__gnu_thumb1_case_shi>
 800faba:	0016      	.short	0x0016
 800fabc:	fff6001f 	.word	0xfff6001f
 800fac0:	fff6fff6 	.word	0xfff6fff6
 800fac4:	001ffff6 	.word	0x001ffff6
 800fac8:	fff6fff6 	.word	0xfff6fff6
 800facc:	fff6fff6 	.word	0xfff6fff6
 800fad0:	0036009f 	.word	0x0036009f
 800fad4:	fff6007e 	.word	0xfff6007e
 800fad8:	00b0fff6 	.word	0x00b0fff6
 800fadc:	0036fff6 	.word	0x0036fff6
 800fae0:	fff6fff6 	.word	0xfff6fff6
 800fae4:	0082      	.short	0x0082
 800fae6:	0025      	movs	r5, r4
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	3542      	adds	r5, #66	@ 0x42
 800faec:	1d11      	adds	r1, r2, #4
 800faee:	6019      	str	r1, [r3, #0]
 800faf0:	6813      	ldr	r3, [r2, #0]
 800faf2:	702b      	strb	r3, [r5, #0]
 800faf4:	2301      	movs	r3, #1
 800faf6:	e09e      	b.n	800fc36 <_printf_i+0x1be>
 800faf8:	6818      	ldr	r0, [r3, #0]
 800fafa:	6809      	ldr	r1, [r1, #0]
 800fafc:	1d02      	adds	r2, r0, #4
 800fafe:	060d      	lsls	r5, r1, #24
 800fb00:	d50b      	bpl.n	800fb1a <_printf_i+0xa2>
 800fb02:	6806      	ldr	r6, [r0, #0]
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	2e00      	cmp	r6, #0
 800fb08:	da03      	bge.n	800fb12 <_printf_i+0x9a>
 800fb0a:	232d      	movs	r3, #45	@ 0x2d
 800fb0c:	9a03      	ldr	r2, [sp, #12]
 800fb0e:	4276      	negs	r6, r6
 800fb10:	7013      	strb	r3, [r2, #0]
 800fb12:	4b5d      	ldr	r3, [pc, #372]	@ (800fc88 <_printf_i+0x210>)
 800fb14:	270a      	movs	r7, #10
 800fb16:	9304      	str	r3, [sp, #16]
 800fb18:	e018      	b.n	800fb4c <_printf_i+0xd4>
 800fb1a:	6806      	ldr	r6, [r0, #0]
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	0649      	lsls	r1, r1, #25
 800fb20:	d5f1      	bpl.n	800fb06 <_printf_i+0x8e>
 800fb22:	b236      	sxth	r6, r6
 800fb24:	e7ef      	b.n	800fb06 <_printf_i+0x8e>
 800fb26:	6808      	ldr	r0, [r1, #0]
 800fb28:	6819      	ldr	r1, [r3, #0]
 800fb2a:	c940      	ldmia	r1!, {r6}
 800fb2c:	0605      	lsls	r5, r0, #24
 800fb2e:	d402      	bmi.n	800fb36 <_printf_i+0xbe>
 800fb30:	0640      	lsls	r0, r0, #25
 800fb32:	d500      	bpl.n	800fb36 <_printf_i+0xbe>
 800fb34:	b2b6      	uxth	r6, r6
 800fb36:	6019      	str	r1, [r3, #0]
 800fb38:	4b53      	ldr	r3, [pc, #332]	@ (800fc88 <_printf_i+0x210>)
 800fb3a:	270a      	movs	r7, #10
 800fb3c:	9304      	str	r3, [sp, #16]
 800fb3e:	2a6f      	cmp	r2, #111	@ 0x6f
 800fb40:	d100      	bne.n	800fb44 <_printf_i+0xcc>
 800fb42:	3f02      	subs	r7, #2
 800fb44:	0023      	movs	r3, r4
 800fb46:	2200      	movs	r2, #0
 800fb48:	3343      	adds	r3, #67	@ 0x43
 800fb4a:	701a      	strb	r2, [r3, #0]
 800fb4c:	6863      	ldr	r3, [r4, #4]
 800fb4e:	60a3      	str	r3, [r4, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	db06      	blt.n	800fb62 <_printf_i+0xea>
 800fb54:	2104      	movs	r1, #4
 800fb56:	6822      	ldr	r2, [r4, #0]
 800fb58:	9d03      	ldr	r5, [sp, #12]
 800fb5a:	438a      	bics	r2, r1
 800fb5c:	6022      	str	r2, [r4, #0]
 800fb5e:	4333      	orrs	r3, r6
 800fb60:	d00c      	beq.n	800fb7c <_printf_i+0x104>
 800fb62:	9d03      	ldr	r5, [sp, #12]
 800fb64:	0030      	movs	r0, r6
 800fb66:	0039      	movs	r1, r7
 800fb68:	f7f5 fc5e 	bl	8005428 <__aeabi_uidivmod>
 800fb6c:	9b04      	ldr	r3, [sp, #16]
 800fb6e:	3d01      	subs	r5, #1
 800fb70:	5c5b      	ldrb	r3, [r3, r1]
 800fb72:	702b      	strb	r3, [r5, #0]
 800fb74:	0033      	movs	r3, r6
 800fb76:	0006      	movs	r6, r0
 800fb78:	429f      	cmp	r7, r3
 800fb7a:	d9f3      	bls.n	800fb64 <_printf_i+0xec>
 800fb7c:	2f08      	cmp	r7, #8
 800fb7e:	d109      	bne.n	800fb94 <_printf_i+0x11c>
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	07db      	lsls	r3, r3, #31
 800fb84:	d506      	bpl.n	800fb94 <_printf_i+0x11c>
 800fb86:	6862      	ldr	r2, [r4, #4]
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	dc02      	bgt.n	800fb94 <_printf_i+0x11c>
 800fb8e:	2330      	movs	r3, #48	@ 0x30
 800fb90:	3d01      	subs	r5, #1
 800fb92:	702b      	strb	r3, [r5, #0]
 800fb94:	9b03      	ldr	r3, [sp, #12]
 800fb96:	1b5b      	subs	r3, r3, r5
 800fb98:	6123      	str	r3, [r4, #16]
 800fb9a:	9b07      	ldr	r3, [sp, #28]
 800fb9c:	0021      	movs	r1, r4
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	9805      	ldr	r0, [sp, #20]
 800fba2:	9b06      	ldr	r3, [sp, #24]
 800fba4:	aa09      	add	r2, sp, #36	@ 0x24
 800fba6:	f7ff fef7 	bl	800f998 <_printf_common>
 800fbaa:	3001      	adds	r0, #1
 800fbac:	d148      	bne.n	800fc40 <_printf_i+0x1c8>
 800fbae:	2001      	movs	r0, #1
 800fbb0:	4240      	negs	r0, r0
 800fbb2:	b00b      	add	sp, #44	@ 0x2c
 800fbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb6:	2220      	movs	r2, #32
 800fbb8:	6809      	ldr	r1, [r1, #0]
 800fbba:	430a      	orrs	r2, r1
 800fbbc:	6022      	str	r2, [r4, #0]
 800fbbe:	2278      	movs	r2, #120	@ 0x78
 800fbc0:	4932      	ldr	r1, [pc, #200]	@ (800fc8c <_printf_i+0x214>)
 800fbc2:	9104      	str	r1, [sp, #16]
 800fbc4:	0021      	movs	r1, r4
 800fbc6:	3145      	adds	r1, #69	@ 0x45
 800fbc8:	700a      	strb	r2, [r1, #0]
 800fbca:	6819      	ldr	r1, [r3, #0]
 800fbcc:	6822      	ldr	r2, [r4, #0]
 800fbce:	c940      	ldmia	r1!, {r6}
 800fbd0:	0610      	lsls	r0, r2, #24
 800fbd2:	d402      	bmi.n	800fbda <_printf_i+0x162>
 800fbd4:	0650      	lsls	r0, r2, #25
 800fbd6:	d500      	bpl.n	800fbda <_printf_i+0x162>
 800fbd8:	b2b6      	uxth	r6, r6
 800fbda:	6019      	str	r1, [r3, #0]
 800fbdc:	07d3      	lsls	r3, r2, #31
 800fbde:	d502      	bpl.n	800fbe6 <_printf_i+0x16e>
 800fbe0:	2320      	movs	r3, #32
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	6023      	str	r3, [r4, #0]
 800fbe6:	2e00      	cmp	r6, #0
 800fbe8:	d001      	beq.n	800fbee <_printf_i+0x176>
 800fbea:	2710      	movs	r7, #16
 800fbec:	e7aa      	b.n	800fb44 <_printf_i+0xcc>
 800fbee:	2220      	movs	r2, #32
 800fbf0:	6823      	ldr	r3, [r4, #0]
 800fbf2:	4393      	bics	r3, r2
 800fbf4:	6023      	str	r3, [r4, #0]
 800fbf6:	e7f8      	b.n	800fbea <_printf_i+0x172>
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	680d      	ldr	r5, [r1, #0]
 800fbfc:	1d10      	adds	r0, r2, #4
 800fbfe:	6949      	ldr	r1, [r1, #20]
 800fc00:	6018      	str	r0, [r3, #0]
 800fc02:	6813      	ldr	r3, [r2, #0]
 800fc04:	062e      	lsls	r6, r5, #24
 800fc06:	d501      	bpl.n	800fc0c <_printf_i+0x194>
 800fc08:	6019      	str	r1, [r3, #0]
 800fc0a:	e002      	b.n	800fc12 <_printf_i+0x19a>
 800fc0c:	066d      	lsls	r5, r5, #25
 800fc0e:	d5fb      	bpl.n	800fc08 <_printf_i+0x190>
 800fc10:	8019      	strh	r1, [r3, #0]
 800fc12:	2300      	movs	r3, #0
 800fc14:	9d03      	ldr	r5, [sp, #12]
 800fc16:	6123      	str	r3, [r4, #16]
 800fc18:	e7bf      	b.n	800fb9a <_printf_i+0x122>
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	1d11      	adds	r1, r2, #4
 800fc1e:	6019      	str	r1, [r3, #0]
 800fc20:	6815      	ldr	r5, [r2, #0]
 800fc22:	2100      	movs	r1, #0
 800fc24:	0028      	movs	r0, r5
 800fc26:	6862      	ldr	r2, [r4, #4]
 800fc28:	f000 f986 	bl	800ff38 <memchr>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d001      	beq.n	800fc34 <_printf_i+0x1bc>
 800fc30:	1b40      	subs	r0, r0, r5
 800fc32:	6060      	str	r0, [r4, #4]
 800fc34:	6863      	ldr	r3, [r4, #4]
 800fc36:	6123      	str	r3, [r4, #16]
 800fc38:	2300      	movs	r3, #0
 800fc3a:	9a03      	ldr	r2, [sp, #12]
 800fc3c:	7013      	strb	r3, [r2, #0]
 800fc3e:	e7ac      	b.n	800fb9a <_printf_i+0x122>
 800fc40:	002a      	movs	r2, r5
 800fc42:	6923      	ldr	r3, [r4, #16]
 800fc44:	9906      	ldr	r1, [sp, #24]
 800fc46:	9805      	ldr	r0, [sp, #20]
 800fc48:	9d07      	ldr	r5, [sp, #28]
 800fc4a:	47a8      	blx	r5
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d0ae      	beq.n	800fbae <_printf_i+0x136>
 800fc50:	6823      	ldr	r3, [r4, #0]
 800fc52:	079b      	lsls	r3, r3, #30
 800fc54:	d415      	bmi.n	800fc82 <_printf_i+0x20a>
 800fc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc58:	68e0      	ldr	r0, [r4, #12]
 800fc5a:	4298      	cmp	r0, r3
 800fc5c:	daa9      	bge.n	800fbb2 <_printf_i+0x13a>
 800fc5e:	0018      	movs	r0, r3
 800fc60:	e7a7      	b.n	800fbb2 <_printf_i+0x13a>
 800fc62:	0022      	movs	r2, r4
 800fc64:	2301      	movs	r3, #1
 800fc66:	9906      	ldr	r1, [sp, #24]
 800fc68:	9805      	ldr	r0, [sp, #20]
 800fc6a:	9e07      	ldr	r6, [sp, #28]
 800fc6c:	3219      	adds	r2, #25
 800fc6e:	47b0      	blx	r6
 800fc70:	3001      	adds	r0, #1
 800fc72:	d09c      	beq.n	800fbae <_printf_i+0x136>
 800fc74:	3501      	adds	r5, #1
 800fc76:	68e3      	ldr	r3, [r4, #12]
 800fc78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc7a:	1a9b      	subs	r3, r3, r2
 800fc7c:	42ab      	cmp	r3, r5
 800fc7e:	dcf0      	bgt.n	800fc62 <_printf_i+0x1ea>
 800fc80:	e7e9      	b.n	800fc56 <_printf_i+0x1de>
 800fc82:	2500      	movs	r5, #0
 800fc84:	e7f7      	b.n	800fc76 <_printf_i+0x1fe>
 800fc86:	46c0      	nop			@ (mov r8, r8)
 800fc88:	08011b15 	.word	0x08011b15
 800fc8c:	08011b26 	.word	0x08011b26

0800fc90 <__sflush_r>:
 800fc90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc92:	220c      	movs	r2, #12
 800fc94:	5e8b      	ldrsh	r3, [r1, r2]
 800fc96:	0005      	movs	r5, r0
 800fc98:	000c      	movs	r4, r1
 800fc9a:	071a      	lsls	r2, r3, #28
 800fc9c:	d456      	bmi.n	800fd4c <__sflush_r+0xbc>
 800fc9e:	684a      	ldr	r2, [r1, #4]
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	dc02      	bgt.n	800fcaa <__sflush_r+0x1a>
 800fca4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800fca6:	2a00      	cmp	r2, #0
 800fca8:	dd4e      	ble.n	800fd48 <__sflush_r+0xb8>
 800fcaa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800fcac:	2f00      	cmp	r7, #0
 800fcae:	d04b      	beq.n	800fd48 <__sflush_r+0xb8>
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	2080      	movs	r0, #128	@ 0x80
 800fcb4:	682e      	ldr	r6, [r5, #0]
 800fcb6:	602a      	str	r2, [r5, #0]
 800fcb8:	001a      	movs	r2, r3
 800fcba:	0140      	lsls	r0, r0, #5
 800fcbc:	6a21      	ldr	r1, [r4, #32]
 800fcbe:	4002      	ands	r2, r0
 800fcc0:	4203      	tst	r3, r0
 800fcc2:	d033      	beq.n	800fd2c <__sflush_r+0x9c>
 800fcc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fcc6:	89a3      	ldrh	r3, [r4, #12]
 800fcc8:	075b      	lsls	r3, r3, #29
 800fcca:	d506      	bpl.n	800fcda <__sflush_r+0x4a>
 800fccc:	6863      	ldr	r3, [r4, #4]
 800fcce:	1ad2      	subs	r2, r2, r3
 800fcd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d001      	beq.n	800fcda <__sflush_r+0x4a>
 800fcd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fcd8:	1ad2      	subs	r2, r2, r3
 800fcda:	2300      	movs	r3, #0
 800fcdc:	0028      	movs	r0, r5
 800fcde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800fce0:	6a21      	ldr	r1, [r4, #32]
 800fce2:	47b8      	blx	r7
 800fce4:	89a2      	ldrh	r2, [r4, #12]
 800fce6:	1c43      	adds	r3, r0, #1
 800fce8:	d106      	bne.n	800fcf8 <__sflush_r+0x68>
 800fcea:	6829      	ldr	r1, [r5, #0]
 800fcec:	291d      	cmp	r1, #29
 800fcee:	d846      	bhi.n	800fd7e <__sflush_r+0xee>
 800fcf0:	4b29      	ldr	r3, [pc, #164]	@ (800fd98 <__sflush_r+0x108>)
 800fcf2:	40cb      	lsrs	r3, r1
 800fcf4:	07db      	lsls	r3, r3, #31
 800fcf6:	d542      	bpl.n	800fd7e <__sflush_r+0xee>
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	6063      	str	r3, [r4, #4]
 800fcfc:	6923      	ldr	r3, [r4, #16]
 800fcfe:	6023      	str	r3, [r4, #0]
 800fd00:	04d2      	lsls	r2, r2, #19
 800fd02:	d505      	bpl.n	800fd10 <__sflush_r+0x80>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <__sflush_r+0x7e>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d100      	bne.n	800fd10 <__sflush_r+0x80>
 800fd0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fd10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd12:	602e      	str	r6, [r5, #0]
 800fd14:	2900      	cmp	r1, #0
 800fd16:	d017      	beq.n	800fd48 <__sflush_r+0xb8>
 800fd18:	0023      	movs	r3, r4
 800fd1a:	3344      	adds	r3, #68	@ 0x44
 800fd1c:	4299      	cmp	r1, r3
 800fd1e:	d002      	beq.n	800fd26 <__sflush_r+0x96>
 800fd20:	0028      	movs	r0, r5
 800fd22:	f7ff fc91 	bl	800f648 <_free_r>
 800fd26:	2300      	movs	r3, #0
 800fd28:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd2a:	e00d      	b.n	800fd48 <__sflush_r+0xb8>
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	0028      	movs	r0, r5
 800fd30:	47b8      	blx	r7
 800fd32:	0002      	movs	r2, r0
 800fd34:	1c43      	adds	r3, r0, #1
 800fd36:	d1c6      	bne.n	800fcc6 <__sflush_r+0x36>
 800fd38:	682b      	ldr	r3, [r5, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d0c3      	beq.n	800fcc6 <__sflush_r+0x36>
 800fd3e:	2b1d      	cmp	r3, #29
 800fd40:	d001      	beq.n	800fd46 <__sflush_r+0xb6>
 800fd42:	2b16      	cmp	r3, #22
 800fd44:	d11a      	bne.n	800fd7c <__sflush_r+0xec>
 800fd46:	602e      	str	r6, [r5, #0]
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e01e      	b.n	800fd8a <__sflush_r+0xfa>
 800fd4c:	690e      	ldr	r6, [r1, #16]
 800fd4e:	2e00      	cmp	r6, #0
 800fd50:	d0fa      	beq.n	800fd48 <__sflush_r+0xb8>
 800fd52:	680f      	ldr	r7, [r1, #0]
 800fd54:	600e      	str	r6, [r1, #0]
 800fd56:	1bba      	subs	r2, r7, r6
 800fd58:	9201      	str	r2, [sp, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	079b      	lsls	r3, r3, #30
 800fd5e:	d100      	bne.n	800fd62 <__sflush_r+0xd2>
 800fd60:	694a      	ldr	r2, [r1, #20]
 800fd62:	60a2      	str	r2, [r4, #8]
 800fd64:	9b01      	ldr	r3, [sp, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	ddee      	ble.n	800fd48 <__sflush_r+0xb8>
 800fd6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800fd6c:	0032      	movs	r2, r6
 800fd6e:	001f      	movs	r7, r3
 800fd70:	0028      	movs	r0, r5
 800fd72:	9b01      	ldr	r3, [sp, #4]
 800fd74:	6a21      	ldr	r1, [r4, #32]
 800fd76:	47b8      	blx	r7
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	dc07      	bgt.n	800fd8c <__sflush_r+0xfc>
 800fd7c:	89a2      	ldrh	r2, [r4, #12]
 800fd7e:	2340      	movs	r3, #64	@ 0x40
 800fd80:	2001      	movs	r0, #1
 800fd82:	4313      	orrs	r3, r2
 800fd84:	b21b      	sxth	r3, r3
 800fd86:	81a3      	strh	r3, [r4, #12]
 800fd88:	4240      	negs	r0, r0
 800fd8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd8c:	9b01      	ldr	r3, [sp, #4]
 800fd8e:	1836      	adds	r6, r6, r0
 800fd90:	1a1b      	subs	r3, r3, r0
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	e7e6      	b.n	800fd64 <__sflush_r+0xd4>
 800fd96:	46c0      	nop			@ (mov r8, r8)
 800fd98:	20400001 	.word	0x20400001

0800fd9c <_fflush_r>:
 800fd9c:	690b      	ldr	r3, [r1, #16]
 800fd9e:	b570      	push	{r4, r5, r6, lr}
 800fda0:	0005      	movs	r5, r0
 800fda2:	000c      	movs	r4, r1
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d102      	bne.n	800fdae <_fflush_r+0x12>
 800fda8:	2500      	movs	r5, #0
 800fdaa:	0028      	movs	r0, r5
 800fdac:	bd70      	pop	{r4, r5, r6, pc}
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d004      	beq.n	800fdbc <_fflush_r+0x20>
 800fdb2:	6a03      	ldr	r3, [r0, #32]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d101      	bne.n	800fdbc <_fflush_r+0x20>
 800fdb8:	f7ff f9ee 	bl	800f198 <__sinit>
 800fdbc:	220c      	movs	r2, #12
 800fdbe:	5ea3      	ldrsh	r3, [r4, r2]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d0f1      	beq.n	800fda8 <_fflush_r+0xc>
 800fdc4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fdc6:	07d2      	lsls	r2, r2, #31
 800fdc8:	d404      	bmi.n	800fdd4 <_fflush_r+0x38>
 800fdca:	059b      	lsls	r3, r3, #22
 800fdcc:	d402      	bmi.n	800fdd4 <_fflush_r+0x38>
 800fdce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdd0:	f7ff fc2f 	bl	800f632 <__retarget_lock_acquire_recursive>
 800fdd4:	0028      	movs	r0, r5
 800fdd6:	0021      	movs	r1, r4
 800fdd8:	f7ff ff5a 	bl	800fc90 <__sflush_r>
 800fddc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fdde:	0005      	movs	r5, r0
 800fde0:	07db      	lsls	r3, r3, #31
 800fde2:	d4e2      	bmi.n	800fdaa <_fflush_r+0xe>
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	059b      	lsls	r3, r3, #22
 800fde8:	d4df      	bmi.n	800fdaa <_fflush_r+0xe>
 800fdea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdec:	f7ff fc22 	bl	800f634 <__retarget_lock_release_recursive>
 800fdf0:	e7db      	b.n	800fdaa <_fflush_r+0xe>
	...

0800fdf4 <__swhatbuf_r>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	000e      	movs	r6, r1
 800fdf8:	001d      	movs	r5, r3
 800fdfa:	230e      	movs	r3, #14
 800fdfc:	5ec9      	ldrsh	r1, [r1, r3]
 800fdfe:	0014      	movs	r4, r2
 800fe00:	b096      	sub	sp, #88	@ 0x58
 800fe02:	2900      	cmp	r1, #0
 800fe04:	da0c      	bge.n	800fe20 <__swhatbuf_r+0x2c>
 800fe06:	89b2      	ldrh	r2, [r6, #12]
 800fe08:	2380      	movs	r3, #128	@ 0x80
 800fe0a:	0011      	movs	r1, r2
 800fe0c:	4019      	ands	r1, r3
 800fe0e:	421a      	tst	r2, r3
 800fe10:	d114      	bne.n	800fe3c <__swhatbuf_r+0x48>
 800fe12:	2380      	movs	r3, #128	@ 0x80
 800fe14:	00db      	lsls	r3, r3, #3
 800fe16:	2000      	movs	r0, #0
 800fe18:	6029      	str	r1, [r5, #0]
 800fe1a:	6023      	str	r3, [r4, #0]
 800fe1c:	b016      	add	sp, #88	@ 0x58
 800fe1e:	bd70      	pop	{r4, r5, r6, pc}
 800fe20:	466a      	mov	r2, sp
 800fe22:	f000 f865 	bl	800fef0 <_fstat_r>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	dbed      	blt.n	800fe06 <__swhatbuf_r+0x12>
 800fe2a:	23f0      	movs	r3, #240	@ 0xf0
 800fe2c:	9901      	ldr	r1, [sp, #4]
 800fe2e:	021b      	lsls	r3, r3, #8
 800fe30:	4019      	ands	r1, r3
 800fe32:	4b04      	ldr	r3, [pc, #16]	@ (800fe44 <__swhatbuf_r+0x50>)
 800fe34:	18c9      	adds	r1, r1, r3
 800fe36:	424b      	negs	r3, r1
 800fe38:	4159      	adcs	r1, r3
 800fe3a:	e7ea      	b.n	800fe12 <__swhatbuf_r+0x1e>
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	2340      	movs	r3, #64	@ 0x40
 800fe40:	e7e9      	b.n	800fe16 <__swhatbuf_r+0x22>
 800fe42:	46c0      	nop			@ (mov r8, r8)
 800fe44:	ffffe000 	.word	0xffffe000

0800fe48 <__smakebuf_r>:
 800fe48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe4a:	2602      	movs	r6, #2
 800fe4c:	898b      	ldrh	r3, [r1, #12]
 800fe4e:	0005      	movs	r5, r0
 800fe50:	000c      	movs	r4, r1
 800fe52:	b085      	sub	sp, #20
 800fe54:	4233      	tst	r3, r6
 800fe56:	d007      	beq.n	800fe68 <__smakebuf_r+0x20>
 800fe58:	0023      	movs	r3, r4
 800fe5a:	3347      	adds	r3, #71	@ 0x47
 800fe5c:	6023      	str	r3, [r4, #0]
 800fe5e:	6123      	str	r3, [r4, #16]
 800fe60:	2301      	movs	r3, #1
 800fe62:	6163      	str	r3, [r4, #20]
 800fe64:	b005      	add	sp, #20
 800fe66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe68:	ab03      	add	r3, sp, #12
 800fe6a:	aa02      	add	r2, sp, #8
 800fe6c:	f7ff ffc2 	bl	800fdf4 <__swhatbuf_r>
 800fe70:	9f02      	ldr	r7, [sp, #8]
 800fe72:	9001      	str	r0, [sp, #4]
 800fe74:	0039      	movs	r1, r7
 800fe76:	0028      	movs	r0, r5
 800fe78:	f7ff f86e 	bl	800ef58 <_malloc_r>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d108      	bne.n	800fe92 <__smakebuf_r+0x4a>
 800fe80:	220c      	movs	r2, #12
 800fe82:	5ea3      	ldrsh	r3, [r4, r2]
 800fe84:	059a      	lsls	r2, r3, #22
 800fe86:	d4ed      	bmi.n	800fe64 <__smakebuf_r+0x1c>
 800fe88:	2203      	movs	r2, #3
 800fe8a:	4393      	bics	r3, r2
 800fe8c:	431e      	orrs	r6, r3
 800fe8e:	81a6      	strh	r6, [r4, #12]
 800fe90:	e7e2      	b.n	800fe58 <__smakebuf_r+0x10>
 800fe92:	2380      	movs	r3, #128	@ 0x80
 800fe94:	89a2      	ldrh	r2, [r4, #12]
 800fe96:	6020      	str	r0, [r4, #0]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	9b03      	ldr	r3, [sp, #12]
 800fe9e:	6120      	str	r0, [r4, #16]
 800fea0:	6167      	str	r7, [r4, #20]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00c      	beq.n	800fec0 <__smakebuf_r+0x78>
 800fea6:	0028      	movs	r0, r5
 800fea8:	230e      	movs	r3, #14
 800feaa:	5ee1      	ldrsh	r1, [r4, r3]
 800feac:	f000 f832 	bl	800ff14 <_isatty_r>
 800feb0:	2800      	cmp	r0, #0
 800feb2:	d005      	beq.n	800fec0 <__smakebuf_r+0x78>
 800feb4:	2303      	movs	r3, #3
 800feb6:	89a2      	ldrh	r2, [r4, #12]
 800feb8:	439a      	bics	r2, r3
 800feba:	3b02      	subs	r3, #2
 800febc:	4313      	orrs	r3, r2
 800febe:	81a3      	strh	r3, [r4, #12]
 800fec0:	89a3      	ldrh	r3, [r4, #12]
 800fec2:	9a01      	ldr	r2, [sp, #4]
 800fec4:	4313      	orrs	r3, r2
 800fec6:	81a3      	strh	r3, [r4, #12]
 800fec8:	e7cc      	b.n	800fe64 <__smakebuf_r+0x1c>

0800feca <memmove>:
 800feca:	b510      	push	{r4, lr}
 800fecc:	4288      	cmp	r0, r1
 800fece:	d902      	bls.n	800fed6 <memmove+0xc>
 800fed0:	188b      	adds	r3, r1, r2
 800fed2:	4298      	cmp	r0, r3
 800fed4:	d308      	bcc.n	800fee8 <memmove+0x1e>
 800fed6:	2300      	movs	r3, #0
 800fed8:	429a      	cmp	r2, r3
 800feda:	d007      	beq.n	800feec <memmove+0x22>
 800fedc:	5ccc      	ldrb	r4, [r1, r3]
 800fede:	54c4      	strb	r4, [r0, r3]
 800fee0:	3301      	adds	r3, #1
 800fee2:	e7f9      	b.n	800fed8 <memmove+0xe>
 800fee4:	5c8b      	ldrb	r3, [r1, r2]
 800fee6:	5483      	strb	r3, [r0, r2]
 800fee8:	3a01      	subs	r2, #1
 800feea:	d2fb      	bcs.n	800fee4 <memmove+0x1a>
 800feec:	bd10      	pop	{r4, pc}
	...

0800fef0 <_fstat_r>:
 800fef0:	2300      	movs	r3, #0
 800fef2:	b570      	push	{r4, r5, r6, lr}
 800fef4:	4d06      	ldr	r5, [pc, #24]	@ (800ff10 <_fstat_r+0x20>)
 800fef6:	0004      	movs	r4, r0
 800fef8:	0008      	movs	r0, r1
 800fefa:	0011      	movs	r1, r2
 800fefc:	602b      	str	r3, [r5, #0]
 800fefe:	f7f7 f9a5 	bl	800724c <_fstat>
 800ff02:	1c43      	adds	r3, r0, #1
 800ff04:	d103      	bne.n	800ff0e <_fstat_r+0x1e>
 800ff06:	682b      	ldr	r3, [r5, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d000      	beq.n	800ff0e <_fstat_r+0x1e>
 800ff0c:	6023      	str	r3, [r4, #0]
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	20001fe4 	.word	0x20001fe4

0800ff14 <_isatty_r>:
 800ff14:	2300      	movs	r3, #0
 800ff16:	b570      	push	{r4, r5, r6, lr}
 800ff18:	4d06      	ldr	r5, [pc, #24]	@ (800ff34 <_isatty_r+0x20>)
 800ff1a:	0004      	movs	r4, r0
 800ff1c:	0008      	movs	r0, r1
 800ff1e:	602b      	str	r3, [r5, #0]
 800ff20:	f7f7 f9a2 	bl	8007268 <_isatty>
 800ff24:	1c43      	adds	r3, r0, #1
 800ff26:	d103      	bne.n	800ff30 <_isatty_r+0x1c>
 800ff28:	682b      	ldr	r3, [r5, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d000      	beq.n	800ff30 <_isatty_r+0x1c>
 800ff2e:	6023      	str	r3, [r4, #0]
 800ff30:	bd70      	pop	{r4, r5, r6, pc}
 800ff32:	46c0      	nop			@ (mov r8, r8)
 800ff34:	20001fe4 	.word	0x20001fe4

0800ff38 <memchr>:
 800ff38:	b2c9      	uxtb	r1, r1
 800ff3a:	1882      	adds	r2, r0, r2
 800ff3c:	4290      	cmp	r0, r2
 800ff3e:	d101      	bne.n	800ff44 <memchr+0xc>
 800ff40:	2000      	movs	r0, #0
 800ff42:	4770      	bx	lr
 800ff44:	7803      	ldrb	r3, [r0, #0]
 800ff46:	428b      	cmp	r3, r1
 800ff48:	d0fb      	beq.n	800ff42 <memchr+0xa>
 800ff4a:	3001      	adds	r0, #1
 800ff4c:	e7f6      	b.n	800ff3c <memchr+0x4>

0800ff4e <_realloc_r>:
 800ff4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff50:	0006      	movs	r6, r0
 800ff52:	000c      	movs	r4, r1
 800ff54:	0015      	movs	r5, r2
 800ff56:	2900      	cmp	r1, #0
 800ff58:	d105      	bne.n	800ff66 <_realloc_r+0x18>
 800ff5a:	0011      	movs	r1, r2
 800ff5c:	f7fe fffc 	bl	800ef58 <_malloc_r>
 800ff60:	0004      	movs	r4, r0
 800ff62:	0020      	movs	r0, r4
 800ff64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ff66:	2a00      	cmp	r2, #0
 800ff68:	d103      	bne.n	800ff72 <_realloc_r+0x24>
 800ff6a:	f7ff fb6d 	bl	800f648 <_free_r>
 800ff6e:	002c      	movs	r4, r5
 800ff70:	e7f7      	b.n	800ff62 <_realloc_r+0x14>
 800ff72:	f000 f81c 	bl	800ffae <_malloc_usable_size_r>
 800ff76:	0007      	movs	r7, r0
 800ff78:	4285      	cmp	r5, r0
 800ff7a:	d802      	bhi.n	800ff82 <_realloc_r+0x34>
 800ff7c:	0843      	lsrs	r3, r0, #1
 800ff7e:	42ab      	cmp	r3, r5
 800ff80:	d3ef      	bcc.n	800ff62 <_realloc_r+0x14>
 800ff82:	0029      	movs	r1, r5
 800ff84:	0030      	movs	r0, r6
 800ff86:	f7fe ffe7 	bl	800ef58 <_malloc_r>
 800ff8a:	9001      	str	r0, [sp, #4]
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d101      	bne.n	800ff94 <_realloc_r+0x46>
 800ff90:	9c01      	ldr	r4, [sp, #4]
 800ff92:	e7e6      	b.n	800ff62 <_realloc_r+0x14>
 800ff94:	002a      	movs	r2, r5
 800ff96:	42bd      	cmp	r5, r7
 800ff98:	d900      	bls.n	800ff9c <_realloc_r+0x4e>
 800ff9a:	003a      	movs	r2, r7
 800ff9c:	0021      	movs	r1, r4
 800ff9e:	9801      	ldr	r0, [sp, #4]
 800ffa0:	f7ff fb49 	bl	800f636 <memcpy>
 800ffa4:	0021      	movs	r1, r4
 800ffa6:	0030      	movs	r0, r6
 800ffa8:	f7ff fb4e 	bl	800f648 <_free_r>
 800ffac:	e7f0      	b.n	800ff90 <_realloc_r+0x42>

0800ffae <_malloc_usable_size_r>:
 800ffae:	1f0b      	subs	r3, r1, #4
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	1f18      	subs	r0, r3, #4
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	da01      	bge.n	800ffbc <_malloc_usable_size_r+0xe>
 800ffb8:	580b      	ldr	r3, [r1, r0]
 800ffba:	18c0      	adds	r0, r0, r3
 800ffbc:	4770      	bx	lr
	...

0800ffc0 <_init>:
 800ffc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc2:	46c0      	nop			@ (mov r8, r8)
 800ffc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffc6:	bc08      	pop	{r3}
 800ffc8:	469e      	mov	lr, r3
 800ffca:	4770      	bx	lr

0800ffcc <_fini>:
 800ffcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffce:	46c0      	nop			@ (mov r8, r8)
 800ffd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd2:	bc08      	pop	{r3}
 800ffd4:	469e      	mov	lr, r3
 800ffd6:	4770      	bx	lr

0800ffd8 <__FLASH_Program_Fast_veneer>:
 800ffd8:	b401      	push	{r0}
 800ffda:	4802      	ldr	r0, [pc, #8]	@ (800ffe4 <__FLASH_Program_Fast_veneer+0xc>)
 800ffdc:	4684      	mov	ip, r0
 800ffde:	bc01      	pop	{r0}
 800ffe0:	4760      	bx	ip
 800ffe2:	bf00      	nop
 800ffe4:	200000a1 	.word	0x200000a1

Disassembly of section .data:

20000010 <hal_xa_tmr>:
20000010:	                                         .

20000011 <hal_xb_tmr>:
20000011:	                                         .

20000012 <hal_ya_tmr>:
20000012:	                                         .

20000013 <hal_yb_tmr>:
20000013:	                                         .

20000014 <position_saved>:
20000014:	                                         .

20000015 <tmr>:
20000015:	                                         ...

20000018 <SystemCoreClock>:
20000018:	00f42400                                .$..

2000001c <ch1_ctrl>:
2000001c:	20001cc4 20001370 20001384 00000000     ... p.. ... ....

2000002c <ch2_ctrl>:
2000002c:	20001d58 20001c98 20001cac 00000000     X.. ... ... ....

2000003c <uwTickPrio>:
2000003c:	00000004                                ....

20000040 <uwTickFreq>:
20000040:	00000001                                ....

20000044 <__sglue>:
20000044:	00000000 00000003 20001ea8              ........... 

20000050 <_impure_ptr>:
20000050:	20000054                                T.. 

20000054 <_impure_data>:
20000054:	00000000 20001ea8 20001f10 20001f78     ....... ... x.. 
	...

200000a0 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000a0:	b580      	push	{r7, lr}
200000a2:	b088      	sub	sp, #32
200000a4:	af00      	add	r7, sp, #0
200000a6:	6078      	str	r0, [r7, #4]
200000a8:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000aa:	231f      	movs	r3, #31
200000ac:	18fb      	adds	r3, r7, r3
200000ae:	2200      	movs	r2, #0
200000b0:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000b6:	683b      	ldr	r3, [r7, #0]
200000b8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ba:	4b1a      	ldr	r3, [pc, #104]	@ (20000124 <FLASH_Program_Fast+0x84>)
200000bc:	695a      	ldr	r2, [r3, #20]
200000be:	4b19      	ldr	r3, [pc, #100]	@ (20000124 <FLASH_Program_Fast+0x84>)
200000c0:	2180      	movs	r1, #128	@ 0x80
200000c2:	02c9      	lsls	r1, r1, #11
200000c4:	430a      	orrs	r2, r1
200000c6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000c8:	f3ef 8310 	mrs	r3, PRIMASK
200000cc:	60fb      	str	r3, [r7, #12]
  return(result);
200000ce:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000d2:	b672      	cpsid	i
}
200000d4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000d6:	e00f      	b.n	200000f8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000d8:	697a      	ldr	r2, [r7, #20]
200000da:	69bb      	ldr	r3, [r7, #24]
200000dc:	6812      	ldr	r2, [r2, #0]
200000de:	601a      	str	r2, [r3, #0]
    src += 4U;
200000e0:	697b      	ldr	r3, [r7, #20]
200000e2:	3304      	adds	r3, #4
200000e4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000e6:	69bb      	ldr	r3, [r7, #24]
200000e8:	3304      	adds	r3, #4
200000ea:	61bb      	str	r3, [r7, #24]
    index++;
200000ec:	211f      	movs	r1, #31
200000ee:	187b      	adds	r3, r7, r1
200000f0:	781a      	ldrb	r2, [r3, #0]
200000f2:	187b      	adds	r3, r7, r1
200000f4:	3201      	adds	r2, #1
200000f6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000f8:	231f      	movs	r3, #31
200000fa:	18fb      	adds	r3, r7, r3
200000fc:	781b      	ldrb	r3, [r3, #0]
200000fe:	2b3f      	cmp	r3, #63	@ 0x3f
20000100:	d9ea      	bls.n	200000d8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000102:	46c0      	nop			@ (mov r8, r8)
20000104:	4b07      	ldr	r3, [pc, #28]	@ (20000124 <FLASH_Program_Fast+0x84>)
20000106:	691a      	ldr	r2, [r3, #16]
20000108:	23c0      	movs	r3, #192	@ 0xc0
2000010a:	029b      	lsls	r3, r3, #10
2000010c:	4013      	ands	r3, r2
2000010e:	d1f9      	bne.n	20000104 <FLASH_Program_Fast+0x64>
20000110:	693b      	ldr	r3, [r7, #16]
20000112:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000114:	68bb      	ldr	r3, [r7, #8]
20000116:	f383 8810 	msr	PRIMASK, r3
}
2000011a:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000011c:	46c0      	nop			@ (mov r8, r8)
2000011e:	46bd      	mov	sp, r7
20000120:	b008      	add	sp, #32
20000122:	bd80      	pop	{r7, pc}
20000124:	40022000 	.word	0x40022000
