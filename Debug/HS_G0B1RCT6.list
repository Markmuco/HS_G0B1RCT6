
HS_G0B1RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08004200  08004200  00001200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .mySection    00000028  08004000  08004000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000be48  080042c0  080042c0  000012c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001abc  08010108  08010108  0000d108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08011bc4  08011bc4  0000f128  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  08011bc4  08011bc4  0000ebc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011bcc  08011bcc  0000f128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011bcc  08011bcc  0000ebcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08011bd0  08011bd0  0000ebd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000010  08011bd4  0000f010  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 10 .bss          00001e94  20000128  08011cec  0000f128  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fbc  08011cec  0000ffbc  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a4d4  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000692b  00000000  00000000  00039624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002298  00000000  00000000  0003ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ab1  00000000  00000000  000421e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b70  00000000  00000000  00043c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031f9b  00000000  00000000  0006b809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd783  00000000  00000000  0009d7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017af27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008384  00000000  00000000  0017af6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  001832f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080042c0 <__do_global_dtors_aux>:
 80042c0:	b510      	push	{r4, lr}
 80042c2:	4c06      	ldr	r4, [pc, #24]	@ (80042dc <__do_global_dtors_aux+0x1c>)
 80042c4:	7823      	ldrb	r3, [r4, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <__do_global_dtors_aux+0x1a>
 80042ca:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <__do_global_dtors_aux+0x20>)
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <__do_global_dtors_aux+0x16>
 80042d0:	4804      	ldr	r0, [pc, #16]	@ (80042e4 <__do_global_dtors_aux+0x24>)
 80042d2:	e000      	b.n	80042d6 <__do_global_dtors_aux+0x16>
 80042d4:	bf00      	nop
 80042d6:	2301      	movs	r3, #1
 80042d8:	7023      	strb	r3, [r4, #0]
 80042da:	bd10      	pop	{r4, pc}
 80042dc:	20000128 	.word	0x20000128
 80042e0:	00000000 	.word	0x00000000
 80042e4:	080100e0 	.word	0x080100e0

080042e8 <frame_dummy>:
 80042e8:	4b04      	ldr	r3, [pc, #16]	@ (80042fc <frame_dummy+0x14>)
 80042ea:	b510      	push	{r4, lr}
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <frame_dummy+0x10>
 80042f0:	4903      	ldr	r1, [pc, #12]	@ (8004300 <frame_dummy+0x18>)
 80042f2:	4804      	ldr	r0, [pc, #16]	@ (8004304 <frame_dummy+0x1c>)
 80042f4:	e000      	b.n	80042f8 <frame_dummy+0x10>
 80042f6:	bf00      	nop
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	00000000 	.word	0x00000000
 8004300:	2000012c 	.word	0x2000012c
 8004304:	080100e0 	.word	0x080100e0

08004308 <__gnu_thumb1_case_shi>:
 8004308:	b403      	push	{r0, r1}
 800430a:	4671      	mov	r1, lr
 800430c:	0849      	lsrs	r1, r1, #1
 800430e:	0040      	lsls	r0, r0, #1
 8004310:	0049      	lsls	r1, r1, #1
 8004312:	5e09      	ldrsh	r1, [r1, r0]
 8004314:	0049      	lsls	r1, r1, #1
 8004316:	448e      	add	lr, r1
 8004318:	bc03      	pop	{r0, r1}
 800431a:	4770      	bx	lr

0800431c <__udivsi3>:
 800431c:	2200      	movs	r2, #0
 800431e:	0843      	lsrs	r3, r0, #1
 8004320:	428b      	cmp	r3, r1
 8004322:	d374      	bcc.n	800440e <__udivsi3+0xf2>
 8004324:	0903      	lsrs	r3, r0, #4
 8004326:	428b      	cmp	r3, r1
 8004328:	d35f      	bcc.n	80043ea <__udivsi3+0xce>
 800432a:	0a03      	lsrs	r3, r0, #8
 800432c:	428b      	cmp	r3, r1
 800432e:	d344      	bcc.n	80043ba <__udivsi3+0x9e>
 8004330:	0b03      	lsrs	r3, r0, #12
 8004332:	428b      	cmp	r3, r1
 8004334:	d328      	bcc.n	8004388 <__udivsi3+0x6c>
 8004336:	0c03      	lsrs	r3, r0, #16
 8004338:	428b      	cmp	r3, r1
 800433a:	d30d      	bcc.n	8004358 <__udivsi3+0x3c>
 800433c:	22ff      	movs	r2, #255	@ 0xff
 800433e:	0209      	lsls	r1, r1, #8
 8004340:	ba12      	rev	r2, r2
 8004342:	0c03      	lsrs	r3, r0, #16
 8004344:	428b      	cmp	r3, r1
 8004346:	d302      	bcc.n	800434e <__udivsi3+0x32>
 8004348:	1212      	asrs	r2, r2, #8
 800434a:	0209      	lsls	r1, r1, #8
 800434c:	d065      	beq.n	800441a <__udivsi3+0xfe>
 800434e:	0b03      	lsrs	r3, r0, #12
 8004350:	428b      	cmp	r3, r1
 8004352:	d319      	bcc.n	8004388 <__udivsi3+0x6c>
 8004354:	e000      	b.n	8004358 <__udivsi3+0x3c>
 8004356:	0a09      	lsrs	r1, r1, #8
 8004358:	0bc3      	lsrs	r3, r0, #15
 800435a:	428b      	cmp	r3, r1
 800435c:	d301      	bcc.n	8004362 <__udivsi3+0x46>
 800435e:	03cb      	lsls	r3, r1, #15
 8004360:	1ac0      	subs	r0, r0, r3
 8004362:	4152      	adcs	r2, r2
 8004364:	0b83      	lsrs	r3, r0, #14
 8004366:	428b      	cmp	r3, r1
 8004368:	d301      	bcc.n	800436e <__udivsi3+0x52>
 800436a:	038b      	lsls	r3, r1, #14
 800436c:	1ac0      	subs	r0, r0, r3
 800436e:	4152      	adcs	r2, r2
 8004370:	0b43      	lsrs	r3, r0, #13
 8004372:	428b      	cmp	r3, r1
 8004374:	d301      	bcc.n	800437a <__udivsi3+0x5e>
 8004376:	034b      	lsls	r3, r1, #13
 8004378:	1ac0      	subs	r0, r0, r3
 800437a:	4152      	adcs	r2, r2
 800437c:	0b03      	lsrs	r3, r0, #12
 800437e:	428b      	cmp	r3, r1
 8004380:	d301      	bcc.n	8004386 <__udivsi3+0x6a>
 8004382:	030b      	lsls	r3, r1, #12
 8004384:	1ac0      	subs	r0, r0, r3
 8004386:	4152      	adcs	r2, r2
 8004388:	0ac3      	lsrs	r3, r0, #11
 800438a:	428b      	cmp	r3, r1
 800438c:	d301      	bcc.n	8004392 <__udivsi3+0x76>
 800438e:	02cb      	lsls	r3, r1, #11
 8004390:	1ac0      	subs	r0, r0, r3
 8004392:	4152      	adcs	r2, r2
 8004394:	0a83      	lsrs	r3, r0, #10
 8004396:	428b      	cmp	r3, r1
 8004398:	d301      	bcc.n	800439e <__udivsi3+0x82>
 800439a:	028b      	lsls	r3, r1, #10
 800439c:	1ac0      	subs	r0, r0, r3
 800439e:	4152      	adcs	r2, r2
 80043a0:	0a43      	lsrs	r3, r0, #9
 80043a2:	428b      	cmp	r3, r1
 80043a4:	d301      	bcc.n	80043aa <__udivsi3+0x8e>
 80043a6:	024b      	lsls	r3, r1, #9
 80043a8:	1ac0      	subs	r0, r0, r3
 80043aa:	4152      	adcs	r2, r2
 80043ac:	0a03      	lsrs	r3, r0, #8
 80043ae:	428b      	cmp	r3, r1
 80043b0:	d301      	bcc.n	80043b6 <__udivsi3+0x9a>
 80043b2:	020b      	lsls	r3, r1, #8
 80043b4:	1ac0      	subs	r0, r0, r3
 80043b6:	4152      	adcs	r2, r2
 80043b8:	d2cd      	bcs.n	8004356 <__udivsi3+0x3a>
 80043ba:	09c3      	lsrs	r3, r0, #7
 80043bc:	428b      	cmp	r3, r1
 80043be:	d301      	bcc.n	80043c4 <__udivsi3+0xa8>
 80043c0:	01cb      	lsls	r3, r1, #7
 80043c2:	1ac0      	subs	r0, r0, r3
 80043c4:	4152      	adcs	r2, r2
 80043c6:	0983      	lsrs	r3, r0, #6
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d301      	bcc.n	80043d0 <__udivsi3+0xb4>
 80043cc:	018b      	lsls	r3, r1, #6
 80043ce:	1ac0      	subs	r0, r0, r3
 80043d0:	4152      	adcs	r2, r2
 80043d2:	0943      	lsrs	r3, r0, #5
 80043d4:	428b      	cmp	r3, r1
 80043d6:	d301      	bcc.n	80043dc <__udivsi3+0xc0>
 80043d8:	014b      	lsls	r3, r1, #5
 80043da:	1ac0      	subs	r0, r0, r3
 80043dc:	4152      	adcs	r2, r2
 80043de:	0903      	lsrs	r3, r0, #4
 80043e0:	428b      	cmp	r3, r1
 80043e2:	d301      	bcc.n	80043e8 <__udivsi3+0xcc>
 80043e4:	010b      	lsls	r3, r1, #4
 80043e6:	1ac0      	subs	r0, r0, r3
 80043e8:	4152      	adcs	r2, r2
 80043ea:	08c3      	lsrs	r3, r0, #3
 80043ec:	428b      	cmp	r3, r1
 80043ee:	d301      	bcc.n	80043f4 <__udivsi3+0xd8>
 80043f0:	00cb      	lsls	r3, r1, #3
 80043f2:	1ac0      	subs	r0, r0, r3
 80043f4:	4152      	adcs	r2, r2
 80043f6:	0883      	lsrs	r3, r0, #2
 80043f8:	428b      	cmp	r3, r1
 80043fa:	d301      	bcc.n	8004400 <__udivsi3+0xe4>
 80043fc:	008b      	lsls	r3, r1, #2
 80043fe:	1ac0      	subs	r0, r0, r3
 8004400:	4152      	adcs	r2, r2
 8004402:	0843      	lsrs	r3, r0, #1
 8004404:	428b      	cmp	r3, r1
 8004406:	d301      	bcc.n	800440c <__udivsi3+0xf0>
 8004408:	004b      	lsls	r3, r1, #1
 800440a:	1ac0      	subs	r0, r0, r3
 800440c:	4152      	adcs	r2, r2
 800440e:	1a41      	subs	r1, r0, r1
 8004410:	d200      	bcs.n	8004414 <__udivsi3+0xf8>
 8004412:	4601      	mov	r1, r0
 8004414:	4152      	adcs	r2, r2
 8004416:	4610      	mov	r0, r2
 8004418:	4770      	bx	lr
 800441a:	e7ff      	b.n	800441c <__udivsi3+0x100>
 800441c:	b501      	push	{r0, lr}
 800441e:	2000      	movs	r0, #0
 8004420:	f000 f8f0 	bl	8004604 <__aeabi_idiv0>
 8004424:	bd02      	pop	{r1, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)

08004428 <__aeabi_uidivmod>:
 8004428:	2900      	cmp	r1, #0
 800442a:	d0f7      	beq.n	800441c <__udivsi3+0x100>
 800442c:	e776      	b.n	800431c <__udivsi3>
 800442e:	4770      	bx	lr

08004430 <__divsi3>:
 8004430:	4603      	mov	r3, r0
 8004432:	430b      	orrs	r3, r1
 8004434:	d47f      	bmi.n	8004536 <__divsi3+0x106>
 8004436:	2200      	movs	r2, #0
 8004438:	0843      	lsrs	r3, r0, #1
 800443a:	428b      	cmp	r3, r1
 800443c:	d374      	bcc.n	8004528 <__divsi3+0xf8>
 800443e:	0903      	lsrs	r3, r0, #4
 8004440:	428b      	cmp	r3, r1
 8004442:	d35f      	bcc.n	8004504 <__divsi3+0xd4>
 8004444:	0a03      	lsrs	r3, r0, #8
 8004446:	428b      	cmp	r3, r1
 8004448:	d344      	bcc.n	80044d4 <__divsi3+0xa4>
 800444a:	0b03      	lsrs	r3, r0, #12
 800444c:	428b      	cmp	r3, r1
 800444e:	d328      	bcc.n	80044a2 <__divsi3+0x72>
 8004450:	0c03      	lsrs	r3, r0, #16
 8004452:	428b      	cmp	r3, r1
 8004454:	d30d      	bcc.n	8004472 <__divsi3+0x42>
 8004456:	22ff      	movs	r2, #255	@ 0xff
 8004458:	0209      	lsls	r1, r1, #8
 800445a:	ba12      	rev	r2, r2
 800445c:	0c03      	lsrs	r3, r0, #16
 800445e:	428b      	cmp	r3, r1
 8004460:	d302      	bcc.n	8004468 <__divsi3+0x38>
 8004462:	1212      	asrs	r2, r2, #8
 8004464:	0209      	lsls	r1, r1, #8
 8004466:	d065      	beq.n	8004534 <__divsi3+0x104>
 8004468:	0b03      	lsrs	r3, r0, #12
 800446a:	428b      	cmp	r3, r1
 800446c:	d319      	bcc.n	80044a2 <__divsi3+0x72>
 800446e:	e000      	b.n	8004472 <__divsi3+0x42>
 8004470:	0a09      	lsrs	r1, r1, #8
 8004472:	0bc3      	lsrs	r3, r0, #15
 8004474:	428b      	cmp	r3, r1
 8004476:	d301      	bcc.n	800447c <__divsi3+0x4c>
 8004478:	03cb      	lsls	r3, r1, #15
 800447a:	1ac0      	subs	r0, r0, r3
 800447c:	4152      	adcs	r2, r2
 800447e:	0b83      	lsrs	r3, r0, #14
 8004480:	428b      	cmp	r3, r1
 8004482:	d301      	bcc.n	8004488 <__divsi3+0x58>
 8004484:	038b      	lsls	r3, r1, #14
 8004486:	1ac0      	subs	r0, r0, r3
 8004488:	4152      	adcs	r2, r2
 800448a:	0b43      	lsrs	r3, r0, #13
 800448c:	428b      	cmp	r3, r1
 800448e:	d301      	bcc.n	8004494 <__divsi3+0x64>
 8004490:	034b      	lsls	r3, r1, #13
 8004492:	1ac0      	subs	r0, r0, r3
 8004494:	4152      	adcs	r2, r2
 8004496:	0b03      	lsrs	r3, r0, #12
 8004498:	428b      	cmp	r3, r1
 800449a:	d301      	bcc.n	80044a0 <__divsi3+0x70>
 800449c:	030b      	lsls	r3, r1, #12
 800449e:	1ac0      	subs	r0, r0, r3
 80044a0:	4152      	adcs	r2, r2
 80044a2:	0ac3      	lsrs	r3, r0, #11
 80044a4:	428b      	cmp	r3, r1
 80044a6:	d301      	bcc.n	80044ac <__divsi3+0x7c>
 80044a8:	02cb      	lsls	r3, r1, #11
 80044aa:	1ac0      	subs	r0, r0, r3
 80044ac:	4152      	adcs	r2, r2
 80044ae:	0a83      	lsrs	r3, r0, #10
 80044b0:	428b      	cmp	r3, r1
 80044b2:	d301      	bcc.n	80044b8 <__divsi3+0x88>
 80044b4:	028b      	lsls	r3, r1, #10
 80044b6:	1ac0      	subs	r0, r0, r3
 80044b8:	4152      	adcs	r2, r2
 80044ba:	0a43      	lsrs	r3, r0, #9
 80044bc:	428b      	cmp	r3, r1
 80044be:	d301      	bcc.n	80044c4 <__divsi3+0x94>
 80044c0:	024b      	lsls	r3, r1, #9
 80044c2:	1ac0      	subs	r0, r0, r3
 80044c4:	4152      	adcs	r2, r2
 80044c6:	0a03      	lsrs	r3, r0, #8
 80044c8:	428b      	cmp	r3, r1
 80044ca:	d301      	bcc.n	80044d0 <__divsi3+0xa0>
 80044cc:	020b      	lsls	r3, r1, #8
 80044ce:	1ac0      	subs	r0, r0, r3
 80044d0:	4152      	adcs	r2, r2
 80044d2:	d2cd      	bcs.n	8004470 <__divsi3+0x40>
 80044d4:	09c3      	lsrs	r3, r0, #7
 80044d6:	428b      	cmp	r3, r1
 80044d8:	d301      	bcc.n	80044de <__divsi3+0xae>
 80044da:	01cb      	lsls	r3, r1, #7
 80044dc:	1ac0      	subs	r0, r0, r3
 80044de:	4152      	adcs	r2, r2
 80044e0:	0983      	lsrs	r3, r0, #6
 80044e2:	428b      	cmp	r3, r1
 80044e4:	d301      	bcc.n	80044ea <__divsi3+0xba>
 80044e6:	018b      	lsls	r3, r1, #6
 80044e8:	1ac0      	subs	r0, r0, r3
 80044ea:	4152      	adcs	r2, r2
 80044ec:	0943      	lsrs	r3, r0, #5
 80044ee:	428b      	cmp	r3, r1
 80044f0:	d301      	bcc.n	80044f6 <__divsi3+0xc6>
 80044f2:	014b      	lsls	r3, r1, #5
 80044f4:	1ac0      	subs	r0, r0, r3
 80044f6:	4152      	adcs	r2, r2
 80044f8:	0903      	lsrs	r3, r0, #4
 80044fa:	428b      	cmp	r3, r1
 80044fc:	d301      	bcc.n	8004502 <__divsi3+0xd2>
 80044fe:	010b      	lsls	r3, r1, #4
 8004500:	1ac0      	subs	r0, r0, r3
 8004502:	4152      	adcs	r2, r2
 8004504:	08c3      	lsrs	r3, r0, #3
 8004506:	428b      	cmp	r3, r1
 8004508:	d301      	bcc.n	800450e <__divsi3+0xde>
 800450a:	00cb      	lsls	r3, r1, #3
 800450c:	1ac0      	subs	r0, r0, r3
 800450e:	4152      	adcs	r2, r2
 8004510:	0883      	lsrs	r3, r0, #2
 8004512:	428b      	cmp	r3, r1
 8004514:	d301      	bcc.n	800451a <__divsi3+0xea>
 8004516:	008b      	lsls	r3, r1, #2
 8004518:	1ac0      	subs	r0, r0, r3
 800451a:	4152      	adcs	r2, r2
 800451c:	0843      	lsrs	r3, r0, #1
 800451e:	428b      	cmp	r3, r1
 8004520:	d301      	bcc.n	8004526 <__divsi3+0xf6>
 8004522:	004b      	lsls	r3, r1, #1
 8004524:	1ac0      	subs	r0, r0, r3
 8004526:	4152      	adcs	r2, r2
 8004528:	1a41      	subs	r1, r0, r1
 800452a:	d200      	bcs.n	800452e <__divsi3+0xfe>
 800452c:	4601      	mov	r1, r0
 800452e:	4152      	adcs	r2, r2
 8004530:	4610      	mov	r0, r2
 8004532:	4770      	bx	lr
 8004534:	e05d      	b.n	80045f2 <__divsi3+0x1c2>
 8004536:	0fca      	lsrs	r2, r1, #31
 8004538:	d000      	beq.n	800453c <__divsi3+0x10c>
 800453a:	4249      	negs	r1, r1
 800453c:	1003      	asrs	r3, r0, #32
 800453e:	d300      	bcc.n	8004542 <__divsi3+0x112>
 8004540:	4240      	negs	r0, r0
 8004542:	4053      	eors	r3, r2
 8004544:	2200      	movs	r2, #0
 8004546:	469c      	mov	ip, r3
 8004548:	0903      	lsrs	r3, r0, #4
 800454a:	428b      	cmp	r3, r1
 800454c:	d32d      	bcc.n	80045aa <__divsi3+0x17a>
 800454e:	0a03      	lsrs	r3, r0, #8
 8004550:	428b      	cmp	r3, r1
 8004552:	d312      	bcc.n	800457a <__divsi3+0x14a>
 8004554:	22fc      	movs	r2, #252	@ 0xfc
 8004556:	0189      	lsls	r1, r1, #6
 8004558:	ba12      	rev	r2, r2
 800455a:	0a03      	lsrs	r3, r0, #8
 800455c:	428b      	cmp	r3, r1
 800455e:	d30c      	bcc.n	800457a <__divsi3+0x14a>
 8004560:	0189      	lsls	r1, r1, #6
 8004562:	1192      	asrs	r2, r2, #6
 8004564:	428b      	cmp	r3, r1
 8004566:	d308      	bcc.n	800457a <__divsi3+0x14a>
 8004568:	0189      	lsls	r1, r1, #6
 800456a:	1192      	asrs	r2, r2, #6
 800456c:	428b      	cmp	r3, r1
 800456e:	d304      	bcc.n	800457a <__divsi3+0x14a>
 8004570:	0189      	lsls	r1, r1, #6
 8004572:	d03a      	beq.n	80045ea <__divsi3+0x1ba>
 8004574:	1192      	asrs	r2, r2, #6
 8004576:	e000      	b.n	800457a <__divsi3+0x14a>
 8004578:	0989      	lsrs	r1, r1, #6
 800457a:	09c3      	lsrs	r3, r0, #7
 800457c:	428b      	cmp	r3, r1
 800457e:	d301      	bcc.n	8004584 <__divsi3+0x154>
 8004580:	01cb      	lsls	r3, r1, #7
 8004582:	1ac0      	subs	r0, r0, r3
 8004584:	4152      	adcs	r2, r2
 8004586:	0983      	lsrs	r3, r0, #6
 8004588:	428b      	cmp	r3, r1
 800458a:	d301      	bcc.n	8004590 <__divsi3+0x160>
 800458c:	018b      	lsls	r3, r1, #6
 800458e:	1ac0      	subs	r0, r0, r3
 8004590:	4152      	adcs	r2, r2
 8004592:	0943      	lsrs	r3, r0, #5
 8004594:	428b      	cmp	r3, r1
 8004596:	d301      	bcc.n	800459c <__divsi3+0x16c>
 8004598:	014b      	lsls	r3, r1, #5
 800459a:	1ac0      	subs	r0, r0, r3
 800459c:	4152      	adcs	r2, r2
 800459e:	0903      	lsrs	r3, r0, #4
 80045a0:	428b      	cmp	r3, r1
 80045a2:	d301      	bcc.n	80045a8 <__divsi3+0x178>
 80045a4:	010b      	lsls	r3, r1, #4
 80045a6:	1ac0      	subs	r0, r0, r3
 80045a8:	4152      	adcs	r2, r2
 80045aa:	08c3      	lsrs	r3, r0, #3
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d301      	bcc.n	80045b4 <__divsi3+0x184>
 80045b0:	00cb      	lsls	r3, r1, #3
 80045b2:	1ac0      	subs	r0, r0, r3
 80045b4:	4152      	adcs	r2, r2
 80045b6:	0883      	lsrs	r3, r0, #2
 80045b8:	428b      	cmp	r3, r1
 80045ba:	d301      	bcc.n	80045c0 <__divsi3+0x190>
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	1ac0      	subs	r0, r0, r3
 80045c0:	4152      	adcs	r2, r2
 80045c2:	d2d9      	bcs.n	8004578 <__divsi3+0x148>
 80045c4:	0843      	lsrs	r3, r0, #1
 80045c6:	428b      	cmp	r3, r1
 80045c8:	d301      	bcc.n	80045ce <__divsi3+0x19e>
 80045ca:	004b      	lsls	r3, r1, #1
 80045cc:	1ac0      	subs	r0, r0, r3
 80045ce:	4152      	adcs	r2, r2
 80045d0:	1a41      	subs	r1, r0, r1
 80045d2:	d200      	bcs.n	80045d6 <__divsi3+0x1a6>
 80045d4:	4601      	mov	r1, r0
 80045d6:	4663      	mov	r3, ip
 80045d8:	4152      	adcs	r2, r2
 80045da:	105b      	asrs	r3, r3, #1
 80045dc:	4610      	mov	r0, r2
 80045de:	d301      	bcc.n	80045e4 <__divsi3+0x1b4>
 80045e0:	4240      	negs	r0, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d500      	bpl.n	80045e8 <__divsi3+0x1b8>
 80045e6:	4249      	negs	r1, r1
 80045e8:	4770      	bx	lr
 80045ea:	4663      	mov	r3, ip
 80045ec:	105b      	asrs	r3, r3, #1
 80045ee:	d300      	bcc.n	80045f2 <__divsi3+0x1c2>
 80045f0:	4240      	negs	r0, r0
 80045f2:	b501      	push	{r0, lr}
 80045f4:	2000      	movs	r0, #0
 80045f6:	f000 f805 	bl	8004604 <__aeabi_idiv0>
 80045fa:	bd02      	pop	{r1, pc}

080045fc <__aeabi_idivmod>:
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d0f8      	beq.n	80045f2 <__divsi3+0x1c2>
 8004600:	e716      	b.n	8004430 <__divsi3>
 8004602:	4770      	bx	lr

08004604 <__aeabi_idiv0>:
 8004604:	4770      	bx	lr
 8004606:	46c0      	nop			@ (mov r8, r8)

08004608 <__aeabi_uldivmod>:
 8004608:	2b00      	cmp	r3, #0
 800460a:	d111      	bne.n	8004630 <__aeabi_uldivmod+0x28>
 800460c:	2a00      	cmp	r2, #0
 800460e:	d10f      	bne.n	8004630 <__aeabi_uldivmod+0x28>
 8004610:	2900      	cmp	r1, #0
 8004612:	d100      	bne.n	8004616 <__aeabi_uldivmod+0xe>
 8004614:	2800      	cmp	r0, #0
 8004616:	d002      	beq.n	800461e <__aeabi_uldivmod+0x16>
 8004618:	2100      	movs	r1, #0
 800461a:	43c9      	mvns	r1, r1
 800461c:	0008      	movs	r0, r1
 800461e:	b407      	push	{r0, r1, r2}
 8004620:	4802      	ldr	r0, [pc, #8]	@ (800462c <__aeabi_uldivmod+0x24>)
 8004622:	a102      	add	r1, pc, #8	@ (adr r1, 800462c <__aeabi_uldivmod+0x24>)
 8004624:	1840      	adds	r0, r0, r1
 8004626:	9002      	str	r0, [sp, #8]
 8004628:	bd03      	pop	{r0, r1, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	ffffffd9 	.word	0xffffffd9
 8004630:	b403      	push	{r0, r1}
 8004632:	4668      	mov	r0, sp
 8004634:	b501      	push	{r0, lr}
 8004636:	9802      	ldr	r0, [sp, #8]
 8004638:	f000 f806 	bl	8004648 <__udivmoddi4>
 800463c:	9b01      	ldr	r3, [sp, #4]
 800463e:	469e      	mov	lr, r3
 8004640:	b002      	add	sp, #8
 8004642:	bc0c      	pop	{r2, r3}
 8004644:	4770      	bx	lr
 8004646:	46c0      	nop			@ (mov r8, r8)

08004648 <__udivmoddi4>:
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464a:	4657      	mov	r7, sl
 800464c:	464e      	mov	r6, r9
 800464e:	4645      	mov	r5, r8
 8004650:	46de      	mov	lr, fp
 8004652:	b5e0      	push	{r5, r6, r7, lr}
 8004654:	0004      	movs	r4, r0
 8004656:	000d      	movs	r5, r1
 8004658:	4692      	mov	sl, r2
 800465a:	4699      	mov	r9, r3
 800465c:	b083      	sub	sp, #12
 800465e:	428b      	cmp	r3, r1
 8004660:	d830      	bhi.n	80046c4 <__udivmoddi4+0x7c>
 8004662:	d02d      	beq.n	80046c0 <__udivmoddi4+0x78>
 8004664:	4649      	mov	r1, r9
 8004666:	4650      	mov	r0, sl
 8004668:	f000 f8d8 	bl	800481c <__clzdi2>
 800466c:	0029      	movs	r1, r5
 800466e:	0006      	movs	r6, r0
 8004670:	0020      	movs	r0, r4
 8004672:	f000 f8d3 	bl	800481c <__clzdi2>
 8004676:	1a33      	subs	r3, r6, r0
 8004678:	4698      	mov	r8, r3
 800467a:	3b20      	subs	r3, #32
 800467c:	d434      	bmi.n	80046e8 <__udivmoddi4+0xa0>
 800467e:	469b      	mov	fp, r3
 8004680:	4653      	mov	r3, sl
 8004682:	465a      	mov	r2, fp
 8004684:	4093      	lsls	r3, r2
 8004686:	4642      	mov	r2, r8
 8004688:	001f      	movs	r7, r3
 800468a:	4653      	mov	r3, sl
 800468c:	4093      	lsls	r3, r2
 800468e:	001e      	movs	r6, r3
 8004690:	42af      	cmp	r7, r5
 8004692:	d83b      	bhi.n	800470c <__udivmoddi4+0xc4>
 8004694:	42af      	cmp	r7, r5
 8004696:	d100      	bne.n	800469a <__udivmoddi4+0x52>
 8004698:	e079      	b.n	800478e <__udivmoddi4+0x146>
 800469a:	465b      	mov	r3, fp
 800469c:	1ba4      	subs	r4, r4, r6
 800469e:	41bd      	sbcs	r5, r7
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	da00      	bge.n	80046a6 <__udivmoddi4+0x5e>
 80046a4:	e076      	b.n	8004794 <__udivmoddi4+0x14c>
 80046a6:	2200      	movs	r2, #0
 80046a8:	2300      	movs	r3, #0
 80046aa:	9200      	str	r2, [sp, #0]
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	2301      	movs	r3, #1
 80046b0:	465a      	mov	r2, fp
 80046b2:	4093      	lsls	r3, r2
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	2301      	movs	r3, #1
 80046b8:	4642      	mov	r2, r8
 80046ba:	4093      	lsls	r3, r2
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	e029      	b.n	8004714 <__udivmoddi4+0xcc>
 80046c0:	4282      	cmp	r2, r0
 80046c2:	d9cf      	bls.n	8004664 <__udivmoddi4+0x1c>
 80046c4:	2200      	movs	r2, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	9200      	str	r2, [sp, #0]
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <__udivmoddi4+0x8e>
 80046d2:	601c      	str	r4, [r3, #0]
 80046d4:	605d      	str	r5, [r3, #4]
 80046d6:	9800      	ldr	r0, [sp, #0]
 80046d8:	9901      	ldr	r1, [sp, #4]
 80046da:	b003      	add	sp, #12
 80046dc:	bcf0      	pop	{r4, r5, r6, r7}
 80046de:	46bb      	mov	fp, r7
 80046e0:	46b2      	mov	sl, r6
 80046e2:	46a9      	mov	r9, r5
 80046e4:	46a0      	mov	r8, r4
 80046e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e8:	4642      	mov	r2, r8
 80046ea:	469b      	mov	fp, r3
 80046ec:	2320      	movs	r3, #32
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	4652      	mov	r2, sl
 80046f2:	40da      	lsrs	r2, r3
 80046f4:	4641      	mov	r1, r8
 80046f6:	0013      	movs	r3, r2
 80046f8:	464a      	mov	r2, r9
 80046fa:	408a      	lsls	r2, r1
 80046fc:	0017      	movs	r7, r2
 80046fe:	4642      	mov	r2, r8
 8004700:	431f      	orrs	r7, r3
 8004702:	4653      	mov	r3, sl
 8004704:	4093      	lsls	r3, r2
 8004706:	001e      	movs	r6, r3
 8004708:	42af      	cmp	r7, r5
 800470a:	d9c3      	bls.n	8004694 <__udivmoddi4+0x4c>
 800470c:	2200      	movs	r2, #0
 800470e:	2300      	movs	r3, #0
 8004710:	9200      	str	r2, [sp, #0]
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	4643      	mov	r3, r8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0d8      	beq.n	80046cc <__udivmoddi4+0x84>
 800471a:	07fb      	lsls	r3, r7, #31
 800471c:	0872      	lsrs	r2, r6, #1
 800471e:	431a      	orrs	r2, r3
 8004720:	4646      	mov	r6, r8
 8004722:	087b      	lsrs	r3, r7, #1
 8004724:	e00e      	b.n	8004744 <__udivmoddi4+0xfc>
 8004726:	42ab      	cmp	r3, r5
 8004728:	d101      	bne.n	800472e <__udivmoddi4+0xe6>
 800472a:	42a2      	cmp	r2, r4
 800472c:	d80c      	bhi.n	8004748 <__udivmoddi4+0x100>
 800472e:	1aa4      	subs	r4, r4, r2
 8004730:	419d      	sbcs	r5, r3
 8004732:	2001      	movs	r0, #1
 8004734:	1924      	adds	r4, r4, r4
 8004736:	416d      	adcs	r5, r5
 8004738:	2100      	movs	r1, #0
 800473a:	3e01      	subs	r6, #1
 800473c:	1824      	adds	r4, r4, r0
 800473e:	414d      	adcs	r5, r1
 8004740:	2e00      	cmp	r6, #0
 8004742:	d006      	beq.n	8004752 <__udivmoddi4+0x10a>
 8004744:	42ab      	cmp	r3, r5
 8004746:	d9ee      	bls.n	8004726 <__udivmoddi4+0xde>
 8004748:	3e01      	subs	r6, #1
 800474a:	1924      	adds	r4, r4, r4
 800474c:	416d      	adcs	r5, r5
 800474e:	2e00      	cmp	r6, #0
 8004750:	d1f8      	bne.n	8004744 <__udivmoddi4+0xfc>
 8004752:	9800      	ldr	r0, [sp, #0]
 8004754:	9901      	ldr	r1, [sp, #4]
 8004756:	465b      	mov	r3, fp
 8004758:	1900      	adds	r0, r0, r4
 800475a:	4169      	adcs	r1, r5
 800475c:	2b00      	cmp	r3, #0
 800475e:	db24      	blt.n	80047aa <__udivmoddi4+0x162>
 8004760:	002b      	movs	r3, r5
 8004762:	465a      	mov	r2, fp
 8004764:	4644      	mov	r4, r8
 8004766:	40d3      	lsrs	r3, r2
 8004768:	002a      	movs	r2, r5
 800476a:	40e2      	lsrs	r2, r4
 800476c:	001c      	movs	r4, r3
 800476e:	465b      	mov	r3, fp
 8004770:	0015      	movs	r5, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	db2a      	blt.n	80047cc <__udivmoddi4+0x184>
 8004776:	0026      	movs	r6, r4
 8004778:	409e      	lsls	r6, r3
 800477a:	0033      	movs	r3, r6
 800477c:	0026      	movs	r6, r4
 800477e:	4647      	mov	r7, r8
 8004780:	40be      	lsls	r6, r7
 8004782:	0032      	movs	r2, r6
 8004784:	1a80      	subs	r0, r0, r2
 8004786:	4199      	sbcs	r1, r3
 8004788:	9000      	str	r0, [sp, #0]
 800478a:	9101      	str	r1, [sp, #4]
 800478c:	e79e      	b.n	80046cc <__udivmoddi4+0x84>
 800478e:	42a3      	cmp	r3, r4
 8004790:	d8bc      	bhi.n	800470c <__udivmoddi4+0xc4>
 8004792:	e782      	b.n	800469a <__udivmoddi4+0x52>
 8004794:	4642      	mov	r2, r8
 8004796:	2320      	movs	r3, #32
 8004798:	2100      	movs	r1, #0
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	2200      	movs	r2, #0
 800479e:	9100      	str	r1, [sp, #0]
 80047a0:	9201      	str	r2, [sp, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	40da      	lsrs	r2, r3
 80047a6:	9201      	str	r2, [sp, #4]
 80047a8:	e785      	b.n	80046b6 <__udivmoddi4+0x6e>
 80047aa:	4642      	mov	r2, r8
 80047ac:	2320      	movs	r3, #32
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	002a      	movs	r2, r5
 80047b2:	4646      	mov	r6, r8
 80047b4:	409a      	lsls	r2, r3
 80047b6:	0023      	movs	r3, r4
 80047b8:	40f3      	lsrs	r3, r6
 80047ba:	4644      	mov	r4, r8
 80047bc:	4313      	orrs	r3, r2
 80047be:	002a      	movs	r2, r5
 80047c0:	40e2      	lsrs	r2, r4
 80047c2:	001c      	movs	r4, r3
 80047c4:	465b      	mov	r3, fp
 80047c6:	0015      	movs	r5, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dad4      	bge.n	8004776 <__udivmoddi4+0x12e>
 80047cc:	4642      	mov	r2, r8
 80047ce:	002f      	movs	r7, r5
 80047d0:	2320      	movs	r3, #32
 80047d2:	0026      	movs	r6, r4
 80047d4:	4097      	lsls	r7, r2
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	40de      	lsrs	r6, r3
 80047da:	003b      	movs	r3, r7
 80047dc:	4333      	orrs	r3, r6
 80047de:	e7cd      	b.n	800477c <__udivmoddi4+0x134>

080047e0 <__clzsi2>:
 80047e0:	211c      	movs	r1, #28
 80047e2:	2301      	movs	r3, #1
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	4298      	cmp	r0, r3
 80047e8:	d301      	bcc.n	80047ee <__clzsi2+0xe>
 80047ea:	0c00      	lsrs	r0, r0, #16
 80047ec:	3910      	subs	r1, #16
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	4298      	cmp	r0, r3
 80047f2:	d301      	bcc.n	80047f8 <__clzsi2+0x18>
 80047f4:	0a00      	lsrs	r0, r0, #8
 80047f6:	3908      	subs	r1, #8
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	4298      	cmp	r0, r3
 80047fc:	d301      	bcc.n	8004802 <__clzsi2+0x22>
 80047fe:	0900      	lsrs	r0, r0, #4
 8004800:	3904      	subs	r1, #4
 8004802:	a202      	add	r2, pc, #8	@ (adr r2, 800480c <__clzsi2+0x2c>)
 8004804:	5c10      	ldrb	r0, [r2, r0]
 8004806:	1840      	adds	r0, r0, r1
 8004808:	4770      	bx	lr
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	02020304 	.word	0x02020304
 8004810:	01010101 	.word	0x01010101
	...

0800481c <__clzdi2>:
 800481c:	b510      	push	{r4, lr}
 800481e:	2900      	cmp	r1, #0
 8004820:	d103      	bne.n	800482a <__clzdi2+0xe>
 8004822:	f7ff ffdd 	bl	80047e0 <__clzsi2>
 8004826:	3020      	adds	r0, #32
 8004828:	e002      	b.n	8004830 <__clzdi2+0x14>
 800482a:	0008      	movs	r0, r1
 800482c:	f7ff ffd8 	bl	80047e0 <__clzsi2>
 8004830:	bd10      	pop	{r4, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)

08004834 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	0018      	movs	r0, r3
 800483e:	230c      	movs	r3, #12
 8004840:	001a      	movs	r2, r3
 8004842:	2100      	movs	r1, #0
 8004844:	f00a fef2 	bl	800f62c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004848:	4b2d      	ldr	r3, [pc, #180]	@ (8004900 <MX_ADC1_Init+0xcc>)
 800484a:	4a2e      	ldr	r2, [pc, #184]	@ (8004904 <MX_ADC1_Init+0xd0>)
 800484c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800484e:	4b2c      	ldr	r3, [pc, #176]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004850:	2280      	movs	r2, #128	@ 0x80
 8004852:	05d2      	lsls	r2, r2, #23
 8004854:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004856:	4b2a      	ldr	r3, [pc, #168]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004858:	2200      	movs	r2, #0
 800485a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800485c:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <MX_ADC1_Init+0xcc>)
 800485e:	2200      	movs	r2, #0
 8004860:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004862:	4b27      	ldr	r3, [pc, #156]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004864:	2200      	movs	r2, #0
 8004866:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004868:	4b25      	ldr	r3, [pc, #148]	@ (8004900 <MX_ADC1_Init+0xcc>)
 800486a:	2204      	movs	r2, #4
 800486c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800486e:	4b24      	ldr	r3, [pc, #144]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004870:	2200      	movs	r2, #0
 8004872:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004874:	4b22      	ldr	r3, [pc, #136]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004876:	2200      	movs	r2, #0
 8004878:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800487a:	4b21      	ldr	r3, [pc, #132]	@ (8004900 <MX_ADC1_Init+0xcc>)
 800487c:	2200      	movs	r2, #0
 800487e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004880:	4b1f      	ldr	r3, [pc, #124]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004882:	2201      	movs	r2, #1
 8004884:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004886:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004888:	2220      	movs	r2, #32
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800488e:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004890:	2200      	movs	r2, #0
 8004892:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004894:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <MX_ADC1_Init+0xcc>)
 8004896:	2200      	movs	r2, #0
 8004898:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800489a:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <MX_ADC1_Init+0xcc>)
 800489c:	222c      	movs	r2, #44	@ 0x2c
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80048a2:	4b17      	ldr	r3, [pc, #92]	@ (8004900 <MX_ADC1_Init+0xcc>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80048a8:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <MX_ADC1_Init+0xcc>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80048ae:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <MX_ADC1_Init+0xcc>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80048b4:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <MX_ADC1_Init+0xcc>)
 80048b6:	223c      	movs	r2, #60	@ 0x3c
 80048b8:	2100      	movs	r1, #0
 80048ba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80048bc:	4b10      	ldr	r3, [pc, #64]	@ (8004900 <MX_ADC1_Init+0xcc>)
 80048be:	2200      	movs	r2, #0
 80048c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004900 <MX_ADC1_Init+0xcc>)
 80048c4:	0018      	movs	r0, r3
 80048c6:	f003 f9a3 	bl	8007c10 <HAL_ADC_Init>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d001      	beq.n	80048d2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80048ce:	f001 f8f3 	bl	8005ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	2200      	movs	r2, #0
 80048dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	2200      	movs	r2, #0
 80048e2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048e4:	1d3a      	adds	r2, r7, #4
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <MX_ADC1_Init+0xcc>)
 80048e8:	0011      	movs	r1, r2
 80048ea:	0018      	movs	r0, r3
 80048ec:	f003 fb38 	bl	8007f60 <HAL_ADC_ConfigChannel>
 80048f0:	1e03      	subs	r3, r0, #0
 80048f2:	d001      	beq.n	80048f8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80048f4:	f001 f8e0 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b004      	add	sp, #16
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000144 	.word	0x20000144
 8004904:	40012400 	.word	0x40012400

08004908 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b08b      	sub	sp, #44	@ 0x2c
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004910:	2414      	movs	r4, #20
 8004912:	193b      	adds	r3, r7, r4
 8004914:	0018      	movs	r0, r3
 8004916:	2314      	movs	r3, #20
 8004918:	001a      	movs	r2, r3
 800491a:	2100      	movs	r1, #0
 800491c:	f00a fe86 	bl	800f62c <memset>
  if(adcHandle->Instance==ADC1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a18      	ldr	r2, [pc, #96]	@ (8004988 <HAL_ADC_MspInit+0x80>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d129      	bne.n	800497e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800492a:	4b18      	ldr	r3, [pc, #96]	@ (800498c <HAL_ADC_MspInit+0x84>)
 800492c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800492e:	4b17      	ldr	r3, [pc, #92]	@ (800498c <HAL_ADC_MspInit+0x84>)
 8004930:	2180      	movs	r1, #128	@ 0x80
 8004932:	0349      	lsls	r1, r1, #13
 8004934:	430a      	orrs	r2, r1
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40
 8004938:	4b14      	ldr	r3, [pc, #80]	@ (800498c <HAL_ADC_MspInit+0x84>)
 800493a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	035b      	lsls	r3, r3, #13
 8004940:	4013      	ands	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004946:	4b11      	ldr	r3, [pc, #68]	@ (800498c <HAL_ADC_MspInit+0x84>)
 8004948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800494a:	4b10      	ldr	r3, [pc, #64]	@ (800498c <HAL_ADC_MspInit+0x84>)
 800494c:	2101      	movs	r1, #1
 800494e:	430a      	orrs	r2, r1
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34
 8004952:	4b0e      	ldr	r3, [pc, #56]	@ (800498c <HAL_ADC_MspInit+0x84>)
 8004954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004956:	2201      	movs	r2, #1
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800495e:	193b      	adds	r3, r7, r4
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004964:	193b      	adds	r3, r7, r4
 8004966:	2203      	movs	r2, #3
 8004968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	193b      	adds	r3, r7, r4
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004970:	193a      	adds	r2, r7, r4
 8004972:	23a0      	movs	r3, #160	@ 0xa0
 8004974:	05db      	lsls	r3, r3, #23
 8004976:	0011      	movs	r1, r2
 8004978:	0018      	movs	r0, r3
 800497a:	f005 fdb7 	bl	800a4ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	46bd      	mov	sp, r7
 8004982:	b00b      	add	sp, #44	@ 0x2c
 8004984:	bd90      	pop	{r4, r7, pc}
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	40012400 	.word	0x40012400
 800498c:	40021000 	.word	0x40021000

08004990 <adc_calib>:
 * \param -
 *
 * \return -
 */
HAL_StatusTypeDef adc_calib(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	return HAL_ADCEx_Calibration_Start(&hadc1);
 8004994:	4b03      	ldr	r3, [pc, #12]	@ (80049a4 <adc_calib+0x14>)
 8004996:	0018      	movs	r0, r3
 8004998:	f003 fdb0 	bl	80084fc <HAL_ADCEx_Calibration_Start>
 800499c:	0003      	movs	r3, r0
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000144 	.word	0x20000144

080049a8 <AYCT_EXTI_IRQHandler>:
 * @brief This function handles EXTI line 2 and 3 interrupts.
 *
 * Configure as Rising and Falling IRQ
 */
void AYCT_EXTI_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
	static uint32_t timer_now;

	// IRQ will start before the timer is installed
	if (htim16.Instance == NULL)
 80049ac:	4b83      	ldr	r3, [pc, #524]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d100      	bne.n	80049b6 <AYCT_EXTI_IRQHandler+0xe>
 80049b4:	e0ff      	b.n	8004bb6 <AYCT_EXTI_IRQHandler+0x20e>
		return;

	timer_now = __HAL_TIM_GET_COUNTER(&htim16);
 80049b6:	4b81      	ldr	r3, [pc, #516]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049bc:	4b80      	ldr	r3, [pc, #512]	@ (8004bc0 <AYCT_EXTI_IRQHandler+0x218>)
 80049be:	601a      	str	r2, [r3, #0]

	if (is433_INT)
 80049c0:	4b80      	ldr	r3, [pc, #512]	@ (8004bc4 <AYCT_EXTI_IRQHandler+0x21c>)
 80049c2:	2110      	movs	r1, #16
 80049c4:	0018      	movs	r0, r3
 80049c6:	f005 fefd 	bl	800a7c4 <HAL_GPIO_ReadPin>
 80049ca:	1e03      	subs	r3, r0, #0
 80049cc:	d100      	bne.n	80049d0 <AYCT_EXTI_IRQHandler+0x28>
 80049ce:	e0c6      	b.n	8004b5e <AYCT_EXTI_IRQHandler+0x1b6>
	{
		if ((timer_now - start_time > BITS_MINIMUM) && (timer_now - start_time < BITS_MAXIMUM)) // short low
 80049d0:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc0 <AYCT_EXTI_IRQHandler+0x218>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b7c      	ldr	r3, [pc, #496]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b96      	cmp	r3, #150	@ 0x96
 80049dc:	d913      	bls.n	8004a06 <AYCT_EXTI_IRQHandler+0x5e>
 80049de:	4b78      	ldr	r3, [pc, #480]	@ (8004bc0 <AYCT_EXTI_IRQHandler+0x218>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b79      	ldr	r3, [pc, #484]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1ad2      	subs	r2, r2, r3
 80049e8:	23c8      	movs	r3, #200	@ 0xc8
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d20a      	bcs.n	8004a06 <AYCT_EXTI_IRQHandler+0x5e>
			buf[x++] = SHORT_LOW;
 80049f0:	4b76      	ldr	r3, [pc, #472]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	b2d1      	uxtb	r1, r2
 80049f8:	4a74      	ldr	r2, [pc, #464]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 80049fa:	7011      	strb	r1, [r2, #0]
 80049fc:	001a      	movs	r2, r3
 80049fe:	4b74      	ldr	r3, [pc, #464]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004a00:	2101      	movs	r1, #1
 8004a02:	5499      	strb	r1, [r3, r2]
 8004a04:	e027      	b.n	8004a56 <AYCT_EXTI_IRQHandler+0xae>
		else if ((timer_now - start_time > BITL_MINIMUM) && (timer_now - start_time < BITL_MAXIMUM)) // long low
 8004a06:	4b6e      	ldr	r3, [pc, #440]	@ (8004bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	23e1      	movs	r3, #225	@ 0xe1
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d913      	bls.n	8004a40 <AYCT_EXTI_IRQHandler+0x98>
 8004a18:	4b69      	ldr	r3, [pc, #420]	@ (8004bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	1ad2      	subs	r2, r2, r3
 8004a22:	23fa      	movs	r3, #250	@ 0xfa
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d20a      	bcs.n	8004a40 <AYCT_EXTI_IRQHandler+0x98>
			buf[x++] = LONG_LOW;
 8004a2a:	4b68      	ldr	r3, [pc, #416]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	b2d1      	uxtb	r1, r2
 8004a32:	4a66      	ldr	r2, [pc, #408]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004a34:	7011      	strb	r1, [r2, #0]
 8004a36:	001a      	movs	r2, r3
 8004a38:	4b65      	ldr	r3, [pc, #404]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004a3a:	2103      	movs	r1, #3
 8004a3c:	5499      	strb	r1, [r3, r2]
 8004a3e:	e00a      	b.n	8004a56 <AYCT_EXTI_IRQHandler+0xae>
		else
		{
			cnt = x = 0; // bit is fout
 8004a40:	4b62      	ldr	r3, [pc, #392]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	4b61      	ldr	r3, [pc, #388]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	4b62      	ldr	r3, [pc, #392]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004a4c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8004a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if (x > 4 || cnt > 32)
 8004a56:	4b5d      	ldr	r3, [pc, #372]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d803      	bhi.n	8004a66 <AYCT_EXTI_IRQHandler+0xbe>
 8004a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d906      	bls.n	8004a74 <AYCT_EXTI_IRQHandler+0xcc>
			cnt = x = 0; // bit is fout
 8004a66:	4b59      	ldr	r3, [pc, #356]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	4b57      	ldr	r3, [pc, #348]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	4b58      	ldr	r3, [pc, #352]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004a72:	701a      	strb	r2, [r3, #0]

		// received 0
		if (buf[0] == SHORT_HIGH && buf[1] == SHORT_LOW && buf[2] == SHORT_HIGH && buf[3] == LONG_LOW)
 8004a74:	4b56      	ldr	r3, [pc, #344]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b0a      	cmp	r3, #10
 8004a7a:	d133      	bne.n	8004ae4 <AYCT_EXTI_IRQHandler+0x13c>
 8004a7c:	4b54      	ldr	r3, [pc, #336]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d12f      	bne.n	8004ae4 <AYCT_EXTI_IRQHandler+0x13c>
 8004a84:	4b52      	ldr	r3, [pc, #328]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004a86:	789b      	ldrb	r3, [r3, #2]
 8004a88:	2b0a      	cmp	r3, #10
 8004a8a:	d12b      	bne.n	8004ae4 <AYCT_EXTI_IRQHandler+0x13c>
 8004a8c:	4b50      	ldr	r3, [pc, #320]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004a8e:	78db      	ldrb	r3, [r3, #3]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d127      	bne.n	8004ae4 <AYCT_EXTI_IRQHandler+0x13c>
		{
			bit_clear(received_code, (31 - cnt++));
 8004a94:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	b2d1      	uxtb	r1, r2
 8004a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004a9e:	7011      	strb	r1, [r2, #0]
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	40d3      	lsrs	r3, r2
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	001a      	movs	r2, r3
 8004aac:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	4b49      	ldr	r3, [pc, #292]	@ (8004bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8004ab4:	601a      	str	r2, [r3, #0]
			buf[0] = buf[1] = buf[2] = buf[3] = x = NO_DATA;
 8004ab6:	4b45      	ldr	r3, [pc, #276]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	4b43      	ldr	r3, [pc, #268]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004ac2:	70da      	strb	r2, [r3, #3]
 8004ac4:	4b42      	ldr	r3, [pc, #264]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004ac6:	78da      	ldrb	r2, [r3, #3]
 8004ac8:	4b41      	ldr	r3, [pc, #260]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004aca:	709a      	strb	r2, [r3, #2]
 8004acc:	4b40      	ldr	r3, [pc, #256]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004ace:	789a      	ldrb	r2, [r3, #2]
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004ad2:	705a      	strb	r2, [r3, #1]
 8004ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004ad6:	785a      	ldrb	r2, [r3, #1]
 8004ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004ada:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8004adc:	4b37      	ldr	r3, [pc, #220]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		// received 1
		if (buf[0] == SHORT_HIGH && buf[1] == LONG_LOW && buf[2] == SHORT_HIGH && buf[3] == SHORT_LOW)
 8004ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b0a      	cmp	r3, #10
 8004aea:	d132      	bne.n	8004b52 <AYCT_EXTI_IRQHandler+0x1aa>
 8004aec:	4b38      	ldr	r3, [pc, #224]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d12e      	bne.n	8004b52 <AYCT_EXTI_IRQHandler+0x1aa>
 8004af4:	4b36      	ldr	r3, [pc, #216]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004af6:	789b      	ldrb	r3, [r3, #2]
 8004af8:	2b0a      	cmp	r3, #10
 8004afa:	d12a      	bne.n	8004b52 <AYCT_EXTI_IRQHandler+0x1aa>
 8004afc:	4b34      	ldr	r3, [pc, #208]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004afe:	78db      	ldrb	r3, [r3, #3]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d126      	bne.n	8004b52 <AYCT_EXTI_IRQHandler+0x1aa>
		{
			bit_set(received_code, (31 - cnt++));
 8004b04:	4b33      	ldr	r3, [pc, #204]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	b2d1      	uxtb	r1, r2
 8004b0c:	4a31      	ldr	r2, [pc, #196]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004b0e:	7011      	strb	r1, [r2, #0]
 8004b10:	001a      	movs	r2, r3
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	40d3      	lsrs	r3, r2
 8004b18:	001a      	movs	r2, r3
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd8 <AYCT_EXTI_IRQHandler+0x230>)
 8004b22:	601a      	str	r2, [r3, #0]
			buf[0] = buf[1] = buf[2] = buf[3] = x = NO_DATA;
 8004b24:	4b29      	ldr	r3, [pc, #164]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	4b28      	ldr	r3, [pc, #160]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004b2c:	781a      	ldrb	r2, [r3, #0]
 8004b2e:	4b28      	ldr	r3, [pc, #160]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b30:	70da      	strb	r2, [r3, #3]
 8004b32:	4b27      	ldr	r3, [pc, #156]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b34:	78da      	ldrb	r2, [r3, #3]
 8004b36:	4b26      	ldr	r3, [pc, #152]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b38:	709a      	strb	r2, [r3, #2]
 8004b3a:	4b25      	ldr	r3, [pc, #148]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b3c:	789a      	ldrb	r2, [r3, #2]
 8004b3e:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b40:	705a      	strb	r2, [r3, #1]
 8004b42:	4b23      	ldr	r3, [pc, #140]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b44:	785a      	ldrb	r2, [r3, #1]
 8004b46:	4b22      	ldr	r3, [pc, #136]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b48:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		start_time = __HAL_TIM_GET_COUNTER(&htim16);
 8004b52:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e02c      	b.n	8004bb8 <AYCT_EXTI_IRQHandler+0x210>
	}
	else
	{
		if ((timer_now - start_time > BITS_MINIMUM) && (timer_now - start_time < BITS_MAXIMUM)) // 1= tussen MIN en MAX
 8004b5e:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b96      	cmp	r3, #150	@ 0x96
 8004b6a:	d913      	bls.n	8004b94 <AYCT_EXTI_IRQHandler+0x1ec>
 8004b6c:	4b14      	ldr	r3, [pc, #80]	@ (8004bc0 <AYCT_EXTI_IRQHandler+0x218>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	1ad2      	subs	r2, r2, r3
 8004b76:	23c8      	movs	r3, #200	@ 0xc8
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d20a      	bcs.n	8004b94 <AYCT_EXTI_IRQHandler+0x1ec>
			buf[x++] = SHORT_HIGH;
 8004b7e:	4b13      	ldr	r3, [pc, #76]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	b2d1      	uxtb	r1, r2
 8004b86:	4a11      	ldr	r2, [pc, #68]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004b88:	7011      	strb	r1, [r2, #0]
 8004b8a:	001a      	movs	r2, r3
 8004b8c:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <AYCT_EXTI_IRQHandler+0x228>)
 8004b8e:	210a      	movs	r1, #10
 8004b90:	5499      	strb	r1, [r3, r2]
 8004b92:	e00a      	b.n	8004baa <AYCT_EXTI_IRQHandler+0x202>
		else
		{
			cnt = x = 0; // bit is fout
 8004b94:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <AYCT_EXTI_IRQHandler+0x224>)
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <AYCT_EXTI_IRQHandler+0x22c>)
 8004ba0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 8004ba2:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		start_time = __HAL_TIM_GET_COUNTER(&htim16);
 8004baa:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <AYCT_EXTI_IRQHandler+0x214>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb0:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <AYCT_EXTI_IRQHandler+0x220>)
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e000      	b.n	8004bb8 <AYCT_EXTI_IRQHandler+0x210>
		return;
 8004bb6:	46c0      	nop			@ (mov r8, r8)
	}

}
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2000090c 	.word	0x2000090c
 8004bc0:	200001bc 	.word	0x200001bc
 8004bc4:	50000800 	.word	0x50000800
 8004bc8:	200001b4 	.word	0x200001b4
 8004bcc:	200001a9 	.word	0x200001a9
 8004bd0:	200001ac 	.word	0x200001ac
 8004bd4:	200001a8 	.word	0x200001a8
 8004bd8:	200001b8 	.word	0x200001b8

08004bdc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004be0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c1c <MX_CRC_Init+0x40>)
 8004be2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c20 <MX_CRC_Init+0x44>)
 8004be4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004be6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <MX_CRC_Init+0x40>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <MX_CRC_Init+0x40>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <MX_CRC_Init+0x40>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	@ (8004c1c <MX_CRC_Init+0x40>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8004bfe:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <MX_CRC_Init+0x40>)
 8004c00:	2203      	movs	r2, #3
 8004c02:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <MX_CRC_Init+0x40>)
 8004c06:	0018      	movs	r0, r3
 8004c08:	f003 fe52 	bl	80088b0 <HAL_CRC_Init>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d001      	beq.n	8004c14 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004c10:	f000 ff52 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004c14:	46c0      	nop			@ (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	200001c0 	.word	0x200001c0
 8004c20:	40023000 	.word	0x40023000

08004c24 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <HAL_CRC_MspInit+0x38>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d10d      	bne.n	8004c52 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <HAL_CRC_MspInit+0x3c>)
 8004c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c3a:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <HAL_CRC_MspInit+0x3c>)
 8004c3c:	2180      	movs	r1, #128	@ 0x80
 8004c3e:	0149      	lsls	r1, r1, #5
 8004c40:	430a      	orrs	r2, r1
 8004c42:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <HAL_CRC_MspInit+0x3c>)
 8004c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	015b      	lsls	r3, r3, #5
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	40023000 	.word	0x40023000
 8004c60:	40021000 	.word	0x40021000

08004c64 <WriteStruct2eerom>:
 * \param struct to write
 *
 * \return false if successful, true on error.
 */
uint8_t WriteStruct2eerom(i2c_ee_t to_save)
{
 8004c64:	b084      	sub	sp, #16
 8004c66:	b5b0      	push	{r4, r5, r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	2518      	movs	r5, #24
 8004c6e:	197c      	adds	r4, r7, r5
 8004c70:	6020      	str	r0, [r4, #0]
 8004c72:	6061      	str	r1, [r4, #4]
 8004c74:	60a2      	str	r2, [r4, #8]
 8004c76:	60e3      	str	r3, [r4, #12]

	bool result;

	/*##-2- Compute the CRC of "aDataBuffer" ###################################*/
	to_save.crc = HAL_CRC_Calculate(&hcrc, (uint32_t *) &to_save, (sizeof(to_save)/4) - 4); //
 8004c78:	197b      	adds	r3, r7, r5
 8004c7a:	4815      	ldr	r0, [pc, #84]	@ (8004cd0 <WriteStruct2eerom+0x6c>)
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	0019      	movs	r1, r3
 8004c80:	f003 fe7c 	bl	800897c <HAL_CRC_Calculate>
 8004c84:	0002      	movs	r2, r0
 8004c86:	197b      	adds	r3, r7, r5
 8004c88:	62da      	str	r2, [r3, #44]	@ 0x2c

	result = e2p_write(0x00, (uint8_t *) &to_save, sizeof(to_save));
 8004c8a:	1dfc      	adds	r4, r7, #7
 8004c8c:	197b      	adds	r3, r7, r5
 8004c8e:	2230      	movs	r2, #48	@ 0x30
 8004c90:	0019      	movs	r1, r3
 8004c92:	2000      	movs	r0, #0
 8004c94:	f000 f8a4 	bl	8004de0 <e2p_write>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	7023      	strb	r3, [r4, #0]
	result |= e2p_write(0x40,(uint8_t *) &to_save, sizeof(to_save));
 8004c9c:	197b      	adds	r3, r7, r5
 8004c9e:	2230      	movs	r2, #48	@ 0x30
 8004ca0:	0019      	movs	r1, r3
 8004ca2:	2040      	movs	r0, #64	@ 0x40
 8004ca4:	f000 f89c 	bl	8004de0 <e2p_write>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	001a      	movs	r2, r3
 8004cac:	1dfb      	adds	r3, r7, #7
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	1e51      	subs	r1, r2, #1
 8004cba:	418a      	sbcs	r2, r1
 8004cbc:	701a      	strb	r2, [r3, #0]

	return result;
 8004cbe:	1dfb      	adds	r3, r7, #7
 8004cc0:	781b      	ldrb	r3, [r3, #0]
}
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b002      	add	sp, #8
 8004cc8:	bcb0      	pop	{r4, r5, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	b004      	add	sp, #16
 8004cce:	4718      	bx	r3
 8004cd0:	200001c0 	.word	0x200001c0

08004cd4 <ReadStruct2eerom>:
 * @brief This function read the struct from I2C. If the CRC if original fails the backup is used.
 * @param to_read pointer to i2c_ee_t
 * @return 0 if successful, true on CRC error.
 */
uint8_t ReadStruct2eerom(i2c_ee_t * to_read)
{
 8004cd4:	b5b0      	push	{r4, r5, r7, lr}
 8004cd6:	b08e      	sub	sp, #56	@ 0x38
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	uint8_t array[sizeof(i2c_ee_t)];

	e2p_read(0, array, sizeof(i2c_ee_t));
 8004cdc:	2508      	movs	r5, #8
 8004cde:	197b      	adds	r3, r7, r5
 8004ce0:	2230      	movs	r2, #48	@ 0x30
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f000 f839 	bl	8004d5c <e2p_read>

	memcpy(to_read, array, sizeof(i2c_ee_t));
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	197b      	adds	r3, r7, r5
 8004cee:	0010      	movs	r0, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	2330      	movs	r3, #48	@ 0x30
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	f00a fd2e 	bl	800f756 <memcpy>

	if (to_read->crc == HAL_CRC_Calculate(&hcrc, (uint32_t *) &array, (sizeof(array)/4) - 4))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004cfe:	1979      	adds	r1, r7, r5
 8004d00:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <ReadStruct2eerom+0x84>)
 8004d02:	2208      	movs	r2, #8
 8004d04:	0018      	movs	r0, r3
 8004d06:	f003 fe39 	bl	800897c <HAL_CRC_Calculate>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	d101      	bne.n	8004d14 <ReadStruct2eerom+0x40>
		return (0);
 8004d10:	2300      	movs	r3, #0
 8004d12:	e01c      	b.n	8004d4e <ReadStruct2eerom+0x7a>
	else
	{
		// CRC error read the backup
		e2p_read(0x40, array, sizeof(i2c_ee_t));
 8004d14:	2508      	movs	r5, #8
 8004d16:	197b      	adds	r3, r7, r5
 8004d18:	2230      	movs	r2, #48	@ 0x30
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	2040      	movs	r0, #64	@ 0x40
 8004d1e:	f000 f81d 	bl	8004d5c <e2p_read>

		memcpy(to_read, array, sizeof(i2c_ee_t));
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	197b      	adds	r3, r7, r5
 8004d26:	0010      	movs	r0, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	2330      	movs	r3, #48	@ 0x30
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	f00a fd12 	bl	800f756 <memcpy>

		if (to_read->crc == HAL_CRC_Calculate(&hcrc, (uint32_t *) &array, (sizeof(array)/4) - 4))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004d36:	1979      	adds	r1, r7, r5
 8004d38:	4b07      	ldr	r3, [pc, #28]	@ (8004d58 <ReadStruct2eerom+0x84>)
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f003 fe1d 	bl	800897c <HAL_CRC_Calculate>
 8004d42:	0003      	movs	r3, r0
 8004d44:	429c      	cmp	r4, r3
 8004d46:	d101      	bne.n	8004d4c <ReadStruct2eerom+0x78>
			return (0);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <ReadStruct2eerom+0x7a>
		else
			return (1);
 8004d4c:	2301      	movs	r3, #1
	}
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b00e      	add	sp, #56	@ 0x38
 8004d54:	bdb0      	pop	{r4, r5, r7, pc}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	200001c0 	.word	0x200001c0

08004d5c <e2p_read>:
 * example: https://github.com/sinadarvi/SD_HAL_AT24/blob/master/at24_hal_i2c.c
 *
 * \return false if successful, true on error.
 */
bool e2p_read(uint8_t address, uint8_t *p_dst, uint8_t len)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af04      	add	r7, sp, #16
 8004d62:	6039      	str	r1, [r7, #0]
 8004d64:	0011      	movs	r1, r2
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	1c02      	adds	r2, r0, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	1dbb      	adds	r3, r7, #6
 8004d6e:	1c0a      	adds	r2, r1, #0
 8004d70:	701a      	strb	r2, [r3, #0]
	// Sanity checks
	if (!len)
 8004d72:	1dbb      	adds	r3, r7, #6
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <e2p_read+0x22>
		return (true);
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e029      	b.n	8004dd2 <e2p_read+0x76>
	if ((address + len) > (E2P_PAGE_COUNT * E2P_PAGE_SIZE))
 8004d7e:	1dfb      	adds	r3, r7, #7
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	1dbb      	adds	r3, r7, #6
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	18d4      	adds	r4, r2, r3
 8004d88:	23a0      	movs	r3, #160	@ 0xa0
 8004d8a:	05db      	lsls	r3, r3, #23
 8004d8c:	2140      	movs	r1, #64	@ 0x40
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f005 fd18 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004d94:	1e03      	subs	r3, r0, #0
 8004d96:	d002      	beq.n	8004d9e <e2p_read+0x42>
 8004d98:	2380      	movs	r3, #128	@ 0x80
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	e000      	b.n	8004da0 <e2p_read+0x44>
 8004d9e:	2380      	movs	r3, #128	@ 0x80
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	da01      	bge.n	8004da8 <e2p_read+0x4c>
		return (true);
 8004da4:	2301      	movs	r3, #1
 8004da6:	e014      	b.n	8004dd2 <e2p_read+0x76>

	if (HAL_I2C_Mem_Read(&hi2c2, (uint16_t) E2P_RIIC_ADDRESS, (uint16_t) address, I2C_MEMADD_SIZE_8BIT, p_dst, (uint16_t) len, 100) != HAL_OK)
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	1dbb      	adds	r3, r7, #6
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4809      	ldr	r0, [pc, #36]	@ (8004ddc <e2p_read+0x80>)
 8004db6:	2164      	movs	r1, #100	@ 0x64
 8004db8:	9102      	str	r1, [sp, #8]
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	21a0      	movs	r1, #160	@ 0xa0
 8004dc4:	f005 ff36 	bl	800ac34 <HAL_I2C_Mem_Read>
 8004dc8:	1e03      	subs	r3, r0, #0
 8004dca:	d001      	beq.n	8004dd0 <e2p_read+0x74>
		return true;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <e2p_read+0x76>

	return false;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b003      	add	sp, #12
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	20000258 	.word	0x20000258

08004de0 <e2p_write>:
 * \param len Length of the data to write.
 *
 * \return false if successful, true on error.
 */
bool e2p_write(uint8_t address, uint8_t *p_src, uint8_t len)
{
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b08d      	sub	sp, #52	@ 0x34
 8004de4:	af04      	add	r7, sp, #16
 8004de6:	6039      	str	r1, [r7, #0]
 8004de8:	0011      	movs	r1, r2
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	1c02      	adds	r2, r0, #0
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	1dbb      	adds	r3, r7, #6
 8004df2:	1c0a      	adds	r2, r1, #0
 8004df4:	701a      	strb	r2, [r3, #0]
	uint32_t pageaddr;
	uint32_t byteaddr;
	uint32_t remaining;
	uint32_t writelen;
	uint32_t addr;
	int32_t rtr = 50;
 8004df6:	2332      	movs	r3, #50	@ 0x32
 8004df8:	60fb      	str	r3, [r7, #12]

	// Sanity checks
	if (!len)
 8004dfa:	1dbb      	adds	r3, r7, #6
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <e2p_write+0x26>
		return (true);
 8004e02:	2301      	movs	r3, #1
 8004e04:	e0c4      	b.n	8004f90 <e2p_write+0x1b0>
	if ((address + len) > (E2P_PAGE_COUNT * E2P_PAGE_SIZE))
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	1dbb      	adds	r3, r7, #6
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	18d4      	adds	r4, r2, r3
 8004e10:	23a0      	movs	r3, #160	@ 0xa0
 8004e12:	05db      	lsls	r3, r3, #23
 8004e14:	2140      	movs	r1, #64	@ 0x40
 8004e16:	0018      	movs	r0, r3
 8004e18:	f005 fcd4 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004e1c:	1e03      	subs	r3, r0, #0
 8004e1e:	d002      	beq.n	8004e26 <e2p_write+0x46>
 8004e20:	2380      	movs	r3, #128	@ 0x80
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	e000      	b.n	8004e28 <e2p_write+0x48>
 8004e26:	2380      	movs	r3, #128	@ 0x80
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	da01      	bge.n	8004e30 <e2p_write+0x50>
		return (true);
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0af      	b.n	8004f90 <e2p_write+0x1b0>

	// Get the remaining number of bytes to write
	remaining = len;
 8004e30:	1dbb      	adds	r3, r7, #6
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	617b      	str	r3, [r7, #20]
	// Calculate the page address
	pageaddr = address / E2P_PAGE_SIZE;
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	781c      	ldrb	r4, [r3, #0]
 8004e3a:	23a0      	movs	r3, #160	@ 0xa0
 8004e3c:	05db      	lsls	r3, r3, #23
 8004e3e:	2140      	movs	r1, #64	@ 0x40
 8004e40:	0018      	movs	r0, r3
 8004e42:	f005 fcbf 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004e46:	1e03      	subs	r3, r0, #0
 8004e48:	d001      	beq.n	8004e4e <e2p_write+0x6e>
 8004e4a:	2310      	movs	r3, #16
 8004e4c:	e000      	b.n	8004e50 <e2p_write+0x70>
 8004e4e:	2308      	movs	r3, #8
 8004e50:	0019      	movs	r1, r3
 8004e52:	0020      	movs	r0, r4
 8004e54:	f7ff faec 	bl	8004430 <__divsi3>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	61fb      	str	r3, [r7, #28]
	// Calculate the byte address within the page (for a partial page write)
	byteaddr = address % E2P_PAGE_SIZE;
 8004e5c:	1dfb      	adds	r3, r7, #7
 8004e5e:	781c      	ldrb	r4, [r3, #0]
 8004e60:	23a0      	movs	r3, #160	@ 0xa0
 8004e62:	05db      	lsls	r3, r3, #23
 8004e64:	2140      	movs	r1, #64	@ 0x40
 8004e66:	0018      	movs	r0, r3
 8004e68:	f005 fcac 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004e6c:	1e03      	subs	r3, r0, #0
 8004e6e:	d001      	beq.n	8004e74 <e2p_write+0x94>
 8004e70:	2310      	movs	r3, #16
 8004e72:	e000      	b.n	8004e76 <e2p_write+0x96>
 8004e74:	2308      	movs	r3, #8
 8004e76:	0019      	movs	r1, r3
 8004e78:	0020      	movs	r0, r4
 8004e7a:	f7ff fbbf 	bl	80045fc <__aeabi_idivmod>
 8004e7e:	000b      	movs	r3, r1
 8004e80:	61bb      	str	r3, [r7, #24]
	// Calculate the number of bytes to write
	if ((byteaddr + len) > E2P_PAGE_SIZE)
 8004e82:	1dbb      	adds	r3, r7, #6
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	18d4      	adds	r4, r2, r3
 8004e8a:	23a0      	movs	r3, #160	@ 0xa0
 8004e8c:	05db      	lsls	r3, r3, #23
 8004e8e:	2140      	movs	r1, #64	@ 0x40
 8004e90:	0018      	movs	r0, r3
 8004e92:	f005 fc97 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004e96:	1e03      	subs	r3, r0, #0
 8004e98:	d001      	beq.n	8004e9e <e2p_write+0xbe>
 8004e9a:	2310      	movs	r3, #16
 8004e9c:	e000      	b.n	8004ea0 <e2p_write+0xc0>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d20e      	bcs.n	8004ec2 <e2p_write+0xe2>
		writelen = E2P_PAGE_SIZE - byteaddr;
 8004ea4:	23a0      	movs	r3, #160	@ 0xa0
 8004ea6:	05db      	lsls	r3, r3, #23
 8004ea8:	2140      	movs	r1, #64	@ 0x40
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f005 fc8a 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004eb0:	1e03      	subs	r3, r0, #0
 8004eb2:	d001      	beq.n	8004eb8 <e2p_write+0xd8>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	e000      	b.n	8004eba <e2p_write+0xda>
 8004eb8:	2308      	movs	r3, #8
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	e062      	b.n	8004f88 <e2p_write+0x1a8>
	else
		writelen = len;
 8004ec2:	1dbb      	adds	r3, r7, #6
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	613b      	str	r3, [r7, #16]

	// Write data to the device
	while (remaining > 0)
 8004ec8:	e05e      	b.n	8004f88 <e2p_write+0x1a8>
	{
		addr = (pageaddr << E2P_PAGE_OFFSET) | byteaddr;
 8004eca:	23a0      	movs	r3, #160	@ 0xa0
 8004ecc:	05db      	lsls	r3, r3, #23
 8004ece:	2140      	movs	r1, #64	@ 0x40
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f005 fc77 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d001      	beq.n	8004ede <e2p_write+0xfe>
 8004eda:	2304      	movs	r3, #4
 8004edc:	e000      	b.n	8004ee0 <e2p_write+0x100>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	0013      	movs	r3, r2
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]

		rtr = 50;
 8004eec:	2332      	movs	r3, #50	@ 0x32
 8004eee:	60fb      	str	r3, [r7, #12]

		if (HAL_I2C_Mem_Write(&hi2c2, (uint16_t) E2P_RIIC_ADDRESS, (uint16_t) addr, I2C_MEMADD_SIZE_8BIT, p_src, (uint16_t) writelen, 100) != HAL_OK)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	4827      	ldr	r0, [pc, #156]	@ (8004f98 <e2p_write+0x1b8>)
 8004efa:	2164      	movs	r1, #100	@ 0x64
 8004efc:	9102      	str	r1, [sp, #8]
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2301      	movs	r3, #1
 8004f06:	21a0      	movs	r1, #160	@ 0xa0
 8004f08:	f005 fd66 	bl	800a9d8 <HAL_I2C_Mem_Write>
 8004f0c:	1e03      	subs	r3, r0, #0
 8004f0e:	d001      	beq.n	8004f14 <e2p_write+0x134>
			return true;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e03d      	b.n	8004f90 <e2p_write+0x1b0>

		// 50 x 10ms = 500ms
		while ((--rtr) && !m24xx64_ready())
 8004f14:	46c0      	nop			@ (mov r8, r8)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <e2p_write+0x154>
 8004f22:	f000 f83b 	bl	8004f9c <m24xx64_ready>
 8004f26:	0003      	movs	r3, r0
 8004f28:	001a      	movs	r2, r3
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4053      	eors	r3, r2
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <e2p_write+0x136>
			;

		p_src += writelen;
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	18d3      	adds	r3, r2, r3
 8004f3a:	603b      	str	r3, [r7, #0]

		// Update the remaining number of bytes to write
		remaining -= writelen;
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	617b      	str	r3, [r7, #20]
		// Update the page address
		pageaddr++;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
		// The data is now page aligned
		byteaddr = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
		// Calculate the number of bytes to write
		if (remaining > E2P_PAGE_SIZE)
 8004f4e:	23a0      	movs	r3, #160	@ 0xa0
 8004f50:	05db      	lsls	r3, r3, #23
 8004f52:	2140      	movs	r1, #64	@ 0x40
 8004f54:	0018      	movs	r0, r3
 8004f56:	f005 fc35 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d001      	beq.n	8004f62 <e2p_write+0x182>
 8004f5e:	2310      	movs	r3, #16
 8004f60:	e000      	b.n	8004f64 <e2p_write+0x184>
 8004f62:	2308      	movs	r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d20c      	bcs.n	8004f84 <e2p_write+0x1a4>
			writelen = E2P_PAGE_SIZE;
 8004f6a:	23a0      	movs	r3, #160	@ 0xa0
 8004f6c:	05db      	lsls	r3, r3, #23
 8004f6e:	2140      	movs	r1, #64	@ 0x40
 8004f70:	0018      	movs	r0, r3
 8004f72:	f005 fc27 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8004f76:	1e03      	subs	r3, r0, #0
 8004f78:	d001      	beq.n	8004f7e <e2p_write+0x19e>
 8004f7a:	2310      	movs	r3, #16
 8004f7c:	e000      	b.n	8004f80 <e2p_write+0x1a0>
 8004f7e:	2308      	movs	r3, #8
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e001      	b.n	8004f88 <e2p_write+0x1a8>
		else
			writelen = remaining;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	613b      	str	r3, [r7, #16]
	while (remaining > 0)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d19d      	bne.n	8004eca <e2p_write+0xea>
	}

	return (false);
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b009      	add	sp, #36	@ 0x24
 8004f96:	bd90      	pop	{r4, r7, pc}
 8004f98:	20000258 	.word	0x20000258

08004f9c <m24xx64_ready>:
 * \param -.
 *
 * \return True if successful, false on error.
 */
static bool m24xx64_ready(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
	return (HAL_I2C_IsDeviceReady(&hi2c2, E2P_RIIC_ADDRESS, 1, 10) == HAL_OK);
 8004fa0:	4806      	ldr	r0, [pc, #24]	@ (8004fbc <m24xx64_ready+0x20>)
 8004fa2:	230a      	movs	r3, #10
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	21a0      	movs	r1, #160	@ 0xa0
 8004fa8:	f005 ff78 	bl	800ae9c <HAL_I2C_IsDeviceReady>
 8004fac:	0003      	movs	r3, r0
 8004fae:	425a      	negs	r2, r3
 8004fb0:	4153      	adcs	r3, r2
 8004fb2:	b2db      	uxtb	r3, r3
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	20000258 	.word	0x20000258

08004fc0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004fc4:	4b20      	ldr	r3, [pc, #128]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004fc6:	4a21      	ldr	r2, [pc, #132]	@ (800504c <MX_FDCAN1_Init+0x8c>)
 8004fc8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004fca:	4b1f      	ldr	r3, [pc, #124]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004fe2:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004fe8:	4b17      	ldr	r3, [pc, #92]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8004fee:	4b16      	ldr	r3, [pc, #88]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004ff4:	4b14      	ldr	r3, [pc, #80]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8004ffa:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8005000:	4b11      	ldr	r3, [pc, #68]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8005002:	2201      	movs	r2, #1
 8005004:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8005006:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8005008:	2201      	movs	r2, #1
 800500a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800500c:	4b0e      	ldr	r3, [pc, #56]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 800500e:	2201      	movs	r2, #1
 8005010:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8005014:	2202      	movs	r2, #2
 8005016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 8005018:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 800501a:	220f      	movs	r2, #15
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800501e:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8005020:	2200      	movs	r2, #0
 8005022:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8005024:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8005026:	2200      	movs	r2, #0
 8005028:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800502a:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 800502c:	2200      	movs	r2, #0
 800502e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8005030:	4b05      	ldr	r3, [pc, #20]	@ (8005048 <MX_FDCAN1_Init+0x88>)
 8005032:	0018      	movs	r0, r3
 8005034:	f003 fef8 	bl	8008e28 <HAL_FDCAN_Init>
 8005038:	1e03      	subs	r3, r0, #0
 800503a:	d001      	beq.n	8005040 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800503c:	f000 fd3c 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8005040:	46c0      	nop			@ (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	200001e4 	.word	0x200001e4
 800504c:	40006400 	.word	0x40006400

08005050 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b09d      	sub	sp, #116	@ 0x74
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	235c      	movs	r3, #92	@ 0x5c
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	0018      	movs	r0, r3
 800505e:	2314      	movs	r3, #20
 8005060:	001a      	movs	r2, r3
 8005062:	2100      	movs	r1, #0
 8005064:	f00a fae2 	bl	800f62c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005068:	2410      	movs	r4, #16
 800506a:	193b      	adds	r3, r7, r4
 800506c:	0018      	movs	r0, r3
 800506e:	234c      	movs	r3, #76	@ 0x4c
 8005070:	001a      	movs	r2, r3
 8005072:	2100      	movs	r1, #0
 8005074:	f00a fada 	bl	800f62c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a26      	ldr	r2, [pc, #152]	@ (8005118 <HAL_FDCAN_MspInit+0xc8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d146      	bne.n	8005110 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005082:	193b      	adds	r3, r7, r4
 8005084:	2280      	movs	r2, #128	@ 0x80
 8005086:	0492      	lsls	r2, r2, #18
 8005088:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800508a:	193b      	adds	r3, r7, r4
 800508c:	2200      	movs	r2, #0
 800508e:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005090:	193b      	adds	r3, r7, r4
 8005092:	0018      	movs	r0, r3
 8005094:	f007 f958 	bl	800c348 <HAL_RCCEx_PeriphCLKConfig>
 8005098:	1e03      	subs	r3, r0, #0
 800509a:	d001      	beq.n	80050a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800509c:	f000 fd0c 	bl	8005ab8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80050a0:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_FDCAN_MspInit+0xcc>)
 80050a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a4:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <HAL_FDCAN_MspInit+0xcc>)
 80050a6:	2180      	movs	r1, #128	@ 0x80
 80050a8:	0149      	lsls	r1, r1, #5
 80050aa:	430a      	orrs	r2, r1
 80050ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <HAL_FDCAN_MspInit+0xcc>)
 80050b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050b2:	2380      	movs	r3, #128	@ 0x80
 80050b4:	015b      	lsls	r3, r3, #5
 80050b6:	4013      	ands	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050bc:	4b17      	ldr	r3, [pc, #92]	@ (800511c <HAL_FDCAN_MspInit+0xcc>)
 80050be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c0:	4b16      	ldr	r3, [pc, #88]	@ (800511c <HAL_FDCAN_MspInit+0xcc>)
 80050c2:	2108      	movs	r1, #8
 80050c4:	430a      	orrs	r2, r1
 80050c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80050c8:	4b14      	ldr	r3, [pc, #80]	@ (800511c <HAL_FDCAN_MspInit+0xcc>)
 80050ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050cc:	2208      	movs	r2, #8
 80050ce:	4013      	ands	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050d4:	215c      	movs	r1, #92	@ 0x5c
 80050d6:	187b      	adds	r3, r7, r1
 80050d8:	2203      	movs	r2, #3
 80050da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050dc:	187b      	adds	r3, r7, r1
 80050de:	2202      	movs	r2, #2
 80050e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e2:	187b      	adds	r3, r7, r1
 80050e4:	2200      	movs	r2, #0
 80050e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	2200      	movs	r2, #0
 80050ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	2203      	movs	r2, #3
 80050f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <HAL_FDCAN_MspInit+0xd0>)
 80050f8:	0019      	movs	r1, r3
 80050fa:	0010      	movs	r0, r2
 80050fc:	f005 f9f6 	bl	800a4ec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8005100:	2200      	movs	r2, #0
 8005102:	2100      	movs	r1, #0
 8005104:	2015      	movs	r0, #21
 8005106:	f003 fba1 	bl	800884c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800510a:	2015      	movs	r0, #21
 800510c:	f003 fbb3 	bl	8008876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8005110:	46c0      	nop			@ (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b01d      	add	sp, #116	@ 0x74
 8005116:	bd90      	pop	{r4, r7, pc}
 8005118:	40006400 	.word	0x40006400
 800511c:	40021000 	.word	0x40021000
 8005120:	50000c00 	.word	0x50000c00

08005124 <stm32_flash_erase>:
 * \param -
 *
 * \return false if unsuccessful, else true
 */
HAL_StatusTypeDef stm32_flash_erase(uint32_t start, uint32_t size)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	uint32_t FirstPage = 0, NbOfPages = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
	uint32_t PageError = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]

	/* Get the 1st page to erase */
	FirstPage = GetPage(start);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 f85d 	bl	80051fc <GetPage>
 8005142:	0003      	movs	r3, r0
 8005144:	617b      	str	r3, [r7, #20]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(start + size) - FirstPage;
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	18d3      	adds	r3, r2, r3
 800514c:	0018      	movs	r0, r3
 800514e:	f000 f855 	bl	80051fc <GetPage>
 8005152:	0002      	movs	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	613b      	str	r3, [r7, #16]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800515a:	4b0e      	ldr	r3, [pc, #56]	@ (8005194 <stm32_flash_erase+0x70>)
 800515c:	2202      	movs	r2, #2
 800515e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = FirstPage;
 8005160:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <stm32_flash_erase+0x70>)
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8005166:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <stm32_flash_erase+0x70>)
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	60da      	str	r2, [r3, #12]

	HAL_FLASH_Unlock();
 800516c:	f004 fa22 	bl	80095b4 <HAL_FLASH_Unlock>

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8005170:	230c      	movs	r3, #12
 8005172:	18fa      	adds	r2, r7, r3
 8005174:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <stm32_flash_erase+0x70>)
 8005176:	0011      	movs	r1, r2
 8005178:	0018      	movs	r0, r3
 800517a:	f004 fb2b 	bl	80097d4 <HAL_FLASHEx_Erase>
 800517e:	1e03      	subs	r3, r0, #0
 8005180:	d001      	beq.n	8005186 <stm32_flash_erase+0x62>
		 Error occurred while page erase.
		 User can add here some code to deal with this error.
		 PageError will contain the faulty page and then to know the code error on this page,
		 user can call function 'HAL_FLASH_GetError()'
		 */
		return (HAL_ERROR);
 8005182:	2301      	movs	r3, #1
 8005184:	e002      	b.n	800518c <stm32_flash_erase+0x68>
	}

	HAL_FLASH_Lock();
 8005186:	f004 fa39 	bl	80095fc <HAL_FLASH_Lock>

	return (HAL_OK);
 800518a:	2300      	movs	r3, #0
}
 800518c:	0018      	movs	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	b006      	add	sp, #24
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000248 	.word	0x20000248

08005198 <stm32_flash_write>:
 * \return	false if unsuccessful, else true
 *
 * \note The flash memory must be erased before it can be written.
 */
bool stm32_flash_write(uint32_t address, uint8_t * p_data, uint32_t size)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]

	HAL_FLASH_Unlock();
 80051a4:	f004 fa06 	bl	80095b4 <HAL_FLASH_Unlock>

	uint64_t temp;

	// Iterate through the number of data bytes
	for (uint32_t var = 0; var < size; var += 8)
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e01b      	b.n	80051e6 <stm32_flash_write+0x4e>
	{
		wdt_clr();
 80051ae:	f000 fb4f 	bl	8005850 <wdt_clr>

		memcpy(&temp, p_data, sizeof(temp));
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	2310      	movs	r3, #16
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	2208      	movs	r2, #8
 80051ba:	0018      	movs	r0, r3
 80051bc:	f00a facb 	bl	800f756 <memcpy>

// write block of 2*4 bytes
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, (uint64_t) temp) != HAL_OK) /*!< Fast program a 32 row double-word (64-bit) at a specified address */
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	2001      	movs	r0, #1
 80051c8:	f004 f9a6 	bl	8009518 <HAL_FLASH_Program>
 80051cc:	1e03      	subs	r3, r0, #0
 80051ce:	d001      	beq.n	80051d4 <stm32_flash_write+0x3c>
		{
			return (0); // fout
 80051d0:	2300      	movs	r3, #0
 80051d2:	e00f      	b.n	80051f4 <stm32_flash_write+0x5c>
		}

		address += 8;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3308      	adds	r3, #8
 80051d8:	60fb      	str	r3, [r7, #12]
		p_data = p_data + 8;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3308      	adds	r3, #8
 80051de:	60bb      	str	r3, [r7, #8]
	for (uint32_t var = 0; var < size; var += 8)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3308      	adds	r3, #8
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d3df      	bcc.n	80051ae <stm32_flash_write+0x16>
	}

	HAL_FLASH_Lock();
 80051ee:	f004 fa05 	bl	80095fc <HAL_FLASH_Lock>

	return (1);
 80051f2:	2301      	movs	r3, #1
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b008      	add	sp, #32
 80051fa:	bd80      	pop	{r7, pc}

080051fc <GetPage>:
 * @brief  Gets the page of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The page of a given address
 */
static uint32_t GetPage(uint32_t Addr)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	return (Addr) / FLASH_PAGE_SIZE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	0adb      	lsrs	r3, r3, #11
}
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <ReadStruct2Flash>:
 * 		  - sizeof structure
 *
 * \return ERR_OK / ERR_CRC
 */
flash_err_t ReadStruct2Flash(void *p_data, uint16_t data_size)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	000a      	movs	r2, r1
 800521a:	1cbb      	adds	r3, r7, #2
 800521c:	801a      	strh	r2, [r3, #0]
	// round 4 bytes
	uint16_t aligned_data_size = ((data_size + 3) / 4) * 4;
 800521e:	1cbb      	adds	r3, r7, #2
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	3303      	adds	r3, #3
 8005224:	2b00      	cmp	r3, #0
 8005226:	da00      	bge.n	800522a <ReadStruct2Flash+0x1a>
 8005228:	3303      	adds	r3, #3
 800522a:	109b      	asrs	r3, r3, #2
 800522c:	b29a      	uxth	r2, r3
 800522e:	210e      	movs	r1, #14
 8005230:	187b      	adds	r3, r7, r1
 8005232:	0092      	lsls	r2, r2, #2
 8005234:	801a      	strh	r2, [r3, #0]

	uint32_t *p_flash = (uint32_t*) FLASH_EE_START_ADDR;
 8005236:	4b1d      	ldr	r3, [pc, #116]	@ (80052ac <ReadStruct2Flash+0x9c>)
 8005238:	60bb      	str	r3, [r7, #8]

	// CRC check the block including the CRC itself will return 0
	if (HAL_CRC_Calculate(&hcrc, p_flash, (aligned_data_size + 4) / 4) == 0)
 800523a:	187b      	adds	r3, r7, r1
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	3304      	adds	r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	da00      	bge.n	8005246 <ReadStruct2Flash+0x36>
 8005244:	3303      	adds	r3, #3
 8005246:	109b      	asrs	r3, r3, #2
 8005248:	001a      	movs	r2, r3
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	4b18      	ldr	r3, [pc, #96]	@ (80052b0 <ReadStruct2Flash+0xa0>)
 800524e:	0018      	movs	r0, r3
 8005250:	f003 fb94 	bl	800897c <HAL_CRC_Calculate>
 8005254:	1e03      	subs	r3, r0, #0
 8005256:	d108      	bne.n	800526a <ReadStruct2Flash+0x5a>
	{
		// copy the data back
		memcpy(p_data, p_flash, data_size);
 8005258:	1cbb      	adds	r3, r7, #2
 800525a:	881a      	ldrh	r2, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	0018      	movs	r0, r3
 8005262:	f00a fa78 	bl	800f756 <memcpy>
		return ERR_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e01b      	b.n	80052a2 <ReadStruct2Flash+0x92>
	}
	// checksum fail try block 2
	else
	{
		p_flash = (uint32_t*) FLASH_EE_COPY_START_ADDR;
 800526a:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <ReadStruct2Flash+0xa4>)
 800526c:	60bb      	str	r3, [r7, #8]

		// CRC check the block including the CRC itself will return 0
		if (HAL_CRC_Calculate(&hcrc, p_flash, (aligned_data_size + 4) / 4) == 0)
 800526e:	230e      	movs	r3, #14
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	3304      	adds	r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	da00      	bge.n	800527c <ReadStruct2Flash+0x6c>
 800527a:	3303      	adds	r3, #3
 800527c:	109b      	asrs	r3, r3, #2
 800527e:	001a      	movs	r2, r3
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <ReadStruct2Flash+0xa0>)
 8005284:	0018      	movs	r0, r3
 8005286:	f003 fb79 	bl	800897c <HAL_CRC_Calculate>
 800528a:	1e03      	subs	r3, r0, #0
 800528c:	d108      	bne.n	80052a0 <ReadStruct2Flash+0x90>
		{
			//read the block including crc32
			memcpy(p_data, p_flash, data_size);
 800528e:	1cbb      	adds	r3, r7, #2
 8005290:	881a      	ldrh	r2, [r3, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	0018      	movs	r0, r3
 8005298:	f00a fa5d 	bl	800f756 <memcpy>
			return ERR_OK_COPY;
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <ReadStruct2Flash+0x92>
		}
	}

	return ERR_CRC;
 80052a0:	2302      	movs	r3, #2
}
 80052a2:	0018      	movs	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	0801f000 	.word	0x0801f000
 80052b0:	200001c0 	.word	0x200001c0
 80052b4:	0801f800 	.word	0x0801f800

080052b8 <WriteStruct2Flash>:
 * 			- sizeof structure
 *
 * \return		ERR_OK / ERR_CRC / ERR_WRITE / ERR_ERASE / ERR_SIZE
 */
flash_err_t WriteStruct2Flash(void *p_data, uint16_t data_size)
{
 80052b8:	b5b0      	push	{r4, r5, r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	000a      	movs	r2, r1
 80052c2:	1cbb      	adds	r3, r7, #2
 80052c4:	801a      	strh	r2, [r3, #0]
	if (data_size + 4 > FLASH_EE_SIZE)
 80052c6:	1cbb      	adds	r3, r7, #2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	3304      	adds	r3, #4
 80052cc:	001a      	movs	r2, r3
 80052ce:	2380      	movs	r3, #128	@ 0x80
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d901      	bls.n	80052da <WriteStruct2Flash+0x22>
		return ERR_SIZE;
 80052d6:	2305      	movs	r3, #5
 80052d8:	e01f      	b.n	800531a <WriteStruct2Flash+0x62>

	flash_err_t res = 0;
 80052da:	250f      	movs	r5, #15
 80052dc:	197b      	adds	r3, r7, r5
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
	// write block 1
	res = do_WriteStruct2Flash(p_data, FLASH_EE_START_ADDR, FLASH_EE_SIZE, data_size);
 80052e2:	197c      	adds	r4, r7, r5
 80052e4:	1cbb      	adds	r3, r7, #2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	2280      	movs	r2, #128	@ 0x80
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	490d      	ldr	r1, [pc, #52]	@ (8005324 <WriteStruct2Flash+0x6c>)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f81c 	bl	800532c <do_WriteStruct2Flash>
 80052f4:	0003      	movs	r3, r0
 80052f6:	7023      	strb	r3, [r4, #0]
	// write block 2
	res |= do_WriteStruct2Flash(p_data, FLASH_EE_COPY_START_ADDR, FLASH_EE_SIZE, data_size);
 80052f8:	1cbb      	adds	r3, r7, #2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	2280      	movs	r2, #128	@ 0x80
 80052fe:	0112      	lsls	r2, r2, #4
 8005300:	4909      	ldr	r1, [pc, #36]	@ (8005328 <WriteStruct2Flash+0x70>)
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f812 	bl	800532c <do_WriteStruct2Flash>
 8005308:	0003      	movs	r3, r0
 800530a:	0019      	movs	r1, r3
 800530c:	197b      	adds	r3, r7, r5
 800530e:	197a      	adds	r2, r7, r5
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	701a      	strb	r2, [r3, #0]

	return res;
 8005316:	197b      	adds	r3, r7, r5
 8005318:	781b      	ldrb	r3, [r3, #0]
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bdb0      	pop	{r4, r5, r7, pc}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	0801f000 	.word	0x0801f000
 8005328:	0801f800 	.word	0x0801f800

0800532c <do_WriteStruct2Flash>:
 * 			- data_size sizeof structure
 *
 * \return ERR_OK / ERR_CRC / ERR_WRITE / ERR_ERASE
 */
static flash_err_t do_WriteStruct2Flash(void *data, uint32_t start_addr, uint16_t block_size, uint16_t data_size)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	0019      	movs	r1, r3
 8005338:	1dbb      	adds	r3, r7, #6
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	1c0a      	adds	r2, r1, #0
 8005340:	801a      	strh	r2, [r3, #0]
	uint32_t *p_heap;
	// round 4 bytes
	data_size = ((data_size + 3) / 4) * 4;
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	3303      	adds	r3, #3
 8005348:	2b00      	cmp	r3, #0
 800534a:	da00      	bge.n	800534e <do_WriteStruct2Flash+0x22>
 800534c:	3303      	adds	r3, #3
 800534e:	109b      	asrs	r3, r3, #2
 8005350:	b29a      	uxth	r2, r3
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	0092      	lsls	r2, r2, #2
 8005356:	801a      	strh	r2, [r3, #0]

	/*##-1- Erase flash ###################################*/
	if (stm32_flash_erase(start_addr, block_size) != HAL_OK)
 8005358:	1dbb      	adds	r3, r7, #6
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	0011      	movs	r1, r2
 8005360:	0018      	movs	r0, r3
 8005362:	f7ff fedf 	bl	8005124 <stm32_flash_erase>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d001      	beq.n	800536e <do_WriteStruct2Flash+0x42>
		return ERR_ERASE;
 800536a:	2303      	movs	r3, #3
 800536c:	e057      	b.n	800541e <do_WriteStruct2Flash+0xf2>

	// allocate datablock+crc32
	p_heap = malloc(data_size + 4);
 800536e:	1d3b      	adds	r3, r7, #4
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	3304      	adds	r3, #4
 8005374:	0018      	movs	r0, r3
 8005376:	f009 fe49 	bl	800f00c <malloc>
 800537a:	0003      	movs	r3, r0
 800537c:	617b      	str	r3, [r7, #20]
	if (p_heap == NULL)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <do_WriteStruct2Flash+0x5c>
		return ERR_MEM;
 8005384:	2306      	movs	r3, #6
 8005386:	e04a      	b.n	800541e <do_WriteStruct2Flash+0xf2>

	// copy the datablock to the heap to add the crc32 on top
	memcpy(p_heap, data, data_size);
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	881a      	ldrh	r2, [r3, #0]
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	0018      	movs	r0, r3
 8005392:	f00a f9e0 	bl	800f756 <memcpy>

	/*##-2- Compute the CRC in Words ###################################*/
	*(p_heap + data_size / 4) = HAL_CRC_Calculate(&hcrc, p_heap, data_size / 4);
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	b29b      	uxth	r3, r3
 800539e:	0018      	movs	r0, r3
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	18d4      	adds	r4, r2, r3
 80053ae:	6979      	ldr	r1, [r7, #20]
 80053b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <do_WriteStruct2Flash+0xfc>)
 80053b2:	0002      	movs	r2, r0
 80053b4:	0018      	movs	r0, r3
 80053b6:	f003 fae1 	bl	800897c <HAL_CRC_Calculate>
 80053ba:	0003      	movs	r3, r0
 80053bc:	6023      	str	r3, [r4, #0]

	if (stm32_flash_write(start_addr, (uint8_t*) p_heap, data_size + 4) == false)
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	3304      	adds	r3, #4
 80053c4:	001a      	movs	r2, r3
 80053c6:	6979      	ldr	r1, [r7, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	0018      	movs	r0, r3
 80053cc:	f7ff fee4 	bl	8005198 <stm32_flash_write>
 80053d0:	0003      	movs	r3, r0
 80053d2:	001a      	movs	r2, r3
 80053d4:	2301      	movs	r3, #1
 80053d6:	4053      	eors	r3, r2
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <do_WriteStruct2Flash+0xbe>
	{
		free(p_heap);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f009 fe1d 	bl	800f020 <free>
		return ERR_WRITE;
 80053e6:	2304      	movs	r3, #4
 80053e8:	e019      	b.n	800541e <do_WriteStruct2Flash+0xf2>
	}

	/*##-3- Check written data ###################################*/
	if (HAL_CRC_Calculate(&hcrc, (uint32_t*) start_addr, (data_size + 4) / 4) != 0)
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	1d3b      	adds	r3, r7, #4
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	3304      	adds	r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	da00      	bge.n	80053f8 <do_WriteStruct2Flash+0xcc>
 80053f6:	3303      	adds	r3, #3
 80053f8:	109b      	asrs	r3, r3, #2
 80053fa:	001a      	movs	r2, r3
 80053fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <do_WriteStruct2Flash+0xfc>)
 80053fe:	0018      	movs	r0, r3
 8005400:	f003 fabc 	bl	800897c <HAL_CRC_Calculate>
 8005404:	1e03      	subs	r3, r0, #0
 8005406:	d005      	beq.n	8005414 <do_WriteStruct2Flash+0xe8>
	{
		free(p_heap);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	0018      	movs	r0, r3
 800540c:	f009 fe08 	bl	800f020 <free>
		return ERR_CRC;
 8005410:	2302      	movs	r3, #2
 8005412:	e004      	b.n	800541e <do_WriteStruct2Flash+0xf2>
	}

	free(p_heap);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	0018      	movs	r0, r3
 8005418:	f009 fe02 	bl	800f020 <free>
	return ERR_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b007      	add	sp, #28
 8005424:	bd90      	pop	{r4, r7, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	200001c0 	.word	0x200001c0

0800542c <MX_GPIO_Init>:

/** Configure pins
     PC11   ------> USART4_RX
*/
void MX_GPIO_Init(void)
{
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b08b      	sub	sp, #44	@ 0x2c
 8005430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005432:	2414      	movs	r4, #20
 8005434:	193b      	adds	r3, r7, r4
 8005436:	0018      	movs	r0, r3
 8005438:	2314      	movs	r3, #20
 800543a:	001a      	movs	r2, r3
 800543c:	2100      	movs	r1, #0
 800543e:	f00a f8f5 	bl	800f62c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005442:	4b9d      	ldr	r3, [pc, #628]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005446:	4b9c      	ldr	r3, [pc, #624]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005448:	2104      	movs	r1, #4
 800544a:	430a      	orrs	r2, r1
 800544c:	635a      	str	r2, [r3, #52]	@ 0x34
 800544e:	4b9a      	ldr	r3, [pc, #616]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005452:	2204      	movs	r2, #4
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800545a:	4b97      	ldr	r3, [pc, #604]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 800545c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800545e:	4b96      	ldr	r3, [pc, #600]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005460:	2120      	movs	r1, #32
 8005462:	430a      	orrs	r2, r1
 8005464:	635a      	str	r2, [r3, #52]	@ 0x34
 8005466:	4b94      	ldr	r3, [pc, #592]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546a:	2220      	movs	r2, #32
 800546c:	4013      	ands	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005472:	4b91      	ldr	r3, [pc, #580]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005476:	4b90      	ldr	r3, [pc, #576]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005478:	2101      	movs	r1, #1
 800547a:	430a      	orrs	r2, r1
 800547c:	635a      	str	r2, [r3, #52]	@ 0x34
 800547e:	4b8e      	ldr	r3, [pc, #568]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005482:	2201      	movs	r2, #1
 8005484:	4013      	ands	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800548a:	4b8b      	ldr	r3, [pc, #556]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 800548c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800548e:	4b8a      	ldr	r3, [pc, #552]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005490:	2102      	movs	r1, #2
 8005492:	430a      	orrs	r2, r1
 8005494:	635a      	str	r2, [r3, #52]	@ 0x34
 8005496:	4b88      	ldr	r3, [pc, #544]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 8005498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549a:	2202      	movs	r2, #2
 800549c:	4013      	ands	r3, r2
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054a2:	4b85      	ldr	r3, [pc, #532]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 80054a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054a6:	4b84      	ldr	r3, [pc, #528]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 80054a8:	2108      	movs	r1, #8
 80054aa:	430a      	orrs	r2, r1
 80054ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80054ae:	4b82      	ldr	r3, [pc, #520]	@ (80056b8 <MX_GPIO_Init+0x28c>)
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	2208      	movs	r2, #8
 80054b4:	4013      	ands	r3, r2
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIS_BRIDGE_GPIO_Port, DIS_BRIDGE_Pin, GPIO_PIN_RESET);
 80054ba:	23a0      	movs	r3, #160	@ 0xa0
 80054bc:	05db      	lsls	r3, r3, #23
 80054be:	2200      	movs	r2, #0
 80054c0:	2110      	movs	r1, #16
 80054c2:	0018      	movs	r0, r3
 80054c4:	f005 f99b 	bl	800a7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
 80054c8:	4b7c      	ldr	r3, [pc, #496]	@ (80056bc <MX_GPIO_Init+0x290>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	21ff      	movs	r1, #255	@ 0xff
 80054ce:	0018      	movs	r0, r3
 80054d0:	f005 f995 	bl	800a7fe <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin|LCD_RW_Pin|LCD_BACK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_X_Pin|EN_Y_Pin, GPIO_PIN_SET);
 80054d4:	23a0      	movs	r3, #160	@ 0xa0
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4879      	ldr	r0, [pc, #484]	@ (80056c0 <MX_GPIO_Init+0x294>)
 80054da:	2201      	movs	r2, #1
 80054dc:	0019      	movs	r1, r3
 80054de:	f005 f98e 	bl	800a7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, GPIO_PIN_RESET);
 80054e2:	4b78      	ldr	r3, [pc, #480]	@ (80056c4 <MX_GPIO_Init+0x298>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	2104      	movs	r1, #4
 80054e8:	0018      	movs	r0, r3
 80054ea:	f005 f988 	bl	800a7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80054ee:	193b      	adds	r3, r7, r4
 80054f0:	2280      	movs	r2, #128	@ 0x80
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f6:	193b      	adds	r3, r7, r4
 80054f8:	2202      	movs	r2, #2
 80054fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fc:	193b      	adds	r3, r7, r4
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005502:	193b      	adds	r3, r7, r4
 8005504:	2200      	movs	r2, #0
 8005506:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 8005508:	193b      	adds	r3, r7, r4
 800550a:	2201      	movs	r2, #1
 800550c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800550e:	193b      	adds	r3, r7, r4
 8005510:	4a6b      	ldr	r2, [pc, #428]	@ (80056c0 <MX_GPIO_Init+0x294>)
 8005512:	0019      	movs	r1, r3
 8005514:	0010      	movs	r0, r2
 8005516:	f004 ffe9 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : END_X_Pin */
  GPIO_InitStruct.Pin = END_X_Pin;
 800551a:	0021      	movs	r1, r4
 800551c:	187b      	adds	r3, r7, r1
 800551e:	2280      	movs	r2, #128	@ 0x80
 8005520:	0192      	lsls	r2, r2, #6
 8005522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005524:	000c      	movs	r4, r1
 8005526:	193b      	adds	r3, r7, r4
 8005528:	2200      	movs	r2, #0
 800552a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	193b      	adds	r3, r7, r4
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(END_X_GPIO_Port, &GPIO_InitStruct);
 8005532:	193b      	adds	r3, r7, r4
 8005534:	4a62      	ldr	r2, [pc, #392]	@ (80056c0 <MX_GPIO_Init+0x294>)
 8005536:	0019      	movs	r1, r3
 8005538:	0010      	movs	r0, r2
 800553a:	f004 ffd7 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MY_A_Pin MY_B_Pin MX_A_Pin MX_B_Pin
                           RX433_Pin */
  GPIO_InitStruct.Pin = MY_A_Pin|MY_B_Pin|MX_A_Pin|MX_B_Pin
 800553e:	0021      	movs	r1, r4
 8005540:	187b      	adds	r3, r7, r1
 8005542:	221f      	movs	r2, #31
 8005544:	601a      	str	r2, [r3, #0]
                          |RX433_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005546:	187b      	adds	r3, r7, r1
 8005548:	22c4      	movs	r2, #196	@ 0xc4
 800554a:	0392      	lsls	r2, r2, #14
 800554c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	000c      	movs	r4, r1
 8005550:	193b      	adds	r3, r7, r4
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005556:	193b      	adds	r3, r7, r4
 8005558:	4a59      	ldr	r2, [pc, #356]	@ (80056c0 <MX_GPIO_Init+0x294>)
 800555a:	0019      	movs	r1, r3
 800555c:	0010      	movs	r0, r2
 800555e:	f004 ffc5 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : END_Y_Pin MID_X_Pin */
  GPIO_InitStruct.Pin = END_Y_Pin|MID_X_Pin;
 8005562:	193b      	adds	r3, r7, r4
 8005564:	4a58      	ldr	r2, [pc, #352]	@ (80056c8 <MX_GPIO_Init+0x29c>)
 8005566:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005568:	193b      	adds	r3, r7, r4
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	193b      	adds	r3, r7, r4
 8005570:	2200      	movs	r2, #0
 8005572:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005574:	193a      	adds	r2, r7, r4
 8005576:	23a0      	movs	r3, #160	@ 0xa0
 8005578:	05db      	lsls	r3, r3, #23
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f004 ffb5 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DIS_BRIDGE_Pin */
  GPIO_InitStruct.Pin = DIS_BRIDGE_Pin;
 8005582:	193b      	adds	r3, r7, r4
 8005584:	2210      	movs	r2, #16
 8005586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005588:	193b      	adds	r3, r7, r4
 800558a:	2201      	movs	r2, #1
 800558c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558e:	193b      	adds	r3, r7, r4
 8005590:	2200      	movs	r2, #0
 8005592:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005594:	193b      	adds	r3, r7, r4
 8005596:	2200      	movs	r2, #0
 8005598:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIS_BRIDGE_GPIO_Port, &GPIO_InitStruct);
 800559a:	193a      	adds	r2, r7, r4
 800559c:	23a0      	movs	r3, #160	@ 0xa0
 800559e:	05db      	lsls	r3, r3, #23
 80055a0:	0011      	movs	r1, r2
 80055a2:	0018      	movs	r0, r3
 80055a4:	f004 ffa2 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULT_Pin PCB_ID_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin|PCB_ID_Pin;
 80055a8:	193b      	adds	r3, r7, r4
 80055aa:	2260      	movs	r2, #96	@ 0x60
 80055ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055ae:	193b      	adds	r3, r7, r4
 80055b0:	2200      	movs	r2, #0
 80055b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055b4:	193b      	adds	r3, r7, r4
 80055b6:	2201      	movs	r2, #1
 80055b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ba:	193a      	adds	r2, r7, r4
 80055bc:	23a0      	movs	r3, #160	@ 0xa0
 80055be:	05db      	lsls	r3, r3, #23
 80055c0:	0011      	movs	r1, r2
 80055c2:	0018      	movs	r0, r3
 80055c4:	f004 ff92 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin
                           LCD_RS_Pin LCD_E_Pin LCD_RW_Pin LCD_BACK_Pin */
  GPIO_InitStruct.Pin = LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
 80055c8:	193b      	adds	r3, r7, r4
 80055ca:	22ff      	movs	r2, #255	@ 0xff
 80055cc:	601a      	str	r2, [r3, #0]
                          |LCD_RS_Pin|LCD_E_Pin|LCD_RW_Pin|LCD_BACK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ce:	193b      	adds	r3, r7, r4
 80055d0:	2201      	movs	r2, #1
 80055d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	193b      	adds	r3, r7, r4
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055da:	193b      	adds	r3, r7, r4
 80055dc:	2200      	movs	r2, #0
 80055de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e0:	193b      	adds	r3, r7, r4
 80055e2:	4a36      	ldr	r2, [pc, #216]	@ (80056bc <MX_GPIO_Init+0x290>)
 80055e4:	0019      	movs	r1, r3
 80055e6:	0010      	movs	r0, r2
 80055e8:	f004 ff80 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin IN_3_Pin MID_Y_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin|IN_3_Pin|MID_Y_Pin;
 80055ec:	0021      	movs	r1, r4
 80055ee:	187b      	adds	r3, r7, r1
 80055f0:	22f0      	movs	r2, #240	@ 0xf0
 80055f2:	0212      	lsls	r2, r2, #8
 80055f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055f6:	000c      	movs	r4, r1
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	2200      	movs	r2, #0
 80055fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fe:	193b      	adds	r3, r7, r4
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005604:	193b      	adds	r3, r7, r4
 8005606:	4a2d      	ldr	r2, [pc, #180]	@ (80056bc <MX_GPIO_Init+0x290>)
 8005608:	0019      	movs	r1, r3
 800560a:	0010      	movs	r0, r2
 800560c:	f004 ff6e 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_X_Pin EN_Y_Pin */
  GPIO_InitStruct.Pin = EN_X_Pin|EN_Y_Pin;
 8005610:	0021      	movs	r1, r4
 8005612:	187b      	adds	r3, r7, r1
 8005614:	22a0      	movs	r2, #160	@ 0xa0
 8005616:	0092      	lsls	r2, r2, #2
 8005618:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800561a:	000c      	movs	r4, r1
 800561c:	193b      	adds	r3, r7, r4
 800561e:	2201      	movs	r2, #1
 8005620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005622:	193b      	adds	r3, r7, r4
 8005624:	2200      	movs	r2, #0
 8005626:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005628:	193b      	adds	r3, r7, r4
 800562a:	2200      	movs	r2, #0
 800562c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800562e:	193b      	adds	r3, r7, r4
 8005630:	4a23      	ldr	r2, [pc, #140]	@ (80056c0 <MX_GPIO_Init+0x294>)
 8005632:	0019      	movs	r1, r3
 8005634:	0010      	movs	r0, r2
 8005636:	f004 ff59 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TP1_Pin */
  GPIO_InitStruct.Pin = TP1_Pin;
 800563a:	193b      	adds	r3, r7, r4
 800563c:	2204      	movs	r2, #4
 800563e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005640:	193b      	adds	r3, r7, r4
 8005642:	2201      	movs	r2, #1
 8005644:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005646:	193b      	adds	r3, r7, r4
 8005648:	2200      	movs	r2, #0
 800564a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800564c:	193b      	adds	r3, r7, r4
 800564e:	2200      	movs	r2, #0
 8005650:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 8005652:	193b      	adds	r3, r7, r4
 8005654:	4a1b      	ldr	r2, [pc, #108]	@ (80056c4 <MX_GPIO_Init+0x298>)
 8005656:	0019      	movs	r1, r3
 8005658:	0010      	movs	r0, r2
 800565a:	f004 ff47 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : nGPS_EZN_Pin */
  GPIO_InitStruct.Pin = nGPS_EZN_Pin;
 800565e:	0021      	movs	r1, r4
 8005660:	187b      	adds	r3, r7, r1
 8005662:	2210      	movs	r2, #16
 8005664:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005666:	187b      	adds	r3, r7, r1
 8005668:	2200      	movs	r2, #0
 800566a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800566c:	187b      	adds	r3, r7, r1
 800566e:	2201      	movs	r2, #1
 8005670:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nGPS_EZN_GPIO_Port, &GPIO_InitStruct);
 8005672:	187b      	adds	r3, r7, r1
 8005674:	4a13      	ldr	r2, [pc, #76]	@ (80056c4 <MX_GPIO_Init+0x298>)
 8005676:	0019      	movs	r1, r3
 8005678:	0010      	movs	r0, r2
 800567a:	f004 ff37 	bl	800a4ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800567e:	2200      	movs	r2, #0
 8005680:	2100      	movs	r1, #0
 8005682:	2005      	movs	r0, #5
 8005684:	f003 f8e2 	bl	800884c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8005688:	2005      	movs	r0, #5
 800568a:	f003 f8f4 	bl	8008876 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800568e:	2200      	movs	r2, #0
 8005690:	2100      	movs	r1, #0
 8005692:	2006      	movs	r0, #6
 8005694:	f003 f8da 	bl	800884c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8005698:	2006      	movs	r0, #6
 800569a:	f003 f8ec 	bl	8008876 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800569e:	2200      	movs	r2, #0
 80056a0:	2101      	movs	r1, #1
 80056a2:	2007      	movs	r0, #7
 80056a4:	f003 f8d2 	bl	800884c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80056a8:	2007      	movs	r0, #7
 80056aa:	f003 f8e4 	bl	8008876 <HAL_NVIC_EnableIRQ>

}
 80056ae:	46c0      	nop			@ (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b00b      	add	sp, #44	@ 0x2c
 80056b4:	bd90      	pop	{r4, r7, pc}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	40021000 	.word	0x40021000
 80056bc:	50000400 	.word	0x50000400
 80056c0:	50000800 	.word	0x50000800
 80056c4:	50000c00 	.word	0x50000c00
 80056c8:	00008002 	.word	0x00008002

080056cc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80056d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005744 <MX_I2C2_Init+0x78>)
 80056d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 80056d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005748 <MX_I2C2_Init+0x7c>)
 80056da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80056dc:	4b18      	ldr	r3, [pc, #96]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056e2:	4b17      	ldr	r3, [pc, #92]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056e8:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80056f4:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056fa:	4b11      	ldr	r3, [pc, #68]	@ (8005740 <MX_I2C2_Init+0x74>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005700:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <MX_I2C2_Init+0x74>)
 8005702:	2200      	movs	r2, #0
 8005704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005706:	4b0e      	ldr	r3, [pc, #56]	@ (8005740 <MX_I2C2_Init+0x74>)
 8005708:	0018      	movs	r0, r3
 800570a:	f005 f8bf 	bl	800a88c <HAL_I2C_Init>
 800570e:	1e03      	subs	r3, r0, #0
 8005710:	d001      	beq.n	8005716 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005712:	f000 f9d1 	bl	8005ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005716:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <MX_I2C2_Init+0x74>)
 8005718:	2100      	movs	r1, #0
 800571a:	0018      	movs	r0, r3
 800571c:	f005 ffb6 	bl	800b68c <HAL_I2CEx_ConfigAnalogFilter>
 8005720:	1e03      	subs	r3, r0, #0
 8005722:	d001      	beq.n	8005728 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005724:	f000 f9c8 	bl	8005ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <MX_I2C2_Init+0x74>)
 800572a:	2100      	movs	r1, #0
 800572c:	0018      	movs	r0, r3
 800572e:	f005 fff9 	bl	800b724 <HAL_I2CEx_ConfigDigitalFilter>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d001      	beq.n	800573a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005736:	f000 f9bf 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000258 	.word	0x20000258
 8005744:	40005800 	.word	0x40005800
 8005748:	10b17db5 	.word	0x10b17db5

0800574c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b09d      	sub	sp, #116	@ 0x74
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	235c      	movs	r3, #92	@ 0x5c
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	0018      	movs	r0, r3
 800575a:	2314      	movs	r3, #20
 800575c:	001a      	movs	r2, r3
 800575e:	2100      	movs	r1, #0
 8005760:	f009 ff64 	bl	800f62c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005764:	2410      	movs	r4, #16
 8005766:	193b      	adds	r3, r7, r4
 8005768:	0018      	movs	r0, r3
 800576a:	234c      	movs	r3, #76	@ 0x4c
 800576c:	001a      	movs	r2, r3
 800576e:	2100      	movs	r1, #0
 8005770:	f009 ff5c 	bl	800f62c <memset>
  if(i2cHandle->Instance==I2C2)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a22      	ldr	r2, [pc, #136]	@ (8005804 <HAL_I2C_MspInit+0xb8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d13e      	bne.n	80057fc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800577e:	193b      	adds	r3, r7, r4
 8005780:	2240      	movs	r2, #64	@ 0x40
 8005782:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005784:	193b      	adds	r3, r7, r4
 8005786:	2200      	movs	r2, #0
 8005788:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800578a:	193b      	adds	r3, r7, r4
 800578c:	0018      	movs	r0, r3
 800578e:	f006 fddb 	bl	800c348 <HAL_RCCEx_PeriphCLKConfig>
 8005792:	1e03      	subs	r3, r0, #0
 8005794:	d001      	beq.n	800579a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005796:	f000 f98f 	bl	8005ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800579a:	4b1b      	ldr	r3, [pc, #108]	@ (8005808 <HAL_I2C_MspInit+0xbc>)
 800579c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800579e:	4b1a      	ldr	r3, [pc, #104]	@ (8005808 <HAL_I2C_MspInit+0xbc>)
 80057a0:	2102      	movs	r1, #2
 80057a2:	430a      	orrs	r2, r1
 80057a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80057a6:	4b18      	ldr	r3, [pc, #96]	@ (8005808 <HAL_I2C_MspInit+0xbc>)
 80057a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057aa:	2202      	movs	r2, #2
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80057b2:	215c      	movs	r1, #92	@ 0x5c
 80057b4:	187b      	adds	r3, r7, r1
 80057b6:	22c0      	movs	r2, #192	@ 0xc0
 80057b8:	0112      	lsls	r2, r2, #4
 80057ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057bc:	187b      	adds	r3, r7, r1
 80057be:	2212      	movs	r2, #18
 80057c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057c2:	187b      	adds	r3, r7, r1
 80057c4:	2201      	movs	r2, #1
 80057c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057c8:	187b      	adds	r3, r7, r1
 80057ca:	2200      	movs	r2, #0
 80057cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80057ce:	187b      	adds	r3, r7, r1
 80057d0:	2206      	movs	r2, #6
 80057d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	4a0d      	ldr	r2, [pc, #52]	@ (800580c <HAL_I2C_MspInit+0xc0>)
 80057d8:	0019      	movs	r1, r3
 80057da:	0010      	movs	r0, r2
 80057dc:	f004 fe86 	bl	800a4ec <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80057e0:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <HAL_I2C_MspInit+0xbc>)
 80057e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e4:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_I2C_MspInit+0xbc>)
 80057e6:	2180      	movs	r1, #128	@ 0x80
 80057e8:	03c9      	lsls	r1, r1, #15
 80057ea:	430a      	orrs	r2, r1
 80057ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_I2C_MspInit+0xbc>)
 80057f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	03db      	lsls	r3, r3, #15
 80057f6:	4013      	ands	r3, r2
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80057fc:	46c0      	nop			@ (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b01d      	add	sp, #116	@ 0x74
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	40005800 	.word	0x40005800
 8005808:	40021000 	.word	0x40021000
 800580c:	50000400 	.word	0x50000400

08005810 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <MX_IWDG_Init+0x34>)
 8005816:	4a0c      	ldr	r2, [pc, #48]	@ (8005848 <MX_IWDG_Init+0x38>)
 8005818:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800581a:	4b0a      	ldr	r3, [pc, #40]	@ (8005844 <MX_IWDG_Init+0x34>)
 800581c:	2203      	movs	r2, #3
 800581e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8005820:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <MX_IWDG_Init+0x34>)
 8005822:	4a0a      	ldr	r2, [pc, #40]	@ (800584c <MX_IWDG_Init+0x3c>)
 8005824:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8005826:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <MX_IWDG_Init+0x34>)
 8005828:	4a08      	ldr	r2, [pc, #32]	@ (800584c <MX_IWDG_Init+0x3c>)
 800582a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <MX_IWDG_Init+0x34>)
 800582e:	0018      	movs	r0, r3
 8005830:	f005 ffc4 	bl	800b7bc <HAL_IWDG_Init>
 8005834:	1e03      	subs	r3, r0, #0
 8005836:	d001      	beq.n	800583c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8005838:	f000 f93e 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800583c:	46c0      	nop			@ (mov r8, r8)
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	200002ac 	.word	0x200002ac
 8005848:	40003000 	.word	0x40003000
 800584c:	00000fff 	.word	0x00000fff

08005850 <wdt_clr>:

/* USER CODE BEGIN 1 */

void wdt_clr(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8005854:	4b03      	ldr	r3, [pc, #12]	@ (8005864 <wdt_clr+0x14>)
 8005856:	0018      	movs	r0, r3
 8005858:	f006 f802 	bl	800b860 <HAL_IWDG_Refresh>
}
 800585c:	46c0      	nop			@ (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	200002ac 	.word	0x200002ac

08005868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	extern uint32_t _main_app_start_address;
	uint32_t AppAddr = (uint32_t) &_main_app_start_address;
 800586e:	4b36      	ldr	r3, [pc, #216]	@ (8005948 <main+0xe0>)
 8005870:	60fb      	str	r3, [r7, #12]
	uint32_t *ram_key = (uint32_t*) RAM_KEY;
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	059b      	lsls	r3, r3, #22
 8005876:	60bb      	str	r3, [r7, #8]

	char ch;

	// Vector relocatie
	SCB->VTOR = AppAddr;
 8005878:	4b34      	ldr	r3, [pc, #208]	@ (800594c <main+0xe4>)
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800587e:	f001 ffe5 	bl	800784c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005882:	f000 f871 	bl	8005968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005886:	f7ff fdd1 	bl	800542c <MX_GPIO_Init>
  MX_ADC1_Init();
 800588a:	f7fe ffd3 	bl	8004834 <MX_ADC1_Init>
  MX_CRC_Init();
 800588e:	f7ff f9a5 	bl	8004bdc <MX_CRC_Init>
  MX_I2C2_Init();
 8005892:	f7ff ff1b 	bl	80056cc <MX_I2C2_Init>
  MX_IWDG_Init();
 8005896:	f7ff ffbb 	bl	8005810 <MX_IWDG_Init>
  MX_RTC_Init();
 800589a:	f000 faf1 	bl	8005e80 <MX_RTC_Init>
  MX_TIM3_Init();
 800589e:	f000 fd5b 	bl	8006358 <MX_TIM3_Init>
  MX_TIM6_Init();
 80058a2:	f000 fdc3 	bl	800642c <MX_TIM6_Init>
  MX_TIM16_Init();
 80058a6:	f000 fdfd 	bl	80064a4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80058aa:	f000 fe23 	bl	80064f4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80058ae:	f001 fca7 	bl	8007200 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80058b2:	f001 fcf3 	bl	800729c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 80058b6:	f7ff fb83 	bl	8004fc0 <MX_FDCAN1_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80058ba:	b662      	cpsie	i
}
 80058bc:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN 2 */

	__enable_irq();

	wdt_clr();
 80058be:	f7ff ffc7 	bl	8005850 <wdt_clr>

	init_sci();
 80058c2:	f001 f917 	bl	8006af4 <init_sci>
	timer_open();
 80058c6:	f000 ffa9 	bl	800681c <timer_open>

	shell_open();
 80058ca:	f000 fb45 	bl	8005f58 <shell_open>

	sh_ver(NULL);
 80058ce:	2000      	movs	r0, #0
 80058d0:	f000 fbc8 	bl	8006064 <sh_ver>

	// set protection level 1
	check_rdp_level();
 80058d4:	f000 f8c2 	bl	8005a5c <check_rdp_level>

	if (RCC->CSR & RCC_CSR_IWDGRSTF)
 80058d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005950 <main+0xe8>)
 80058da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	059b      	lsls	r3, r3, #22
 80058e0:	4013      	ands	r3, r2
 80058e2:	d004      	beq.n	80058ee <main+0x86>
		tty_printf("WDT reboot\r\n");
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <main+0xec>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005958 <main+0xf0>)
 80058ea:	0010      	movs	r0, r2
 80058ec:	4798      	blx	r3

	RCC->CSR = RCC_CSR_RMVF;
 80058ee:	4b18      	ldr	r3, [pc, #96]	@ (8005950 <main+0xe8>)
 80058f0:	2280      	movs	r2, #128	@ 0x80
 80058f2:	0412      	lsls	r2, r2, #16
 80058f4:	661a      	str	r2, [r3, #96]	@ 0x60

	if (sizeof(hw_info_t) > FLASH_PAGE_SIZE)
		tty_printf("  ERR flashvar size overflow\r\n");

	init_vars();
 80058f6:	f001 fe6d 	bl	80075d4 <init_vars>

	// Timer for contrast
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80058fa:	4b18      	ldr	r3, [pc, #96]	@ (800595c <main+0xf4>)
 80058fc:	2100      	movs	r1, #0
 80058fe:	0018      	movs	r0, r3
 8005900:	f007 f9be 	bl	800cc80 <HAL_TIM_PWM_Start>

	set_x_pwm(100);
 8005904:	2064      	movs	r0, #100	@ 0x64
 8005906:	f000 fefd 	bl	8006704 <set_x_pwm>
	set_y_pwm(100);
 800590a:	2064      	movs	r0, #100	@ 0x64
 800590c:	f000 ff20 	bl	8006750 <set_y_pwm>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005910:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <main+0xf8>)
 8005912:	2100      	movs	r1, #0
 8005914:	0018      	movs	r0, r3
 8005916:	f007 f9b3 	bl	800cc80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800591a:	4b11      	ldr	r3, [pc, #68]	@ (8005960 <main+0xf8>)
 800591c:	2108      	movs	r1, #8
 800591e:	0018      	movs	r0, r3
 8005920:	f007 f9ae 	bl	800cc80 <HAL_TIM_PWM_Start>

	// AYCT102
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <main+0xfc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start_IT(&htim16); // Start Timer 10 IRQ
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <main+0xfc>)
 800592e:	0018      	movs	r0, r3
 8005930:	f007 f8ec 	bl	800cb0c <HAL_TIM_Base_Start_IT>
		while (1)
			wdt_clr();
	}

#else
	set_protection();
 8005934:	f000 fa44 	bl	8005dc0 <set_protection>
	while (1)
	{
		HAL_Delay(10);
 8005938:	200a      	movs	r0, #10
 800593a:	f002 f80d 	bl	8007958 <HAL_Delay>
		wdt_clr();
 800593e:	f7ff ff87 	bl	8005850 <wdt_clr>
		HAL_Delay(10);
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	e7f8      	b.n	8005938 <main+0xd0>
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	08004200 	.word	0x08004200
 800594c:	e000ed00 	.word	0xe000ed00
 8005950:	40021000 	.word	0x40021000
 8005954:	20000aac 	.word	0x20000aac
 8005958:	08010150 	.word	0x08010150
 800595c:	20000958 	.word	0x20000958
 8005960:	20000874 	.word	0x20000874
 8005964:	2000090c 	.word	0x2000090c

08005968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005968:	b590      	push	{r4, r7, lr}
 800596a:	b095      	sub	sp, #84	@ 0x54
 800596c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800596e:	2414      	movs	r4, #20
 8005970:	193b      	adds	r3, r7, r4
 8005972:	0018      	movs	r0, r3
 8005974:	233c      	movs	r3, #60	@ 0x3c
 8005976:	001a      	movs	r2, r3
 8005978:	2100      	movs	r1, #0
 800597a:	f009 fe57 	bl	800f62c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	0018      	movs	r0, r3
 8005982:	2310      	movs	r3, #16
 8005984:	001a      	movs	r2, r3
 8005986:	2100      	movs	r1, #0
 8005988:	f009 fe50 	bl	800f62c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800598c:	2380      	movs	r3, #128	@ 0x80
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	0018      	movs	r0, r3
 8005992:	f005 ff83 	bl	800b89c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005996:	f005 ff73 	bl	800b880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800599a:	4b26      	ldr	r3, [pc, #152]	@ (8005a34 <SystemClock_Config+0xcc>)
 800599c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800599e:	4b25      	ldr	r3, [pc, #148]	@ (8005a34 <SystemClock_Config+0xcc>)
 80059a0:	2118      	movs	r1, #24
 80059a2:	438a      	bics	r2, r1
 80059a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80059a6:	193b      	adds	r3, r7, r4
 80059a8:	220d      	movs	r2, #13
 80059aa:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059ac:	193b      	adds	r3, r7, r4
 80059ae:	2280      	movs	r2, #128	@ 0x80
 80059b0:	0252      	lsls	r2, r2, #9
 80059b2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80059b4:	0021      	movs	r1, r4
 80059b6:	187b      	adds	r3, r7, r1
 80059b8:	2201      	movs	r2, #1
 80059ba:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80059bc:	187b      	adds	r3, r7, r1
 80059be:	2201      	movs	r2, #1
 80059c0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	2202      	movs	r2, #2
 80059c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059c8:	187b      	adds	r3, r7, r1
 80059ca:	2203      	movs	r2, #3
 80059cc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	2200      	movs	r2, #0
 80059d2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	2210      	movs	r2, #16
 80059d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80059da:	187b      	adds	r3, r7, r1
 80059dc:	2280      	movs	r2, #128	@ 0x80
 80059de:	0292      	lsls	r2, r2, #10
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80059e2:	187b      	adds	r3, r7, r1
 80059e4:	2280      	movs	r2, #128	@ 0x80
 80059e6:	0492      	lsls	r2, r2, #18
 80059e8:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80059ea:	187b      	adds	r3, r7, r1
 80059ec:	2280      	movs	r2, #128	@ 0x80
 80059ee:	0592      	lsls	r2, r2, #22
 80059f0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059f2:	187b      	adds	r3, r7, r1
 80059f4:	0018      	movs	r0, r3
 80059f6:	f005 ff9d 	bl	800b934 <HAL_RCC_OscConfig>
 80059fa:	1e03      	subs	r3, r0, #0
 80059fc:	d001      	beq.n	8005a02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80059fe:	f000 f85b 	bl	8005ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	2207      	movs	r2, #7
 8005a06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	2200      	movs	r2, #0
 8005a12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a14:	1d3b      	adds	r3, r7, #4
 8005a16:	2200      	movs	r2, #0
 8005a18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f006 fae8 	bl	800bff4 <HAL_RCC_ClockConfig>
 8005a24:	1e03      	subs	r3, r0, #0
 8005a26:	d001      	beq.n	8005a2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005a28:	f000 f846 	bl	8005ab8 <Error_Handler>
  }
}
 8005a2c:	46c0      	nop			@ (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b015      	add	sp, #84	@ 0x54
 8005a32:	bd90      	pop	{r4, r7, pc}
 8005a34:	40021000 	.word	0x40021000

08005a38 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
	tty_printf("Error file %s line %d\r\n", file, line);
 8005a42:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <_Error_Handler+0x1c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4803      	ldr	r0, [pc, #12]	@ (8005a58 <_Error_Handler+0x20>)
 8005a4c:	4798      	blx	r3
	while (1)
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	e7fd      	b.n	8005a4e <_Error_Handler+0x16>
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	20000aac 	.word	0x20000aac
 8005a58:	08010160 	.word	0x08010160

08005a5c <check_rdp_level>:

/**
 * Check if RDP Level is 1. Update if necessary.
 */
static void check_rdp_level(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b094      	sub	sp, #80	@ 0x50
 8005a60:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef config;

	HAL_FLASHEx_OBGetConfig(&config);
 8005a62:	1d3b      	adds	r3, r7, #4
 8005a64:	0018      	movs	r0, r3
 8005a66:	f003 fff3 	bl	8009a50 <HAL_FLASHEx_OBGetConfig>
	if (config.RDPLevel != OB_RDP_LEVEL_1)
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2bbb      	cmp	r3, #187	@ 0xbb
 8005a70:	d01a      	beq.n	8005aa8 <check_rdp_level+0x4c>
	{
		config.OptionType = OPTIONBYTE_RDP;
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	2202      	movs	r2, #2
 8005a76:	601a      	str	r2, [r3, #0]
		config.RDPLevel = OB_RDP_LEVEL_1;
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	22bb      	movs	r2, #187	@ 0xbb
 8005a7c:	611a      	str	r2, [r3, #16]

		HAL_FLASH_Unlock();
 8005a7e:	f003 fd99 	bl	80095b4 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 8005a82:	f003 fddd 	bl	8009640 <HAL_FLASH_OB_Unlock>

		if (HAL_FLASHEx_OBProgram(&config) == HAL_OK)
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f003 ff13 	bl	80098b4 <HAL_FLASHEx_OBProgram>
 8005a8e:	1e03      	subs	r3, r0, #0
 8005a90:	d108      	bne.n	8005aa4 <check_rdp_level+0x48>
		{
			tty_printf("Set RDPLevel = %X\r\n", config.RDPLevel);
 8005a92:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <check_rdp_level+0x54>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	6919      	ldr	r1, [r3, #16]
 8005a9a:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <check_rdp_level+0x58>)
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	4790      	blx	r2
			HAL_FLASH_OB_Launch();
 8005aa0:	f003 fe1a 	bl	80096d8 <HAL_FLASH_OB_Launch>
		}

		HAL_FLASH_OB_Lock();
 8005aa4:	f003 fdf4 	bl	8009690 <HAL_FLASH_OB_Lock>
	}
}
 8005aa8:	46c0      	nop			@ (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b014      	add	sp, #80	@ 0x50
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000aac 	.word	0x20000aac
 8005ab4:	08010178 	.word	0x08010178

08005ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler\r\n");
 8005abc:	4b02      	ldr	r3, [pc, #8]	@ (8005ac8 <Error_Handler+0x10>)
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f009 fc84 	bl	800f3cc <puts>

	while (1)
 8005ac4:	46c0      	nop			@ (mov r8, r8)
 8005ac6:	e7fd      	b.n	8005ac4 <Error_Handler+0xc>
 8005ac8:	0801019c 	.word	0x0801019c

08005acc <HAL_GPIO_EXTI_Rising_Callback>:
#else
/*
 *
 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	1dbb      	adds	r3, r7, #6
 8005ad6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ad8:	1dbb      	adds	r3, r7, #6
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 f813 	bl	8005b08 <HAL_GPIO_EXTI_Callback>
}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b002      	add	sp, #8
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_GPIO_EXTI_Falling_Callback>:

/*
 *
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	0002      	movs	r2, r0
 8005af2:	1dbb      	adds	r3, r7, #6
 8005af4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005af6:	1dbb      	adds	r3, r7, #6
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	0018      	movs	r0, r3
 8005afc:	f000 f804 	bl	8005b08 <HAL_GPIO_EXTI_Callback>
}
 8005b00:	46c0      	nop			@ (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_GPIO_EXTI_Callback>:
 * 			Encoder pulses are about 5ms
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
static void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	0002      	movs	r2, r0
 8005b10:	1dbb      	adds	r3, r7, #6
 8005b12:	801a      	strh	r2, [r3, #0]
	static uint32_t hal_debounce_xa = 0;
	static uint32_t hal_debounce_xb = 0;
	static uint32_t hal_debounce_ya = 0;
	static uint32_t hal_debounce_yb = 0;

	uint32_t now = HAL_GetTick();
 8005b14:	f001 ff16 	bl	8007944 <HAL_GetTick>
 8005b18:	0003      	movs	r3, r0
 8005b1a:	60fb      	str	r3, [r7, #12]

	switch (GPIO_Pin)
 8005b1c:	1dbb      	adds	r3, r7, #6
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d900      	bls.n	8005b26 <HAL_GPIO_EXTI_Callback+0x1e>
 8005b24:	e123      	b.n	8005d6e <HAL_GPIO_EXTI_Callback+0x266>
 8005b26:	009a      	lsls	r2, r3, #2
 8005b28:	4b93      	ldr	r3, [pc, #588]	@ (8005d78 <HAL_GPIO_EXTI_Callback+0x270>)
 8005b2a:	18d3      	adds	r3, r2, r3
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	469f      	mov	pc, r3
	{
	case MX_A_Pin:
		position_saved = false;
 8005b30:	4b92      	ldr	r3, [pc, #584]	@ (8005d7c <HAL_GPIO_EXTI_Callback+0x274>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
		timer_start(hal_xa_tmr, hal_ms, NULL);
 8005b36:	4b92      	ldr	r3, [pc, #584]	@ (8005d80 <HAL_GPIO_EXTI_Callback+0x278>)
 8005b38:	7818      	ldrb	r0, [r3, #0]
 8005b3a:	4b92      	ldr	r3, [pc, #584]	@ (8005d84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	0019      	movs	r1, r3
 8005b42:	f000 ff5b 	bl	80069fc <timer_start>
		vars.error_status &= ~ERR_HAL_XA;
 8005b46:	4a90      	ldr	r2, [pc, #576]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005b48:	23da      	movs	r3, #218	@ 0xda
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	58d3      	ldr	r3, [r2, r3]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4393      	bics	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	4a8c      	ldr	r2, [pc, #560]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005b56:	23da      	movs	r3, #218	@ 0xda
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_xa)
 8005b5c:	4b8b      	ldr	r3, [pc, #556]	@ (8005d8c <HAL_GPIO_EXTI_Callback+0x284>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d025      	beq.n	8005bb2 <HAL_GPIO_EXTI_Callback+0xaa>
		{
			hal_debounce_xa = now;
 8005b66:	4b89      	ldr	r3, [pc, #548]	@ (8005d8c <HAL_GPIO_EXTI_Callback+0x284>)
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	601a      	str	r2, [r3, #0]

			if (isMX_A == isMX_B)
 8005b6c:	4b88      	ldr	r3, [pc, #544]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005b6e:	2104      	movs	r1, #4
 8005b70:	0018      	movs	r0, r3
 8005b72:	f004 fe27 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005b76:	0003      	movs	r3, r0
 8005b78:	001c      	movs	r4, r3
 8005b7a:	4b85      	ldr	r3, [pc, #532]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005b7c:	2108      	movs	r1, #8
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f004 fe20 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005b84:	0003      	movs	r3, r0
 8005b86:	429c      	cmp	r4, r3
 8005b88:	d109      	bne.n	8005b9e <HAL_GPIO_EXTI_Callback+0x96>
				vars.eevar.actual_motor.x++;
 8005b8a:	4a7f      	ldr	r2, [pc, #508]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005b8c:	23be      	movs	r3, #190	@ 0xbe
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	58d3      	ldr	r3, [r2, r3]
 8005b92:	1c59      	adds	r1, r3, #1
 8005b94:	4a7c      	ldr	r2, [pc, #496]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005b96:	23be      	movs	r3, #190	@ 0xbe
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	50d1      	str	r1, [r2, r3]
				vars.eevar.actual_motor.x--;
		}
		else
			tty_printf("debounce XA\r\n");

		break;
 8005b9c:	e0e8      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
				vars.eevar.actual_motor.x--;
 8005b9e:	4a7a      	ldr	r2, [pc, #488]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005ba0:	23be      	movs	r3, #190	@ 0xbe
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	58d3      	ldr	r3, [r2, r3]
 8005ba6:	1e59      	subs	r1, r3, #1
 8005ba8:	4a77      	ldr	r2, [pc, #476]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005baa:	23be      	movs	r3, #190	@ 0xbe
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	50d1      	str	r1, [r2, r3]
		break;
 8005bb0:	e0de      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
			tty_printf("debounce XA\r\n");
 8005bb2:	4b78      	ldr	r3, [pc, #480]	@ (8005d94 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a78      	ldr	r2, [pc, #480]	@ (8005d98 <HAL_GPIO_EXTI_Callback+0x290>)
 8005bb8:	0010      	movs	r0, r2
 8005bba:	4798      	blx	r3
		break;
 8005bbc:	e0d8      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>

	case MX_B_Pin:
		position_saved = false;
 8005bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8005d7c <HAL_GPIO_EXTI_Callback+0x274>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
		timer_start(hal_xb_tmr, hal_ms, NULL);
 8005bc4:	4b75      	ldr	r3, [pc, #468]	@ (8005d9c <HAL_GPIO_EXTI_Callback+0x294>)
 8005bc6:	7818      	ldrb	r0, [r3, #0]
 8005bc8:	4b6e      	ldr	r3, [pc, #440]	@ (8005d84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	0019      	movs	r1, r3
 8005bd0:	f000 ff14 	bl	80069fc <timer_start>
		vars.error_status &= ~ERR_HAL_XB;
 8005bd4:	4a6c      	ldr	r2, [pc, #432]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005bd6:	23da      	movs	r3, #218	@ 0xda
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	58d3      	ldr	r3, [r2, r3]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	4393      	bics	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	4a69      	ldr	r2, [pc, #420]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005be4:	23da      	movs	r3, #218	@ 0xda
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_xb)
 8005bea:	4b6d      	ldr	r3, [pc, #436]	@ (8005da0 <HAL_GPIO_EXTI_Callback+0x298>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d025      	beq.n	8005c40 <HAL_GPIO_EXTI_Callback+0x138>
		{
			hal_debounce_xb = now;
 8005bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8005da0 <HAL_GPIO_EXTI_Callback+0x298>)
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]

			if (isMX_A == isMX_B)
 8005bfa:	4b65      	ldr	r3, [pc, #404]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005bfc:	2104      	movs	r1, #4
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f004 fde0 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005c04:	0003      	movs	r3, r0
 8005c06:	001c      	movs	r4, r3
 8005c08:	4b61      	ldr	r3, [pc, #388]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005c0a:	2108      	movs	r1, #8
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f004 fdd9 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005c12:	0003      	movs	r3, r0
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d109      	bne.n	8005c2c <HAL_GPIO_EXTI_Callback+0x124>
				vars.eevar.actual_motor.x--;
 8005c18:	4a5b      	ldr	r2, [pc, #364]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005c1a:	23be      	movs	r3, #190	@ 0xbe
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	58d3      	ldr	r3, [r2, r3]
 8005c20:	1e59      	subs	r1, r3, #1
 8005c22:	4a59      	ldr	r2, [pc, #356]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005c24:	23be      	movs	r3, #190	@ 0xbe
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	50d1      	str	r1, [r2, r3]
		}
		else
			tty_printf("debounce XB\r\n");


		break;
 8005c2a:	e0a1      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
				vars.eevar.actual_motor.x++;
 8005c2c:	4a56      	ldr	r2, [pc, #344]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005c2e:	23be      	movs	r3, #190	@ 0xbe
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	58d3      	ldr	r3, [r2, r3]
 8005c34:	1c59      	adds	r1, r3, #1
 8005c36:	4a54      	ldr	r2, [pc, #336]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005c38:	23be      	movs	r3, #190	@ 0xbe
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	50d1      	str	r1, [r2, r3]
		break;
 8005c3e:	e097      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
			tty_printf("debounce XB\r\n");
 8005c40:	4b54      	ldr	r3, [pc, #336]	@ (8005d94 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a57      	ldr	r2, [pc, #348]	@ (8005da4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8005c46:	0010      	movs	r0, r2
 8005c48:	4798      	blx	r3
		break;
 8005c4a:	e091      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>

	case MY_A_Pin:
		position_saved = false;
 8005c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d7c <HAL_GPIO_EXTI_Callback+0x274>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
		timer_start(hal_ya_tmr, hal_ms, NULL);
 8005c52:	4b55      	ldr	r3, [pc, #340]	@ (8005da8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8005c54:	7818      	ldrb	r0, [r3, #0]
 8005c56:	4b4b      	ldr	r3, [pc, #300]	@ (8005d84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	0019      	movs	r1, r3
 8005c5e:	f000 fecd 	bl	80069fc <timer_start>
		vars.error_status &= ~ERR_HAL_YA;
 8005c62:	4a49      	ldr	r2, [pc, #292]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005c64:	23da      	movs	r3, #218	@ 0xda
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	58d3      	ldr	r3, [r2, r3]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	4393      	bics	r3, r2
 8005c6e:	0019      	movs	r1, r3
 8005c70:	4a45      	ldr	r2, [pc, #276]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005c72:	23da      	movs	r3, #218	@ 0xda
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_ya)
 8005c78:	4b4c      	ldr	r3, [pc, #304]	@ (8005dac <HAL_GPIO_EXTI_Callback+0x2a4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d025      	beq.n	8005cce <HAL_GPIO_EXTI_Callback+0x1c6>
		{
			hal_debounce_ya = now;
 8005c82:	4b4a      	ldr	r3, [pc, #296]	@ (8005dac <HAL_GPIO_EXTI_Callback+0x2a4>)
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

			if (isMY_A == isMY_B)
 8005c88:	4b41      	ldr	r3, [pc, #260]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f004 fd99 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005c92:	0003      	movs	r3, r0
 8005c94:	001c      	movs	r4, r3
 8005c96:	4b3e      	ldr	r3, [pc, #248]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005c98:	2102      	movs	r1, #2
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f004 fd92 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	429c      	cmp	r4, r3
 8005ca4:	d109      	bne.n	8005cba <HAL_GPIO_EXTI_Callback+0x1b2>
				vars.eevar.actual_motor.y++;
 8005ca6:	4a38      	ldr	r2, [pc, #224]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005ca8:	23c0      	movs	r3, #192	@ 0xc0
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	58d3      	ldr	r3, [r2, r3]
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	4a35      	ldr	r2, [pc, #212]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005cb2:	23c0      	movs	r3, #192	@ 0xc0
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	50d1      	str	r1, [r2, r3]
				vars.eevar.actual_motor.y--;
		}
		else
			tty_printf("debounce YA\r\n");

		break;
 8005cb8:	e05a      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
				vars.eevar.actual_motor.y--;
 8005cba:	4a33      	ldr	r2, [pc, #204]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005cbc:	23c0      	movs	r3, #192	@ 0xc0
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	58d3      	ldr	r3, [r2, r3]
 8005cc2:	1e59      	subs	r1, r3, #1
 8005cc4:	4a30      	ldr	r2, [pc, #192]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005cc6:	23c0      	movs	r3, #192	@ 0xc0
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	50d1      	str	r1, [r2, r3]
		break;
 8005ccc:	e050      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
			tty_printf("debounce YA\r\n");
 8005cce:	4b31      	ldr	r3, [pc, #196]	@ (8005d94 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a37      	ldr	r2, [pc, #220]	@ (8005db0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8005cd4:	0010      	movs	r0, r2
 8005cd6:	4798      	blx	r3
		break;
 8005cd8:	e04a      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>

	case MY_B_Pin:
		position_saved = false;
 8005cda:	4b28      	ldr	r3, [pc, #160]	@ (8005d7c <HAL_GPIO_EXTI_Callback+0x274>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
		timer_start(hal_yb_tmr, hal_ms, NULL);
 8005ce0:	4b34      	ldr	r3, [pc, #208]	@ (8005db4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8005ce2:	7818      	ldrb	r0, [r3, #0]
 8005ce4:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	0019      	movs	r1, r3
 8005cec:	f000 fe86 	bl	80069fc <timer_start>
		vars.error_status &= ~ERR_HAL_YB;
 8005cf0:	4a25      	ldr	r2, [pc, #148]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005cf2:	23da      	movs	r3, #218	@ 0xda
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	58d3      	ldr	r3, [r2, r3]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	4393      	bics	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	4a22      	ldr	r2, [pc, #136]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005d00:	23da      	movs	r3, #218	@ 0xda
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	50d1      	str	r1, [r2, r3]

		if (now != hal_debounce_yb)
 8005d06:	4b2c      	ldr	r3, [pc, #176]	@ (8005db8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d025      	beq.n	8005d5c <HAL_GPIO_EXTI_Callback+0x254>
		{
			hal_debounce_yb = now;
 8005d10:	4b29      	ldr	r3, [pc, #164]	@ (8005db8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	601a      	str	r2, [r3, #0]

			if (isMY_A == isMY_B)
 8005d16:	4b1e      	ldr	r3, [pc, #120]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005d18:	2101      	movs	r1, #1
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f004 fd52 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005d20:	0003      	movs	r3, r0
 8005d22:	001c      	movs	r4, r3
 8005d24:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <HAL_GPIO_EXTI_Callback+0x288>)
 8005d26:	2102      	movs	r1, #2
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f004 fd4b 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d109      	bne.n	8005d48 <HAL_GPIO_EXTI_Callback+0x240>
				vars.eevar.actual_motor.y--;
 8005d34:	4a14      	ldr	r2, [pc, #80]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005d36:	23c0      	movs	r3, #192	@ 0xc0
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	58d3      	ldr	r3, [r2, r3]
 8005d3c:	1e59      	subs	r1, r3, #1
 8005d3e:	4a12      	ldr	r2, [pc, #72]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005d40:	23c0      	movs	r3, #192	@ 0xc0
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	50d1      	str	r1, [r2, r3]
				vars.eevar.actual_motor.y++;
		}
		else
			tty_printf("debounce YB\r\n");

		break;
 8005d46:	e013      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
				vars.eevar.actual_motor.y++;
 8005d48:	4a0f      	ldr	r2, [pc, #60]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005d4a:	23c0      	movs	r3, #192	@ 0xc0
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	58d3      	ldr	r3, [r2, r3]
 8005d50:	1c59      	adds	r1, r3, #1
 8005d52:	4a0d      	ldr	r2, [pc, #52]	@ (8005d88 <HAL_GPIO_EXTI_Callback+0x280>)
 8005d54:	23c0      	movs	r3, #192	@ 0xc0
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	50d1      	str	r1, [r2, r3]
		break;
 8005d5a:	e009      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>
			tty_printf("debounce YB\r\n");
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a16      	ldr	r2, [pc, #88]	@ (8005dbc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8005d62:	0010      	movs	r0, r2
 8005d64:	4798      	blx	r3
		break;
 8005d66:	e003      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>

	case RX433_Pin:
		AYCT_EXTI_IRQHandler();
 8005d68:	f7fe fe1e 	bl	80049a8 <AYCT_EXTI_IRQHandler>
		break;
 8005d6c:	e000      	b.n	8005d70 <HAL_GPIO_EXTI_Callback+0x268>

	default:
		break;
 8005d6e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8005d70:	46c0      	nop			@ (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b005      	add	sp, #20
 8005d76:	bd90      	pop	{r4, r7, pc}
 8005d78:	08011a48 	.word	0x08011a48
 8005d7c:	20000014 	.word	0x20000014
 8005d80:	20000010 	.word	0x20000010
 8005d84:	200004d0 	.word	0x200004d0
 8005d88:	200002bc 	.word	0x200002bc
 8005d8c:	200004d4 	.word	0x200004d4
 8005d90:	50000800 	.word	0x50000800
 8005d94:	20000aac 	.word	0x20000aac
 8005d98:	08010348 	.word	0x08010348
 8005d9c:	20000011 	.word	0x20000011
 8005da0:	200004d8 	.word	0x200004d8
 8005da4:	08010358 	.word	0x08010358
 8005da8:	20000012 	.word	0x20000012
 8005dac:	200004dc 	.word	0x200004dc
 8005db0:	08010368 	.word	0x08010368
 8005db4:	20000013 	.word	0x20000013
 8005db8:	200004e0 	.word	0x200004e0
 8005dbc:	08010378 	.word	0x08010378

08005dc0 <set_protection>:
 * \param
 *
 * \return - true if OK
 */
void set_protection(void)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b0d7      	sub	sp, #348	@ 0x15c
 8005dc4:	af00      	add	r7, sp, #0
	hw_info_t flash;

	ReadStruct2Flash(&flash, sizeof(hw_info_t));
 8005dc6:	23ac      	movs	r3, #172	@ 0xac
 8005dc8:	005a      	lsls	r2, r3, #1
 8005dca:	003b      	movs	r3, r7
 8005dcc:	0011      	movs	r1, r2
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f7ff fa1e 	bl	8005210 <ReadStruct2Flash>

	flash.stm_serial = stm_serial();
 8005dd4:	f000 f82e 	bl	8005e34 <stm_serial>
 8005dd8:	0002      	movs	r2, r0
 8005dda:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <set_protection+0x64>)
 8005ddc:	24ac      	movs	r4, #172	@ 0xac
 8005dde:	0064      	lsls	r4, r4, #1
 8005de0:	191b      	adds	r3, r3, r4
 8005de2:	19db      	adds	r3, r3, r7
 8005de4:	609a      	str	r2, [r3, #8]

	tty_printf("<<<<<<<<<<Set protection NO USER PROGRAM>>>>>>>>>>>>>\r\n");
 8005de6:	4b10      	ldr	r3, [pc, #64]	@ (8005e28 <set_protection+0x68>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a10      	ldr	r2, [pc, #64]	@ (8005e2c <set_protection+0x6c>)
 8005dec:	0010      	movs	r0, r2
 8005dee:	4798      	blx	r3
	tty_printf("Serial number [%u] PUT ROM THIS IN ROMTABLE\r\n", flash.stm_serial);
 8005df0:	4b0d      	ldr	r3, [pc, #52]	@ (8005e28 <set_protection+0x68>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <set_protection+0x64>)
 8005df6:	191b      	adds	r3, r3, r4
 8005df8:	19db      	adds	r3, r3, r7
 8005dfa:	6899      	ldr	r1, [r3, #8]
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <set_protection+0x70>)
 8005dfe:	0018      	movs	r0, r3
 8005e00:	4790      	blx	r2
	tty_printf("<<<<<<<<<<Set protection NO USER PROGRAM>>>>>>>>>>>>>\r\n");
 8005e02:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <set_protection+0x68>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a09      	ldr	r2, [pc, #36]	@ (8005e2c <set_protection+0x6c>)
 8005e08:	0010      	movs	r0, r2
 8005e0a:	4798      	blx	r3

	WriteStruct2Flash(&flash, sizeof(hw_info_t));
 8005e0c:	23ac      	movs	r3, #172	@ 0xac
 8005e0e:	005a      	lsls	r2, r3, #1
 8005e10:	003b      	movs	r3, r7
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff fa4f 	bl	80052b8 <WriteStruct2Flash>
}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b057      	add	sp, #348	@ 0x15c
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	fffffea8 	.word	0xfffffea8
 8005e28:	20000aac 	.word	0x20000aac
 8005e2c:	080103dc 	.word	0x080103dc
 8005e30:	08010414 	.word	0x08010414

08005e34 <stm_serial>:
 * \param
 *
 * \return - CRC32 of STM serial
 */
uint32_t stm_serial(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
	uint32_t challenge[3];

	uint32_t *p_mem;
	p_mem = (uint32_t*) UID_BASE;
 8005e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e78 <stm_serial+0x44>)
 8005e3c:	613b      	str	r3, [r7, #16]

	for (int var = 0; var < 3; var++)
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e00b      	b.n	8005e5c <stm_serial+0x28>
		challenge[var] = *(p_mem + var);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	18d3      	adds	r3, r2, r3
 8005e4c:	6819      	ldr	r1, [r3, #0]
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	50d1      	str	r1, [r2, r3]
	for (int var = 0; var < 3; var++)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	ddf0      	ble.n	8005e44 <stm_serial+0x10>

	return HAL_CRC_Calculate(&hcrc, challenge, sizeof(challenge) / 4);
 8005e62:	1d39      	adds	r1, r7, #4
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <stm_serial+0x48>)
 8005e66:	2203      	movs	r2, #3
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f002 fd87 	bl	800897c <HAL_CRC_Calculate>
 8005e6e:	0003      	movs	r3, r0
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b006      	add	sp, #24
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	1fff7590 	.word	0x1fff7590
 8005e7c:	200001c0 	.word	0x200001c0

08005e80 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005e84:	4b13      	ldr	r3, [pc, #76]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005e86:	4a14      	ldr	r2, [pc, #80]	@ (8005ed8 <MX_RTC_Init+0x58>)
 8005e88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005e8a:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8005e90:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005e92:	227f      	movs	r2, #127	@ 0x7f
 8005e94:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8005e96:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005e98:	22ff      	movs	r2, #255	@ 0xff
 8005e9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005eae:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005eb0:	2280      	movs	r2, #128	@ 0x80
 8005eb2:	05d2      	lsls	r2, r2, #23
 8005eb4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005eb6:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <MX_RTC_Init+0x54>)
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f006 fc7e 	bl	800c7c0 <HAL_RTC_Init>
 8005ec4:	1e03      	subs	r3, r0, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8005ec8:	f7ff fdf6 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005ecc:	46c0      	nop			@ (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	200004e4 	.word	0x200004e4
 8005ed8:	40002800 	.word	0x40002800

08005edc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b097      	sub	sp, #92	@ 0x5c
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ee4:	240c      	movs	r4, #12
 8005ee6:	193b      	adds	r3, r7, r4
 8005ee8:	0018      	movs	r0, r3
 8005eea:	234c      	movs	r3, #76	@ 0x4c
 8005eec:	001a      	movs	r2, r3
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f009 fb9c 	bl	800f62c <memset>
  if(rtcHandle->Instance==RTC)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <HAL_RTC_MspInit+0x74>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d124      	bne.n	8005f48 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005efe:	193b      	adds	r3, r7, r4
 8005f00:	2280      	movs	r2, #128	@ 0x80
 8005f02:	0292      	lsls	r2, r2, #10
 8005f04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005f06:	193b      	adds	r3, r7, r4
 8005f08:	2280      	movs	r2, #128	@ 0x80
 8005f0a:	0052      	lsls	r2, r2, #1
 8005f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f0e:	193b      	adds	r3, r7, r4
 8005f10:	0018      	movs	r0, r3
 8005f12:	f006 fa19 	bl	800c348 <HAL_RCCEx_PeriphCLKConfig>
 8005f16:	1e03      	subs	r3, r0, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005f1a:	f7ff fdcd 	bl	8005ab8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <HAL_RTC_MspInit+0x78>)
 8005f20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f22:	4b0c      	ldr	r3, [pc, #48]	@ (8005f54 <HAL_RTC_MspInit+0x78>)
 8005f24:	2180      	movs	r1, #128	@ 0x80
 8005f26:	0209      	lsls	r1, r1, #8
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005f2c:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <HAL_RTC_MspInit+0x78>)
 8005f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f30:	4b08      	ldr	r3, [pc, #32]	@ (8005f54 <HAL_RTC_MspInit+0x78>)
 8005f32:	2180      	movs	r1, #128	@ 0x80
 8005f34:	00c9      	lsls	r1, r1, #3
 8005f36:	430a      	orrs	r2, r1
 8005f38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f3a:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <HAL_RTC_MspInit+0x78>)
 8005f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f3e:	2380      	movs	r3, #128	@ 0x80
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4013      	ands	r3, r2
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005f48:	46c0      	nop			@ (mov r8, r8)
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b017      	add	sp, #92	@ 0x5c
 8005f4e:	bd90      	pop	{r4, r7, pc}
 8005f50:	40002800 	.word	0x40002800
 8005f54:	40021000 	.word	0x40021000

08005f58 <shell_open>:
 * \Parameters	vars pointer to vars_t
 *
 * \return -.
 */
void shell_open(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
	if (tmr == NO_TIMER)
 8005f5c:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <shell_open+0x2c>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2bfa      	cmp	r3, #250	@ 0xfa
 8005f62:	d105      	bne.n	8005f70 <shell_open+0x18>
	{
		tmr = timer_get();
 8005f64:	f000 fcc8 	bl	80068f8 <timer_get>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	001a      	movs	r2, r3
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <shell_open+0x2c>)
 8005f6e:	701a      	strb	r2, [r3, #0]
	}

	shell_cmdline_init(&cmdline);
 8005f70:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <shell_open+0x30>)
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 f80a 	bl	8005f8c <shell_cmdline_init>

#if FLEXIBLE_SCI1 || FLEXIBLE_SCI2 || FLEXIBLE_SCI3 || FLEXIBLE_SCI4 || FLEXIBLE_SCI5 || FLEXIBLE_SCI6 || FLEXIBLE_SCI7 || FLEXIBLE_SCI8
#ifdef ENABLE_MODBUS
	shell_use_modbus();
#else
	shell_use_sci1();
 8005f78:	f000 fe5c 	bl	8006c34 <shell_use_sci1>
#endif
#endif
}
 8005f7c:	46c0      	nop			@ (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	20000015 	.word	0x20000015
 8005f88:	200007ec 	.word	0x200007ec

08005f8c <shell_cmdline_init>:
 * \Parameters object A pointer to a command line object.
 *
 * \return -.
 */
static void shell_cmdline_init(cmdline_obj_t *object)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < (SHELL_CMDLINE_HIST_COUNT + 1); i++)
 8005f94:	230f      	movs	r3, #15
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e047      	b.n	800602e <shell_cmdline_init+0xa2>
	{
		object->cmdline[i].id = i;
 8005f9e:	240f      	movs	r4, #15
 8005fa0:	193b      	adds	r3, r7, r4
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	0013      	movs	r3, r2
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	193a      	adds	r2, r7, r4
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	545a      	strb	r2, [r3, r1]
		object->cmdline[i].str = &mem_pool[SHELL_CMDLINE_SIZE * i];
 8005fb4:	193b      	adds	r3, r7, r4
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	0013      	movs	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	189b      	adds	r3, r3, r2
 8005fbe:	00da      	lsls	r2, r3, #3
 8005fc0:	1899      	adds	r1, r3, r2
 8005fc2:	193b      	adds	r3, r7, r4
 8005fc4:	781a      	ldrb	r2, [r3, #0]
 8005fc6:	4b26      	ldr	r3, [pc, #152]	@ (8006060 <shell_cmdline_init+0xd4>)
 8005fc8:	18c9      	adds	r1, r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	0013      	movs	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	189b      	adds	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	18c3      	adds	r3, r0, r3
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	6019      	str	r1, [r3, #0]
		object->cmdline[i].size = 0;
 8005fda:	0020      	movs	r0, r4
 8005fdc:	183b      	adds	r3, r7, r0
 8005fde:	781a      	ldrb	r2, [r3, #0]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	0013      	movs	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	18cb      	adds	r3, r1, r3
 8005fec:	3308      	adds	r3, #8
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]

		if (object->cmdline[i].id == SHELL_CMDLINE_HIST_COUNT)
 8005ff2:	183b      	adds	r3, r7, r0
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	0013      	movs	r3, r2
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	189b      	adds	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	5c5b      	ldrb	r3, [r3, r1]
 8006002:	2b08      	cmp	r3, #8
 8006004:	d10d      	bne.n	8006022 <shell_cmdline_init+0x96>
		{
			object->p_cmdline = &object->cmdline[i];
 8006006:	183b      	adds	r3, r7, r0
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	0013      	movs	r3, r2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	189b      	adds	r3, r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	18d2      	adds	r2, r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	66da      	str	r2, [r3, #108]	@ 0x6c
			object->p_cmdline->size = 0;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601e:	2200      	movs	r2, #0
 8006020:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < (SHELL_CMDLINE_HIST_COUNT + 1); i++)
 8006022:	210f      	movs	r1, #15
 8006024:	187b      	adds	r3, r7, r1
 8006026:	781a      	ldrb	r2, [r3, #0]
 8006028:	187b      	adds	r3, r7, r1
 800602a:	3201      	adds	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	230f      	movs	r3, #15
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b08      	cmp	r3, #8
 8006036:	d9b2      	bls.n	8005f9e <shell_cmdline_init+0x12>
		}
	}
#if (SHELL_CMDLINE_HIST_COUNT > 0)
	object->cmd_idx = 0;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2270      	movs	r2, #112	@ 0x70
 800603c:	2100      	movs	r1, #0
 800603e:	5499      	strb	r1, [r3, r2]
#endif
	object->tabline.str = NULL;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	679a      	str	r2, [r3, #120]	@ 0x78
	object->tabline.size = 0;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	227c      	movs	r2, #124	@ 0x7c
 800604a:	2100      	movs	r1, #0
 800604c:	5499      	strb	r1, [r3, r2]
	object->tab_idx = 0;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2280      	movs	r2, #128	@ 0x80
 8006052:	2100      	movs	r1, #0
 8006054:	5499      	strb	r1, [r3, r2]
}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	b005      	add	sp, #20
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	46c0      	nop			@ (mov r8, r8)
 8006060:	20000510 	.word	0x20000510

08006064 <sh_ver>:
 * \Parameters -.
 *
 * \return -.
 */
void sh_ver(char *argv)
{
 8006064:	b5b0      	push	{r4, r5, r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af02      	add	r7, sp, #8
 800606a:	6078      	str	r0, [r7, #4]
	extern app_info_t c_app_info;

	uint32_t *Bootloader_info = (uint32_t*) (0x08004000 - 40);
 800606c:	4b1b      	ldr	r3, [pc, #108]	@ (80060dc <sh_ver+0x78>)
 800606e:	60fb      	str	r3, [r7, #12]
	app_info_t *p_bl_info = (app_info_t*) Bootloader_info;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	60bb      	str	r3, [r7, #8]

	tty_printf("Bootloader %X.%02X\r\n", ((p_bl_info->version >> 24) & 0xFF), ((p_bl_info->version >> 16) & 0xFF));
 8006074:	4b1a      	ldr	r3, [pc, #104]	@ (80060e0 <sh_ver+0x7c>)
 8006076:	681c      	ldr	r4, [r3, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	0e19      	lsrs	r1, r3, #24
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	0c1b      	lsrs	r3, r3, #16
 8006084:	22ff      	movs	r2, #255	@ 0xff
 8006086:	401a      	ands	r2, r3
 8006088:	4b16      	ldr	r3, [pc, #88]	@ (80060e4 <sh_ver+0x80>)
 800608a:	0018      	movs	r0, r3
 800608c:	47a0      	blx	r4

#ifdef ENABLE_MODBUS
	tty_printf("Modbus ");
#endif
	tty_printf("Suntrack %lx.%02lx (%s %s)\r\n", ((c_app_info.version >> 24) & 0xFF), ((c_app_info.version >> 16) & 0xFF), c_app_info.build_date, c_app_info.build_time);
 800608e:	4b14      	ldr	r3, [pc, #80]	@ (80060e0 <sh_ver+0x7c>)
 8006090:	681c      	ldr	r4, [r3, #0]
 8006092:	4b15      	ldr	r3, [pc, #84]	@ (80060e8 <sh_ver+0x84>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	0e19      	lsrs	r1, r3, #24
 8006098:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <sh_ver+0x84>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	22ff      	movs	r2, #255	@ 0xff
 80060a0:	401a      	ands	r2, r3
 80060a2:	4d12      	ldr	r5, [pc, #72]	@ (80060ec <sh_ver+0x88>)
 80060a4:	4812      	ldr	r0, [pc, #72]	@ (80060f0 <sh_ver+0x8c>)
 80060a6:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <sh_ver+0x90>)
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	002b      	movs	r3, r5
 80060ac:	47a0      	blx	r4

	// fixed low on L6205 types
	if (isPCB)
 80060ae:	23a0      	movs	r3, #160	@ 0xa0
 80060b0:	05db      	lsls	r3, r3, #23
 80060b2:	2140      	movs	r1, #64	@ 0x40
 80060b4:	0018      	movs	r0, r3
 80060b6:	f004 fb85 	bl	800a7c4 <HAL_GPIO_ReadPin>
 80060ba:	1e03      	subs	r3, r0, #0
 80060bc:	d005      	beq.n	80060ca <sh_ver+0x66>
		tty_printf("Hardware MP6515\r\n");
 80060be:	4b08      	ldr	r3, [pc, #32]	@ (80060e0 <sh_ver+0x7c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a0d      	ldr	r2, [pc, #52]	@ (80060f8 <sh_ver+0x94>)
 80060c4:	0010      	movs	r0, r2
 80060c6:	4798      	blx	r3
	else
		tty_printf("Hardware L6203\r\n");

}
 80060c8:	e004      	b.n	80060d4 <sh_ver+0x70>
		tty_printf("Hardware L6203\r\n");
 80060ca:	4b05      	ldr	r3, [pc, #20]	@ (80060e0 <sh_ver+0x7c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a0b      	ldr	r2, [pc, #44]	@ (80060fc <sh_ver+0x98>)
 80060d0:	0010      	movs	r0, r2
 80060d2:	4798      	blx	r3
}
 80060d4:	46c0      	nop			@ (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b004      	add	sp, #16
 80060da:	bdb0      	pop	{r4, r5, r7, pc}
 80060dc:	08003fd8 	.word	0x08003fd8
 80060e0:	20000aac 	.word	0x20000aac
 80060e4:	08011840 	.word	0x08011840
 80060e8:	08004000 	.word	0x08004000
 80060ec:	08004010 	.word	0x08004010
 80060f0:	08011858 	.word	0x08011858
 80060f4:	0800401c 	.word	0x0800401c
 80060f8:	08011878 	.word	0x08011878
 80060fc:	0801188c 	.word	0x0801188c

08006100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006106:	4b11      	ldr	r3, [pc, #68]	@ (800614c <HAL_MspInit+0x4c>)
 8006108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800610a:	4b10      	ldr	r3, [pc, #64]	@ (800614c <HAL_MspInit+0x4c>)
 800610c:	2101      	movs	r1, #1
 800610e:	430a      	orrs	r2, r1
 8006110:	641a      	str	r2, [r3, #64]	@ 0x40
 8006112:	4b0e      	ldr	r3, [pc, #56]	@ (800614c <HAL_MspInit+0x4c>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2201      	movs	r2, #1
 8006118:	4013      	ands	r3, r2
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800611e:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <HAL_MspInit+0x4c>)
 8006120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006122:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <HAL_MspInit+0x4c>)
 8006124:	2180      	movs	r1, #128	@ 0x80
 8006126:	0549      	lsls	r1, r1, #21
 8006128:	430a      	orrs	r2, r1
 800612a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800612c:	4b07      	ldr	r3, [pc, #28]	@ (800614c <HAL_MspInit+0x4c>)
 800612e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006130:	2380      	movs	r3, #128	@ 0x80
 8006132:	055b      	lsls	r3, r3, #21
 8006134:	4013      	ands	r3, r2
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800613a:	23c0      	movs	r3, #192	@ 0xc0
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	0018      	movs	r0, r3
 8006140:	f001 fc2e 	bl	80079a0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006144:	46c0      	nop			@ (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b002      	add	sp, #8
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40021000 	.word	0x40021000

08006150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006154:	46c0      	nop			@ (mov r8, r8)
 8006156:	e7fd      	b.n	8006154 <NMI_Handler+0x4>

08006158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800615c:	46c0      	nop			@ (mov r8, r8)
 800615e:	e7fd      	b.n	800615c <HardFault_Handler+0x4>

08006160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006164:	46c0      	nop			@ (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800616e:	46c0      	nop			@ (mov r8, r8)
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	timer_callback();
 8006178:	f000 fb6e 	bl	8006858 <timer_callback>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800617c:	f001 fbd0 	bl	8007920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006180:	46c0      	nop			@ (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MY_A_Pin);
 800618a:	2001      	movs	r0, #1
 800618c:	f004 fb54 	bl	800a838 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MY_B_Pin);
 8006190:	2002      	movs	r0, #2
 8006192:	f004 fb51 	bl	800a838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */


  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MX_A_Pin);
 80061a0:	2004      	movs	r0, #4
 80061a2:	f004 fb49 	bl	800a838 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MX_B_Pin);
 80061a6:	2008      	movs	r0, #8
 80061a8:	f004 fb46 	bl	800a838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80061ac:	46c0      	nop			@ (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RX433_Pin);
 80061b6:	2010      	movs	r0, #16
 80061b8:	f004 fb3e 	bl	800a838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80061bc:	46c0      	nop			@ (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80061c8:	4b03      	ldr	r3, [pc, #12]	@ (80061d8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80061ca:	0018      	movs	r0, r3
 80061cc:	f006 fe48 	bl	800ce60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80061d0:	46c0      	nop			@ (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	46c0      	nop			@ (mov r8, r8)
 80061d8:	200008c0 	.word	0x200008c0

080061dc <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 80061e2:	0018      	movs	r0, r3
 80061e4:	f006 fe3c 	bl	800ce60 <HAL_TIM_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80061e8:	4b04      	ldr	r3, [pc, #16]	@ (80061fc <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 80061ea:	0018      	movs	r0, r3
 80061ec:	f002 ff82 	bl	80090f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 80061f0:	46c0      	nop			@ (mov r8, r8)
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	46c0      	nop			@ (mov r8, r8)
 80061f8:	2000090c 	.word	0x2000090c
 80061fc:	200001e4 	.word	0x200001e4

08006200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	sci1_callback();
 8006204:	f000 fc86 	bl	8006b14 <sci1_callback>
	return;
 8006208:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006214:	4b03      	ldr	r3, [pc, #12]	@ (8006224 <USART2_LPUART2_IRQHandler+0x14>)
 8006216:	0018      	movs	r0, r3
 8006218:	f007 fcb6 	bl	800db88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800621c:	46c0      	nop			@ (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			@ (mov r8, r8)
 8006224:	20001dbc 	.word	0x20001dbc

08006228 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e00a      	b.n	8006250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800623a:	e000      	b.n	800623e <_read+0x16>
 800623c:	bf00      	nop
 800623e:	0001      	movs	r1, r0
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	60ba      	str	r2, [r7, #8]
 8006246:	b2ca      	uxtb	r2, r1
 8006248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	3301      	adds	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	dbf0      	blt.n	800623a <_read+0x12>
	}

return len;
 8006258:	687b      	ldr	r3, [r7, #4]
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	b006      	add	sp, #24
 8006260:	bd80      	pop	{r7, pc}

08006262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	e009      	b.n	8006288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	60ba      	str	r2, [r7, #8]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	0018      	movs	r0, r3
 800627e:	e000      	b.n	8006282 <_write+0x20>
 8006280:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	3301      	adds	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	dbf1      	blt.n	8006274 <_write+0x12>
	}
	return len;
 8006290:	687b      	ldr	r3, [r7, #4]
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b006      	add	sp, #24
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80062a4:	4b11      	ldr	r3, [pc, #68]	@ (80062ec <_sbrk+0x50>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <_sbrk+0x16>
		heap_end = &end;
 80062ac:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <_sbrk+0x50>)
 80062ae:	4a10      	ldr	r2, [pc, #64]	@ (80062f0 <_sbrk+0x54>)
 80062b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80062b2:	4b0e      	ldr	r3, [pc, #56]	@ (80062ec <_sbrk+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80062b8:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <_sbrk+0x50>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	18d2      	adds	r2, r2, r3
 80062c0:	466b      	mov	r3, sp
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d907      	bls.n	80062d6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80062c6:	f009 fa19 	bl	800f6fc <__errno>
 80062ca:	0003      	movs	r3, r0
 80062cc:	220c      	movs	r2, #12
 80062ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80062d0:	2301      	movs	r3, #1
 80062d2:	425b      	negs	r3, r3
 80062d4:	e006      	b.n	80062e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80062d6:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <_sbrk+0x50>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	18d2      	adds	r2, r2, r3
 80062de:	4b03      	ldr	r3, [pc, #12]	@ (80062ec <_sbrk+0x50>)
 80062e0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80062e2:	68fb      	ldr	r3, [r7, #12]
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b004      	add	sp, #16
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20000870 	.word	0x20000870
 80062f0:	20001fc0 	.word	0x20001fc0

080062f4 <_close>:

int _close(int file)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	return -1;
 80062fc:	2301      	movs	r3, #1
 80062fe:	425b      	negs	r3, r3
}
 8006300:	0018      	movs	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	b002      	add	sp, #8
 8006306:	bd80      	pop	{r7, pc}

08006308 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2280      	movs	r2, #128	@ 0x80
 8006316:	0192      	lsls	r2, r2, #6
 8006318:	605a      	str	r2, [r3, #4]
	return 0;
 800631a:	2300      	movs	r3, #0
}
 800631c:	0018      	movs	r0, r3
 800631e:	46bd      	mov	sp, r7
 8006320:	b002      	add	sp, #8
 8006322:	bd80      	pop	{r7, pc}

08006324 <_isatty>:

int _isatty(int file)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	return 1;
 800632c:	2301      	movs	r3, #1
}
 800632e:	0018      	movs	r0, r3
 8006330:	46bd      	mov	sp, r7
 8006332:	b002      	add	sp, #8
 8006334:	bd80      	pop	{r7, pc}

08006336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
	return 0;
 8006342:	2300      	movs	r3, #0
}
 8006344:	0018      	movs	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	b004      	add	sp, #16
 800634a:	bd80      	pop	{r7, pc}

0800634c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006350:	46c0      	nop			@ (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <MX_TIM3_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800635e:	231c      	movs	r3, #28
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	0018      	movs	r0, r3
 8006364:	230c      	movs	r3, #12
 8006366:	001a      	movs	r2, r3
 8006368:	2100      	movs	r1, #0
 800636a:	f009 f95f 	bl	800f62c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800636e:	003b      	movs	r3, r7
 8006370:	0018      	movs	r0, r3
 8006372:	231c      	movs	r3, #28
 8006374:	001a      	movs	r2, r3
 8006376:	2100      	movs	r1, #0
 8006378:	f009 f958 	bl	800f62c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800637c:	4b29      	ldr	r3, [pc, #164]	@ (8006424 <MX_TIM3_Init+0xcc>)
 800637e:	4a2a      	ldr	r2, [pc, #168]	@ (8006428 <MX_TIM3_Init+0xd0>)
 8006380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8006382:	4b28      	ldr	r3, [pc, #160]	@ (8006424 <MX_TIM3_Init+0xcc>)
 8006384:	2217      	movs	r2, #23
 8006386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006388:	4b26      	ldr	r3, [pc, #152]	@ (8006424 <MX_TIM3_Init+0xcc>)
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800638e:	4b25      	ldr	r3, [pc, #148]	@ (8006424 <MX_TIM3_Init+0xcc>)
 8006390:	22c7      	movs	r2, #199	@ 0xc7
 8006392:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006394:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <MX_TIM3_Init+0xcc>)
 8006396:	2200      	movs	r2, #0
 8006398:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800639a:	4b22      	ldr	r3, [pc, #136]	@ (8006424 <MX_TIM3_Init+0xcc>)
 800639c:	2200      	movs	r2, #0
 800639e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80063a0:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <MX_TIM3_Init+0xcc>)
 80063a2:	0018      	movs	r0, r3
 80063a4:	f006 fc14 	bl	800cbd0 <HAL_TIM_PWM_Init>
 80063a8:	1e03      	subs	r3, r0, #0
 80063aa:	d001      	beq.n	80063b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80063ac:	f7ff fb84 	bl	8005ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063b0:	211c      	movs	r1, #28
 80063b2:	187b      	adds	r3, r7, r1
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063b8:	187b      	adds	r3, r7, r1
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80063be:	187a      	adds	r2, r7, r1
 80063c0:	4b18      	ldr	r3, [pc, #96]	@ (8006424 <MX_TIM3_Init+0xcc>)
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f007 fafb 	bl	800d9c0 <HAL_TIMEx_MasterConfigSynchronization>
 80063ca:	1e03      	subs	r3, r0, #0
 80063cc:	d001      	beq.n	80063d2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80063ce:	f7ff fb73 	bl	8005ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063d2:	003b      	movs	r3, r7
 80063d4:	2260      	movs	r2, #96	@ 0x60
 80063d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80063d8:	003b      	movs	r3, r7
 80063da:	2200      	movs	r2, #0
 80063dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063de:	003b      	movs	r3, r7
 80063e0:	2200      	movs	r2, #0
 80063e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063e4:	003b      	movs	r3, r7
 80063e6:	2200      	movs	r2, #0
 80063e8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063ea:	0039      	movs	r1, r7
 80063ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <MX_TIM3_Init+0xcc>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	0018      	movs	r0, r3
 80063f2:	f006 fe3d 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 80063f6:	1e03      	subs	r3, r0, #0
 80063f8:	d001      	beq.n	80063fe <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80063fa:	f7ff fb5d 	bl	8005ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80063fe:	0039      	movs	r1, r7
 8006400:	4b08      	ldr	r3, [pc, #32]	@ (8006424 <MX_TIM3_Init+0xcc>)
 8006402:	2208      	movs	r2, #8
 8006404:	0018      	movs	r0, r3
 8006406:	f006 fe33 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 800640a:	1e03      	subs	r3, r0, #0
 800640c:	d001      	beq.n	8006412 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800640e:	f7ff fb53 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006412:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <MX_TIM3_Init+0xcc>)
 8006414:	0018      	movs	r0, r3
 8006416:	f000 f937 	bl	8006688 <HAL_TIM_MspPostInit>

}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	b00a      	add	sp, #40	@ 0x28
 8006420:	bd80      	pop	{r7, pc}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	20000874 	.word	0x20000874
 8006428:	40000400 	.word	0x40000400

0800642c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	0018      	movs	r0, r3
 8006436:	230c      	movs	r3, #12
 8006438:	001a      	movs	r2, r3
 800643a:	2100      	movs	r1, #0
 800643c:	f009 f8f6 	bl	800f62c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006440:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <MX_TIM6_Init+0x6c>)
 8006442:	4a16      	ldr	r2, [pc, #88]	@ (800649c <MX_TIM6_Init+0x70>)
 8006444:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 95;
 8006446:	4b14      	ldr	r3, [pc, #80]	@ (8006498 <MX_TIM6_Init+0x6c>)
 8006448:	225f      	movs	r2, #95	@ 0x5f
 800644a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800644c:	4b12      	ldr	r3, [pc, #72]	@ (8006498 <MX_TIM6_Init+0x6c>)
 800644e:	2200      	movs	r2, #0
 8006450:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 60000;
 8006452:	4b11      	ldr	r3, [pc, #68]	@ (8006498 <MX_TIM6_Init+0x6c>)
 8006454:	4a12      	ldr	r2, [pc, #72]	@ (80064a0 <MX_TIM6_Init+0x74>)
 8006456:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006458:	4b0f      	ldr	r3, [pc, #60]	@ (8006498 <MX_TIM6_Init+0x6c>)
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800645e:	4b0e      	ldr	r3, [pc, #56]	@ (8006498 <MX_TIM6_Init+0x6c>)
 8006460:	0018      	movs	r0, r3
 8006462:	f006 fafb 	bl	800ca5c <HAL_TIM_Base_Init>
 8006466:	1e03      	subs	r3, r0, #0
 8006468:	d001      	beq.n	800646e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800646a:	f7ff fb25 	bl	8005ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800647a:	1d3a      	adds	r2, r7, #4
 800647c:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <MX_TIM6_Init+0x6c>)
 800647e:	0011      	movs	r1, r2
 8006480:	0018      	movs	r0, r3
 8006482:	f007 fa9d 	bl	800d9c0 <HAL_TIMEx_MasterConfigSynchronization>
 8006486:	1e03      	subs	r3, r0, #0
 8006488:	d001      	beq.n	800648e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800648a:	f7ff fb15 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	46bd      	mov	sp, r7
 8006492:	b004      	add	sp, #16
 8006494:	bd80      	pop	{r7, pc}
 8006496:	46c0      	nop			@ (mov r8, r8)
 8006498:	200008c0 	.word	0x200008c0
 800649c:	40001000 	.word	0x40001000
 80064a0:	0000ea60 	.word	0x0000ea60

080064a4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80064a8:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064aa:	4a10      	ldr	r2, [pc, #64]	@ (80064ec <MX_TIM16_Init+0x48>)
 80064ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47;
 80064ae:	4b0e      	ldr	r3, [pc, #56]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064b0:	222f      	movs	r2, #47	@ 0x2f
 80064b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 80064ba:	4b0b      	ldr	r3, [pc, #44]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064bc:	4a0c      	ldr	r2, [pc, #48]	@ (80064f0 <MX_TIM16_Init+0x4c>)
 80064be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064c0:	4b09      	ldr	r3, [pc, #36]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80064c6:	4b08      	ldr	r3, [pc, #32]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064cc:	4b06      	ldr	r3, [pc, #24]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80064d2:	4b05      	ldr	r3, [pc, #20]	@ (80064e8 <MX_TIM16_Init+0x44>)
 80064d4:	0018      	movs	r0, r3
 80064d6:	f006 fac1 	bl	800ca5c <HAL_TIM_Base_Init>
 80064da:	1e03      	subs	r3, r0, #0
 80064dc:	d001      	beq.n	80064e2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80064de:	f7ff faeb 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	2000090c 	.word	0x2000090c
 80064ec:	40014400 	.word	0x40014400
 80064f0:	00001387 	.word	0x00001387

080064f4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80064f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006538 <MX_TIM17_Init+0x44>)
 80064fa:	4a10      	ldr	r2, [pc, #64]	@ (800653c <MX_TIM17_Init+0x48>)
 80064fc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 30;
 80064fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <MX_TIM17_Init+0x44>)
 8006500:	221e      	movs	r2, #30
 8006502:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006504:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <MX_TIM17_Init+0x44>)
 8006506:	2200      	movs	r2, #0
 8006508:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 800650a:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <MX_TIM17_Init+0x44>)
 800650c:	2264      	movs	r2, #100	@ 0x64
 800650e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <MX_TIM17_Init+0x44>)
 8006512:	2200      	movs	r2, #0
 8006514:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006516:	4b08      	ldr	r3, [pc, #32]	@ (8006538 <MX_TIM17_Init+0x44>)
 8006518:	2200      	movs	r2, #0
 800651a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <MX_TIM17_Init+0x44>)
 800651e:	2200      	movs	r2, #0
 8006520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006522:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <MX_TIM17_Init+0x44>)
 8006524:	0018      	movs	r0, r3
 8006526:	f006 fa99 	bl	800ca5c <HAL_TIM_Base_Init>
 800652a:	1e03      	subs	r3, r0, #0
 800652c:	d001      	beq.n	8006532 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800652e:	f7ff fac3 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000958 	.word	0x20000958
 800653c:	40014800 	.word	0x40014800

08006540 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a09      	ldr	r2, [pc, #36]	@ (8006574 <HAL_TIM_PWM_MspInit+0x34>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10b      	bne.n	800656a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006552:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <HAL_TIM_PWM_MspInit+0x38>)
 8006554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006556:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <HAL_TIM_PWM_MspInit+0x38>)
 8006558:	2102      	movs	r1, #2
 800655a:	430a      	orrs	r2, r1
 800655c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800655e:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <HAL_TIM_PWM_MspInit+0x38>)
 8006560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006562:	2202      	movs	r2, #2
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800656a:	46c0      	nop			@ (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b004      	add	sp, #16
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	40000400 	.word	0x40000400
 8006578:	40021000 	.word	0x40021000

0800657c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08c      	sub	sp, #48	@ 0x30
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006584:	231c      	movs	r3, #28
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	0018      	movs	r0, r3
 800658a:	2314      	movs	r3, #20
 800658c:	001a      	movs	r2, r3
 800658e:	2100      	movs	r1, #0
 8006590:	f009 f84c 	bl	800f62c <memset>
  if(tim_baseHandle->Instance==TIM6)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a36      	ldr	r2, [pc, #216]	@ (8006674 <HAL_TIM_Base_MspInit+0xf8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d114      	bne.n	80065c8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800659e:	4b36      	ldr	r3, [pc, #216]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 80065a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065a2:	4b35      	ldr	r3, [pc, #212]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 80065a4:	2110      	movs	r1, #16
 80065a6:	430a      	orrs	r2, r1
 80065a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80065aa:	4b33      	ldr	r3, [pc, #204]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 80065ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ae:	2210      	movs	r2, #16
 80065b0:	4013      	ands	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	69bb      	ldr	r3, [r7, #24]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	2011      	movs	r0, #17
 80065bc:	f002 f946 	bl	800884c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80065c0:	2011      	movs	r0, #17
 80065c2:	f002 f958 	bl	8008876 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80065c6:	e051      	b.n	800666c <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM16)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a2b      	ldr	r2, [pc, #172]	@ (800667c <HAL_TIM_Base_MspInit+0x100>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d116      	bne.n	8006600 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80065d2:	4b29      	ldr	r3, [pc, #164]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 80065d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065d6:	4b28      	ldr	r3, [pc, #160]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 80065d8:	2180      	movs	r1, #128	@ 0x80
 80065da:	0289      	lsls	r1, r1, #10
 80065dc:	430a      	orrs	r2, r1
 80065de:	641a      	str	r2, [r3, #64]	@ 0x40
 80065e0:	4b25      	ldr	r3, [pc, #148]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 80065e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065e4:	2380      	movs	r3, #128	@ 0x80
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	4013      	ands	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80065ee:	2200      	movs	r2, #0
 80065f0:	2100      	movs	r1, #0
 80065f2:	2015      	movs	r0, #21
 80065f4:	f002 f92a 	bl	800884c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80065f8:	2015      	movs	r0, #21
 80065fa:	f002 f93c 	bl	8008876 <HAL_NVIC_EnableIRQ>
}
 80065fe:	e035      	b.n	800666c <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM17)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1e      	ldr	r2, [pc, #120]	@ (8006680 <HAL_TIM_Base_MspInit+0x104>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d130      	bne.n	800666c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800660a:	4b1b      	ldr	r3, [pc, #108]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 800660c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800660e:	4b1a      	ldr	r3, [pc, #104]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 8006610:	2180      	movs	r1, #128	@ 0x80
 8006612:	02c9      	lsls	r1, r1, #11
 8006614:	430a      	orrs	r2, r1
 8006616:	641a      	str	r2, [r3, #64]	@ 0x40
 8006618:	4b17      	ldr	r3, [pc, #92]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 800661a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800661c:	2380      	movs	r3, #128	@ 0x80
 800661e:	02db      	lsls	r3, r3, #11
 8006620:	4013      	ands	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006626:	4b14      	ldr	r3, [pc, #80]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 8006628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800662a:	4b13      	ldr	r3, [pc, #76]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 800662c:	2102      	movs	r1, #2
 800662e:	430a      	orrs	r2, r1
 8006630:	635a      	str	r2, [r3, #52]	@ 0x34
 8006632:	4b11      	ldr	r3, [pc, #68]	@ (8006678 <HAL_TIM_Base_MspInit+0xfc>)
 8006634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006636:	2202      	movs	r2, #2
 8006638:	4013      	ands	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_CONTRAST_Pin;
 800663e:	211c      	movs	r1, #28
 8006640:	187b      	adds	r3, r7, r1
 8006642:	2280      	movs	r2, #128	@ 0x80
 8006644:	0092      	lsls	r2, r2, #2
 8006646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006648:	187b      	adds	r3, r7, r1
 800664a:	2202      	movs	r2, #2
 800664c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664e:	187b      	adds	r3, r7, r1
 8006650:	2200      	movs	r2, #0
 8006652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006654:	187b      	adds	r3, r7, r1
 8006656:	2200      	movs	r2, #0
 8006658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800665a:	187b      	adds	r3, r7, r1
 800665c:	2202      	movs	r2, #2
 800665e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_CONTRAST_GPIO_Port, &GPIO_InitStruct);
 8006660:	187b      	adds	r3, r7, r1
 8006662:	4a08      	ldr	r2, [pc, #32]	@ (8006684 <HAL_TIM_Base_MspInit+0x108>)
 8006664:	0019      	movs	r1, r3
 8006666:	0010      	movs	r0, r2
 8006668:	f003 ff40 	bl	800a4ec <HAL_GPIO_Init>
}
 800666c:	46c0      	nop			@ (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b00c      	add	sp, #48	@ 0x30
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40001000 	.word	0x40001000
 8006678:	40021000 	.word	0x40021000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800
 8006684:	50000400 	.word	0x50000400

08006688 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	240c      	movs	r4, #12
 8006692:	193b      	adds	r3, r7, r4
 8006694:	0018      	movs	r0, r3
 8006696:	2314      	movs	r3, #20
 8006698:	001a      	movs	r2, r3
 800669a:	2100      	movs	r1, #0
 800669c:	f008 ffc6 	bl	800f62c <memset>
  if(timHandle->Instance==TIM3)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a14      	ldr	r2, [pc, #80]	@ (80066f8 <HAL_TIM_MspPostInit+0x70>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d122      	bne.n	80066f0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066aa:	4b14      	ldr	r3, [pc, #80]	@ (80066fc <HAL_TIM_MspPostInit+0x74>)
 80066ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066ae:	4b13      	ldr	r3, [pc, #76]	@ (80066fc <HAL_TIM_MspPostInit+0x74>)
 80066b0:	2104      	movs	r1, #4
 80066b2:	430a      	orrs	r2, r1
 80066b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80066b6:	4b11      	ldr	r3, [pc, #68]	@ (80066fc <HAL_TIM_MspPostInit+0x74>)
 80066b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ba:	2204      	movs	r2, #4
 80066bc:	4013      	ands	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80066c2:	193b      	adds	r3, r7, r4
 80066c4:	22a0      	movs	r2, #160	@ 0xa0
 80066c6:	0052      	lsls	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ca:	0021      	movs	r1, r4
 80066cc:	187b      	adds	r3, r7, r1
 80066ce:	2202      	movs	r2, #2
 80066d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d2:	187b      	adds	r3, r7, r1
 80066d4:	2200      	movs	r2, #0
 80066d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d8:	187b      	adds	r3, r7, r1
 80066da:	2200      	movs	r2, #0
 80066dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80066de:	187b      	adds	r3, r7, r1
 80066e0:	2201      	movs	r2, #1
 80066e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066e4:	187b      	adds	r3, r7, r1
 80066e6:	4a06      	ldr	r2, [pc, #24]	@ (8006700 <HAL_TIM_MspPostInit+0x78>)
 80066e8:	0019      	movs	r1, r3
 80066ea:	0010      	movs	r0, r2
 80066ec:	f003 fefe 	bl	800a4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80066f0:	46c0      	nop			@ (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b009      	add	sp, #36	@ 0x24
 80066f6:	bd90      	pop	{r4, r7, pc}
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40021000 	.word	0x40021000
 8006700:	50000800 	.word	0x50000800

08006704 <set_x_pwm>:

/* USER CODE BEGIN 1 */


void set_x_pwm(int16_t pwm)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	0002      	movs	r2, r0
 800670c:	1dbb      	adds	r3, r7, #6
 800670e:	801a      	strh	r2, [r3, #0]
	// incoming -100 to +100
	// different direction for H-Bridges
	if (isPCB)
 8006710:	23a0      	movs	r3, #160	@ 0xa0
 8006712:	05db      	lsls	r3, r3, #23
 8006714:	2140      	movs	r1, #64	@ 0x40
 8006716:	0018      	movs	r0, r3
 8006718:	f004 f854 	bl	800a7c4 <HAL_GPIO_ReadPin>
 800671c:	1e03      	subs	r3, r0, #0
 800671e:	d005      	beq.n	800672c <set_x_pwm+0x28>
		pwm = -pwm;
 8006720:	1dbb      	adds	r3, r7, #6
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	425b      	negs	r3, r3
 8006726:	b29a      	uxth	r2, r3
 8006728:	1dbb      	adds	r3, r7, #6
 800672a:	801a      	strh	r2, [r3, #0]

	pwm += 100;
 800672c:	1dbb      	adds	r3, r7, #6
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	3364      	adds	r3, #100	@ 0x64
 8006732:	b29a      	uxth	r2, r3
 8006734:	1dbb      	adds	r3, r7, #6
 8006736:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8006738:	4b04      	ldr	r3, [pc, #16]	@ (800674c <set_x_pwm+0x48>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	1dba      	adds	r2, r7, #6
 800673e:	2100      	movs	r1, #0
 8006740:	5e52      	ldrsh	r2, [r2, r1]
 8006742:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006744:	46c0      	nop			@ (mov r8, r8)
 8006746:	46bd      	mov	sp, r7
 8006748:	b002      	add	sp, #8
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000874 	.word	0x20000874

08006750 <set_y_pwm>:




void set_y_pwm(int16_t pwm)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	0002      	movs	r2, r0
 8006758:	1dbb      	adds	r3, r7, #6
 800675a:	801a      	strh	r2, [r3, #0]
	// different direction for H-Bridges
	if (isPCB)
 800675c:	23a0      	movs	r3, #160	@ 0xa0
 800675e:	05db      	lsls	r3, r3, #23
 8006760:	2140      	movs	r1, #64	@ 0x40
 8006762:	0018      	movs	r0, r3
 8006764:	f004 f82e 	bl	800a7c4 <HAL_GPIO_ReadPin>
 8006768:	1e03      	subs	r3, r0, #0
 800676a:	d005      	beq.n	8006778 <set_y_pwm+0x28>
		pwm = -pwm;
 800676c:	1dbb      	adds	r3, r7, #6
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	425b      	negs	r3, r3
 8006772:	b29a      	uxth	r2, r3
 8006774:	1dbb      	adds	r3, r7, #6
 8006776:	801a      	strh	r2, [r3, #0]

	pwm += 100;
 8006778:	1dbb      	adds	r3, r7, #6
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	3364      	adds	r3, #100	@ 0x64
 800677e:	b29a      	uxth	r2, r3
 8006780:	1dbb      	adds	r3, r7, #6
 8006782:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8006784:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <set_y_pwm+0x48>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	1dba      	adds	r2, r7, #6
 800678a:	2100      	movs	r1, #0
 800678c:	5e52      	ldrsh	r2, [r2, r1]
 800678e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006790:	46c0      	nop			@ (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	b002      	add	sp, #8
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000874 	.word	0x20000874

0800679c <set_contrast>:

void set_contrast(uint16_t pwm)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	0002      	movs	r2, r0
 80067a4:	1dbb      	adds	r3, r7, #6
 80067a6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, pwm);
 80067a8:	4b04      	ldr	r3, [pc, #16]	@ (80067bc <set_contrast+0x20>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	1dba      	adds	r2, r7, #6
 80067ae:	8812      	ldrh	r2, [r2, #0]
 80067b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80067b2:	46c0      	nop			@ (mov r8, r8)
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b002      	add	sp, #8
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			@ (mov r8, r8)
 80067bc:	20000958 	.word	0x20000958

080067c0 <new_pwm_freq>:

void new_pwm_freq(uint32_t pwm)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	htim3.Instance = TIM3;
 80067c8:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <new_pwm_freq+0x50>)
 80067ca:	4a12      	ldr	r2, [pc, #72]	@ (8006814 <new_pwm_freq+0x54>)
 80067cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = APB_CLK / pwm / 200;
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	4811      	ldr	r0, [pc, #68]	@ (8006818 <new_pwm_freq+0x58>)
 80067d2:	f7fd fda3 	bl	800431c <__udivsi3>
 80067d6:	0003      	movs	r3, r0
 80067d8:	001a      	movs	r2, r3
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <new_pwm_freq+0x50>)
 80067dc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067de:	4b0c      	ldr	r3, [pc, #48]	@ (8006810 <new_pwm_freq+0x50>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 199;
 80067e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006810 <new_pwm_freq+0x50>)
 80067e6:	22c7      	movs	r2, #199	@ 0xc7
 80067e8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067ea:	4b09      	ldr	r3, [pc, #36]	@ (8006810 <new_pwm_freq+0x50>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067f0:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <new_pwm_freq+0x50>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <new_pwm_freq+0x50>)
 80067f8:	0018      	movs	r0, r3
 80067fa:	f006 f9e9 	bl	800cbd0 <HAL_TIM_PWM_Init>
 80067fe:	1e03      	subs	r3, r0, #0
 8006800:	d001      	beq.n	8006806 <new_pwm_freq+0x46>
	{
		Error_Handler();
 8006802:	f7ff f959 	bl	8005ab8 <Error_Handler>
	}

}
 8006806:	46c0      	nop			@ (mov r8, r8)
 8006808:	46bd      	mov	sp, r7
 800680a:	b002      	add	sp, #8
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	20000874 	.word	0x20000874
 8006814:	40000400 	.word	0x40000400
 8006818:	0003a980 	.word	0x0003a980

0800681c <timer_open>:
 * \param -.
 *
 * \return TRUE if successful, FALSE on error.
 */
bool timer_open(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  // Clear the timer allocation table
  memset(timer_alloc_table, 0, MAX_TIMERS / 8);
 8006820:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <timer_open+0x30>)
 8006822:	2204      	movs	r2, #4
 8006824:	2100      	movs	r1, #0
 8006826:	0018      	movs	r0, r3
 8006828:	f008 ff00 	bl	800f62c <memset>

  // Clear the timer active table
  memset(timer_active_table, 0, MAX_TIMERS / 8);
 800682c:	4b08      	ldr	r3, [pc, #32]	@ (8006850 <timer_open+0x34>)
 800682e:	2204      	movs	r2, #4
 8006830:	2100      	movs	r1, #0
 8006832:	0018      	movs	r0, r3
 8006834:	f008 fefa 	bl	800f62c <memset>

  // Clear the timer function pointers
  memset(timer_func, 0, sizeof(timer_func));
 8006838:	4b06      	ldr	r3, [pc, #24]	@ (8006854 <timer_open+0x38>)
 800683a:	2280      	movs	r2, #128	@ 0x80
 800683c:	2100      	movs	r1, #0
 800683e:	0018      	movs	r0, r3
 8006840:	f008 fef4 	bl	800f62c <memset>

  return 1;
 8006844:	2301      	movs	r3, #1
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000a24 	.word	0x20000a24
 8006850:	20000a28 	.word	0x20000a28
 8006854:	20000a2c 	.word	0x20000a2c

08006858 <timer_callback>:
 * \param -.
 *
 * \return -.
 */
void timer_callback(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
  uint8_t timerid;

  // Handle the timers
  for (timerid = 0; timerid < MAX_TIMERS; timerid++)
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	e039      	b.n	80068da <timer_callback+0x82>
  {
    if (timer_active_table[timerid / 8] & (1 << (timerid % 8)))
 8006866:	1dfb      	adds	r3, r7, #7
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	08db      	lsrs	r3, r3, #3
 800686c:	b2db      	uxtb	r3, r3
 800686e:	001a      	movs	r2, r3
 8006870:	4b1e      	ldr	r3, [pc, #120]	@ (80068ec <timer_callback+0x94>)
 8006872:	5c9b      	ldrb	r3, [r3, r2]
 8006874:	0019      	movs	r1, r3
 8006876:	1dfb      	adds	r3, r7, #7
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2207      	movs	r2, #7
 800687c:	4013      	ands	r3, r2
 800687e:	4119      	asrs	r1, r3
 8006880:	000b      	movs	r3, r1
 8006882:	2201      	movs	r2, #1
 8006884:	4013      	ands	r3, r2
 8006886:	d023      	beq.n	80068d0 <timer_callback+0x78>
    {
      if (timer_pool[timerid])
 8006888:	1dfb      	adds	r3, r7, #7
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <timer_callback+0x98>)
 800688e:	0092      	lsls	r2, r2, #2
 8006890:	58d3      	ldr	r3, [r2, r3]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <timer_callback+0x50>
        timer_pool[timerid]--;
 8006896:	1dfb      	adds	r3, r7, #7
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <timer_callback+0x98>)
 800689c:	0099      	lsls	r1, r3, #2
 800689e:	588a      	ldr	r2, [r1, r2]
 80068a0:	1e51      	subs	r1, r2, #1
 80068a2:	4a13      	ldr	r2, [pc, #76]	@ (80068f0 <timer_callback+0x98>)
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	5099      	str	r1, [r3, r2]
      if ((timer_pool[timerid] == 1) && timer_func[timerid])
 80068a8:	1dfb      	adds	r3, r7, #7
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	4b10      	ldr	r3, [pc, #64]	@ (80068f0 <timer_callback+0x98>)
 80068ae:	0092      	lsls	r2, r2, #2
 80068b0:	58d3      	ldr	r3, [r2, r3]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d10c      	bne.n	80068d0 <timer_callback+0x78>
 80068b6:	1dfb      	adds	r3, r7, #7
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	4b0e      	ldr	r3, [pc, #56]	@ (80068f4 <timer_callback+0x9c>)
 80068bc:	0092      	lsls	r2, r2, #2
 80068be:	58d3      	ldr	r3, [r2, r3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <timer_callback+0x78>
        timer_func[timerid]();
 80068c4:	1dfb      	adds	r3, r7, #7
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <timer_callback+0x9c>)
 80068ca:	0092      	lsls	r2, r2, #2
 80068cc:	58d3      	ldr	r3, [r2, r3]
 80068ce:	4798      	blx	r3
  for (timerid = 0; timerid < MAX_TIMERS; timerid++)
 80068d0:	1dfb      	adds	r3, r7, #7
 80068d2:	781a      	ldrb	r2, [r3, #0]
 80068d4:	1dfb      	adds	r3, r7, #7
 80068d6:	3201      	adds	r2, #1
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	1dfb      	adds	r3, r7, #7
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b1f      	cmp	r3, #31
 80068e0:	d9c1      	bls.n	8006866 <timer_callback+0xe>
    }
  }
}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	46c0      	nop			@ (mov r8, r8)
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b002      	add	sp, #8
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000a28 	.word	0x20000a28
 80068f0:	200009a4 	.word	0x200009a4
 80068f4:	20000a2c 	.word	0x20000a2c

080068f8 <timer_get>:
 * \param -.
 *
 * \return A timer id if successful, NO_TIMER on error.
 */
uint8_t timer_get(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  uint8_t i, j, bit;
  uint8_t timerid = NO_TIMER;
 80068fe:	1d3b      	adds	r3, r7, #4
 8006900:	22fa      	movs	r2, #250	@ 0xfa
 8006902:	701a      	strb	r2, [r3, #0]

  // Skip used bytes in the allocation table
  for (i = 0; i < (MAX_TIMERS / 8) && (timer_alloc_table[i] == 0xFF); i++);
 8006904:	1dfb      	adds	r3, r7, #7
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	e004      	b.n	8006916 <timer_get+0x1e>
 800690c:	1dfb      	adds	r3, r7, #7
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	1dfb      	adds	r3, r7, #7
 8006912:	3201      	adds	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	1dfb      	adds	r3, r7, #7
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b03      	cmp	r3, #3
 800691c:	d805      	bhi.n	800692a <timer_get+0x32>
 800691e:	1dfb      	adds	r3, r7, #7
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	4a30      	ldr	r2, [pc, #192]	@ (80069e4 <timer_get+0xec>)
 8006924:	5cd3      	ldrb	r3, [r2, r3]
 8006926:	2bff      	cmp	r3, #255	@ 0xff
 8006928:	d0f0      	beq.n	800690c <timer_get+0x14>

  if (i < (MAX_TIMERS / 8))
 800692a:	1dfb      	adds	r3, r7, #7
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d83f      	bhi.n	80069b2 <timer_get+0xba>
  {
    // Skip used bits in the allocation table
    for (j = 0, bit = 1; j < 8 && (timer_alloc_table[i] & bit); j++, bit <<= 1);
 8006932:	1dbb      	adds	r3, r7, #6
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	1d7b      	adds	r3, r7, #5
 800693a:	2201      	movs	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	e009      	b.n	8006954 <timer_get+0x5c>
 8006940:	1dbb      	adds	r3, r7, #6
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	1dbb      	adds	r3, r7, #6
 8006946:	3201      	adds	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	1d7a      	adds	r2, r7, #5
 800694c:	1d7b      	adds	r3, r7, #5
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	18db      	adds	r3, r3, r3
 8006952:	7013      	strb	r3, [r2, #0]
 8006954:	1dbb      	adds	r3, r7, #6
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b07      	cmp	r3, #7
 800695a:	d809      	bhi.n	8006970 <timer_get+0x78>
 800695c:	1dfb      	adds	r3, r7, #7
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	4a20      	ldr	r2, [pc, #128]	@ (80069e4 <timer_get+0xec>)
 8006962:	5cd3      	ldrb	r3, [r2, r3]
 8006964:	1d7a      	adds	r2, r7, #5
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	4013      	ands	r3, r2
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e7      	bne.n	8006940 <timer_get+0x48>

    // Calculate the timer id
    timerid = (i * 8) + j;
 8006970:	1dfb      	adds	r3, r7, #7
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	b2d9      	uxtb	r1, r3
 8006978:	1d3b      	adds	r3, r7, #4
 800697a:	1dba      	adds	r2, r7, #6
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	188a      	adds	r2, r1, r2
 8006980:	701a      	strb	r2, [r3, #0]

    // Clear the timer value
    timer_pool[timerid] = 0;
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	4b18      	ldr	r3, [pc, #96]	@ (80069e8 <timer_get+0xf0>)
 8006988:	0092      	lsls	r2, r2, #2
 800698a:	2100      	movs	r1, #0
 800698c:	50d1      	str	r1, [r2, r3]

    // Clear the timer callback function pointer
    timer_func[timerid] = 0;
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	4b16      	ldr	r3, [pc, #88]	@ (80069ec <timer_get+0xf4>)
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	2100      	movs	r1, #0
 8006998:	50d1      	str	r1, [r2, r3]

    // Mark the timer as used in the allocation table
    timer_alloc_table[i] |= bit;
 800699a:	1dfb      	adds	r3, r7, #7
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	4a11      	ldr	r2, [pc, #68]	@ (80069e4 <timer_get+0xec>)
 80069a0:	5cd1      	ldrb	r1, [r2, r3]
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	1d7a      	adds	r2, r7, #5
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	b2d1      	uxtb	r1, r2
 80069ae:	4a0d      	ldr	r2, [pc, #52]	@ (80069e4 <timer_get+0xec>)
 80069b0:	54d1      	strb	r1, [r2, r3]
  }

  if (timerid == NO_TIMER)
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2bfa      	cmp	r3, #250	@ 0xfa
 80069b8:	d104      	bne.n	80069c4 <timer_get+0xcc>
	  _Error_Handler(__FILE__,__LINE__);
 80069ba:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <timer_get+0xf8>)
 80069bc:	217d      	movs	r1, #125	@ 0x7d
 80069be:	0018      	movs	r0, r3
 80069c0:	f7ff f83a 	bl	8005a38 <_Error_Handler>

  if (timerid == MAX_TIMERS -1)
 80069c4:	1d3b      	adds	r3, r7, #4
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b1f      	cmp	r3, #31
 80069ca:	d104      	bne.n	80069d6 <timer_get+0xde>
	  tty_printf("\t#Warning: last timer\r\n");
 80069cc:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <timer_get+0xfc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a09      	ldr	r2, [pc, #36]	@ (80069f8 <timer_get+0x100>)
 80069d2:	0010      	movs	r0, r2
 80069d4:	4798      	blx	r3

  return (timerid);
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	781b      	ldrb	r3, [r3, #0]
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b002      	add	sp, #8
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	46c0      	nop			@ (mov r8, r8)
 80069e4:	20000a24 	.word	0x20000a24
 80069e8:	200009a4 	.word	0x200009a4
 80069ec:	20000a2c 	.word	0x20000a2c
 80069f0:	080118e8 	.word	0x080118e8
 80069f4:	20000aac 	.word	0x20000aac
 80069f8:	080118fc 	.word	0x080118fc

080069fc <timer_start>:
 * \param p_fxn A function to be called when the timer is elapsed.
 *
 * \return TRUE if successful, FALSE on error.
 */
bool timer_start(uint8_t timerid, uint32_t value, void *p_fxn)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	210f      	movs	r1, #15
 8006a08:	187b      	adds	r3, r7, r1
 8006a0a:	1c02      	adds	r2, r0, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
  if (timerid < MAX_TIMERS)
 8006a0e:	0008      	movs	r0, r1
 8006a10:	183b      	adds	r3, r7, r0
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b1f      	cmp	r3, #31
 8006a16:	d824      	bhi.n	8006a62 <timer_start+0x66>
  {
    // Set the timer value
    timer_pool[timerid] = value;
 8006a18:	183b      	adds	r3, r7, r0
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	4b13      	ldr	r3, [pc, #76]	@ (8006a6c <timer_start+0x70>)
 8006a1e:	0092      	lsls	r2, r2, #2
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	50d1      	str	r1, [r2, r3]

    // Set the timer callback function pointer
    timer_func[timerid] = (void (*)(void))p_fxn;
 8006a24:	183b      	adds	r3, r7, r0
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	4b11      	ldr	r3, [pc, #68]	@ (8006a70 <timer_start+0x74>)
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	50d1      	str	r1, [r2, r3]

    // Mark timer as active in the allocation table
    timer_active_table[timerid / 8] |= (1 << (timerid % 8));
 8006a30:	0001      	movs	r1, r0
 8006a32:	187b      	adds	r3, r7, r1
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	08db      	lsrs	r3, r3, #3
 8006a38:	b2d8      	uxtb	r0, r3
 8006a3a:	0002      	movs	r2, r0
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <timer_start+0x78>)
 8006a3e:	5c9b      	ldrb	r3, [r3, r2]
 8006a40:	b25a      	sxtb	r2, r3
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2107      	movs	r1, #7
 8006a48:	400b      	ands	r3, r1
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4099      	lsls	r1, r3
 8006a4e:	000b      	movs	r3, r1
 8006a50:	b25b      	sxtb	r3, r3
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	0002      	movs	r2, r0
 8006a58:	b2d9      	uxtb	r1, r3
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <timer_start+0x78>)
 8006a5c:	5499      	strb	r1, [r3, r2]

    return (true);
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <timer_start+0x68>
  }

  return (false);
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b004      	add	sp, #16
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200009a4 	.word	0x200009a4
 8006a70:	20000a2c 	.word	0x20000a2c
 8006a74:	20000a28 	.word	0x20000a28

08006a78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006a7c:	f3bf 8f4f 	dsb	sy
}
 8006a80:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a82:	4b04      	ldr	r3, [pc, #16]	@ (8006a94 <__NVIC_SystemReset+0x1c>)
 8006a84:	4a04      	ldr	r2, [pc, #16]	@ (8006a98 <__NVIC_SystemReset+0x20>)
 8006a86:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a88:	f3bf 8f4f 	dsb	sy
}
 8006a8c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	e7fd      	b.n	8006a8e <__NVIC_SystemReset+0x16>
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	e000ed00 	.word	0xe000ed00
 8006a98:	05fa0004 	.word	0x05fa0004

08006a9c <f_sci1>:
#endif
/*
 * Callback on receiving char
 */
static void f_sci1(sci_cb_args_t *args)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	static uint8_t esc = 0;
#ifdef ENABLE_MODBUS
	static uint8_t tab = 0;
	static bool command_mode = true;
#endif
	volatile uint32_t *ram_key = (uint32_t*) RAM_KEY;
 8006aa4:	2380      	movs	r3, #128	@ 0x80
 8006aa6:	059b      	lsls	r3, r3, #22
 8006aa8:	60fb      	str	r3, [r7, #12]

	if (args->byte == ESC)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	795b      	ldrb	r3, [r3, #5]
 8006aae:	2b1b      	cmp	r3, #27
 8006ab0:	d113      	bne.n	8006ada <f_sci1+0x3e>
	{
		if (esc++ == 10)
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <f_sci1+0x4c>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	b2d1      	uxtb	r1, r2
 8006aba:	4a0b      	ldr	r2, [pc, #44]	@ (8006ae8 <f_sci1+0x4c>)
 8006abc:	7011      	strb	r1, [r2, #0]
 8006abe:	2b0a      	cmp	r3, #10
 8006ac0:	d10e      	bne.n	8006ae0 <f_sci1+0x44>
		{
			esc = 0;
 8006ac2:	4b09      	ldr	r3, [pc, #36]	@ (8006ae8 <f_sci1+0x4c>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
			// set bootloader flag
			*ram_key = WAIT_KEY_1;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <f_sci1+0x50>)
 8006acc:	601a      	str	r2, [r3, #0]
			sci1_puts("To Bootloader..\r\n");
 8006ace:	4b08      	ldr	r3, [pc, #32]	@ (8006af0 <f_sci1+0x54>)
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f000 f84a 	bl	8006b6a <sci1_puts>
			NVIC_SystemReset();
 8006ad6:	f7ff ffcf 	bl	8006a78 <__NVIC_SystemReset>
		}
	}
	else
		esc = 0;
 8006ada:	4b03      	ldr	r3, [pc, #12]	@ (8006ae8 <f_sci1+0x4c>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
		}
	}
	else
		tab = 0;
#endif
}
 8006ae0:	46c0      	nop			@ (mov r8, r8)
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b004      	add	sp, #16
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20001d24 	.word	0x20001d24
 8006aec:	55aa5501 	.word	0x55aa5501
 8006af0:	0801195c 	.word	0x0801195c

08006af4 <init_sci>:

/*
 * Init all usarts
 */
void init_sci(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
#if (SCI_CFG_CH1_INCLUDED)
	sci_init(SCI_CH1, f_sci1);
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <init_sci+0x1c>)
 8006afa:	0019      	movs	r1, r3
 8006afc:	2000      	movs	r0, #0
 8006afe:	f000 f9b1 	bl	8006e64 <sci_init>
#endif
#if (SCI_CFG_CH2_INCLUDED)
	sci_init(SCI_CH2, NULL);
 8006b02:	2100      	movs	r1, #0
 8006b04:	2001      	movs	r0, #1
 8006b06:	f000 f9ad 	bl	8006e64 <sci_init>
#endif
#if (SCI_CFG_CAN_INCLUDED)
	sci_init(SCI_CAN, NULL);
#endif

}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	08006a9d 	.word	0x08006a9d

08006b14 <sci1_callback>:
/*
 * ******************************* SCI-1 *******************************
 */
#if (SCI_CFG_CH1_INCLUDED)
void sci1_callback(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
	isr_handler(&ch1_ctrl);
 8006b18:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <sci1_callback+0x14>)
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f000 f8bc 	bl	8006c98 <isr_handler>
}
 8006b20:	46c0      	nop			@ (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			@ (mov r8, r8)
 8006b28:	2000001c 	.word	0x2000001c

08006b2c <sci1_getch>:
bool sci1_getch(char *c)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	return (sci_getc(SCI_CH1, (uint8_t *) c));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	0019      	movs	r1, r3
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f000 fb05 	bl	8007148 <sci_getc>
 8006b3e:	0003      	movs	r3, r0
}
 8006b40:	0018      	movs	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b002      	add	sp, #8
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <sci1_putc>:
bool sci1_putc(char c)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	0002      	movs	r2, r0
 8006b50:	1dfb      	adds	r3, r7, #7
 8006b52:	701a      	strb	r2, [r3, #0]
	return (sci_putc(SCI_CH1, c));
 8006b54:	1dfb      	adds	r3, r7, #7
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	0019      	movs	r1, r3
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	f000 fa36 	bl	8006fcc <sci_putc>
 8006b60:	0003      	movs	r3, r0
}
 8006b62:	0018      	movs	r0, r3
 8006b64:	46bd      	mov	sp, r7
 8006b66:	b002      	add	sp, #8
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <sci1_puts>:
bool sci1_puts(char *str)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
	return (sci_puts(SCI_CH1, (uint8_t *) str));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0019      	movs	r1, r3
 8006b76:	2000      	movs	r0, #0
 8006b78:	f000 fa8a 	bl	8007090 <sci_puts>
 8006b7c:	0003      	movs	r3, r0
}
 8006b7e:	0018      	movs	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b002      	add	sp, #8
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <sci1_putsn>:
bool sci1_putsn(char *str, uint16_t len)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	000a      	movs	r2, r1
 8006b90:	1cbb      	adds	r3, r7, #2
 8006b92:	801a      	strh	r2, [r3, #0]
	return (sci_putsn(SCI_CH1, (uint8_t *) str, len));
 8006b94:	1cbb      	adds	r3, r7, #2
 8006b96:	881a      	ldrh	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	0019      	movs	r1, r3
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f000 faa1 	bl	80070e4 <sci_putsn>
 8006ba2:	0003      	movs	r3, r0
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b002      	add	sp, #8
 8006baa:	bd80      	pop	{r7, pc}

08006bac <sci1_printf>:
bool sci1_printf(char *format, ...)
{
 8006bac:	b40f      	push	{r0, r1, r2, r3}
 8006bae:	b590      	push	{r4, r7, lr}
 8006bb0:	b0c3      	sub	sp, #268	@ 0x10c
 8006bb2:	af00      	add	r7, sp, #0
	char str[255 + 1];
	va_list args;

	va_start(args, format);
 8006bb4:	238a      	movs	r3, #138	@ 0x8a
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	2108      	movs	r1, #8
 8006bba:	185b      	adds	r3, r3, r1
 8006bbc:	19db      	adds	r3, r3, r7
 8006bbe:	607b      	str	r3, [r7, #4]
	vsnprintf(str, sizeof(str), format, args);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2288      	movs	r2, #136	@ 0x88
 8006bc4:	0052      	lsls	r2, r2, #1
 8006bc6:	1852      	adds	r2, r2, r1
 8006bc8:	19d2      	adds	r2, r2, r7
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	2180      	movs	r1, #128	@ 0x80
 8006bce:	0049      	lsls	r1, r1, #1
 8006bd0:	2408      	movs	r4, #8
 8006bd2:	1938      	adds	r0, r7, r4
 8006bd4:	f008 fc7e 	bl	800f4d4 <vsniprintf>
	va_end(args);

	return (sci_puts(SCI_CH1, (uint8_t *) str));
 8006bd8:	193b      	adds	r3, r7, r4
 8006bda:	0019      	movs	r1, r3
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f000 fa57 	bl	8007090 <sci_puts>
 8006be2:	0003      	movs	r3, r0
}
 8006be4:	0018      	movs	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b043      	add	sp, #268	@ 0x10c
 8006bea:	bc90      	pop	{r4, r7}
 8006bec:	bc08      	pop	{r3}
 8006bee:	b004      	add	sp, #16
 8006bf0:	4718      	bx	r3

08006bf2 <dummy_getch>:
bool dummy_printf(char *format, ...)
{
	return false;
}
bool dummy_getch(char *c)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
	return false;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b002      	add	sp, #8
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <dummy_putsn>:
bool dummy_putsn(char *str, uint16_t len)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	000a      	movs	r2, r1
 8006c0e:	1cbb      	adds	r3, r7, #2
 8006c10:	801a      	strh	r2, [r3, #0]
	return false;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b002      	add	sp, #8
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <dummy_putc>:
bool dummy_putc(char c)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	0002      	movs	r2, r0
 8006c24:	1dfb      	adds	r3, r7, #7
 8006c26:	701a      	strb	r2, [r3, #0]
	return false;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <shell_use_sci1>:
	return false;
}

#if FLEXIBLE_SCI1
void shell_use_sci1(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
	fp.sci_printf = *sci1_printf;
 8006c38:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <shell_use_sci1+0x3c>)
 8006c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006c74 <shell_use_sci1+0x40>)
 8006c3c:	601a      	str	r2, [r3, #0]
	fp.sci_putc = *sci1_putc;
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <shell_use_sci1+0x3c>)
 8006c40:	4a0d      	ldr	r2, [pc, #52]	@ (8006c78 <shell_use_sci1+0x44>)
 8006c42:	605a      	str	r2, [r3, #4]
	fp.sci_puts = *sci1_puts;
 8006c44:	4b0a      	ldr	r3, [pc, #40]	@ (8006c70 <shell_use_sci1+0x3c>)
 8006c46:	4a0d      	ldr	r2, [pc, #52]	@ (8006c7c <shell_use_sci1+0x48>)
 8006c48:	609a      	str	r2, [r3, #8]
	fp.sci_putsn = *sci1_putsn;
 8006c4a:	4b09      	ldr	r3, [pc, #36]	@ (8006c70 <shell_use_sci1+0x3c>)
 8006c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c80 <shell_use_sci1+0x4c>)
 8006c4e:	60da      	str	r2, [r3, #12]
	fp.sci_getch = *sci1_getch;
 8006c50:	4b07      	ldr	r3, [pc, #28]	@ (8006c70 <shell_use_sci1+0x3c>)
 8006c52:	4a0c      	ldr	r2, [pc, #48]	@ (8006c84 <shell_use_sci1+0x50>)
 8006c54:	611a      	str	r2, [r3, #16]

	mp.sci_putc = *dummy_putc;
 8006c56:	4b0c      	ldr	r3, [pc, #48]	@ (8006c88 <shell_use_sci1+0x54>)
 8006c58:	4a0c      	ldr	r2, [pc, #48]	@ (8006c8c <shell_use_sci1+0x58>)
 8006c5a:	605a      	str	r2, [r3, #4]
	mp.sci_getch = *dummy_getch;
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <shell_use_sci1+0x54>)
 8006c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c90 <shell_use_sci1+0x5c>)
 8006c60:	611a      	str	r2, [r3, #16]
	mp.sci_putsn = *dummy_putsn;
 8006c62:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <shell_use_sci1+0x54>)
 8006c64:	4a0b      	ldr	r2, [pc, #44]	@ (8006c94 <shell_use_sci1+0x60>)
 8006c66:	60da      	str	r2, [r3, #12]

}
 8006c68:	46c0      	nop			@ (mov r8, r8)
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	46c0      	nop			@ (mov r8, r8)
 8006c70:	20000aac 	.word	0x20000aac
 8006c74:	08006bad 	.word	0x08006bad
 8006c78:	08006b49 	.word	0x08006b49
 8006c7c:	08006b6b 	.word	0x08006b6b
 8006c80:	08006b87 	.word	0x08006b87
 8006c84:	08006b2d 	.word	0x08006b2d
 8006c88:	20000ac0 	.word	0x20000ac0
 8006c8c:	08006c1d 	.word	0x08006c1d
 8006c90:	08006bf3 	.word	0x08006bf3
 8006c94:	08006c05 	.word	0x08006c05

08006c98 <isr_handler>:
 * \param hdl A handle to the SCI channel.
 *
 * \return -.
 */
static void isr_handler(const sci_hdl_t hdl)
{
 8006c98:	b590      	push	{r4, r7, lr}
 8006c9a:	b08b      	sub	sp, #44	@ 0x2c
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(hdl->handle->Instance->ISR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t cr1its = READ_REG(hdl->handle->Instance->CR1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	623b      	str	r3, [r7, #32]
	uint32_t cr3its = READ_REG(hdl->handle->Instance->CR3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	61fb      	str	r3, [r7, #28]
	uint32_t errorflags = 0x00U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61bb      	str	r3, [r7, #24]

	sci_cb_args_t args;
	uint8_t c;

	/* If no error occurs */
	errorflags = (isrflags & (uint32_t) (USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	220f      	movs	r2, #15
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
	if (errorflags == RESET)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d154      	bne.n	8006d7a <isr_handler+0xe2>
	{
		if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d04a      	beq.n	8006d6e <isr_handler+0xd6>
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d104      	bne.n	8006cea <isr_handler+0x52>
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	055b      	lsls	r3, r3, #21
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	d041      	beq.n	8006d6e <isr_handler+0xd6>
		{
			c = hdl->handle->Instance->RDR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cf2:	2417      	movs	r4, #23
 8006cf4:	193b      	adds	r3, r7, r4
 8006cf6:	701a      	strb	r2, [r3, #0]

			if (hdl->rx_queue->count < hdl->rx_queue->size)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d237      	bcs.n	8006d78 <isr_handler+0xe0>
			{
				hdl->rx_queue->buf[hdl->rx_queue->in_index++] = c;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	1c50      	adds	r0, r2, #1
 8006d16:	60d8      	str	r0, [r3, #12]
 8006d18:	188b      	adds	r3, r1, r2
 8006d1a:	193a      	adds	r2, r7, r4
 8006d1c:	7812      	ldrb	r2, [r2, #0]
 8006d1e:	701a      	strb	r2, [r3, #0]
				if (hdl->rx_queue->in_index >= hdl->rx_queue->size)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d303      	bcc.n	8006d38 <isr_handler+0xa0>
					hdl->rx_queue->in_index = 0;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	60da      	str	r2, [r3, #12]
				hdl->rx_queue->count++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	3201      	adds	r2, #1
 8006d40:	609a      	str	r2, [r3, #8]

				args.event = SCI_EVT_RX_CHAR;
 8006d42:	210c      	movs	r1, #12
 8006d44:	187b      	adds	r3, r7, r1
 8006d46:	2200      	movs	r2, #0
 8006d48:	711a      	strb	r2, [r3, #4]

				if (hdl->callback != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d012      	beq.n	8006d78 <isr_handler+0xe0>
				{
					args.hdl = hdl;
 8006d52:	187b      	adds	r3, r7, r1
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]
					args.byte = c;
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	2217      	movs	r2, #23
 8006d5c:	18ba      	adds	r2, r7, r2
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	715a      	strb	r2, [r3, #5]
					hdl->callback((void*) &args);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	187a      	adds	r2, r7, r1
 8006d68:	0010      	movs	r0, r2
 8006d6a:	4798      	blx	r3
			if (hdl->rx_queue->count < hdl->rx_queue->size)
 8006d6c:	e004      	b.n	8006d78 <isr_handler+0xe0>
				}
			}
		}
		else
		{
			args.event = SCI_EVT_RXBUF_OVFL;
 8006d6e:	230c      	movs	r3, #12
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	2201      	movs	r2, #1
 8006d74:	711a      	strb	r2, [r3, #4]
 8006d76:	e000      	b.n	8006d7a <isr_handler+0xe2>
			if (hdl->rx_queue->count < hdl->rx_queue->size)
 8006d78:	46c0      	nop			@ (mov r8, r8)
		}
	}

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_PE))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2201      	movs	r2, #1
 8006d84:	4013      	ands	r3, r2
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d104      	bne.n	8006d94 <isr_handler+0xfc>
	__HAL_UART_CLEAR_PEFLAG(hdl->handle);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2201      	movs	r2, #1
 8006d92:	621a      	str	r2, [r3, #32]

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_FE))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d104      	bne.n	8006dae <isr_handler+0x116>
	__HAL_UART_CLEAR_FEFLAG(hdl->handle);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2202      	movs	r2, #2
 8006dac:	621a      	str	r2, [r3, #32]

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_NE))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	2204      	movs	r2, #4
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d104      	bne.n	8006dc8 <isr_handler+0x130>
	__HAL_UART_CLEAR_NEFLAG(hdl->handle);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	621a      	str	r2, [r3, #32]

	if (__HAL_UART_GET_FLAG(hdl->handle, UART_FLAG_ORE))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d104      	bne.n	8006de2 <isr_handler+0x14a>
	__HAL_UART_CLEAR_OREFLAG(hdl->handle);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2208      	movs	r2, #8
 8006de0:	621a      	str	r2, [r3, #32]

	if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U) || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	2280      	movs	r2, #128	@ 0x80
 8006de6:	4013      	ands	r3, r2
 8006de8:	d037      	beq.n	8006e5a <isr_handler+0x1c2>
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2280      	movs	r2, #128	@ 0x80
 8006dee:	4013      	ands	r3, r2
 8006df0:	d104      	bne.n	8006dfc <isr_handler+0x164>
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d02e      	beq.n	8006e5a <isr_handler+0x1c2>
	{
		if (hdl->tx_queue->count > 0)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01f      	beq.n	8006e46 <isr_handler+0x1ae>
		{
			hdl->handle->Instance->TDR = hdl->tx_queue->buf[hdl->tx_queue->out_index++];
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	6819      	ldr	r1, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	1c50      	adds	r0, r2, #1
 8006e14:	6118      	str	r0, [r3, #16]
 8006e16:	188b      	adds	r3, r1, r2
 8006e18:	781a      	ldrb	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	629a      	str	r2, [r3, #40]	@ 0x28
			if (hdl->tx_queue->out_index >= hdl->tx_queue->size)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d303      	bcc.n	8006e3a <isr_handler+0x1a2>
				hdl->tx_queue->out_index = 0;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	611a      	str	r2, [r3, #16]
			hdl->tx_queue->count--;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	3a01      	subs	r2, #1
 8006e42:	609a      	str	r2, [r3, #8]
		else
		{
			CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
		}
	}
}
 8006e44:	e009      	b.n	8006e5a <isr_handler+0x1c2>
			CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	438a      	bics	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]
}
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b00b      	add	sp, #44	@ 0x2c
 8006e60:	bd90      	pop	{r4, r7, pc}
	...

08006e64 <sci_init>:
 * \param p_callback Pointer to function called from interrupt.
 *
 * \return True if successful, false on error.
 */
static bool sci_init(sci_ch_t ch, void (*const p_callback)(void *p_args))
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	0002      	movs	r2, r0
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	1dfb      	adds	r3, r7, #7
 8006e70:	701a      	strb	r2, [r3, #0]
	if (ch >= SCI_NUM_CH)
 8006e72:	1dfb      	adds	r3, r7, #7
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b09      	cmp	r3, #9
 8006e78:	d901      	bls.n	8006e7e <sci_init+0x1a>
		return (false);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e094      	b.n	8006fa8 <sci_init+0x144>

	g_handles[ch]->callback = p_callback;
 8006e7e:	1dfb      	adds	r3, r7, #7
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb0 <sci_init+0x14c>)
 8006e84:	0092      	lsls	r2, r2, #2
 8006e86:	58d3      	ldr	r3, [r2, r3]
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	60da      	str	r2, [r3, #12]

	switch (ch)
 8006e8c:	1dfb      	adds	r3, r7, #7
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <sci_init+0x36>
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d02b      	beq.n	8006ef0 <sci_init+0x8c>
		g_handles[ch]->rx_queue->size = SCI_CFG_CAN_RX_BUFSIZ;
		break;
#endif

	default:
		break;
 8006e98:	e055      	b.n	8006f46 <sci_init+0xe2>
		g_handles[ch]->handle->Instance = USART1;
 8006e9a:	1dfb      	adds	r3, r7, #7
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	4b44      	ldr	r3, [pc, #272]	@ (8006fb0 <sci_init+0x14c>)
 8006ea0:	0092      	lsls	r2, r2, #2
 8006ea2:	58d3      	ldr	r3, [r2, r3]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a43      	ldr	r2, [pc, #268]	@ (8006fb4 <sci_init+0x150>)
 8006ea8:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->buf = ch1_tx_buf;
 8006eaa:	1dfb      	adds	r3, r7, #7
 8006eac:	781a      	ldrb	r2, [r3, #0]
 8006eae:	4b40      	ldr	r3, [pc, #256]	@ (8006fb0 <sci_init+0x14c>)
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	58d3      	ldr	r3, [r2, r3]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4a40      	ldr	r2, [pc, #256]	@ (8006fb8 <sci_init+0x154>)
 8006eb8:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->size = SCI_CFG_CH1_TX_BUFSIZ;
 8006eba:	1dfb      	adds	r3, r7, #7
 8006ebc:	781a      	ldrb	r2, [r3, #0]
 8006ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8006fb0 <sci_init+0x14c>)
 8006ec0:	0092      	lsls	r2, r2, #2
 8006ec2:	58d3      	ldr	r3, [r2, r3]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2280      	movs	r2, #128	@ 0x80
 8006ec8:	0112      	lsls	r2, r2, #4
 8006eca:	605a      	str	r2, [r3, #4]
		g_handles[ch]->rx_queue->buf = ch1_rx_buf;
 8006ecc:	1dfb      	adds	r3, r7, #7
 8006ece:	781a      	ldrb	r2, [r3, #0]
 8006ed0:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <sci_init+0x14c>)
 8006ed2:	0092      	lsls	r2, r2, #2
 8006ed4:	58d3      	ldr	r3, [r2, r3]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4a38      	ldr	r2, [pc, #224]	@ (8006fbc <sci_init+0x158>)
 8006eda:	601a      	str	r2, [r3, #0]
		g_handles[ch]->rx_queue->size = SCI_CFG_CH1_RX_BUFSIZ;
 8006edc:	1dfb      	adds	r3, r7, #7
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	4b33      	ldr	r3, [pc, #204]	@ (8006fb0 <sci_init+0x14c>)
 8006ee2:	0092      	lsls	r2, r2, #2
 8006ee4:	58d3      	ldr	r3, [r2, r3]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2280      	movs	r2, #128	@ 0x80
 8006eea:	0052      	lsls	r2, r2, #1
 8006eec:	605a      	str	r2, [r3, #4]
		break;
 8006eee:	e02a      	b.n	8006f46 <sci_init+0xe2>
		g_handles[ch]->handle->Instance = USART2;
 8006ef0:	1dfb      	adds	r3, r7, #7
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8006fb0 <sci_init+0x14c>)
 8006ef6:	0092      	lsls	r2, r2, #2
 8006ef8:	58d3      	ldr	r3, [r2, r3]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a30      	ldr	r2, [pc, #192]	@ (8006fc0 <sci_init+0x15c>)
 8006efe:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->buf = ch2_tx_buf;
 8006f00:	1dfb      	adds	r3, r7, #7
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	4b2a      	ldr	r3, [pc, #168]	@ (8006fb0 <sci_init+0x14c>)
 8006f06:	0092      	lsls	r2, r2, #2
 8006f08:	58d3      	ldr	r3, [r2, r3]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc4 <sci_init+0x160>)
 8006f0e:	601a      	str	r2, [r3, #0]
		g_handles[ch]->tx_queue->size = SCI_CFG_CH2_TX_BUFSIZ;
 8006f10:	1dfb      	adds	r3, r7, #7
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	4b26      	ldr	r3, [pc, #152]	@ (8006fb0 <sci_init+0x14c>)
 8006f16:	0092      	lsls	r2, r2, #2
 8006f18:	58d3      	ldr	r3, [r2, r3]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2280      	movs	r2, #128	@ 0x80
 8006f1e:	0112      	lsls	r2, r2, #4
 8006f20:	605a      	str	r2, [r3, #4]
		g_handles[ch]->rx_queue->buf = ch2_rx_buf;
 8006f22:	1dfb      	adds	r3, r7, #7
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	4b22      	ldr	r3, [pc, #136]	@ (8006fb0 <sci_init+0x14c>)
 8006f28:	0092      	lsls	r2, r2, #2
 8006f2a:	58d3      	ldr	r3, [r2, r3]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	4a26      	ldr	r2, [pc, #152]	@ (8006fc8 <sci_init+0x164>)
 8006f30:	601a      	str	r2, [r3, #0]
		g_handles[ch]->rx_queue->size = SCI_CFG_CH2_RX_BUFSIZ;
 8006f32:	1dfb      	adds	r3, r7, #7
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	4b1e      	ldr	r3, [pc, #120]	@ (8006fb0 <sci_init+0x14c>)
 8006f38:	0092      	lsls	r2, r2, #2
 8006f3a:	58d3      	ldr	r3, [r2, r3]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2280      	movs	r2, #128	@ 0x80
 8006f40:	0052      	lsls	r2, r2, #1
 8006f42:	605a      	str	r2, [r3, #4]
		break;
 8006f44:	46c0      	nop			@ (mov r8, r8)
	}

	g_handles[ch]->tx_queue->count = 0;
 8006f46:	1dfb      	adds	r3, r7, #7
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	4b19      	ldr	r3, [pc, #100]	@ (8006fb0 <sci_init+0x14c>)
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	58d3      	ldr	r3, [r2, r3]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	609a      	str	r2, [r3, #8]
	g_handles[ch]->tx_queue->in_index = 0;
 8006f56:	1dfb      	adds	r3, r7, #7
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	4b15      	ldr	r3, [pc, #84]	@ (8006fb0 <sci_init+0x14c>)
 8006f5c:	0092      	lsls	r2, r2, #2
 8006f5e:	58d3      	ldr	r3, [r2, r3]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	60da      	str	r2, [r3, #12]
	g_handles[ch]->tx_queue->out_index = 0;
 8006f66:	1dfb      	adds	r3, r7, #7
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	4b11      	ldr	r3, [pc, #68]	@ (8006fb0 <sci_init+0x14c>)
 8006f6c:	0092      	lsls	r2, r2, #2
 8006f6e:	58d3      	ldr	r3, [r2, r3]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	611a      	str	r2, [r3, #16]

	g_handles[ch]->rx_queue->count = 0;
 8006f76:	1dfb      	adds	r3, r7, #7
 8006f78:	781a      	ldrb	r2, [r3, #0]
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <sci_init+0x14c>)
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	58d3      	ldr	r3, [r2, r3]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	609a      	str	r2, [r3, #8]
	g_handles[ch]->rx_queue->in_index = 0;
 8006f86:	1dfb      	adds	r3, r7, #7
 8006f88:	781a      	ldrb	r2, [r3, #0]
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <sci_init+0x14c>)
 8006f8c:	0092      	lsls	r2, r2, #2
 8006f8e:	58d3      	ldr	r3, [r2, r3]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
	g_handles[ch]->rx_queue->out_index = 0;
 8006f96:	1dfb      	adds	r3, r7, #7
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	4b05      	ldr	r3, [pc, #20]	@ (8006fb0 <sci_init+0x14c>)
 8006f9c:	0092      	lsls	r2, r2, #2
 8006f9e:	58d3      	ldr	r3, [r2, r3]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	611a      	str	r2, [r3, #16]

	return (true);
 8006fa6:	2301      	movs	r3, #1
}
 8006fa8:	0018      	movs	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	b002      	add	sp, #8
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	08011aec 	.word	0x08011aec
 8006fb4:	40013800 	.word	0x40013800
 8006fb8:	20000ad4 	.word	0x20000ad4
 8006fbc:	200012d4 	.word	0x200012d4
 8006fc0:	40004400 	.word	0x40004400
 8006fc4:	200013fc 	.word	0x200013fc
 8006fc8:	20001bfc 	.word	0x20001bfc

08006fcc <sci_putc>:
 * \param c Character to write.
 *
 * \return True if successful, false on error.
 */
static bool sci_putc(sci_ch_t ch, uint8_t c)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	0002      	movs	r2, r0
 8006fd4:	1dfb      	adds	r3, r7, #7
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	1dbb      	adds	r3, r7, #6
 8006fda:	1c0a      	adds	r2, r1, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
	sci_hdl_t hdl = g_handles[ch];
 8006fde:	1dfb      	adds	r3, r7, #7
 8006fe0:	781a      	ldrb	r2, [r3, #0]
 8006fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800708c <sci_putc+0xc0>)
 8006fe4:	0092      	lsls	r2, r2, #2
 8006fe6:	58d3      	ldr	r3, [r2, r3]
 8006fe8:	60fb      	str	r3, [r7, #12]

	CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_TX_EN);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2180      	movs	r1, #128	@ 0x80
 8006ffa:	438a      	bics	r2, r1
 8006ffc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ffe:	f3bf 8f4f 	dsb	sy
}
 8007002:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007004:	f3bf 8f6f 	isb	sy
}
 8007008:	46c0      	nop			@ (mov r8, r8)
	__DSB();
	__ISB();

	if (hdl->tx_queue->count < hdl->tx_queue->size)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d228      	bcs.n	800706c <sci_putc+0xa0>
	{
		hdl->tx_queue->buf[hdl->tx_queue->in_index++] = c;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	1c50      	adds	r0, r2, #1
 8007028:	60d8      	str	r0, [r3, #12]
 800702a:	188b      	adds	r3, r1, r2
 800702c:	1dba      	adds	r2, r7, #6
 800702e:	7812      	ldrb	r2, [r2, #0]
 8007030:	701a      	strb	r2, [r3, #0]
		if (hdl->tx_queue->in_index >= hdl->tx_queue->size)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	429a      	cmp	r2, r3
 8007040:	d303      	bcc.n	800704a <sci_putc+0x7e>
			hdl->tx_queue->in_index = 0;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	60da      	str	r2, [r3, #12]
		hdl->tx_queue->count++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	3201      	adds	r2, #1
 8007052:	609a      	str	r2, [r3, #8]

		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_TX_EN);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2180      	movs	r1, #128	@ 0x80
 8007064:	430a      	orrs	r2, r1
 8007066:	601a      	str	r2, [r3, #0]

		return (true);
 8007068:	2301      	movs	r3, #1
 800706a:	e00a      	b.n	8007082 <sci_putc+0xb6>
	}
	else
		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_TX_EN);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2180      	movs	r1, #128	@ 0x80
 800707c:	430a      	orrs	r2, r1
 800707e:	601a      	str	r2, [r3, #0]

	return (false);
 8007080:	2300      	movs	r3, #0
}
 8007082:	0018      	movs	r0, r3
 8007084:	46bd      	mov	sp, r7
 8007086:	b004      	add	sp, #16
 8007088:	bd80      	pop	{r7, pc}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	08011aec 	.word	0x08011aec

08007090 <sci_puts>:
 * \param str Pointer to the character string to write.
 *
 * \return True if successful, false on error.
 */
static bool sci_puts(sci_ch_t ch, uint8_t *str)
{
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	0002      	movs	r2, r0
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	1dfb      	adds	r3, r7, #7
 800709c:	701a      	strb	r2, [r3, #0]
	bool err = true;
 800709e:	230f      	movs	r3, #15
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	2201      	movs	r2, #1
 80070a4:	701a      	strb	r2, [r3, #0]

	while (*str && err)
 80070a6:	e00d      	b.n	80070c4 <sci_puts+0x34>
		err = sci_putc(ch, *str++);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	603a      	str	r2, [r7, #0]
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	230f      	movs	r3, #15
 80070b2:	18fc      	adds	r4, r7, r3
 80070b4:	1dfb      	adds	r3, r7, #7
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	0011      	movs	r1, r2
 80070ba:	0018      	movs	r0, r3
 80070bc:	f7ff ff86 	bl	8006fcc <sci_putc>
 80070c0:	0003      	movs	r3, r0
 80070c2:	7023      	strb	r3, [r4, #0]
	while (*str && err)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <sci_puts+0x46>
 80070cc:	230f      	movs	r3, #15
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e8      	bne.n	80070a8 <sci_puts+0x18>

	return (err);
 80070d6:	230f      	movs	r3, #15
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	781b      	ldrb	r3, [r3, #0]
}
 80070dc:	0018      	movs	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	b005      	add	sp, #20
 80070e2:	bd90      	pop	{r4, r7, pc}

080070e4 <sci_putsn>:
 * \param len Length of the character string to write.
 *
 * \return True if successful, false on error.
 */
static bool sci_putsn(sci_ch_t ch, uint8_t *str, uint16_t len)
{
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6039      	str	r1, [r7, #0]
 80070ec:	0011      	movs	r1, r2
 80070ee:	1dfb      	adds	r3, r7, #7
 80070f0:	1c02      	adds	r2, r0, #0
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	1d3b      	adds	r3, r7, #4
 80070f6:	1c0a      	adds	r2, r1, #0
 80070f8:	801a      	strh	r2, [r3, #0]
	bool err = true;
 80070fa:	230f      	movs	r3, #15
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	2201      	movs	r2, #1
 8007100:	701a      	strb	r2, [r3, #0]

	while (len-- && err)
 8007102:	e00d      	b.n	8007120 <sci_putsn+0x3c>
		err = sci_putc(ch, *str++);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	603a      	str	r2, [r7, #0]
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	230f      	movs	r3, #15
 800710e:	18fc      	adds	r4, r7, r3
 8007110:	1dfb      	adds	r3, r7, #7
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	0011      	movs	r1, r2
 8007116:	0018      	movs	r0, r3
 8007118:	f7ff ff58 	bl	8006fcc <sci_putc>
 800711c:	0003      	movs	r3, r0
 800711e:	7023      	strb	r3, [r4, #0]
	while (len-- && err)
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	1d3a      	adds	r2, r7, #4
 8007126:	1e59      	subs	r1, r3, #1
 8007128:	8011      	strh	r1, [r2, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d004      	beq.n	8007138 <sci_putsn+0x54>
 800712e:	230f      	movs	r3, #15
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e5      	bne.n	8007104 <sci_putsn+0x20>

	return (err);
 8007138:	230f      	movs	r3, #15
 800713a:	18fb      	adds	r3, r7, r3
 800713c:	781b      	ldrb	r3, [r3, #0]
}
 800713e:	0018      	movs	r0, r3
 8007140:	46bd      	mov	sp, r7
 8007142:	b005      	add	sp, #20
 8007144:	bd90      	pop	{r4, r7, pc}
	...

08007148 <sci_getc>:
 * \param c Pointer to the character read.
 *
 * \return True if successful, false on error.
 */
static bool sci_getc(sci_ch_t ch, uint8_t *c)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	0002      	movs	r2, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	1dfb      	adds	r3, r7, #7
 8007154:	701a      	strb	r2, [r3, #0]
	sci_hdl_t hdl = g_handles[ch];
 8007156:	1dfb      	adds	r3, r7, #7
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	4b28      	ldr	r3, [pc, #160]	@ (80071fc <sci_getc+0xb4>)
 800715c:	0092      	lsls	r2, r2, #2
 800715e:	58d3      	ldr	r3, [r2, r3]
 8007160:	60fb      	str	r3, [r7, #12]

	CLEAR_BIT(hdl->handle->Instance->CR1, USART_CR1_RX_EN);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2120      	movs	r1, #32
 8007172:	438a      	bics	r2, r1
 8007174:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8007176:	f3bf 8f4f 	dsb	sy
}
 800717a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800717c:	f3bf 8f6f 	isb	sy
}
 8007180:	46c0      	nop			@ (mov r8, r8)
	__DSB();
	__ISB();

	if (hdl->rx_queue->count > 0)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d028      	beq.n	80071de <sci_getc+0x96>
	{
		*c = hdl->rx_queue->buf[hdl->rx_queue->out_index++];
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	6819      	ldr	r1, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	1c50      	adds	r0, r2, #1
 800719a:	6118      	str	r0, [r3, #16]
 800719c:	188b      	adds	r3, r1, r2
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	701a      	strb	r2, [r3, #0]
		if (hdl->rx_queue->out_index >= hdl->rx_queue->size)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	691a      	ldr	r2, [r3, #16]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d303      	bcc.n	80071bc <sci_getc+0x74>
			hdl->rx_queue->out_index = 0;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2200      	movs	r2, #0
 80071ba:	611a      	str	r2, [r3, #16]
		hdl->rx_queue->count--;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	3a01      	subs	r2, #1
 80071c4:	609a      	str	r2, [r3, #8]

		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_RX_EN);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2120      	movs	r1, #32
 80071d6:	430a      	orrs	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]

		return (true);
 80071da:	2301      	movs	r3, #1
 80071dc:	e00a      	b.n	80071f4 <sci_getc+0xac>
	}
	else
		SET_BIT(hdl->handle->Instance->CR1, USART_CR1_RX_EN);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2120      	movs	r1, #32
 80071ee:	430a      	orrs	r2, r1
 80071f0:	601a      	str	r2, [r3, #0]

	return (false);
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	0018      	movs	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b004      	add	sp, #16
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	08011aec 	.word	0x08011aec

08007200 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007204:	4b23      	ldr	r3, [pc, #140]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 8007206:	4a24      	ldr	r2, [pc, #144]	@ (8007298 <MX_USART1_UART_Init+0x98>)
 8007208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800720a:	4b22      	ldr	r3, [pc, #136]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800720c:	22e1      	movs	r2, #225	@ 0xe1
 800720e:	0252      	lsls	r2, r2, #9
 8007210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007212:	4b20      	ldr	r3, [pc, #128]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 8007214:	2200      	movs	r2, #0
 8007216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007218:	4b1e      	ldr	r3, [pc, #120]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800721a:	2200      	movs	r2, #0
 800721c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800721e:	4b1d      	ldr	r3, [pc, #116]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 8007220:	2200      	movs	r2, #0
 8007222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007224:	4b1b      	ldr	r3, [pc, #108]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 8007226:	220c      	movs	r2, #12
 8007228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800722a:	4b1a      	ldr	r3, [pc, #104]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800722c:	2200      	movs	r2, #0
 800722e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007230:	4b18      	ldr	r3, [pc, #96]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 8007232:	2200      	movs	r2, #0
 8007234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007236:	4b17      	ldr	r3, [pc, #92]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 8007238:	2200      	movs	r2, #0
 800723a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800723c:	4b15      	ldr	r3, [pc, #84]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800723e:	2200      	movs	r2, #0
 8007240:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 8007244:	2200      	movs	r2, #0
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007248:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800724a:	0018      	movs	r0, r3
 800724c:	f006 fc46 	bl	800dadc <HAL_UART_Init>
 8007250:	1e03      	subs	r3, r0, #0
 8007252:	d001      	beq.n	8007258 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007254:	f7fe fc30 	bl	8005ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007258:	4b0e      	ldr	r3, [pc, #56]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800725a:	2100      	movs	r1, #0
 800725c:	0018      	movs	r0, r3
 800725e:	f007 fdf5 	bl	800ee4c <HAL_UARTEx_SetTxFifoThreshold>
 8007262:	1e03      	subs	r3, r0, #0
 8007264:	d001      	beq.n	800726a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007266:	f7fe fc27 	bl	8005ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800726a:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800726c:	2100      	movs	r1, #0
 800726e:	0018      	movs	r0, r3
 8007270:	f007 fe2c 	bl	800eecc <HAL_UARTEx_SetRxFifoThreshold>
 8007274:	1e03      	subs	r3, r0, #0
 8007276:	d001      	beq.n	800727c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007278:	f7fe fc1e 	bl	8005ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800727c:	4b05      	ldr	r3, [pc, #20]	@ (8007294 <MX_USART1_UART_Init+0x94>)
 800727e:	0018      	movs	r0, r3
 8007280:	f007 fdaa 	bl	800edd8 <HAL_UARTEx_DisableFifoMode>
 8007284:	1e03      	subs	r3, r0, #0
 8007286:	d001      	beq.n	800728c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007288:	f7fe fc16 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800728c:	46c0      	nop			@ (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	46c0      	nop			@ (mov r8, r8)
 8007294:	20001d28 	.word	0x20001d28
 8007298:	40013800 	.word	0x40013800

0800729c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80072a0:	4b23      	ldr	r3, [pc, #140]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072a2:	4a24      	ldr	r2, [pc, #144]	@ (8007334 <MX_USART2_UART_Init+0x98>)
 80072a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80072a6:	4b22      	ldr	r3, [pc, #136]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072a8:	2296      	movs	r2, #150	@ 0x96
 80072aa:	0192      	lsls	r2, r2, #6
 80072ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80072ae:	4b20      	ldr	r3, [pc, #128]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80072b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80072ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072bc:	2200      	movs	r2, #0
 80072be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80072c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072c2:	220c      	movs	r2, #12
 80072c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80072cc:	4b18      	ldr	r3, [pc, #96]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80072d2:	4b17      	ldr	r3, [pc, #92]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80072d8:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072da:	2200      	movs	r2, #0
 80072dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80072de:	4b14      	ldr	r3, [pc, #80]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80072e4:	4b12      	ldr	r3, [pc, #72]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072e6:	0018      	movs	r0, r3
 80072e8:	f006 fbf8 	bl	800dadc <HAL_UART_Init>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d001      	beq.n	80072f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80072f0:	f7fe fbe2 	bl	8005ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80072f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 80072f6:	2100      	movs	r1, #0
 80072f8:	0018      	movs	r0, r3
 80072fa:	f007 fda7 	bl	800ee4c <HAL_UARTEx_SetTxFifoThreshold>
 80072fe:	1e03      	subs	r3, r0, #0
 8007300:	d001      	beq.n	8007306 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8007302:	f7fe fbd9 	bl	8005ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007306:	4b0a      	ldr	r3, [pc, #40]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 8007308:	2100      	movs	r1, #0
 800730a:	0018      	movs	r0, r3
 800730c:	f007 fdde 	bl	800eecc <HAL_UARTEx_SetRxFifoThreshold>
 8007310:	1e03      	subs	r3, r0, #0
 8007312:	d001      	beq.n	8007318 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8007314:	f7fe fbd0 	bl	8005ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007318:	4b05      	ldr	r3, [pc, #20]	@ (8007330 <MX_USART2_UART_Init+0x94>)
 800731a:	0018      	movs	r0, r3
 800731c:	f007 fd5c 	bl	800edd8 <HAL_UARTEx_DisableFifoMode>
 8007320:	1e03      	subs	r3, r0, #0
 8007322:	d001      	beq.n	8007328 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8007324:	f7fe fbc8 	bl	8005ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007328:	46c0      	nop			@ (mov r8, r8)
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	46c0      	nop			@ (mov r8, r8)
 8007330:	20001dbc 	.word	0x20001dbc
 8007334:	40004400 	.word	0x40004400

08007338 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007338:	b590      	push	{r4, r7, lr}
 800733a:	b09f      	sub	sp, #124	@ 0x7c
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007340:	2364      	movs	r3, #100	@ 0x64
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	0018      	movs	r0, r3
 8007346:	2314      	movs	r3, #20
 8007348:	001a      	movs	r2, r3
 800734a:	2100      	movs	r1, #0
 800734c:	f008 f96e 	bl	800f62c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007350:	2418      	movs	r4, #24
 8007352:	193b      	adds	r3, r7, r4
 8007354:	0018      	movs	r0, r3
 8007356:	234c      	movs	r3, #76	@ 0x4c
 8007358:	001a      	movs	r2, r3
 800735a:	2100      	movs	r1, #0
 800735c:	f008 f966 	bl	800f62c <memset>
  if(uartHandle->Instance==USART1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a4e      	ldr	r2, [pc, #312]	@ (80074a0 <HAL_UART_MspInit+0x168>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d148      	bne.n	80073fc <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800736a:	193b      	adds	r3, r7, r4
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007370:	193b      	adds	r3, r7, r4
 8007372:	2200      	movs	r2, #0
 8007374:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007376:	193b      	adds	r3, r7, r4
 8007378:	0018      	movs	r0, r3
 800737a:	f004 ffe5 	bl	800c348 <HAL_RCCEx_PeriphCLKConfig>
 800737e:	1e03      	subs	r3, r0, #0
 8007380:	d001      	beq.n	8007386 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007382:	f7fe fb99 	bl	8005ab8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007386:	4b47      	ldr	r3, [pc, #284]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 8007388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800738a:	4b46      	ldr	r3, [pc, #280]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 800738c:	2180      	movs	r1, #128	@ 0x80
 800738e:	01c9      	lsls	r1, r1, #7
 8007390:	430a      	orrs	r2, r1
 8007392:	641a      	str	r2, [r3, #64]	@ 0x40
 8007394:	4b43      	ldr	r3, [pc, #268]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 8007396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007398:	2380      	movs	r3, #128	@ 0x80
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	4013      	ands	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073a2:	4b40      	ldr	r3, [pc, #256]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 80073a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073a6:	4b3f      	ldr	r3, [pc, #252]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 80073a8:	2101      	movs	r1, #1
 80073aa:	430a      	orrs	r2, r1
 80073ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80073ae:	4b3d      	ldr	r3, [pc, #244]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 80073b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b2:	2201      	movs	r2, #1
 80073b4:	4013      	ands	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80073ba:	2164      	movs	r1, #100	@ 0x64
 80073bc:	187b      	adds	r3, r7, r1
 80073be:	22c0      	movs	r2, #192	@ 0xc0
 80073c0:	00d2      	lsls	r2, r2, #3
 80073c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c4:	187b      	adds	r3, r7, r1
 80073c6:	2202      	movs	r2, #2
 80073c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ca:	187b      	adds	r3, r7, r1
 80073cc:	2200      	movs	r2, #0
 80073ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d0:	187b      	adds	r3, r7, r1
 80073d2:	2200      	movs	r2, #0
 80073d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80073d6:	187b      	adds	r3, r7, r1
 80073d8:	2201      	movs	r2, #1
 80073da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073dc:	187a      	adds	r2, r7, r1
 80073de:	23a0      	movs	r3, #160	@ 0xa0
 80073e0:	05db      	lsls	r3, r3, #23
 80073e2:	0011      	movs	r1, r2
 80073e4:	0018      	movs	r0, r3
 80073e6:	f003 f881 	bl	800a4ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80073ea:	2200      	movs	r2, #0
 80073ec:	2101      	movs	r1, #1
 80073ee:	201b      	movs	r0, #27
 80073f0:	f001 fa2c 	bl	800884c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80073f4:	201b      	movs	r0, #27
 80073f6:	f001 fa3e 	bl	8008876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80073fa:	e04c      	b.n	8007496 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a29      	ldr	r2, [pc, #164]	@ (80074a8 <HAL_UART_MspInit+0x170>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d147      	bne.n	8007496 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007406:	2118      	movs	r1, #24
 8007408:	187b      	adds	r3, r7, r1
 800740a:	2202      	movs	r2, #2
 800740c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800740e:	187b      	adds	r3, r7, r1
 8007410:	2200      	movs	r2, #0
 8007412:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007414:	187b      	adds	r3, r7, r1
 8007416:	0018      	movs	r0, r3
 8007418:	f004 ff96 	bl	800c348 <HAL_RCCEx_PeriphCLKConfig>
 800741c:	1e03      	subs	r3, r0, #0
 800741e:	d001      	beq.n	8007424 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8007420:	f7fe fb4a 	bl	8005ab8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007424:	4b1f      	ldr	r3, [pc, #124]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 8007426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007428:	4b1e      	ldr	r3, [pc, #120]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 800742a:	2180      	movs	r1, #128	@ 0x80
 800742c:	0289      	lsls	r1, r1, #10
 800742e:	430a      	orrs	r2, r1
 8007430:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007432:	4b1c      	ldr	r3, [pc, #112]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 8007434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	029b      	lsls	r3, r3, #10
 800743a:	4013      	ands	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007440:	4b18      	ldr	r3, [pc, #96]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 8007442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007444:	4b17      	ldr	r3, [pc, #92]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 8007446:	2101      	movs	r1, #1
 8007448:	430a      	orrs	r2, r1
 800744a:	635a      	str	r2, [r3, #52]	@ 0x34
 800744c:	4b15      	ldr	r3, [pc, #84]	@ (80074a4 <HAL_UART_MspInit+0x16c>)
 800744e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007450:	2201      	movs	r2, #1
 8007452:	4013      	ands	r3, r2
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007458:	2164      	movs	r1, #100	@ 0x64
 800745a:	187b      	adds	r3, r7, r1
 800745c:	220c      	movs	r2, #12
 800745e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007460:	187b      	adds	r3, r7, r1
 8007462:	2202      	movs	r2, #2
 8007464:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007466:	187b      	adds	r3, r7, r1
 8007468:	2200      	movs	r2, #0
 800746a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800746c:	187b      	adds	r3, r7, r1
 800746e:	2200      	movs	r2, #0
 8007470:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007472:	187b      	adds	r3, r7, r1
 8007474:	2201      	movs	r2, #1
 8007476:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007478:	187a      	adds	r2, r7, r1
 800747a:	23a0      	movs	r3, #160	@ 0xa0
 800747c:	05db      	lsls	r3, r3, #23
 800747e:	0011      	movs	r1, r2
 8007480:	0018      	movs	r0, r3
 8007482:	f003 f833 	bl	800a4ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	201c      	movs	r0, #28
 800748c:	f001 f9de 	bl	800884c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8007490:	201c      	movs	r0, #28
 8007492:	f001 f9f0 	bl	8008876 <HAL_NVIC_EnableIRQ>
}
 8007496:	46c0      	nop			@ (mov r8, r8)
 8007498:	46bd      	mov	sp, r7
 800749a:	b01f      	add	sp, #124	@ 0x7c
 800749c:	bd90      	pop	{r4, r7, pc}
 800749e:	46c0      	nop			@ (mov r8, r8)
 80074a0:	40013800 	.word	0x40013800
 80074a4:	40021000 	.word	0x40021000
 80074a8:	40004400 	.word	0x40004400

080074ac <factory>:
 * \param poinyer to flashvars
 *
 * \return -.
 */
void factory(hw_info_t * hwinfo)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	uint32_t remember_stm_serial = hwinfo->stm_serial;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	60fb      	str	r3, [r7, #12]

	// Clear STM32 Flash parameters
	memset(hwinfo, 0x00, sizeof(hw_info_t));
 80074ba:	23ac      	movs	r3, #172	@ 0xac
 80074bc:	005a      	lsls	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2100      	movs	r1, #0
 80074c2:	0018      	movs	r0, r3
 80074c4:	f008 f8b2 	bl	800f62c <memset>

	// set back the serial
	hwinfo->stm_serial = remember_stm_serial;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	609a      	str	r2, [r3, #8]

	hwinfo->hysteresis.x = 5;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	22f8      	movs	r2, #248	@ 0xf8
 80074d2:	2105      	movs	r1, #5
 80074d4:	5099      	str	r1, [r3, r2]
	hwinfo->hysteresis.y = 5;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	22fc      	movs	r2, #252	@ 0xfc
 80074da:	2105      	movs	r1, #5
 80074dc:	5099      	str	r1, [r3, r2]
	hwinfo->pid.repeat_ms = 5;
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	2105      	movs	r1, #5
 80074e6:	52d1      	strh	r1, [r2, r3]
	hwinfo->pid.i = 40;		// ms
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	2381      	movs	r3, #129	@ 0x81
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	2128      	movs	r1, #40	@ 0x28
 80074f0:	52d1      	strh	r1, [r2, r3]
	hwinfo->pid.p = 1000;	// 1000 = 1.000
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	2382      	movs	r3, #130	@ 0x82
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	21fa      	movs	r1, #250	@ 0xfa
 80074fa:	0089      	lsls	r1, r1, #2
 80074fc:	52d1      	strh	r1, [r2, r3]
	hwinfo->pid.d = 0;		// not used
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	2383      	movs	r3, #131	@ 0x83
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	2100      	movs	r1, #0
 8007506:	52d1      	strh	r1, [r2, r3]

	hwinfo->pid.softstart = 500; // ms
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	2384      	movs	r3, #132	@ 0x84
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	21fa      	movs	r1, #250	@ 0xfa
 8007510:	0049      	lsls	r1, r1, #1
 8007512:	52d1      	strh	r1, [r2, r3]

	hwinfo->debounce = 3000; // 3 seconds of ignore remote and end switch
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	2385      	movs	r3, #133	@ 0x85
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	492c      	ldr	r1, [pc, #176]	@ (80075cc <factory+0x120>)
 800751c:	52d1      	strh	r1, [r2, r3]
	hwinfo->steps.x = 156;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	22f0      	movs	r2, #240	@ 0xf0
 8007522:	219c      	movs	r1, #156	@ 0x9c
 8007524:	5099      	str	r1, [r3, r2]
	hwinfo->steps.y = 156;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	22f4      	movs	r2, #244	@ 0xf4
 800752a:	219c      	movs	r1, #156	@ 0x9c
 800752c:	5099      	str	r1, [r3, r2]
	hwinfo->pwmfreq = 15000;
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	238e      	movs	r3, #142	@ 0x8e
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	4926      	ldr	r1, [pc, #152]	@ (80075d0 <factory+0x124>)
 8007536:	50d1      	str	r1, [r2, r3]
	hwinfo->turnback = 10;
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	2392      	movs	r3, #146	@ 0x92
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	210a      	movs	r1, #10
 8007540:	50d1      	str	r1, [r2, r3]

	// parkposition should not be 0
	hwinfo->parkposition.x = 10 * hwinfo->steps.x;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	22f0      	movs	r2, #240	@ 0xf0
 8007546:	589a      	ldr	r2, [r3, r2]
 8007548:	0013      	movs	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	189b      	adds	r3, r3, r2
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	001a      	movs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	629a      	str	r2, [r3, #40]	@ 0x28
	hwinfo->parkposition.y = 10 * hwinfo->steps.y;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	22f4      	movs	r2, #244	@ 0xf4
 800755a:	589a      	ldr	r2, [r3, r2]
 800755c:	0013      	movs	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	189b      	adds	r3, r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	001a      	movs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	62da      	str	r2, [r3, #44]	@ 0x2c

	hwinfo->max_pwm = 50;
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	238a      	movs	r3, #138	@ 0x8a
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	2132      	movs	r1, #50	@ 0x32
 8007572:	50d1      	str	r1, [r2, r3]
	hwinfo->min_pwm = 10;
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	2388      	movs	r3, #136	@ 0x88
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	210a      	movs	r1, #10
 800757c:	50d1      	str	r1, [r2, r3]
	hwinfo->maximum.x = DEFAULT_MAX;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	22fa      	movs	r2, #250	@ 0xfa
 8007582:	00d2      	lsls	r2, r2, #3
 8007584:	621a      	str	r2, [r3, #32]
	hwinfo->maximum.y = DEFAULT_MAX;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	22fa      	movs	r2, #250	@ 0xfa
 800758a:	00d2      	lsls	r2, r2, #3
 800758c:	625a      	str	r2, [r3, #36]	@ 0x24
	hwinfo->contrast = 30;
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	2390      	movs	r3, #144	@ 0x90
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	211e      	movs	r1, #30
 8007596:	54d1      	strb	r1, [r2, r3]
	hwinfo->track_interval = 10; // seconds
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	2391      	movs	r3, #145	@ 0x91
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	210a      	movs	r1, #10
 80075a0:	52d1      	strh	r1, [r2, r3]
	hwinfo->max_windpulse = 0x00; // no maxwind
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	238c      	movs	r3, #140	@ 0x8c
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	2100      	movs	r1, #0
 80075aa:	50d1      	str	r1, [r2, r3]
	hwinfo->sun_down_angle = 0;
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	2386      	movs	r3, #134	@ 0x86
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	2100      	movs	r1, #0
 80075b4:	52d1      	strh	r1, [r2, r3]

	// copy to real location
	WriteStruct2Flash(hwinfo, sizeof(hw_info_t));
 80075b6:	23ac      	movs	r3, #172	@ 0xac
 80075b8:	005a      	lsls	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	0011      	movs	r1, r2
 80075be:	0018      	movs	r0, r3
 80075c0:	f7fd fe7a 	bl	80052b8 <WriteStruct2Flash>
}
 80075c4:	46c0      	nop			@ (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	b004      	add	sp, #16
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	00000bb8 	.word	0x00000bb8
 80075d0:	00003a98 	.word	0x00003a98

080075d4 <init_vars>:
 * \param pointer data
 *
 * \return -.
 */
void init_vars(void)
{
 80075d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d6:	b0bb      	sub	sp, #236	@ 0xec
 80075d8:	af08      	add	r7, sp, #32
	vars.error_status = ERR_NONE;
 80075da:	4a7d      	ldr	r2, [pc, #500]	@ (80077d0 <init_vars+0x1fc>)
 80075dc:	23da      	movs	r3, #218	@ 0xda
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	2100      	movs	r1, #0
 80075e2:	50d1      	str	r1, [r2, r3]
	vars.out_of_range = false;
 80075e4:	4a7a      	ldr	r2, [pc, #488]	@ (80077d0 <init_vars+0x1fc>)
 80075e6:	23ba      	movs	r3, #186	@ 0xba
 80075e8:	33ff      	adds	r3, #255	@ 0xff
 80075ea:	2100      	movs	r1, #0
 80075ec:	54d1      	strb	r1, [r2, r3]
	vars.about_to_save = TG_NONE;
 80075ee:	4b78      	ldr	r3, [pc, #480]	@ (80077d0 <init_vars+0x1fc>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	751a      	strb	r2, [r3, #20]

	vars.screen_tmr = NO_TIMER;
 80075f4:	4a76      	ldr	r2, [pc, #472]	@ (80077d0 <init_vars+0x1fc>)
 80075f6:	23bc      	movs	r3, #188	@ 0xbc
 80075f8:	33ff      	adds	r3, #255	@ 0xff
 80075fa:	21fa      	movs	r1, #250	@ 0xfa
 80075fc:	54d1      	strb	r1, [r2, r3]
	vars.tracking_tmr = NO_TIMER;
 80075fe:	4a74      	ldr	r2, [pc, #464]	@ (80077d0 <init_vars+0x1fc>)
 8007600:	23de      	movs	r3, #222	@ 0xde
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	21fa      	movs	r1, #250	@ 0xfa
 8007606:	54d1      	strb	r1, [r2, r3]
	vars.calc_sun_tmr = NO_TIMER;
 8007608:	4a71      	ldr	r2, [pc, #452]	@ (80077d0 <init_vars+0x1fc>)
 800760a:	23be      	movs	r3, #190	@ 0xbe
 800760c:	33ff      	adds	r3, #255	@ 0xff
 800760e:	21fa      	movs	r1, #250	@ 0xfa
 8007610:	54d1      	strb	r1, [r2, r3]
	vars.lastrx_ayct102_home = 0;
 8007612:	4a6f      	ldr	r2, [pc, #444]	@ (80077d0 <init_vars+0x1fc>)
 8007614:	23d8      	movs	r3, #216	@ 0xd8
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	2100      	movs	r1, #0
 800761a:	50d1      	str	r1, [r2, r3]
	vars.gps_debug = false;
 800761c:	4a6c      	ldr	r2, [pc, #432]	@ (80077d0 <init_vars+0x1fc>)
 800761e:	23e0      	movs	r3, #224	@ 0xe0
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	2100      	movs	r1, #0
 8007624:	54d1      	strb	r1, [r2, r3]
	vars.gps_system = SYS_UNKNOWN;
 8007626:	4a6a      	ldr	r2, [pc, #424]	@ (80077d0 <init_vars+0x1fc>)
 8007628:	23c0      	movs	r3, #192	@ 0xc0
 800762a:	33ff      	adds	r3, #255	@ 0xff
 800762c:	2100      	movs	r1, #0
 800762e:	54d1      	strb	r1, [r2, r3]
	vars.wind_ppm = 0;
 8007630:	4a67      	ldr	r2, [pc, #412]	@ (80077d0 <init_vars+0x1fc>)
 8007632:	23d6      	movs	r3, #214	@ 0xd6
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	2100      	movs	r1, #0
 8007638:	50d1      	str	r1, [r2, r3]
	vars.deviation.x = vars.deviation.y = 0;
 800763a:	4b65      	ldr	r3, [pc, #404]	@ (80077d0 <init_vars+0x1fc>)
 800763c:	2200      	movs	r2, #0
 800763e:	611a      	str	r2, [r3, #16]
 8007640:	4b63      	ldr	r3, [pc, #396]	@ (80077d0 <init_vars+0x1fc>)
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	4b62      	ldr	r3, [pc, #392]	@ (80077d0 <init_vars+0x1fc>)
 8007646:	60da      	str	r2, [r3, #12]

	BRIDGE_DRIVE_DIS;
 8007648:	23a0      	movs	r3, #160	@ 0xa0
 800764a:	05db      	lsls	r3, r3, #23
 800764c:	2200      	movs	r2, #0
 800764e:	2110      	movs	r1, #16
 8007650:	0018      	movs	r0, r3
 8007652:	f003 f8d4 	bl	800a7fe <HAL_GPIO_WritePin>
	LCD_BACK_ON;
 8007656:	4b5f      	ldr	r3, [pc, #380]	@ (80077d4 <init_vars+0x200>)
 8007658:	2201      	movs	r2, #1
 800765a:	2180      	movs	r1, #128	@ 0x80
 800765c:	0018      	movs	r0, r3
 800765e:	f003 f8ce 	bl	800a7fe <HAL_GPIO_WritePin>

	if (adc_calib() != HAL_OK)
 8007662:	f7fd f995 	bl	8004990 <adc_calib>
 8007666:	1e03      	subs	r3, r0, #0
 8007668:	d004      	beq.n	8007674 <init_vars+0xa0>
		tty_printf(" Error ADC calibration\r\n");
 800766a:	4b5b      	ldr	r3, [pc, #364]	@ (80077d8 <init_vars+0x204>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a5b      	ldr	r2, [pc, #364]	@ (80077dc <init_vars+0x208>)
 8007670:	0010      	movs	r0, r2
 8007672:	4798      	blx	r3
		tty_printf("TLE version 0x%02X 0x%02X\r\n", result[0], result[1]);
	else
		tty_printf(" Error TLE\r\n");
#endif
	// read vars.hwinfo
	if (ReadStruct2Flash(&vars.hwinfo, sizeof(hw_info_t)) == ERR_CRC)
 8007674:	23ac      	movs	r3, #172	@ 0xac
 8007676:	005a      	lsls	r2, r3, #1
 8007678:	4b59      	ldr	r3, [pc, #356]	@ (80077e0 <init_vars+0x20c>)
 800767a:	0011      	movs	r1, r2
 800767c:	0018      	movs	r0, r3
 800767e:	f7fd fdc7 	bl	8005210 <ReadStruct2Flash>
 8007682:	0003      	movs	r3, r0
 8007684:	2b02      	cmp	r3, #2
 8007686:	d119      	bne.n	80076bc <init_vars+0xe8>
	{
		// Possibly the old version?
		old_hw_info_t old_hw_info;
		if (ReadStruct2Flash(&old_hw_info, sizeof(old_hw_info_t)) != ERR_CRC)
 8007688:	1d3b      	adds	r3, r7, #4
 800768a:	21c4      	movs	r1, #196	@ 0xc4
 800768c:	0018      	movs	r0, r3
 800768e:	f7fd fdbf 	bl	8005210 <ReadStruct2Flash>
 8007692:	0003      	movs	r3, r0
 8007694:	2b02      	cmp	r3, #2
 8007696:	d008      	beq.n	80076aa <init_vars+0xd6>
		{
			vars.hwinfo.stm_serial = old_hw_info.stm_serial;
 8007698:	1d3b      	adds	r3, r7, #4
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	4b4c      	ldr	r3, [pc, #304]	@ (80077d0 <init_vars+0x1fc>)
 800769e:	621a      	str	r2, [r3, #32]
			tty_printf("Found old serial\r\n");
 80076a0:	4b4d      	ldr	r3, [pc, #308]	@ (80077d8 <init_vars+0x204>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a4f      	ldr	r2, [pc, #316]	@ (80077e4 <init_vars+0x210>)
 80076a6:	0010      	movs	r0, r2
 80076a8:	4798      	blx	r3
		}

		tty_printf("  Error loading flash: restore defaults\r\n");
 80076aa:	4b4b      	ldr	r3, [pc, #300]	@ (80077d8 <init_vars+0x204>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4e      	ldr	r2, [pc, #312]	@ (80077e8 <init_vars+0x214>)
 80076b0:	0010      	movs	r0, r2
 80076b2:	4798      	blx	r3
		factory(&vars.hwinfo);
 80076b4:	4b4a      	ldr	r3, [pc, #296]	@ (80077e0 <init_vars+0x20c>)
 80076b6:	0018      	movs	r0, r3
 80076b8:	f7ff fef8 	bl	80074ac <factory>

	/*
	 * testtest
	 */
	/** Load Clean, System Clean, PowerUp counters from I2C eerom */
	if (ReadStruct2eerom(&vars.eevar))
 80076bc:	4b4b      	ldr	r3, [pc, #300]	@ (80077ec <init_vars+0x218>)
 80076be:	0018      	movs	r0, r3
 80076c0:	f7fd fb08 	bl	8004cd4 <ReadStruct2eerom>
 80076c4:	1e03      	subs	r3, r0, #0
 80076c6:	d03f      	beq.n	8007748 <init_vars+0x174>
	{
		// CRC error: load defaults
		tty_printf("  Error reading eeprom\r\n");
 80076c8:	4b43      	ldr	r3, [pc, #268]	@ (80077d8 <init_vars+0x204>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a48      	ldr	r2, [pc, #288]	@ (80077f0 <init_vars+0x21c>)
 80076ce:	0010      	movs	r0, r2
 80076d0:	4798      	blx	r3

		vars.eevar.actual_motor.x = 1000;
 80076d2:	4a3f      	ldr	r2, [pc, #252]	@ (80077d0 <init_vars+0x1fc>)
 80076d4:	23be      	movs	r3, #190	@ 0xbe
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	21fa      	movs	r1, #250	@ 0xfa
 80076da:	0089      	lsls	r1, r1, #2
 80076dc:	50d1      	str	r1, [r2, r3]
		vars.eevar.actual_motor.y = 1000;
 80076de:	4a3c      	ldr	r2, [pc, #240]	@ (80077d0 <init_vars+0x1fc>)
 80076e0:	23c0      	movs	r3, #192	@ 0xc0
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	21fa      	movs	r1, #250	@ 0xfa
 80076e6:	0089      	lsls	r1, r1, #2
 80076e8:	50d1      	str	r1, [r2, r3]
		vars.eevar.bootcounter = 0;
 80076ea:	4a39      	ldr	r2, [pc, #228]	@ (80077d0 <init_vars+0x1fc>)
 80076ec:	23cc      	movs	r3, #204	@ 0xcc
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	2100      	movs	r1, #0
 80076f2:	50d1      	str	r1, [r2, r3]
		vars.eevar.tracking_minutes = 0;
 80076f4:	4a36      	ldr	r2, [pc, #216]	@ (80077d0 <init_vars+0x1fc>)
 80076f6:	23ca      	movs	r3, #202	@ 0xca
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	2100      	movs	r1, #0
 80076fc:	50d1      	str	r1, [r2, r3]

		// will enter calibration mode because of this
		vars.hwinfo.maximum.x = DEFAULT_MAX;
 80076fe:	4b34      	ldr	r3, [pc, #208]	@ (80077d0 <init_vars+0x1fc>)
 8007700:	22fa      	movs	r2, #250	@ 0xfa
 8007702:	00d2      	lsls	r2, r2, #3
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
		vars.hwinfo.maximum.y = DEFAULT_MAX;
 8007706:	4b32      	ldr	r3, [pc, #200]	@ (80077d0 <init_vars+0x1fc>)
 8007708:	22fa      	movs	r2, #250	@ 0xfa
 800770a:	00d2      	lsls	r2, r2, #3
 800770c:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (WriteStruct2eerom(vars.eevar))
 800770e:	4d30      	ldr	r5, [pc, #192]	@ (80077d0 <init_vars+0x1fc>)
 8007710:	23be      	movs	r3, #190	@ 0xbe
 8007712:	005c      	lsls	r4, r3, #1
 8007714:	2210      	movs	r2, #16
 8007716:	192b      	adds	r3, r5, r4
 8007718:	189a      	adds	r2, r3, r2
 800771a:	466b      	mov	r3, sp
 800771c:	ca43      	ldmia	r2!, {r0, r1, r6}
 800771e:	c343      	stmia	r3!, {r0, r1, r6}
 8007720:	ca43      	ldmia	r2!, {r0, r1, r6}
 8007722:	c343      	stmia	r3!, {r0, r1, r6}
 8007724:	ca03      	ldmia	r2!, {r0, r1}
 8007726:	c303      	stmia	r3!, {r0, r1}
 8007728:	5928      	ldr	r0, [r5, r4]
 800772a:	192b      	adds	r3, r5, r4
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	192b      	adds	r3, r5, r4
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	192b      	adds	r3, r5, r4
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f7fd fa95 	bl	8004c64 <WriteStruct2eerom>
 800773a:	1e03      	subs	r3, r0, #0
 800773c:	d004      	beq.n	8007748 <init_vars+0x174>
			tty_printf("  Error write eeprom\r\n");
 800773e:	4b26      	ldr	r3, [pc, #152]	@ (80077d8 <init_vars+0x204>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2c      	ldr	r2, [pc, #176]	@ (80077f4 <init_vars+0x220>)
 8007744:	0010      	movs	r0, r2
 8007746:	4798      	blx	r3

	}

	new_pwm_freq(vars.hwinfo.pwmfreq);
 8007748:	4a21      	ldr	r2, [pc, #132]	@ (80077d0 <init_vars+0x1fc>)
 800774a:	239a      	movs	r3, #154	@ 0x9a
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	58d3      	ldr	r3, [r2, r3]
 8007750:	0018      	movs	r0, r3
 8007752:	f7ff f835 	bl	80067c0 <new_pwm_freq>

	// compatible with new parameter
	if (vars.hwinfo.turnback == 0)
 8007756:	4a1e      	ldr	r2, [pc, #120]	@ (80077d0 <init_vars+0x1fc>)
 8007758:	239e      	movs	r3, #158	@ 0x9e
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	58d3      	ldr	r3, [r2, r3]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <init_vars+0x198>
		vars.hwinfo.turnback = 10;
 8007762:	4a1b      	ldr	r2, [pc, #108]	@ (80077d0 <init_vars+0x1fc>)
 8007764:	239e      	movs	r3, #158	@ 0x9e
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	210a      	movs	r1, #10
 800776a:	50d1      	str	r1, [r2, r3]

	// number of boots
	vars.eevar.bootcounter++;
 800776c:	4a18      	ldr	r2, [pc, #96]	@ (80077d0 <init_vars+0x1fc>)
 800776e:	23cc      	movs	r3, #204	@ 0xcc
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	58d3      	ldr	r3, [r2, r3]
 8007774:	1c59      	adds	r1, r3, #1
 8007776:	4a16      	ldr	r2, [pc, #88]	@ (80077d0 <init_vars+0x1fc>)
 8007778:	23cc      	movs	r3, #204	@ 0xcc
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	50d1      	str	r1, [r2, r3]
	vars.max_pwm = vars.hwinfo.max_pwm;
 800777e:	4a14      	ldr	r2, [pc, #80]	@ (80077d0 <init_vars+0x1fc>)
 8007780:	2396      	movs	r3, #150	@ 0x96
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	58d3      	ldr	r3, [r2, r3]
 8007786:	b259      	sxtb	r1, r3
 8007788:	4a11      	ldr	r2, [pc, #68]	@ (80077d0 <init_vars+0x1fc>)
 800778a:	23dc      	movs	r3, #220	@ 0xdc
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	54d1      	strb	r1, [r2, r3]

	// do not move
	vars.goto_motor = vars.eevar.actual_motor;
 8007790:	4b0f      	ldr	r3, [pc, #60]	@ (80077d0 <init_vars+0x1fc>)
 8007792:	490f      	ldr	r1, [pc, #60]	@ (80077d0 <init_vars+0x1fc>)
 8007794:	22be      	movs	r2, #190	@ 0xbe
 8007796:	0052      	lsls	r2, r2, #1
 8007798:	3304      	adds	r3, #4
 800779a:	188a      	adds	r2, r1, r2
 800779c:	ca03      	ldmia	r2!, {r0, r1}
 800779e:	c303      	stmia	r3!, {r0, r1}
	set_contrast(vars.hwinfo.contrast);
 80077a0:	4a0b      	ldr	r2, [pc, #44]	@ (80077d0 <init_vars+0x1fc>)
 80077a2:	239c      	movs	r3, #156	@ 0x9c
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	5cd3      	ldrb	r3, [r2, r3]
 80077a8:	0018      	movs	r0, r3
 80077aa:	f7fe fff7 	bl	800679c <set_contrast>

	// store mode to wait for GPS mode
	vars.store_main_mode = vars.eevar.main_mode;
 80077ae:	4a08      	ldr	r2, [pc, #32]	@ (80077d0 <init_vars+0x1fc>)
 80077b0:	23c6      	movs	r3, #198	@ 0xc6
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	5cd1      	ldrb	r1, [r2, r3]
 80077b6:	4a06      	ldr	r2, [pc, #24]	@ (80077d0 <init_vars+0x1fc>)
 80077b8:	23b8      	movs	r3, #184	@ 0xb8
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	54d1      	strb	r1, [r2, r3]
	vars.eevar.main_mode = ST_INIT;
 80077be:	4a04      	ldr	r2, [pc, #16]	@ (80077d0 <init_vars+0x1fc>)
 80077c0:	23c6      	movs	r3, #198	@ 0xc6
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	2113      	movs	r1, #19
 80077c6:	54d1      	strb	r1, [r2, r3]

}
 80077c8:	46c0      	nop			@ (mov r8, r8)
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b033      	add	sp, #204	@ 0xcc
 80077ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d0:	200002bc 	.word	0x200002bc
 80077d4:	50000400 	.word	0x50000400
 80077d8:	20000aac 	.word	0x20000aac
 80077dc:	080119b8 	.word	0x080119b8
 80077e0:	200002d4 	.word	0x200002d4
 80077e4:	080119d4 	.word	0x080119d4
 80077e8:	080119e8 	.word	0x080119e8
 80077ec:	20000438 	.word	0x20000438
 80077f0:	08011a14 	.word	0x08011a14
 80077f4:	08011a30 	.word	0x08011a30

080077f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80077f8:	480d      	ldr	r0, [pc, #52]	@ (8007830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80077fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80077fc:	f7fe fda6 	bl	800634c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007800:	480c      	ldr	r0, [pc, #48]	@ (8007834 <LoopForever+0x6>)
  ldr r1, =_edata
 8007802:	490d      	ldr	r1, [pc, #52]	@ (8007838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007804:	4a0d      	ldr	r2, [pc, #52]	@ (800783c <LoopForever+0xe>)
  movs r3, #0
 8007806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007808:	e002      	b.n	8007810 <LoopCopyDataInit>

0800780a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800780a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800780c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800780e:	3304      	adds	r3, #4

08007810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007814:	d3f9      	bcc.n	800780a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007816:	4a0a      	ldr	r2, [pc, #40]	@ (8007840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007818:	4c0a      	ldr	r4, [pc, #40]	@ (8007844 <LoopForever+0x16>)
  movs r3, #0
 800781a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800781c:	e001      	b.n	8007822 <LoopFillZerobss>

0800781e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800781e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007820:	3204      	adds	r2, #4

08007822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007824:	d3fb      	bcc.n	800781e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007826:	f007 ff6f 	bl	800f708 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800782a:	f7fe f81d 	bl	8005868 <main>

0800782e <LoopForever>:

LoopForever:
  b LoopForever
 800782e:	e7fe      	b.n	800782e <LoopForever>
  ldr   r0, =_estack
 8007830:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8007834:	20000010 	.word	0x20000010
  ldr r1, =_edata
 8007838:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 800783c:	08011bd4 	.word	0x08011bd4
  ldr r2, =_sbss
 8007840:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8007844:	20001fbc 	.word	0x20001fbc

08007848 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007848:	e7fe      	b.n	8007848 <ADC1_COMP_IRQHandler>
	...

0800784c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007852:	1dfb      	adds	r3, r7, #7
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007858:	4b0b      	ldr	r3, [pc, #44]	@ (8007888 <HAL_Init+0x3c>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b0a      	ldr	r3, [pc, #40]	@ (8007888 <HAL_Init+0x3c>)
 800785e:	2180      	movs	r1, #128	@ 0x80
 8007860:	0049      	lsls	r1, r1, #1
 8007862:	430a      	orrs	r2, r1
 8007864:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007866:	2000      	movs	r0, #0
 8007868:	f000 f810 	bl	800788c <HAL_InitTick>
 800786c:	1e03      	subs	r3, r0, #0
 800786e:	d003      	beq.n	8007878 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007870:	1dfb      	adds	r3, r7, #7
 8007872:	2201      	movs	r2, #1
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e001      	b.n	800787c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007878:	f7fe fc42 	bl	8006100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800787c:	1dfb      	adds	r3, r7, #7
 800787e:	781b      	ldrb	r3, [r3, #0]
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b002      	add	sp, #8
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40022000 	.word	0x40022000

0800788c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800788c:	b590      	push	{r4, r7, lr}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007894:	230f      	movs	r3, #15
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800789c:	4b1d      	ldr	r3, [pc, #116]	@ (8007914 <HAL_InitTick+0x88>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d02b      	beq.n	80078fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80078a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007918 <HAL_InitTick+0x8c>)
 80078a6:	681c      	ldr	r4, [r3, #0]
 80078a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007914 <HAL_InitTick+0x88>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	0019      	movs	r1, r3
 80078ae:	23fa      	movs	r3, #250	@ 0xfa
 80078b0:	0098      	lsls	r0, r3, #2
 80078b2:	f7fc fd33 	bl	800431c <__udivsi3>
 80078b6:	0003      	movs	r3, r0
 80078b8:	0019      	movs	r1, r3
 80078ba:	0020      	movs	r0, r4
 80078bc:	f7fc fd2e 	bl	800431c <__udivsi3>
 80078c0:	0003      	movs	r3, r0
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 ffe7 	bl	8008896 <HAL_SYSTICK_Config>
 80078c8:	1e03      	subs	r3, r0, #0
 80078ca:	d112      	bne.n	80078f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d80a      	bhi.n	80078e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	2301      	movs	r3, #1
 80078d6:	425b      	negs	r3, r3
 80078d8:	2200      	movs	r2, #0
 80078da:	0018      	movs	r0, r3
 80078dc:	f000 ffb6 	bl	800884c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80078e0:	4b0e      	ldr	r3, [pc, #56]	@ (800791c <HAL_InitTick+0x90>)
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e00d      	b.n	8007904 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80078e8:	230f      	movs	r3, #15
 80078ea:	18fb      	adds	r3, r7, r3
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
 80078f0:	e008      	b.n	8007904 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80078f2:	230f      	movs	r3, #15
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	2201      	movs	r2, #1
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e003      	b.n	8007904 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80078fc:	230f      	movs	r3, #15
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	2201      	movs	r2, #1
 8007902:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007904:	230f      	movs	r3, #15
 8007906:	18fb      	adds	r3, r7, r3
 8007908:	781b      	ldrb	r3, [r3, #0]
}
 800790a:	0018      	movs	r0, r3
 800790c:	46bd      	mov	sp, r7
 800790e:	b005      	add	sp, #20
 8007910:	bd90      	pop	{r4, r7, pc}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	20000040 	.word	0x20000040
 8007918:	20000018 	.word	0x20000018
 800791c:	2000003c 	.word	0x2000003c

08007920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007924:	4b05      	ldr	r3, [pc, #20]	@ (800793c <HAL_IncTick+0x1c>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	001a      	movs	r2, r3
 800792a:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <HAL_IncTick+0x20>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	18d2      	adds	r2, r2, r3
 8007930:	4b03      	ldr	r3, [pc, #12]	@ (8007940 <HAL_IncTick+0x20>)
 8007932:	601a      	str	r2, [r3, #0]
}
 8007934:	46c0      	nop			@ (mov r8, r8)
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	20000040 	.word	0x20000040
 8007940:	20001e50 	.word	0x20001e50

08007944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  return uwTick;
 8007948:	4b02      	ldr	r3, [pc, #8]	@ (8007954 <HAL_GetTick+0x10>)
 800794a:	681b      	ldr	r3, [r3, #0]
}
 800794c:	0018      	movs	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	20001e50 	.word	0x20001e50

08007958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007960:	f7ff fff0 	bl	8007944 <HAL_GetTick>
 8007964:	0003      	movs	r3, r0
 8007966:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	d005      	beq.n	800797e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007972:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <HAL_Delay+0x44>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	001a      	movs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	189b      	adds	r3, r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800797e:	46c0      	nop			@ (mov r8, r8)
 8007980:	f7ff ffe0 	bl	8007944 <HAL_GetTick>
 8007984:	0002      	movs	r2, r0
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d8f7      	bhi.n	8007980 <HAL_Delay+0x28>
  {
  }
}
 8007990:	46c0      	nop			@ (mov r8, r8)
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	46bd      	mov	sp, r7
 8007996:	b004      	add	sp, #16
 8007998:	bd80      	pop	{r7, pc}
 800799a:	46c0      	nop			@ (mov r8, r8)
 800799c:	20000040 	.word	0x20000040

080079a0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80079a8:	4b06      	ldr	r3, [pc, #24]	@ (80079c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a06      	ldr	r2, [pc, #24]	@ (80079c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	0019      	movs	r1, r3
 80079b2:	4b04      	ldr	r3, [pc, #16]	@ (80079c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	601a      	str	r2, [r3, #0]
}
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	46bd      	mov	sp, r7
 80079be:	b002      	add	sp, #8
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	46c0      	nop			@ (mov r8, r8)
 80079c4:	40010000 	.word	0x40010000
 80079c8:	fffff9ff 	.word	0xfffff9ff

080079cc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a05      	ldr	r2, [pc, #20]	@ (80079f0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80079dc:	401a      	ands	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
}
 80079e6:	46c0      	nop			@ (mov r8, r8)
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b002      	add	sp, #8
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	46c0      	nop			@ (mov r8, r8)
 80079f0:	fe3fffff 	.word	0xfe3fffff

080079f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	23e0      	movs	r3, #224	@ 0xe0
 8007a02:	045b      	lsls	r3, r3, #17
 8007a04:	4013      	ands	r3, r2
}
 8007a06:	0018      	movs	r0, r3
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	b002      	add	sp, #8
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	2104      	movs	r1, #4
 8007a22:	400a      	ands	r2, r1
 8007a24:	2107      	movs	r1, #7
 8007a26:	4091      	lsls	r1, r2
 8007a28:	000a      	movs	r2, r1
 8007a2a:	43d2      	mvns	r2, r2
 8007a2c:	401a      	ands	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2104      	movs	r1, #4
 8007a32:	400b      	ands	r3, r1
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4099      	lsls	r1, r3
 8007a38:	000b      	movs	r3, r1
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8007a40:	46c0      	nop			@ (mov r8, r8)
 8007a42:	46bd      	mov	sp, r7
 8007a44:	b004      	add	sp, #16
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	2104      	movs	r1, #4
 8007a5a:	400a      	ands	r2, r1
 8007a5c:	2107      	movs	r1, #7
 8007a5e:	4091      	lsls	r1, r2
 8007a60:	000a      	movs	r2, r1
 8007a62:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2104      	movs	r1, #4
 8007a68:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007a6a:	40da      	lsrs	r2, r3
 8007a6c:	0013      	movs	r3, r2
}
 8007a6e:	0018      	movs	r0, r3
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b002      	add	sp, #8
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	211f      	movs	r1, #31
 8007a8a:	400a      	ands	r2, r1
 8007a8c:	210f      	movs	r1, #15
 8007a8e:	4091      	lsls	r1, r2
 8007a90:	000a      	movs	r2, r1
 8007a92:	43d2      	mvns	r2, r2
 8007a94:	401a      	ands	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	0e9b      	lsrs	r3, r3, #26
 8007a9a:	210f      	movs	r1, #15
 8007a9c:	4019      	ands	r1, r3
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	201f      	movs	r0, #31
 8007aa2:	4003      	ands	r3, r0
 8007aa4:	4099      	lsls	r1, r3
 8007aa6:	000b      	movs	r3, r1
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007aae:	46c0      	nop			@ (mov r8, r8)
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b004      	add	sp, #16
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	035b      	lsls	r3, r3, #13
 8007ac8:	0b5b      	lsrs	r3, r3, #13
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ad0:	46c0      	nop			@ (mov r8, r8)
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b002      	add	sp, #8
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	0352      	lsls	r2, r2, #13
 8007aea:	0b52      	lsrs	r2, r2, #13
 8007aec:	43d2      	mvns	r2, r2
 8007aee:	401a      	ands	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007af4:	46c0      	nop			@ (mov r8, r8)
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b002      	add	sp, #8
 8007afa:	bd80      	pop	{r7, pc}

08007afc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	0212      	lsls	r2, r2, #8
 8007b10:	43d2      	mvns	r2, r2
 8007b12:	401a      	ands	r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	400b      	ands	r3, r1
 8007b1c:	4904      	ldr	r1, [pc, #16]	@ (8007b30 <LL_ADC_SetChannelSamplingTime+0x34>)
 8007b1e:	400b      	ands	r3, r1
 8007b20:	431a      	orrs	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8007b26:	46c0      	nop			@ (mov r8, r8)
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b004      	add	sp, #16
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	07ffff00 	.word	0x07ffff00

08007b34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	4a05      	ldr	r2, [pc, #20]	@ (8007b58 <LL_ADC_EnableInternalRegulator+0x24>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	2280      	movs	r2, #128	@ 0x80
 8007b46:	0552      	lsls	r2, r2, #21
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007b4e:	46c0      	nop			@ (mov r8, r8)
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b002      	add	sp, #8
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	6fffffe8 	.word	0x6fffffe8

08007b5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	2380      	movs	r3, #128	@ 0x80
 8007b6a:	055b      	lsls	r3, r3, #21
 8007b6c:	401a      	ands	r2, r3
 8007b6e:	2380      	movs	r3, #128	@ 0x80
 8007b70:	055b      	lsls	r3, r3, #21
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d101      	bne.n	8007b7a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	b002      	add	sp, #8
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	4a04      	ldr	r2, [pc, #16]	@ (8007ba4 <LL_ADC_Disable+0x20>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	2202      	movs	r2, #2
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007b9c:	46c0      	nop			@ (mov r8, r8)
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b002      	add	sp, #8
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	7fffffe8 	.word	0x7fffffe8

08007ba8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <LL_ADC_IsEnabled+0x18>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e000      	b.n	8007bc2 <LL_ADC_IsEnabled+0x1a>
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b002      	add	sp, #8
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	4013      	ands	r3, r2
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d101      	bne.n	8007be2 <LL_ADC_IsDisableOngoing+0x18>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <LL_ADC_IsDisableOngoing+0x1a>
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	0018      	movs	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b002      	add	sp, #8
 8007bea:	bd80      	pop	{r7, pc}

08007bec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d101      	bne.n	8007c04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e000      	b.n	8007c06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	0018      	movs	r0, r3
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b002      	add	sp, #8
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c18:	231f      	movs	r3, #31
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e17f      	b.n	8007f36 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	0018      	movs	r0, r3
 8007c42:	f7fc fe61 	bl	8004908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2254      	movs	r2, #84	@ 0x54
 8007c50:	2100      	movs	r1, #0
 8007c52:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f7ff ff7f 	bl	8007b5c <LL_ADC_IsInternalRegulatorEnabled>
 8007c5e:	1e03      	subs	r3, r0, #0
 8007c60:	d115      	bne.n	8007c8e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	0018      	movs	r0, r3
 8007c68:	f7ff ff64 	bl	8007b34 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007c6c:	4bb4      	ldr	r3, [pc, #720]	@ (8007f40 <HAL_ADC_Init+0x330>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	49b4      	ldr	r1, [pc, #720]	@ (8007f44 <HAL_ADC_Init+0x334>)
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7fc fb52 	bl	800431c <__udivsi3>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007c80:	e002      	b.n	8007c88 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f9      	bne.n	8007c82 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	0018      	movs	r0, r3
 8007c94:	f7ff ff62 	bl	8007b5c <LL_ADC_IsInternalRegulatorEnabled>
 8007c98:	1e03      	subs	r3, r0, #0
 8007c9a:	d10f      	bne.n	8007cbc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cac:	2201      	movs	r2, #1
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007cb4:	231f      	movs	r3, #31
 8007cb6:	18fb      	adds	r3, r7, r3
 8007cb8:	2201      	movs	r2, #1
 8007cba:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f7ff ff93 	bl	8007bec <LL_ADC_REG_IsConversionOngoing>
 8007cc6:	0003      	movs	r3, r0
 8007cc8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cce:	2210      	movs	r2, #16
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	d000      	beq.n	8007cd6 <HAL_ADC_Init+0xc6>
 8007cd4:	e122      	b.n	8007f1c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d000      	beq.n	8007cde <HAL_ADC_Init+0xce>
 8007cdc:	e11e      	b.n	8007f1c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce2:	4a99      	ldr	r2, [pc, #612]	@ (8007f48 <HAL_ADC_Init+0x338>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f7ff ff58 	bl	8007ba8 <LL_ADC_IsEnabled>
 8007cf8:	1e03      	subs	r3, r0, #0
 8007cfa:	d000      	beq.n	8007cfe <HAL_ADC_Init+0xee>
 8007cfc:	e0ad      	b.n	8007e5a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7e1b      	ldrb	r3, [r3, #24]
 8007d06:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8007d08:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7e5b      	ldrb	r3, [r3, #25]
 8007d0e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007d10:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7e9b      	ldrb	r3, [r3, #26]
 8007d16:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007d18:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <HAL_ADC_Init+0x118>
 8007d22:	2380      	movs	r3, #128	@ 0x80
 8007d24:	015b      	lsls	r3, r3, #5
 8007d26:	e000      	b.n	8007d2a <HAL_ADC_Init+0x11a>
 8007d28:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007d2a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007d30:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da04      	bge.n	8007d44 <HAL_ADC_Init+0x134>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	e001      	b.n	8007d48 <HAL_ADC_Init+0x138>
 8007d44:	2380      	movs	r3, #128	@ 0x80
 8007d46:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8007d48:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	212c      	movs	r1, #44	@ 0x2c
 8007d4e:	5c5b      	ldrb	r3, [r3, r1]
 8007d50:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007d52:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	5c9b      	ldrb	r3, [r3, r2]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d115      	bne.n	8007d90 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	7e9b      	ldrb	r3, [r3, #26]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2280      	movs	r2, #128	@ 0x80
 8007d70:	0252      	lsls	r2, r2, #9
 8007d72:	4313      	orrs	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
 8007d76:	e00b      	b.n	8007d90 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d9c:	23e0      	movs	r3, #224	@ 0xe0
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007da6:	4313      	orrs	r3, r2
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4a65      	ldr	r2, [pc, #404]	@ (8007f4c <HAL_ADC_Init+0x33c>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	0019      	movs	r1, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	0f9b      	lsrs	r3, r3, #30
 8007dca:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	223c      	movs	r2, #60	@ 0x3c
 8007ddc:	5c9b      	ldrb	r3, [r3, r2]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d111      	bne.n	8007e06 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	0f9b      	lsrs	r3, r3, #30
 8007de8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007dee:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8007df4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8007dfa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	2201      	movs	r2, #1
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	4a50      	ldr	r2, [pc, #320]	@ (8007f50 <HAL_ADC_Init+0x340>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	0019      	movs	r1, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	23c0      	movs	r3, #192	@ 0xc0
 8007e22:	061b      	lsls	r3, r3, #24
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d018      	beq.n	8007e5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007e2c:	2380      	movs	r3, #128	@ 0x80
 8007e2e:	05db      	lsls	r3, r3, #23
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d012      	beq.n	8007e5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007e38:	2380      	movs	r3, #128	@ 0x80
 8007e3a:	061b      	lsls	r3, r3, #24
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d00c      	beq.n	8007e5a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8007e40:	4b44      	ldr	r3, [pc, #272]	@ (8007f54 <HAL_ADC_Init+0x344>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a44      	ldr	r2, [pc, #272]	@ (8007f58 <HAL_ADC_Init+0x348>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	0019      	movs	r1, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	23f0      	movs	r3, #240	@ 0xf0
 8007e50:	039b      	lsls	r3, r3, #14
 8007e52:	401a      	ands	r2, r3
 8007e54:	4b3f      	ldr	r3, [pc, #252]	@ (8007f54 <HAL_ADC_Init+0x344>)
 8007e56:	430a      	orrs	r2, r1
 8007e58:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e62:	001a      	movs	r2, r3
 8007e64:	2100      	movs	r1, #0
 8007e66:	f7ff fdd2 	bl	8007a0e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	493a      	ldr	r1, [pc, #232]	@ (8007f5c <HAL_ADC_Init+0x34c>)
 8007e74:	001a      	movs	r2, r3
 8007e76:	f7ff fdca 	bl	8007a0e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2110      	movs	r1, #16
 8007e8e:	4249      	negs	r1, r1
 8007e90:	430a      	orrs	r2, r1
 8007e92:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e94:	e018      	b.n	8007ec8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	2380      	movs	r3, #128	@ 0x80
 8007e9c:	039b      	lsls	r3, r3, #14
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d112      	bne.n	8007ec8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	221c      	movs	r2, #28
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	4252      	negs	r2, r2
 8007eb8:	409a      	lsls	r2, r3
 8007eba:	0011      	movs	r1, r2
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f7ff fdba 	bl	8007a48 <LL_ADC_GetSamplingTimeCommonChannels>
 8007ed4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d10b      	bne.n	8007ef6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee8:	2203      	movs	r2, #3
 8007eea:	4393      	bics	r3, r2
 8007eec:	2201      	movs	r2, #1
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007ef4:	e01c      	b.n	8007f30 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efa:	2212      	movs	r2, #18
 8007efc:	4393      	bics	r3, r2
 8007efe:	2210      	movs	r2, #16
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8007f12:	231f      	movs	r3, #31
 8007f14:	18fb      	adds	r3, r7, r3
 8007f16:	2201      	movs	r2, #1
 8007f18:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007f1a:	e009      	b.n	8007f30 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f20:	2210      	movs	r2, #16
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007f28:	231f      	movs	r3, #31
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8007f30:	231f      	movs	r3, #31
 8007f32:	18fb      	adds	r3, r7, r3
 8007f34:	781b      	ldrb	r3, [r3, #0]
}
 8007f36:	0018      	movs	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b008      	add	sp, #32
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	46c0      	nop			@ (mov r8, r8)
 8007f40:	20000018 	.word	0x20000018
 8007f44:	00030d40 	.word	0x00030d40
 8007f48:	fffffefd 	.word	0xfffffefd
 8007f4c:	ffde0201 	.word	0xffde0201
 8007f50:	1ffffc02 	.word	0x1ffffc02
 8007f54:	40012708 	.word	0x40012708
 8007f58:	ffc3ffff 	.word	0xffc3ffff
 8007f5c:	07ffff04 	.word	0x07ffff04

08007f60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f6a:	2317      	movs	r3, #23
 8007f6c:	18fb      	adds	r3, r7, r3
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2254      	movs	r2, #84	@ 0x54
 8007f7a:	5c9b      	ldrb	r3, [r3, r2]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_ADC_ConfigChannel+0x24>
 8007f80:	2302      	movs	r3, #2
 8007f82:	e1c0      	b.n	8008306 <HAL_ADC_ConfigChannel+0x3a6>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2254      	movs	r2, #84	@ 0x54
 8007f88:	2101      	movs	r1, #1
 8007f8a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	0018      	movs	r0, r3
 8007f92:	f7ff fe2b 	bl	8007bec <LL_ADC_REG_IsConversionOngoing>
 8007f96:	1e03      	subs	r3, r0, #0
 8007f98:	d000      	beq.n	8007f9c <HAL_ADC_ConfigChannel+0x3c>
 8007f9a:	e1a3      	b.n	80082e4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d100      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0x46>
 8007fa4:	e143      	b.n	800822e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	2380      	movs	r3, #128	@ 0x80
 8007fac:	061b      	lsls	r3, r3, #24
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d004      	beq.n	8007fbc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007fb6:	4ac1      	ldr	r2, [pc, #772]	@ (80082bc <HAL_ADC_ConfigChannel+0x35c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d108      	bne.n	8007fce <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	0019      	movs	r1, r3
 8007fc6:	0010      	movs	r0, r2
 8007fc8:	f7ff fd75 	bl	8007ab6 <LL_ADC_REG_SetSequencerChAdd>
 8007fcc:	e0c9      	b.n	8008162 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	211f      	movs	r1, #31
 8007fd8:	400b      	ands	r3, r1
 8007fda:	210f      	movs	r1, #15
 8007fdc:	4099      	lsls	r1, r3
 8007fde:	000b      	movs	r3, r1
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	0019      	movs	r1, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	035b      	lsls	r3, r3, #13
 8007fec:	0b5b      	lsrs	r3, r3, #13
 8007fee:	d105      	bne.n	8007ffc <HAL_ADC_ConfigChannel+0x9c>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	0e9b      	lsrs	r3, r3, #26
 8007ff6:	221f      	movs	r2, #31
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	e098      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2201      	movs	r2, #1
 8008002:	4013      	ands	r3, r2
 8008004:	d000      	beq.n	8008008 <HAL_ADC_ConfigChannel+0xa8>
 8008006:	e091      	b.n	800812c <HAL_ADC_ConfigChannel+0x1cc>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2202      	movs	r2, #2
 800800e:	4013      	ands	r3, r2
 8008010:	d000      	beq.n	8008014 <HAL_ADC_ConfigChannel+0xb4>
 8008012:	e089      	b.n	8008128 <HAL_ADC_ConfigChannel+0x1c8>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2204      	movs	r2, #4
 800801a:	4013      	ands	r3, r2
 800801c:	d000      	beq.n	8008020 <HAL_ADC_ConfigChannel+0xc0>
 800801e:	e081      	b.n	8008124 <HAL_ADC_ConfigChannel+0x1c4>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2208      	movs	r2, #8
 8008026:	4013      	ands	r3, r2
 8008028:	d000      	beq.n	800802c <HAL_ADC_ConfigChannel+0xcc>
 800802a:	e079      	b.n	8008120 <HAL_ADC_ConfigChannel+0x1c0>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2210      	movs	r2, #16
 8008032:	4013      	ands	r3, r2
 8008034:	d000      	beq.n	8008038 <HAL_ADC_ConfigChannel+0xd8>
 8008036:	e071      	b.n	800811c <HAL_ADC_ConfigChannel+0x1bc>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2220      	movs	r2, #32
 800803e:	4013      	ands	r3, r2
 8008040:	d000      	beq.n	8008044 <HAL_ADC_ConfigChannel+0xe4>
 8008042:	e069      	b.n	8008118 <HAL_ADC_ConfigChannel+0x1b8>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2240      	movs	r2, #64	@ 0x40
 800804a:	4013      	ands	r3, r2
 800804c:	d000      	beq.n	8008050 <HAL_ADC_ConfigChannel+0xf0>
 800804e:	e061      	b.n	8008114 <HAL_ADC_ConfigChannel+0x1b4>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2280      	movs	r2, #128	@ 0x80
 8008056:	4013      	ands	r3, r2
 8008058:	d000      	beq.n	800805c <HAL_ADC_ConfigChannel+0xfc>
 800805a:	e059      	b.n	8008110 <HAL_ADC_ConfigChannel+0x1b0>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	2380      	movs	r3, #128	@ 0x80
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	4013      	ands	r3, r2
 8008066:	d151      	bne.n	800810c <HAL_ADC_ConfigChannel+0x1ac>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	2380      	movs	r3, #128	@ 0x80
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4013      	ands	r3, r2
 8008072:	d149      	bne.n	8008108 <HAL_ADC_ConfigChannel+0x1a8>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	2380      	movs	r3, #128	@ 0x80
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4013      	ands	r3, r2
 800807e:	d141      	bne.n	8008104 <HAL_ADC_ConfigChannel+0x1a4>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	2380      	movs	r3, #128	@ 0x80
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	4013      	ands	r3, r2
 800808a:	d139      	bne.n	8008100 <HAL_ADC_ConfigChannel+0x1a0>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	2380      	movs	r3, #128	@ 0x80
 8008092:	015b      	lsls	r3, r3, #5
 8008094:	4013      	ands	r3, r2
 8008096:	d131      	bne.n	80080fc <HAL_ADC_ConfigChannel+0x19c>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	2380      	movs	r3, #128	@ 0x80
 800809e:	019b      	lsls	r3, r3, #6
 80080a0:	4013      	ands	r3, r2
 80080a2:	d129      	bne.n	80080f8 <HAL_ADC_ConfigChannel+0x198>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	2380      	movs	r3, #128	@ 0x80
 80080aa:	01db      	lsls	r3, r3, #7
 80080ac:	4013      	ands	r3, r2
 80080ae:	d121      	bne.n	80080f4 <HAL_ADC_ConfigChannel+0x194>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	2380      	movs	r3, #128	@ 0x80
 80080b6:	021b      	lsls	r3, r3, #8
 80080b8:	4013      	ands	r3, r2
 80080ba:	d119      	bne.n	80080f0 <HAL_ADC_ConfigChannel+0x190>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	2380      	movs	r3, #128	@ 0x80
 80080c2:	025b      	lsls	r3, r3, #9
 80080c4:	4013      	ands	r3, r2
 80080c6:	d111      	bne.n	80080ec <HAL_ADC_ConfigChannel+0x18c>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	2380      	movs	r3, #128	@ 0x80
 80080ce:	029b      	lsls	r3, r3, #10
 80080d0:	4013      	ands	r3, r2
 80080d2:	d109      	bne.n	80080e8 <HAL_ADC_ConfigChannel+0x188>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	2380      	movs	r3, #128	@ 0x80
 80080da:	02db      	lsls	r3, r3, #11
 80080dc:	4013      	ands	r3, r2
 80080de:	d001      	beq.n	80080e4 <HAL_ADC_ConfigChannel+0x184>
 80080e0:	2312      	movs	r3, #18
 80080e2:	e024      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 80080e4:	2300      	movs	r3, #0
 80080e6:	e022      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 80080e8:	2311      	movs	r3, #17
 80080ea:	e020      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 80080ec:	2310      	movs	r3, #16
 80080ee:	e01e      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 80080f0:	230f      	movs	r3, #15
 80080f2:	e01c      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 80080f4:	230e      	movs	r3, #14
 80080f6:	e01a      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 80080f8:	230d      	movs	r3, #13
 80080fa:	e018      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 80080fc:	230c      	movs	r3, #12
 80080fe:	e016      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008100:	230b      	movs	r3, #11
 8008102:	e014      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008104:	230a      	movs	r3, #10
 8008106:	e012      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008108:	2309      	movs	r3, #9
 800810a:	e010      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 800810c:	2308      	movs	r3, #8
 800810e:	e00e      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008110:	2307      	movs	r3, #7
 8008112:	e00c      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008114:	2306      	movs	r3, #6
 8008116:	e00a      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008118:	2305      	movs	r3, #5
 800811a:	e008      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 800811c:	2304      	movs	r3, #4
 800811e:	e006      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008120:	2303      	movs	r3, #3
 8008122:	e004      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008124:	2302      	movs	r3, #2
 8008126:	e002      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 8008128:	2301      	movs	r3, #1
 800812a:	e000      	b.n	800812e <HAL_ADC_ConfigChannel+0x1ce>
 800812c:	2300      	movs	r3, #0
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	6852      	ldr	r2, [r2, #4]
 8008132:	201f      	movs	r0, #31
 8008134:	4002      	ands	r2, r0
 8008136:	4093      	lsls	r3, r2
 8008138:	000a      	movs	r2, r1
 800813a:	431a      	orrs	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	089b      	lsrs	r3, r3, #2
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	429a      	cmp	r2, r3
 800814e:	d808      	bhi.n	8008162 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	6859      	ldr	r1, [r3, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	001a      	movs	r2, r3
 800815e:	f7ff fc8a 	bl	8007a76 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6819      	ldr	r1, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	001a      	movs	r2, r3
 8008170:	f7ff fcc4 	bl	8007afc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	db00      	blt.n	800817e <HAL_ADC_ConfigChannel+0x21e>
 800817c:	e0bc      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800817e:	4b50      	ldr	r3, [pc, #320]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 8008180:	0018      	movs	r0, r3
 8008182:	f7ff fc37 	bl	80079f4 <LL_ADC_GetCommonPathInternalCh>
 8008186:	0003      	movs	r3, r0
 8008188:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a4d      	ldr	r2, [pc, #308]	@ (80082c4 <HAL_ADC_ConfigChannel+0x364>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d122      	bne.n	80081da <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	2380      	movs	r3, #128	@ 0x80
 8008198:	041b      	lsls	r3, r3, #16
 800819a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800819c:	d11d      	bne.n	80081da <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2280      	movs	r2, #128	@ 0x80
 80081a2:	0412      	lsls	r2, r2, #16
 80081a4:	4313      	orrs	r3, r2
 80081a6:	4a46      	ldr	r2, [pc, #280]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 80081a8:	0019      	movs	r1, r3
 80081aa:	0010      	movs	r0, r2
 80081ac:	f7ff fc0e 	bl	80079cc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80081b0:	4b45      	ldr	r3, [pc, #276]	@ (80082c8 <HAL_ADC_ConfigChannel+0x368>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4945      	ldr	r1, [pc, #276]	@ (80082cc <HAL_ADC_ConfigChannel+0x36c>)
 80081b6:	0018      	movs	r0, r3
 80081b8:	f7fc f8b0 	bl	800431c <__udivsi3>
 80081bc:	0003      	movs	r3, r0
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	0013      	movs	r3, r2
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	189b      	adds	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80081ca:	e002      	b.n	80081d2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1f9      	bne.n	80081cc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80081d8:	e08e      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a3c      	ldr	r2, [pc, #240]	@ (80082d0 <HAL_ADC_ConfigChannel+0x370>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d10e      	bne.n	8008202 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	2380      	movs	r3, #128	@ 0x80
 80081e8:	045b      	lsls	r3, r3, #17
 80081ea:	4013      	ands	r3, r2
 80081ec:	d109      	bne.n	8008202 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	2280      	movs	r2, #128	@ 0x80
 80081f2:	0452      	lsls	r2, r2, #17
 80081f4:	4313      	orrs	r3, r2
 80081f6:	4a32      	ldr	r2, [pc, #200]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 80081f8:	0019      	movs	r1, r3
 80081fa:	0010      	movs	r0, r2
 80081fc:	f7ff fbe6 	bl	80079cc <LL_ADC_SetCommonPathInternalCh>
 8008200:	e07a      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a33      	ldr	r2, [pc, #204]	@ (80082d4 <HAL_ADC_ConfigChannel+0x374>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d000      	beq.n	800820e <HAL_ADC_ConfigChannel+0x2ae>
 800820c:	e074      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	2380      	movs	r3, #128	@ 0x80
 8008212:	03db      	lsls	r3, r3, #15
 8008214:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8008216:	d000      	beq.n	800821a <HAL_ADC_ConfigChannel+0x2ba>
 8008218:	e06e      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2280      	movs	r2, #128	@ 0x80
 800821e:	03d2      	lsls	r2, r2, #15
 8008220:	4313      	orrs	r3, r2
 8008222:	4a27      	ldr	r2, [pc, #156]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 8008224:	0019      	movs	r1, r3
 8008226:	0010      	movs	r0, r2
 8008228:	f7ff fbd0 	bl	80079cc <LL_ADC_SetCommonPathInternalCh>
 800822c:	e064      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691a      	ldr	r2, [r3, #16]
 8008232:	2380      	movs	r3, #128	@ 0x80
 8008234:	061b      	lsls	r3, r3, #24
 8008236:	429a      	cmp	r2, r3
 8008238:	d004      	beq.n	8008244 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800823e:	4a1f      	ldr	r2, [pc, #124]	@ (80082bc <HAL_ADC_ConfigChannel+0x35c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d107      	bne.n	8008254 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	0019      	movs	r1, r3
 800824e:	0010      	movs	r0, r2
 8008250:	f7ff fc42 	bl	8007ad8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	da4d      	bge.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800825c:	4b18      	ldr	r3, [pc, #96]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 800825e:	0018      	movs	r0, r3
 8008260:	f7ff fbc8 	bl	80079f4 <LL_ADC_GetCommonPathInternalCh>
 8008264:	0003      	movs	r3, r0
 8008266:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a15      	ldr	r2, [pc, #84]	@ (80082c4 <HAL_ADC_ConfigChannel+0x364>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d108      	bne.n	8008284 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	4a18      	ldr	r2, [pc, #96]	@ (80082d8 <HAL_ADC_ConfigChannel+0x378>)
 8008276:	4013      	ands	r3, r2
 8008278:	4a11      	ldr	r2, [pc, #68]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 800827a:	0019      	movs	r1, r3
 800827c:	0010      	movs	r0, r2
 800827e:	f7ff fba5 	bl	80079cc <LL_ADC_SetCommonPathInternalCh>
 8008282:	e039      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a11      	ldr	r2, [pc, #68]	@ (80082d0 <HAL_ADC_ConfigChannel+0x370>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d108      	bne.n	80082a0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	4a12      	ldr	r2, [pc, #72]	@ (80082dc <HAL_ADC_ConfigChannel+0x37c>)
 8008292:	4013      	ands	r3, r2
 8008294:	4a0a      	ldr	r2, [pc, #40]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 8008296:	0019      	movs	r1, r3
 8008298:	0010      	movs	r0, r2
 800829a:	f7ff fb97 	bl	80079cc <LL_ADC_SetCommonPathInternalCh>
 800829e:	e02b      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a0b      	ldr	r2, [pc, #44]	@ (80082d4 <HAL_ADC_ConfigChannel+0x374>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d126      	bne.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	4a0c      	ldr	r2, [pc, #48]	@ (80082e0 <HAL_ADC_ConfigChannel+0x380>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	4a03      	ldr	r2, [pc, #12]	@ (80082c0 <HAL_ADC_ConfigChannel+0x360>)
 80082b2:	0019      	movs	r1, r3
 80082b4:	0010      	movs	r0, r2
 80082b6:	f7ff fb89 	bl	80079cc <LL_ADC_SetCommonPathInternalCh>
 80082ba:	e01d      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x398>
 80082bc:	80000004 	.word	0x80000004
 80082c0:	40012708 	.word	0x40012708
 80082c4:	b0001000 	.word	0xb0001000
 80082c8:	20000018 	.word	0x20000018
 80082cc:	00030d40 	.word	0x00030d40
 80082d0:	b8004000 	.word	0xb8004000
 80082d4:	b4002000 	.word	0xb4002000
 80082d8:	ff7fffff 	.word	0xff7fffff
 80082dc:	feffffff 	.word	0xfeffffff
 80082e0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e8:	2220      	movs	r2, #32
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80082f0:	2317      	movs	r3, #23
 80082f2:	18fb      	adds	r3, r7, r3
 80082f4:	2201      	movs	r2, #1
 80082f6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2254      	movs	r2, #84	@ 0x54
 80082fc:	2100      	movs	r1, #0
 80082fe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8008300:	2317      	movs	r3, #23
 8008302:	18fb      	adds	r3, r7, r3
 8008304:	781b      	ldrb	r3, [r3, #0]
}
 8008306:	0018      	movs	r0, r3
 8008308:	46bd      	mov	sp, r7
 800830a:	b006      	add	sp, #24
 800830c:	bd80      	pop	{r7, pc}
 800830e:	46c0      	nop			@ (mov r8, r8)

08008310 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	0018      	movs	r0, r3
 800831e:	f7ff fc54 	bl	8007bca <LL_ADC_IsDisableOngoing>
 8008322:	0003      	movs	r3, r0
 8008324:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	0018      	movs	r0, r3
 800832c:	f7ff fc3c 	bl	8007ba8 <LL_ADC_IsEnabled>
 8008330:	1e03      	subs	r3, r0, #0
 8008332:	d046      	beq.n	80083c2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d143      	bne.n	80083c2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2205      	movs	r2, #5
 8008342:	4013      	ands	r3, r2
 8008344:	2b01      	cmp	r3, #1
 8008346:	d10d      	bne.n	8008364 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	0018      	movs	r0, r3
 800834e:	f7ff fc19 	bl	8007b84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2203      	movs	r2, #3
 8008358:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800835a:	f7ff faf3 	bl	8007944 <HAL_GetTick>
 800835e:	0003      	movs	r3, r0
 8008360:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008362:	e028      	b.n	80083b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008368:	2210      	movs	r2, #16
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008374:	2201      	movs	r2, #1
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e021      	b.n	80083c4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008380:	f7ff fae0 	bl	8007944 <HAL_GetTick>
 8008384:	0002      	movs	r2, r0
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d913      	bls.n	80083b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2201      	movs	r2, #1
 8008396:	4013      	ands	r3, r2
 8008398:	d00d      	beq.n	80083b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800839e:	2210      	movs	r2, #16
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083aa:	2201      	movs	r2, #1
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e006      	b.n	80083c4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2201      	movs	r2, #1
 80083be:	4013      	ands	r3, r2
 80083c0:	d1de      	bne.n	8008380 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	0018      	movs	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b004      	add	sp, #16
 80083ca:	bd80      	pop	{r7, pc}

080083cc <LL_ADC_GetCommonClock>:
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	23f0      	movs	r3, #240	@ 0xf0
 80083da:	039b      	lsls	r3, r3, #14
 80083dc:	4013      	ands	r3, r2
}
 80083de:	0018      	movs	r0, r3
 80083e0:	46bd      	mov	sp, r7
 80083e2:	b002      	add	sp, #8
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <LL_ADC_GetClock>:
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	0f9b      	lsrs	r3, r3, #30
 80083f4:	079b      	lsls	r3, r3, #30
}
 80083f6:	0018      	movs	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b002      	add	sp, #8
 80083fc:	bd80      	pop	{r7, pc}

080083fe <LL_ADC_SetCalibrationFactor>:
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	22b4      	movs	r2, #180	@ 0xb4
 800840c:	589b      	ldr	r3, [r3, r2]
 800840e:	227f      	movs	r2, #127	@ 0x7f
 8008410:	4393      	bics	r3, r2
 8008412:	001a      	movs	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	21b4      	movs	r1, #180	@ 0xb4
 800841c:	505a      	str	r2, [r3, r1]
}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	46bd      	mov	sp, r7
 8008422:	b002      	add	sp, #8
 8008424:	bd80      	pop	{r7, pc}

08008426 <LL_ADC_GetCalibrationFactor>:
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	22b4      	movs	r2, #180	@ 0xb4
 8008432:	589b      	ldr	r3, [r3, r2]
 8008434:	227f      	movs	r2, #127	@ 0x7f
 8008436:	4013      	ands	r3, r2
}
 8008438:	0018      	movs	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	b002      	add	sp, #8
 800843e:	bd80      	pop	{r7, pc}

08008440 <LL_ADC_Enable>:
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4a04      	ldr	r2, [pc, #16]	@ (8008460 <LL_ADC_Enable+0x20>)
 800844e:	4013      	ands	r3, r2
 8008450:	2201      	movs	r2, #1
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	609a      	str	r2, [r3, #8]
}
 8008458:	46c0      	nop			@ (mov r8, r8)
 800845a:	46bd      	mov	sp, r7
 800845c:	b002      	add	sp, #8
 800845e:	bd80      	pop	{r7, pc}
 8008460:	7fffffe8 	.word	0x7fffffe8

08008464 <LL_ADC_Disable>:
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	4a04      	ldr	r2, [pc, #16]	@ (8008484 <LL_ADC_Disable+0x20>)
 8008472:	4013      	ands	r3, r2
 8008474:	2202      	movs	r2, #2
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	46c0      	nop			@ (mov r8, r8)
 800847e:	46bd      	mov	sp, r7
 8008480:	b002      	add	sp, #8
 8008482:	bd80      	pop	{r7, pc}
 8008484:	7fffffe8 	.word	0x7fffffe8

08008488 <LL_ADC_IsEnabled>:
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	2201      	movs	r2, #1
 8008496:	4013      	ands	r3, r2
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <LL_ADC_IsEnabled+0x18>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <LL_ADC_IsEnabled+0x1a>
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	0018      	movs	r0, r3
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b002      	add	sp, #8
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <LL_ADC_StartCalibration>:
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	4a05      	ldr	r2, [pc, #20]	@ (80084d0 <LL_ADC_StartCalibration+0x24>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	2280      	movs	r2, #128	@ 0x80
 80084be:	0612      	lsls	r2, r2, #24
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	609a      	str	r2, [r3, #8]
}
 80084c6:	46c0      	nop			@ (mov r8, r8)
 80084c8:	46bd      	mov	sp, r7
 80084ca:	b002      	add	sp, #8
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	46c0      	nop			@ (mov r8, r8)
 80084d0:	7fffffe8 	.word	0x7fffffe8

080084d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	0fdb      	lsrs	r3, r3, #31
 80084e2:	07da      	lsls	r2, r3, #31
 80084e4:	2380      	movs	r3, #128	@ 0x80
 80084e6:	061b      	lsls	r3, r3, #24
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d101      	bne.n	80084f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b002      	add	sp, #8
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b08b      	sub	sp, #44	@ 0x2c
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008504:	2300      	movs	r3, #0
 8008506:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2254      	movs	r2, #84	@ 0x54
 8008510:	5c9b      	ldrb	r3, [r3, r2]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <HAL_ADCEx_Calibration_Start+0x1e>
 8008516:	2302      	movs	r3, #2
 8008518:	e0dd      	b.n	80086d6 <HAL_ADCEx_Calibration_Start+0x1da>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2254      	movs	r2, #84	@ 0x54
 800851e:	2101      	movs	r1, #1
 8008520:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008522:	231f      	movs	r3, #31
 8008524:	18fc      	adds	r4, r7, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	0018      	movs	r0, r3
 800852a:	f7ff fef1 	bl	8008310 <ADC_Disable>
 800852e:	0003      	movs	r3, r0
 8008530:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff ffa6 	bl	8008488 <LL_ADC_IsEnabled>
 800853c:	1e03      	subs	r3, r0, #0
 800853e:	d000      	beq.n	8008542 <HAL_ADCEx_Calibration_Start+0x46>
 8008540:	e0bc      	b.n	80086bc <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008546:	4a66      	ldr	r2, [pc, #408]	@ (80086e0 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8008548:	4013      	ands	r3, r2
 800854a:	2202      	movs	r2, #2
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	4a62      	ldr	r2, [pc, #392]	@ (80086e4 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800855a:	4013      	ands	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	495f      	ldr	r1, [pc, #380]	@ (80086e8 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800856a:	400a      	ands	r2, r1
 800856c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800856e:	2300      	movs	r3, #0
 8008570:	627b      	str	r3, [r7, #36]	@ 0x24
 8008572:	e02d      	b.n	80085d0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	0018      	movs	r0, r3
 800857a:	f7ff ff97 	bl	80084ac <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800857e:	e014      	b.n	80085aa <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4a58      	ldr	r2, [pc, #352]	@ (80086ec <HAL_ADCEx_Calibration_Start+0x1f0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d90d      	bls.n	80085aa <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008592:	2212      	movs	r2, #18
 8008594:	4393      	bics	r3, r2
 8008596:	2210      	movs	r2, #16
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2254      	movs	r2, #84	@ 0x54
 80085a2:	2100      	movs	r1, #0
 80085a4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e095      	b.n	80086d6 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff ff90 	bl	80084d4 <LL_ADC_IsCalibrationOnGoing>
 80085b4:	1e03      	subs	r3, r0, #0
 80085b6:	d1e3      	bne.n	8008580 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	0018      	movs	r0, r3
 80085be:	f7ff ff32 	bl	8008426 <LL_ADC_GetCalibrationFactor>
 80085c2:	0002      	movs	r2, r0
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	3301      	adds	r3, #1
 80085ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80085d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d2:	2b07      	cmp	r3, #7
 80085d4:	d9ce      	bls.n	8008574 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80085d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085d8:	6a38      	ldr	r0, [r7, #32]
 80085da:	f7fb fe9f 	bl	800431c <__udivsi3>
 80085de:	0003      	movs	r3, r0
 80085e0:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	0018      	movs	r0, r3
 80085e8:	f7ff ff2a 	bl	8008440 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	0018      	movs	r0, r3
 80085f2:	f7ff fef8 	bl	80083e6 <LL_ADC_GetClock>
 80085f6:	1e03      	subs	r3, r0, #0
 80085f8:	d11b      	bne.n	8008632 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80085fa:	4b3d      	ldr	r3, [pc, #244]	@ (80086f0 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80085fc:	0018      	movs	r0, r3
 80085fe:	f7ff fee5 	bl	80083cc <LL_ADC_GetCommonClock>
 8008602:	0003      	movs	r3, r0
 8008604:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	23e0      	movs	r3, #224	@ 0xe0
 800860a:	035b      	lsls	r3, r3, #13
 800860c:	429a      	cmp	r2, r3
 800860e:	d310      	bcc.n	8008632 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	0c9b      	lsrs	r3, r3, #18
 8008614:	3b03      	subs	r3, #3
 8008616:	2201      	movs	r2, #1
 8008618:	409a      	lsls	r2, r3
 800861a:	0013      	movs	r3, r2
 800861c:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8008624:	e002      	b.n	800862c <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	3b01      	subs	r3, #1
 800862a:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f9      	bne.n	8008626 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	0011      	movs	r1, r2
 800863a:	0018      	movs	r0, r3
 800863c:	f7ff fedf 	bl	80083fe <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	0018      	movs	r0, r3
 8008646:	f7ff ff0d 	bl	8008464 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800864a:	f7ff f97b 	bl	8007944 <HAL_GetTick>
 800864e:	0003      	movs	r3, r0
 8008650:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008652:	e01b      	b.n	800868c <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008654:	f7ff f976 	bl	8007944 <HAL_GetTick>
 8008658:	0002      	movs	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d914      	bls.n	800868c <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	0018      	movs	r0, r3
 8008668:	f7ff ff0e 	bl	8008488 <LL_ADC_IsEnabled>
 800866c:	1e03      	subs	r3, r0, #0
 800866e:	d00d      	beq.n	800868c <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008674:	2210      	movs	r2, #16
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008680:	2201      	movs	r2, #1
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e024      	b.n	80086d6 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	0018      	movs	r0, r3
 8008692:	f7ff fef9 	bl	8008488 <LL_ADC_IsEnabled>
 8008696:	1e03      	subs	r3, r0, #0
 8008698:	d1dc      	bne.n	8008654 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68d9      	ldr	r1, [r3, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ae:	2203      	movs	r2, #3
 80086b0:	4393      	bics	r3, r2
 80086b2:	2201      	movs	r2, #1
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80086ba:	e005      	b.n	80086c8 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c0:	2210      	movs	r2, #16
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2254      	movs	r2, #84	@ 0x54
 80086cc:	2100      	movs	r1, #0
 80086ce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80086d0:	231f      	movs	r3, #31
 80086d2:	18fb      	adds	r3, r7, r3
 80086d4:	781b      	ldrb	r3, [r3, #0]
}
 80086d6:	0018      	movs	r0, r3
 80086d8:	46bd      	mov	sp, r7
 80086da:	b00b      	add	sp, #44	@ 0x2c
 80086dc:	bd90      	pop	{r4, r7, pc}
 80086de:	46c0      	nop			@ (mov r8, r8)
 80086e0:	fffffefd 	.word	0xfffffefd
 80086e4:	00008003 	.word	0x00008003
 80086e8:	ffff7ffc 	.word	0xffff7ffc
 80086ec:	0002f1ff 	.word	0x0002f1ff
 80086f0:	40012708 	.word	0x40012708

080086f4 <__NVIC_EnableIRQ>:
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	0002      	movs	r2, r0
 80086fc:	1dfb      	adds	r3, r7, #7
 80086fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008700:	1dfb      	adds	r3, r7, #7
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b7f      	cmp	r3, #127	@ 0x7f
 8008706:	d809      	bhi.n	800871c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008708:	1dfb      	adds	r3, r7, #7
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	001a      	movs	r2, r3
 800870e:	231f      	movs	r3, #31
 8008710:	401a      	ands	r2, r3
 8008712:	4b04      	ldr	r3, [pc, #16]	@ (8008724 <__NVIC_EnableIRQ+0x30>)
 8008714:	2101      	movs	r1, #1
 8008716:	4091      	lsls	r1, r2
 8008718:	000a      	movs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]
}
 800871c:	46c0      	nop			@ (mov r8, r8)
 800871e:	46bd      	mov	sp, r7
 8008720:	b002      	add	sp, #8
 8008722:	bd80      	pop	{r7, pc}
 8008724:	e000e100 	.word	0xe000e100

08008728 <__NVIC_SetPriority>:
{
 8008728:	b590      	push	{r4, r7, lr}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	0002      	movs	r2, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	1dfb      	adds	r3, r7, #7
 8008734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008736:	1dfb      	adds	r3, r7, #7
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b7f      	cmp	r3, #127	@ 0x7f
 800873c:	d828      	bhi.n	8008790 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800873e:	4a2f      	ldr	r2, [pc, #188]	@ (80087fc <__NVIC_SetPriority+0xd4>)
 8008740:	1dfb      	adds	r3, r7, #7
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	b25b      	sxtb	r3, r3
 8008746:	089b      	lsrs	r3, r3, #2
 8008748:	33c0      	adds	r3, #192	@ 0xc0
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	589b      	ldr	r3, [r3, r2]
 800874e:	1dfa      	adds	r2, r7, #7
 8008750:	7812      	ldrb	r2, [r2, #0]
 8008752:	0011      	movs	r1, r2
 8008754:	2203      	movs	r2, #3
 8008756:	400a      	ands	r2, r1
 8008758:	00d2      	lsls	r2, r2, #3
 800875a:	21ff      	movs	r1, #255	@ 0xff
 800875c:	4091      	lsls	r1, r2
 800875e:	000a      	movs	r2, r1
 8008760:	43d2      	mvns	r2, r2
 8008762:	401a      	ands	r2, r3
 8008764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	019b      	lsls	r3, r3, #6
 800876a:	22ff      	movs	r2, #255	@ 0xff
 800876c:	401a      	ands	r2, r3
 800876e:	1dfb      	adds	r3, r7, #7
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	0018      	movs	r0, r3
 8008774:	2303      	movs	r3, #3
 8008776:	4003      	ands	r3, r0
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800877c:	481f      	ldr	r0, [pc, #124]	@ (80087fc <__NVIC_SetPriority+0xd4>)
 800877e:	1dfb      	adds	r3, r7, #7
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b25b      	sxtb	r3, r3
 8008784:	089b      	lsrs	r3, r3, #2
 8008786:	430a      	orrs	r2, r1
 8008788:	33c0      	adds	r3, #192	@ 0xc0
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	501a      	str	r2, [r3, r0]
}
 800878e:	e031      	b.n	80087f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008790:	4a1b      	ldr	r2, [pc, #108]	@ (8008800 <__NVIC_SetPriority+0xd8>)
 8008792:	1dfb      	adds	r3, r7, #7
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	0019      	movs	r1, r3
 8008798:	230f      	movs	r3, #15
 800879a:	400b      	ands	r3, r1
 800879c:	3b08      	subs	r3, #8
 800879e:	089b      	lsrs	r3, r3, #2
 80087a0:	3306      	adds	r3, #6
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	18d3      	adds	r3, r2, r3
 80087a6:	3304      	adds	r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	1dfa      	adds	r2, r7, #7
 80087ac:	7812      	ldrb	r2, [r2, #0]
 80087ae:	0011      	movs	r1, r2
 80087b0:	2203      	movs	r2, #3
 80087b2:	400a      	ands	r2, r1
 80087b4:	00d2      	lsls	r2, r2, #3
 80087b6:	21ff      	movs	r1, #255	@ 0xff
 80087b8:	4091      	lsls	r1, r2
 80087ba:	000a      	movs	r2, r1
 80087bc:	43d2      	mvns	r2, r2
 80087be:	401a      	ands	r2, r3
 80087c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	22ff      	movs	r2, #255	@ 0xff
 80087c8:	401a      	ands	r2, r3
 80087ca:	1dfb      	adds	r3, r7, #7
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	0018      	movs	r0, r3
 80087d0:	2303      	movs	r3, #3
 80087d2:	4003      	ands	r3, r0
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80087d8:	4809      	ldr	r0, [pc, #36]	@ (8008800 <__NVIC_SetPriority+0xd8>)
 80087da:	1dfb      	adds	r3, r7, #7
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	001c      	movs	r4, r3
 80087e0:	230f      	movs	r3, #15
 80087e2:	4023      	ands	r3, r4
 80087e4:	3b08      	subs	r3, #8
 80087e6:	089b      	lsrs	r3, r3, #2
 80087e8:	430a      	orrs	r2, r1
 80087ea:	3306      	adds	r3, #6
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	18c3      	adds	r3, r0, r3
 80087f0:	3304      	adds	r3, #4
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	46c0      	nop			@ (mov r8, r8)
 80087f6:	46bd      	mov	sp, r7
 80087f8:	b003      	add	sp, #12
 80087fa:	bd90      	pop	{r4, r7, pc}
 80087fc:	e000e100 	.word	0xe000e100
 8008800:	e000ed00 	.word	0xe000ed00

08008804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	1e5a      	subs	r2, r3, #1
 8008810:	2380      	movs	r3, #128	@ 0x80
 8008812:	045b      	lsls	r3, r3, #17
 8008814:	429a      	cmp	r2, r3
 8008816:	d301      	bcc.n	800881c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008818:	2301      	movs	r3, #1
 800881a:	e010      	b.n	800883e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <SysTick_Config+0x44>)
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	3a01      	subs	r2, #1
 8008822:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008824:	2301      	movs	r3, #1
 8008826:	425b      	negs	r3, r3
 8008828:	2103      	movs	r1, #3
 800882a:	0018      	movs	r0, r3
 800882c:	f7ff ff7c 	bl	8008728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008830:	4b05      	ldr	r3, [pc, #20]	@ (8008848 <SysTick_Config+0x44>)
 8008832:	2200      	movs	r2, #0
 8008834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008836:	4b04      	ldr	r3, [pc, #16]	@ (8008848 <SysTick_Config+0x44>)
 8008838:	2207      	movs	r2, #7
 800883a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800883c:	2300      	movs	r3, #0
}
 800883e:	0018      	movs	r0, r3
 8008840:	46bd      	mov	sp, r7
 8008842:	b002      	add	sp, #8
 8008844:	bd80      	pop	{r7, pc}
 8008846:	46c0      	nop			@ (mov r8, r8)
 8008848:	e000e010 	.word	0xe000e010

0800884c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	210f      	movs	r1, #15
 8008858:	187b      	adds	r3, r7, r1
 800885a:	1c02      	adds	r2, r0, #0
 800885c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	187b      	adds	r3, r7, r1
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b25b      	sxtb	r3, r3
 8008866:	0011      	movs	r1, r2
 8008868:	0018      	movs	r0, r3
 800886a:	f7ff ff5d 	bl	8008728 <__NVIC_SetPriority>
}
 800886e:	46c0      	nop			@ (mov r8, r8)
 8008870:	46bd      	mov	sp, r7
 8008872:	b004      	add	sp, #16
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	0002      	movs	r2, r0
 800887e:	1dfb      	adds	r3, r7, #7
 8008880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008882:	1dfb      	adds	r3, r7, #7
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b25b      	sxtb	r3, r3
 8008888:	0018      	movs	r0, r3
 800888a:	f7ff ff33 	bl	80086f4 <__NVIC_EnableIRQ>
}
 800888e:	46c0      	nop			@ (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b002      	add	sp, #8
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	0018      	movs	r0, r3
 80088a2:	f7ff ffaf 	bl	8008804 <SysTick_Config>
 80088a6:	0003      	movs	r3, r0
}
 80088a8:	0018      	movs	r0, r3
 80088aa:	46bd      	mov	sp, r7
 80088ac:	b002      	add	sp, #8
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e056      	b.n	8008970 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7f5b      	ldrb	r3, [r3, #29]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	0018      	movs	r0, r3
 80088d6:	f7fc f9a5 	bl	8004c24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2202      	movs	r2, #2
 80088de:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	791b      	ldrb	r3, [r3, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10c      	bne.n	8008902 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a22      	ldr	r2, [pc, #136]	@ (8008978 <HAL_CRC_Init+0xc8>)
 80088ee:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2118      	movs	r1, #24
 80088fc:	438a      	bics	r2, r1
 80088fe:	609a      	str	r2, [r3, #8]
 8008900:	e00b      	b.n	800891a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6899      	ldr	r1, [r3, #8]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	0018      	movs	r0, r3
 800890e:	f000 f94e 	bl	8008bae <HAL_CRCEx_Polynomial_Set>
 8008912:	1e03      	subs	r3, r0, #0
 8008914:	d001      	beq.n	800891a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e02a      	b.n	8008970 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	795b      	ldrb	r3, [r3, #5]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2201      	movs	r2, #1
 8008928:	4252      	negs	r2, r2
 800892a:	611a      	str	r2, [r3, #16]
 800892c:	e004      	b.n	8008938 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6912      	ldr	r2, [r2, #16]
 8008936:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2260      	movs	r2, #96	@ 0x60
 8008940:	4393      	bics	r3, r2
 8008942:	0019      	movs	r1, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695a      	ldr	r2, [r3, #20]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2280      	movs	r2, #128	@ 0x80
 8008958:	4393      	bics	r3, r2
 800895a:	0019      	movs	r1, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	699a      	ldr	r2, [r3, #24]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	0018      	movs	r0, r3
 8008972:	46bd      	mov	sp, r7
 8008974:	b002      	add	sp, #8
 8008976:	bd80      	pop	{r7, pc}
 8008978:	04c11db7 	.word	0x04c11db7

0800897c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008988:	2300      	movs	r3, #0
 800898a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2202      	movs	r2, #2
 8008990:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2101      	movs	r1, #1
 800899e:	430a      	orrs	r2, r1
 80089a0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d005      	beq.n	80089b6 <HAL_CRC_Calculate+0x3a>
 80089aa:	d82d      	bhi.n	8008a08 <HAL_CRC_Calculate+0x8c>
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d019      	beq.n	80089e4 <HAL_CRC_Calculate+0x68>
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d020      	beq.n	80089f6 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80089b4:	e028      	b.n	8008a08 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	e00a      	b.n	80089d2 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	18d2      	adds	r2, r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	3301      	adds	r3, #1
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d3f0      	bcc.n	80089bc <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	613b      	str	r3, [r7, #16]
      break;
 80089e2:	e012      	b.n	8008a0a <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	0018      	movs	r0, r3
 80089ec:	f000 f815 	bl	8008a1a <CRC_Handle_8>
 80089f0:	0003      	movs	r3, r0
 80089f2:	613b      	str	r3, [r7, #16]
      break;
 80089f4:	e009      	b.n	8008a0a <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	0018      	movs	r0, r3
 80089fe:	f000 f89f 	bl	8008b40 <CRC_Handle_16>
 8008a02:	0003      	movs	r3, r0
 8008a04:	613b      	str	r3, [r7, #16]
      break;
 8008a06:	e000      	b.n	8008a0a <HAL_CRC_Calculate+0x8e>
      break;
 8008a08:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008a10:	693b      	ldr	r3, [r7, #16]
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b006      	add	sp, #24
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b088      	sub	sp, #32
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008a26:	2300      	movs	r3, #0
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	e023      	b.n	8008a74 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	18d3      	adds	r3, r2, r3
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	18cb      	adds	r3, r1, r3
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a46:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	18cb      	adds	r3, r1, r3
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008a56:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	3303      	adds	r3, #3
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	18cb      	adds	r3, r1, r3
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008a6a:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008a6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3301      	adds	r3, #1
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	089b      	lsrs	r3, r3, #2
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d3d6      	bcc.n	8008a2c <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2203      	movs	r2, #3
 8008a82:	4013      	ands	r3, r2
 8008a84:	d055      	beq.n	8008b32 <CRC_Handle_8+0x118>
  {
    if ((BufferLength % 4U) == 1U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d107      	bne.n	8008aa0 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	18d2      	adds	r2, r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d11a      	bne.n	8008ae0 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	18d3      	adds	r3, r2, r3
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b21b      	sxth	r3, r3
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	b21a      	sxth	r2, r3
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	3301      	adds	r3, #1
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	18cb      	adds	r3, r1, r3
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	b21b      	sxth	r3, r3
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	b21a      	sxth	r2, r3
 8008acc:	211a      	movs	r1, #26
 8008ace:	187b      	adds	r3, r7, r1
 8008ad0:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	187a      	adds	r2, r7, r1
 8008adc:	8812      	ldrh	r2, [r2, #0]
 8008ade:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d123      	bne.n	8008b32 <CRC_Handle_8+0x118>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	18d3      	adds	r3, r2, r3
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	b21b      	sxth	r3, r3
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	b21a      	sxth	r2, r3
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	3301      	adds	r3, #1
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	18cb      	adds	r3, r1, r3
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	b21b      	sxth	r3, r3
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	b21a      	sxth	r2, r3
 8008b0c:	211a      	movs	r1, #26
 8008b0e:	187b      	adds	r3, r7, r1
 8008b10:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	187a      	adds	r2, r7, r1
 8008b1c:	8812      	ldrh	r2, [r2, #0]
 8008b1e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	3302      	adds	r3, #2
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	18d2      	adds	r2, r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	7812      	ldrb	r2, [r2, #0]
 8008b30:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
}
 8008b38:	0018      	movs	r0, r3
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	b008      	add	sp, #32
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e013      	b.n	8008b7a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	041a      	lsls	r2, r3, #16
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	3302      	adds	r3, #2
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	18cb      	adds	r3, r1, r3
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	0019      	movs	r1, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	3301      	adds	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d3e6      	bcc.n	8008b52 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	4013      	ands	r3, r2
 8008b8a:	d009      	beq.n	8008ba0 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	18d3      	adds	r3, r2, r3
 8008b9a:	881a      	ldrh	r2, [r3, #0]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
}
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	b006      	add	sp, #24
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b086      	sub	sp, #24
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bba:	2117      	movs	r1, #23
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008bc2:	231f      	movs	r3, #31
 8008bc4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	4013      	ands	r3, r2
 8008bcc:	d103      	bne.n	8008bd6 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8008bce:	187b      	adds	r3, r7, r1
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	e045      	b.n	8008c62 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008bd6:	46c0      	nop			@ (mov r8, r8)
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	1e5a      	subs	r2, r3, #1
 8008bdc:	613a      	str	r2, [r7, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d008      	beq.n	8008bf4 <HAL_CRCEx_Polynomial_Set+0x46>
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	221f      	movs	r2, #31
 8008be6:	4013      	ands	r3, r2
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	40da      	lsrs	r2, r3
 8008bec:	0013      	movs	r3, r2
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	d0f1      	beq.n	8008bd8 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b18      	cmp	r3, #24
 8008bf8:	d00f      	beq.n	8008c1a <HAL_CRCEx_Polynomial_Set+0x6c>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b18      	cmp	r3, #24
 8008bfe:	d824      	bhi.n	8008c4a <HAL_CRCEx_Polynomial_Set+0x9c>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b10      	cmp	r3, #16
 8008c04:	d011      	beq.n	8008c2a <HAL_CRCEx_Polynomial_Set+0x7c>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b10      	cmp	r3, #16
 8008c0a:	d81e      	bhi.n	8008c4a <HAL_CRCEx_Polynomial_Set+0x9c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <HAL_CRCEx_Polynomial_Set+0xa6>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	d010      	beq.n	8008c3a <HAL_CRCEx_Polynomial_Set+0x8c>
 8008c18:	e017      	b.n	8008c4a <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b06      	cmp	r3, #6
 8008c1e:	d91b      	bls.n	8008c58 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8008c20:	2317      	movs	r3, #23
 8008c22:	18fb      	adds	r3, r7, r3
 8008c24:	2201      	movs	r2, #1
 8008c26:	701a      	strb	r2, [r3, #0]
        }
        break;
 8008c28:	e016      	b.n	8008c58 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b07      	cmp	r3, #7
 8008c2e:	d915      	bls.n	8008c5c <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8008c30:	2317      	movs	r3, #23
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	2201      	movs	r2, #1
 8008c36:	701a      	strb	r2, [r3, #0]
        }
        break;
 8008c38:	e010      	b.n	8008c5c <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b0f      	cmp	r3, #15
 8008c3e:	d90f      	bls.n	8008c60 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8008c40:	2317      	movs	r3, #23
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	2201      	movs	r2, #1
 8008c46:	701a      	strb	r2, [r3, #0]
        }
        break;
 8008c48:	e00a      	b.n	8008c60 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008c4a:	2317      	movs	r3, #23
 8008c4c:	18fb      	adds	r3, r7, r3
 8008c4e:	2201      	movs	r2, #1
 8008c50:	701a      	strb	r2, [r3, #0]
        break;
 8008c52:	e006      	b.n	8008c62 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8008c54:	46c0      	nop			@ (mov r8, r8)
 8008c56:	e004      	b.n	8008c62 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8008c58:	46c0      	nop			@ (mov r8, r8)
 8008c5a:	e002      	b.n	8008c62 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8008c5c:	46c0      	nop			@ (mov r8, r8)
 8008c5e:	e000      	b.n	8008c62 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8008c60:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8008c62:	2317      	movs	r3, #23
 8008c64:	18fb      	adds	r3, r7, r3
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10e      	bne.n	8008c8a <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2218      	movs	r2, #24
 8008c7c:	4393      	bics	r3, r2
 8008c7e:	0019      	movs	r1, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008c8a:	2317      	movs	r3, #23
 8008c8c:	18fb      	adds	r3, r7, r3
 8008c8e:	781b      	ldrb	r3, [r3, #0]
}
 8008c90:	0018      	movs	r0, r3
 8008c92:	46bd      	mov	sp, r7
 8008c94:	b006      	add	sp, #24
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e04f      	b.n	8008d4a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2225      	movs	r2, #37	@ 0x25
 8008cae:	5c9b      	ldrb	r3, [r3, r2]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d008      	beq.n	8008cc8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2204      	movs	r2, #4
 8008cba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2224      	movs	r2, #36	@ 0x24
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e040      	b.n	8008d4a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	210e      	movs	r1, #14
 8008cd4:	438a      	bics	r2, r1
 8008cd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ce2:	491c      	ldr	r1, [pc, #112]	@ (8008d54 <HAL_DMA_Abort+0xbc>)
 8008ce4:	400a      	ands	r2, r1
 8008ce6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	438a      	bics	r2, r1
 8008cf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfc:	221c      	movs	r2, #28
 8008cfe:	401a      	ands	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d04:	2101      	movs	r1, #1
 8008d06:	4091      	lsls	r1, r2
 8008d08:	000a      	movs	r2, r1
 8008d0a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008d14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00c      	beq.n	8008d38 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d28:	490a      	ldr	r1, [pc, #40]	@ (8008d54 <HAL_DMA_Abort+0xbc>)
 8008d2a:	400a      	ands	r2, r1
 8008d2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008d36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2225      	movs	r2, #37	@ 0x25
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2224      	movs	r2, #36	@ 0x24
 8008d44:	2100      	movs	r1, #0
 8008d46:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b002      	add	sp, #8
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			@ (mov r8, r8)
 8008d54:	fffffeff 	.word	0xfffffeff

08008d58 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d60:	210f      	movs	r1, #15
 8008d62:	187b      	adds	r3, r7, r1
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2225      	movs	r2, #37	@ 0x25
 8008d6c:	5c9b      	ldrb	r3, [r3, r2]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d006      	beq.n	8008d82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2204      	movs	r2, #4
 8008d78:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008d7a:	187b      	adds	r3, r7, r1
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	e048      	b.n	8008e14 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	210e      	movs	r1, #14
 8008d8e:	438a      	bics	r2, r1
 8008d90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	438a      	bics	r2, r1
 8008da0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dac:	491d      	ldr	r1, [pc, #116]	@ (8008e24 <HAL_DMA_Abort_IT+0xcc>)
 8008dae:	400a      	ands	r2, r1
 8008db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db6:	221c      	movs	r2, #28
 8008db8:	401a      	ands	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	4091      	lsls	r1, r2
 8008dc2:	000a      	movs	r2, r1
 8008dc4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008dce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00c      	beq.n	8008df2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de2:	4910      	ldr	r1, [pc, #64]	@ (8008e24 <HAL_DMA_Abort_IT+0xcc>)
 8008de4:	400a      	ands	r2, r1
 8008de6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008df0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2225      	movs	r2, #37	@ 0x25
 8008df6:	2101      	movs	r1, #1
 8008df8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2224      	movs	r2, #36	@ 0x24
 8008dfe:	2100      	movs	r1, #0
 8008e00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d004      	beq.n	8008e14 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	0010      	movs	r0, r2
 8008e12:	4798      	blx	r3
    }
  }
  return status;
 8008e14:	230f      	movs	r3, #15
 8008e16:	18fb      	adds	r3, r7, r3
 8008e18:	781b      	ldrb	r3, [r3, #0]
}
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	b004      	add	sp, #16
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	46c0      	nop			@ (mov r8, r8)
 8008e24:	fffffeff 	.word	0xfffffeff

08008e28 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e14e      	b.n	80090d8 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	225c      	movs	r2, #92	@ 0x5c
 8008e3e:	5c9b      	ldrb	r3, [r3, r2]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d107      	bne.n	8008e56 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	225d      	movs	r2, #93	@ 0x5d
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	0018      	movs	r0, r3
 8008e52:	f7fc f8fd 	bl	8005050 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699a      	ldr	r2, [r3, #24]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2110      	movs	r1, #16
 8008e62:	438a      	bics	r2, r1
 8008e64:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e66:	f7fe fd6d 	bl	8007944 <HAL_GetTick>
 8008e6a:	0003      	movs	r3, r0
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008e6e:	e012      	b.n	8008e96 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008e70:	f7fe fd68 	bl	8007944 <HAL_GetTick>
 8008e74:	0002      	movs	r2, r0
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b0a      	cmp	r3, #10
 8008e7c:	d90b      	bls.n	8008e96 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e82:	2201      	movs	r2, #1
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	225c      	movs	r2, #92	@ 0x5c
 8008e8e:	2103      	movs	r1, #3
 8008e90:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e120      	b.n	80090d8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d0e5      	beq.n	8008e70 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2101      	movs	r1, #1
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008eb4:	f7fe fd46 	bl	8007944 <HAL_GetTick>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008ebc:	e012      	b.n	8008ee4 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008ebe:	f7fe fd41 	bl	8007944 <HAL_GetTick>
 8008ec2:	0002      	movs	r2, r0
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b0a      	cmp	r3, #10
 8008eca:	d90b      	bls.n	8008ee4 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	225c      	movs	r2, #92	@ 0x5c
 8008edc:	2103      	movs	r1, #3
 8008ede:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e0f9      	b.n	80090d8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	2201      	movs	r2, #1
 8008eec:	4013      	ands	r3, r2
 8008eee:	d0e6      	beq.n	8008ebe <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2102      	movs	r1, #2
 8008efc:	430a      	orrs	r2, r1
 8008efe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a76      	ldr	r2, [pc, #472]	@ (80090e0 <HAL_FDCAN_Init+0x2b8>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d103      	bne.n	8008f12 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008f0a:	4a76      	ldr	r2, [pc, #472]	@ (80090e4 <HAL_FDCAN_Init+0x2bc>)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	7c1b      	ldrb	r3, [r3, #16]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d108      	bne.n	8008f2c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	699a      	ldr	r2, [r3, #24]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2140      	movs	r1, #64	@ 0x40
 8008f26:	438a      	bics	r2, r1
 8008f28:	619a      	str	r2, [r3, #24]
 8008f2a:	e007      	b.n	8008f3c <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2140      	movs	r1, #64	@ 0x40
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7c5b      	ldrb	r3, [r3, #17]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d109      	bne.n	8008f58 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2180      	movs	r1, #128	@ 0x80
 8008f50:	01c9      	lsls	r1, r1, #7
 8008f52:	430a      	orrs	r2, r1
 8008f54:	619a      	str	r2, [r3, #24]
 8008f56:	e007      	b.n	8008f68 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4961      	ldr	r1, [pc, #388]	@ (80090e8 <HAL_FDCAN_Init+0x2c0>)
 8008f64:	400a      	ands	r2, r1
 8008f66:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7c9b      	ldrb	r3, [r3, #18]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d108      	bne.n	8008f82 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	495c      	ldr	r1, [pc, #368]	@ (80090ec <HAL_FDCAN_Init+0x2c4>)
 8008f7c:	400a      	ands	r2, r1
 8008f7e:	619a      	str	r2, [r3, #24]
 8008f80:	e008      	b.n	8008f94 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699a      	ldr	r2, [r3, #24]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2180      	movs	r1, #128	@ 0x80
 8008f8e:	0149      	lsls	r1, r1, #5
 8008f90:	430a      	orrs	r2, r1
 8008f92:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	4a55      	ldr	r2, [pc, #340]	@ (80090f0 <HAL_FDCAN_Init+0x2c8>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	0019      	movs	r1, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	21a4      	movs	r1, #164	@ 0xa4
 8008fb8:	438a      	bics	r2, r1
 8008fba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691a      	ldr	r2, [r3, #16]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2110      	movs	r1, #16
 8008fc8:	438a      	bics	r2, r1
 8008fca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d108      	bne.n	8008fe6 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2104      	movs	r1, #4
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	619a      	str	r2, [r3, #24]
 8008fe4:	e02c      	b.n	8009040 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d028      	beq.n	8009040 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d01c      	beq.n	8009030 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	699a      	ldr	r2, [r3, #24]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2180      	movs	r1, #128	@ 0x80
 8009002:	430a      	orrs	r2, r1
 8009004:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	691a      	ldr	r2, [r3, #16]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2110      	movs	r1, #16
 8009012:	430a      	orrs	r2, r1
 8009014:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d110      	bne.n	8009040 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	699a      	ldr	r2, [r3, #24]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2120      	movs	r1, #32
 800902a:	430a      	orrs	r2, r1
 800902c:	619a      	str	r2, [r3, #24]
 800902e:	e007      	b.n	8009040 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699a      	ldr	r2, [r3, #24]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2120      	movs	r1, #32
 800903c:	430a      	orrs	r2, r1
 800903e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	3b01      	subs	r3, #1
 8009046:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	3b01      	subs	r3, #1
 800904e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009050:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009058:	431a      	orrs	r2, r3
 800905a:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	3b01      	subs	r3, #1
 8009062:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009068:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800906a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	23c0      	movs	r3, #192	@ 0xc0
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	429a      	cmp	r2, r3
 8009076:	d115      	bne.n	80090a4 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009082:	3b01      	subs	r3, #1
 8009084:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009086:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908c:	3b01      	subs	r3, #1
 800908e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009090:	431a      	orrs	r2, r3
 8009092:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009098:	3b01      	subs	r3, #1
 800909a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80090a0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80090a2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	22c0      	movs	r2, #192	@ 0xc0
 80090aa:	5899      	ldr	r1, [r3, r2]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	21c0      	movs	r1, #192	@ 0xc0
 80090b8:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 f9bf 	bl	8009440 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	225c      	movs	r2, #92	@ 0x5c
 80090d2:	2101      	movs	r1, #1
 80090d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	0018      	movs	r0, r3
 80090da:	46bd      	mov	sp, r7
 80090dc:	b004      	add	sp, #16
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40006400 	.word	0x40006400
 80090e4:	40006500 	.word	0x40006500
 80090e8:	ffffbfff 	.word	0xffffbfff
 80090ec:	ffffefff 	.word	0xffffefff
 80090f0:	fffffcff 	.word	0xfffffcff

080090f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08c      	sub	sp, #48	@ 0x30
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009102:	23e0      	movs	r3, #224	@ 0xe0
 8009104:	015b      	lsls	r3, r3, #5
 8009106:	4013      	ands	r3, r2
 8009108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009112:	4013      	ands	r3, r2
 8009114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800911c:	2207      	movs	r2, #7
 800911e:	4013      	ands	r3, r2
 8009120:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912a:	4013      	ands	r3, r2
 800912c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009134:	2238      	movs	r2, #56	@ 0x38
 8009136:	4013      	ands	r3, r2
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	4013      	ands	r3, r2
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800914c:	23f1      	movs	r3, #241	@ 0xf1
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	4013      	ands	r3, r2
 8009152:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	4013      	ands	r3, r2
 800915e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009166:	23e0      	movs	r3, #224	@ 0xe0
 8009168:	031b      	lsls	r3, r3, #12
 800916a:	4013      	ands	r3, r2
 800916c:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	4013      	ands	r3, r2
 8009178:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009180:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009188:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	099b      	lsrs	r3, r3, #6
 800918e:	001a      	movs	r2, r3
 8009190:	2301      	movs	r3, #1
 8009192:	4013      	ands	r3, r2
 8009194:	d00d      	beq.n	80091b2 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	099b      	lsrs	r3, r3, #6
 800919a:	001a      	movs	r2, r3
 800919c:	2301      	movs	r3, #1
 800919e:	4013      	ands	r3, r2
 80091a0:	d007      	beq.n	80091b2 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2240      	movs	r2, #64	@ 0x40
 80091a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	0018      	movs	r0, r3
 80091ae:	f000 f92d 	bl	800940c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	0a1b      	lsrs	r3, r3, #8
 80091b6:	001a      	movs	r2, r3
 80091b8:	2301      	movs	r3, #1
 80091ba:	4013      	ands	r3, r2
 80091bc:	d01c      	beq.n	80091f8 <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	001a      	movs	r2, r3
 80091c4:	2301      	movs	r3, #1
 80091c6:	4013      	ands	r3, r2
 80091c8:	d016      	beq.n	80091f8 <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	22d8      	movs	r2, #216	@ 0xd8
 80091d0:	589b      	ldr	r3, [r3, r2]
 80091d2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	22e0      	movs	r2, #224	@ 0xe0
 80091da:	589a      	ldr	r2, [r3, r2]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4013      	ands	r3, r2
 80091e0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2280      	movs	r2, #128	@ 0x80
 80091e8:	0052      	lsls	r2, r2, #1
 80091ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	0011      	movs	r1, r2
 80091f2:	0018      	movs	r0, r3
 80091f4:	f000 f8f1 	bl	80093da <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80091f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009204:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	0011      	movs	r1, r2
 800920c:	0018      	movs	r0, r3
 800920e:	f000 f8b8 	bl	8009382 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	2b00      	cmp	r3, #0
 8009216:	d009      	beq.n	800922c <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800921e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	0011      	movs	r1, r2
 8009226:	0018      	movs	r0, r3
 8009228:	f000 f8b4 	bl	8009394 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009238:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800923a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	0011      	movs	r1, r2
 8009240:	0018      	movs	r0, r3
 8009242:	f000 f8b0 	bl	80093a6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	0a5b      	lsrs	r3, r3, #9
 800924a:	001a      	movs	r2, r3
 800924c:	2301      	movs	r3, #1
 800924e:	4013      	ands	r3, r2
 8009250:	d00e      	beq.n	8009270 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	0a5b      	lsrs	r3, r3, #9
 8009256:	001a      	movs	r2, r3
 8009258:	2301      	movs	r3, #1
 800925a:	4013      	ands	r3, r2
 800925c:	d008      	beq.n	8009270 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2280      	movs	r2, #128	@ 0x80
 8009264:	0092      	lsls	r2, r2, #2
 8009266:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	0018      	movs	r0, r3
 800926c:	f000 f8a4 	bl	80093b8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	09db      	lsrs	r3, r3, #7
 8009274:	001a      	movs	r2, r3
 8009276:	2301      	movs	r3, #1
 8009278:	4013      	ands	r3, r2
 800927a:	d01b      	beq.n	80092b4 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	09db      	lsrs	r3, r3, #7
 8009280:	001a      	movs	r2, r3
 8009282:	2301      	movs	r3, #1
 8009284:	4013      	ands	r3, r2
 8009286:	d015      	beq.n	80092b4 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	22d4      	movs	r2, #212	@ 0xd4
 800928e:	589b      	ldr	r3, [r3, r2]
 8009290:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	22dc      	movs	r2, #220	@ 0xdc
 8009298:	589a      	ldr	r2, [r3, r2]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4013      	ands	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2280      	movs	r2, #128	@ 0x80
 80092a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	0011      	movs	r1, r2
 80092ae:	0018      	movs	r0, r3
 80092b0:	f000 f88a 	bl	80093c8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	0b5b      	lsrs	r3, r3, #13
 80092b8:	001a      	movs	r2, r3
 80092ba:	2301      	movs	r3, #1
 80092bc:	4013      	ands	r3, r2
 80092be:	d00e      	beq.n	80092de <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	0b5b      	lsrs	r3, r3, #13
 80092c4:	001a      	movs	r2, r3
 80092c6:	2301      	movs	r3, #1
 80092c8:	4013      	ands	r3, r2
 80092ca:	d008      	beq.n	80092de <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2280      	movs	r2, #128	@ 0x80
 80092d2:	0192      	lsls	r2, r2, #6
 80092d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	0018      	movs	r0, r3
 80092da:	f000 f887 	bl	80093ec <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	0bdb      	lsrs	r3, r3, #15
 80092e2:	001a      	movs	r2, r3
 80092e4:	2301      	movs	r3, #1
 80092e6:	4013      	ands	r3, r2
 80092e8:	d00e      	beq.n	8009308 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	0bdb      	lsrs	r3, r3, #15
 80092ee:	001a      	movs	r2, r3
 80092f0:	2301      	movs	r3, #1
 80092f2:	4013      	ands	r3, r2
 80092f4:	d008      	beq.n	8009308 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2280      	movs	r2, #128	@ 0x80
 80092fc:	0212      	lsls	r2, r2, #8
 80092fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	0018      	movs	r0, r3
 8009304:	f000 f87a 	bl	80093fc <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	0b9b      	lsrs	r3, r3, #14
 800930c:	001a      	movs	r2, r3
 800930e:	2301      	movs	r3, #1
 8009310:	4013      	ands	r3, r2
 8009312:	d010      	beq.n	8009336 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	0b9b      	lsrs	r3, r3, #14
 8009318:	001a      	movs	r2, r3
 800931a:	2301      	movs	r3, #1
 800931c:	4013      	ands	r3, r2
 800931e:	d00a      	beq.n	8009336 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2280      	movs	r2, #128	@ 0x80
 8009326:	01d2      	lsls	r2, r2, #7
 8009328:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800932e:	2280      	movs	r2, #128	@ 0x80
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d009      	beq.n	8009350 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009344:	69fa      	ldr	r2, [r7, #28]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	0011      	movs	r1, r2
 800934a:	0018      	movs	r0, r3
 800934c:	f000 f86e 	bl	800942c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6a3a      	ldr	r2, [r7, #32]
 800935c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	431a      	orrs	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	0018      	movs	r0, r3
 8009376:	f000 f851 	bl	800941c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800937a:	46c0      	nop			@ (mov r8, r8)
 800937c:	46bd      	mov	sp, r7
 800937e:	b00c      	add	sp, #48	@ 0x30
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800938c:	46c0      	nop			@ (mov r8, r8)
 800938e:	46bd      	mov	sp, r7
 8009390:	b002      	add	sp, #8
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800939e:	46c0      	nop			@ (mov r8, r8)
 80093a0:	46bd      	mov	sp, r7
 80093a2:	b002      	add	sp, #8
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80093b0:	46c0      	nop			@ (mov r8, r8)
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b002      	add	sp, #8
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
 80093c2:	46bd      	mov	sp, r7
 80093c4:	b002      	add	sp, #8
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80093d2:	46c0      	nop			@ (mov r8, r8)
 80093d4:	46bd      	mov	sp, r7
 80093d6:	b002      	add	sp, #8
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80093e4:	46c0      	nop			@ (mov r8, r8)
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b002      	add	sp, #8
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80093f4:	46c0      	nop			@ (mov r8, r8)
 80093f6:	46bd      	mov	sp, r7
 80093f8:	b002      	add	sp, #8
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009404:	46c0      	nop			@ (mov r8, r8)
 8009406:	46bd      	mov	sp, r7
 8009408:	b002      	add	sp, #8
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009414:	46c0      	nop			@ (mov r8, r8)
 8009416:	46bd      	mov	sp, r7
 8009418:	b002      	add	sp, #8
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009424:	46c0      	nop			@ (mov r8, r8)
 8009426:	46bd      	mov	sp, r7
 8009428:	b002      	add	sp, #8
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009436:	46c0      	nop			@ (mov r8, r8)
 8009438:	46bd      	mov	sp, r7
 800943a:	b002      	add	sp, #8
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009448:	4b2f      	ldr	r3, [pc, #188]	@ (8009508 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800944a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a2e      	ldr	r2, [pc, #184]	@ (800950c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d105      	bne.n	8009462 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	22d4      	movs	r2, #212	@ 0xd4
 800945a:	0092      	lsls	r2, r2, #2
 800945c:	4694      	mov	ip, r2
 800945e:	4463      	add	r3, ip
 8009460:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2280      	movs	r2, #128	@ 0x80
 800946e:	589b      	ldr	r3, [r3, r2]
 8009470:	4a27      	ldr	r2, [pc, #156]	@ (8009510 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8009472:	4013      	ands	r3, r2
 8009474:	0019      	movs	r1, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947a:	041a      	lsls	r2, r3, #16
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	2180      	movs	r1, #128	@ 0x80
 8009484:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	3370      	adds	r3, #112	@ 0x70
 800948a:	001a      	movs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2280      	movs	r2, #128	@ 0x80
 8009496:	589b      	ldr	r3, [r3, r2]
 8009498:	4a1e      	ldr	r2, [pc, #120]	@ (8009514 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800949a:	4013      	ands	r3, r2
 800949c:	0019      	movs	r1, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a2:	061a      	lsls	r2, r3, #24
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	2180      	movs	r1, #128	@ 0x80
 80094ac:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	33b0      	adds	r3, #176	@ 0xb0
 80094b2:	001a      	movs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	3389      	adds	r3, #137	@ 0x89
 80094bc:	33ff      	adds	r3, #255	@ 0xff
 80094be:	001a      	movs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2298      	movs	r2, #152	@ 0x98
 80094c8:	0092      	lsls	r2, r2, #2
 80094ca:	189a      	adds	r2, r3, r2
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	229e      	movs	r2, #158	@ 0x9e
 80094d4:	0092      	lsls	r2, r2, #2
 80094d6:	189a      	adds	r2, r3, r2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e005      	b.n	80094ee <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3304      	adds	r3, #4
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	22d4      	movs	r2, #212	@ 0xd4
 80094f2:	0092      	lsls	r2, r2, #2
 80094f4:	4694      	mov	ip, r2
 80094f6:	4463      	add	r3, ip
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3f1      	bcc.n	80094e2 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	46c0      	nop			@ (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b004      	add	sp, #16
 8009506:	bd80      	pop	{r7, pc}
 8009508:	4000b400 	.word	0x4000b400
 800950c:	40006800 	.word	0x40006800
 8009510:	ffe0ffff 	.word	0xffe0ffff
 8009514:	f0ffffff 	.word	0xf0ffffff

08009518 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009518:	b5b0      	push	{r4, r5, r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603a      	str	r2, [r7, #0]
 8009524:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009526:	4b21      	ldr	r3, [pc, #132]	@ (80095ac <HAL_FLASH_Program+0x94>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <HAL_FLASH_Program+0x1a>
 800952e:	2302      	movs	r3, #2
 8009530:	e038      	b.n	80095a4 <HAL_FLASH_Program+0x8c>
 8009532:	4b1e      	ldr	r3, [pc, #120]	@ (80095ac <HAL_FLASH_Program+0x94>)
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009538:	4b1c      	ldr	r3, [pc, #112]	@ (80095ac <HAL_FLASH_Program+0x94>)
 800953a:	2200      	movs	r2, #0
 800953c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800953e:	2517      	movs	r5, #23
 8009540:	197c      	adds	r4, r7, r5
 8009542:	23fa      	movs	r3, #250	@ 0xfa
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	0018      	movs	r0, r3
 8009548:	f000 f8d6 	bl	80096f8 <FLASH_WaitForLastOperation>
 800954c:	0003      	movs	r3, r0
 800954e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8009550:	197b      	adds	r3, r7, r5
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d11f      	bne.n	8009598 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d106      	bne.n	800956c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	0008      	movs	r0, r1
 8009566:	f000 f915 	bl	8009794 <FLASH_Program_DoubleWord>
 800956a:	e005      	b.n	8009578 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	0011      	movs	r1, r2
 8009572:	0018      	movs	r0, r3
 8009574:	f006 fdc0 	bl	80100f8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009578:	2317      	movs	r3, #23
 800957a:	18fc      	adds	r4, r7, r3
 800957c:	23fa      	movs	r3, #250	@ 0xfa
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	0018      	movs	r0, r3
 8009582:	f000 f8b9 	bl	80096f8 <FLASH_WaitForLastOperation>
 8009586:	0003      	movs	r3, r0
 8009588:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800958a:	4b09      	ldr	r3, [pc, #36]	@ (80095b0 <HAL_FLASH_Program+0x98>)
 800958c:	695a      	ldr	r2, [r3, #20]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	43d9      	mvns	r1, r3
 8009592:	4b07      	ldr	r3, [pc, #28]	@ (80095b0 <HAL_FLASH_Program+0x98>)
 8009594:	400a      	ands	r2, r1
 8009596:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009598:	4b04      	ldr	r3, [pc, #16]	@ (80095ac <HAL_FLASH_Program+0x94>)
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800959e:	2317      	movs	r3, #23
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	781b      	ldrb	r3, [r3, #0]
}
 80095a4:	0018      	movs	r0, r3
 80095a6:	46bd      	mov	sp, r7
 80095a8:	b006      	add	sp, #24
 80095aa:	bdb0      	pop	{r4, r5, r7, pc}
 80095ac:	20001e54 	.word	0x20001e54
 80095b0:	40022000 	.word	0x40022000

080095b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80095ba:	1dfb      	adds	r3, r7, #7
 80095bc:	2200      	movs	r2, #0
 80095be:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80095c0:	4b0b      	ldr	r3, [pc, #44]	@ (80095f0 <HAL_FLASH_Unlock+0x3c>)
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	da0c      	bge.n	80095e2 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80095c8:	4b09      	ldr	r3, [pc, #36]	@ (80095f0 <HAL_FLASH_Unlock+0x3c>)
 80095ca:	4a0a      	ldr	r2, [pc, #40]	@ (80095f4 <HAL_FLASH_Unlock+0x40>)
 80095cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80095ce:	4b08      	ldr	r3, [pc, #32]	@ (80095f0 <HAL_FLASH_Unlock+0x3c>)
 80095d0:	4a09      	ldr	r2, [pc, #36]	@ (80095f8 <HAL_FLASH_Unlock+0x44>)
 80095d2:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80095d4:	4b06      	ldr	r3, [pc, #24]	@ (80095f0 <HAL_FLASH_Unlock+0x3c>)
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da02      	bge.n	80095e2 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80095dc:	1dfb      	adds	r3, r7, #7
 80095de:	2201      	movs	r2, #1
 80095e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80095e2:	1dfb      	adds	r3, r7, #7
 80095e4:	781b      	ldrb	r3, [r3, #0]
}
 80095e6:	0018      	movs	r0, r3
 80095e8:	46bd      	mov	sp, r7
 80095ea:	b002      	add	sp, #8
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	46c0      	nop			@ (mov r8, r8)
 80095f0:	40022000 	.word	0x40022000
 80095f4:	45670123 	.word	0x45670123
 80095f8:	cdef89ab 	.word	0xcdef89ab

080095fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009602:	1dfb      	adds	r3, r7, #7
 8009604:	2201      	movs	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009608:	23fa      	movs	r3, #250	@ 0xfa
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	0018      	movs	r0, r3
 800960e:	f000 f873 	bl	80096f8 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009612:	4b0a      	ldr	r3, [pc, #40]	@ (800963c <HAL_FLASH_Lock+0x40>)
 8009614:	695a      	ldr	r2, [r3, #20]
 8009616:	4b09      	ldr	r3, [pc, #36]	@ (800963c <HAL_FLASH_Lock+0x40>)
 8009618:	2180      	movs	r1, #128	@ 0x80
 800961a:	0609      	lsls	r1, r1, #24
 800961c:	430a      	orrs	r2, r1
 800961e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8009620:	4b06      	ldr	r3, [pc, #24]	@ (800963c <HAL_FLASH_Lock+0x40>)
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	da02      	bge.n	800962e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8009628:	1dfb      	adds	r3, r7, #7
 800962a:	2200      	movs	r2, #0
 800962c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800962e:	1dfb      	adds	r3, r7, #7
 8009630:	781b      	ldrb	r3, [r3, #0]
}
 8009632:	0018      	movs	r0, r3
 8009634:	46bd      	mov	sp, r7
 8009636:	b002      	add	sp, #8
 8009638:	bd80      	pop	{r7, pc}
 800963a:	46c0      	nop			@ (mov r8, r8)
 800963c:	40022000 	.word	0x40022000

08009640 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009646:	1dfb      	adds	r3, r7, #7
 8009648:	2201      	movs	r2, #1
 800964a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800964c:	4b0d      	ldr	r3, [pc, #52]	@ (8009684 <HAL_FLASH_OB_Unlock+0x44>)
 800964e:	695a      	ldr	r2, [r3, #20]
 8009650:	2380      	movs	r3, #128	@ 0x80
 8009652:	05db      	lsls	r3, r3, #23
 8009654:	4013      	ands	r3, r2
 8009656:	d00e      	beq.n	8009676 <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8009658:	4b0a      	ldr	r3, [pc, #40]	@ (8009684 <HAL_FLASH_OB_Unlock+0x44>)
 800965a:	4a0b      	ldr	r2, [pc, #44]	@ (8009688 <HAL_FLASH_OB_Unlock+0x48>)
 800965c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800965e:	4b09      	ldr	r3, [pc, #36]	@ (8009684 <HAL_FLASH_OB_Unlock+0x44>)
 8009660:	4a0a      	ldr	r2, [pc, #40]	@ (800968c <HAL_FLASH_OB_Unlock+0x4c>)
 8009662:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8009664:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <HAL_FLASH_OB_Unlock+0x44>)
 8009666:	695a      	ldr	r2, [r3, #20]
 8009668:	2380      	movs	r3, #128	@ 0x80
 800966a:	05db      	lsls	r3, r3, #23
 800966c:	4013      	ands	r3, r2
 800966e:	d102      	bne.n	8009676 <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 8009670:	1dfb      	adds	r3, r7, #7
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8009676:	1dfb      	adds	r3, r7, #7
 8009678:	781b      	ldrb	r3, [r3, #0]
}
 800967a:	0018      	movs	r0, r3
 800967c:	46bd      	mov	sp, r7
 800967e:	b002      	add	sp, #8
 8009680:	bd80      	pop	{r7, pc}
 8009682:	46c0      	nop			@ (mov r8, r8)
 8009684:	40022000 	.word	0x40022000
 8009688:	08192a3b 	.word	0x08192a3b
 800968c:	4c5d6e7f 	.word	0x4c5d6e7f

08009690 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009696:	1dfb      	adds	r3, r7, #7
 8009698:	2201      	movs	r2, #1
 800969a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800969c:	23fa      	movs	r3, #250	@ 0xfa
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	0018      	movs	r0, r3
 80096a2:	f000 f829 	bl	80096f8 <FLASH_WaitForLastOperation>

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 80096a6:	4b0b      	ldr	r3, [pc, #44]	@ (80096d4 <HAL_FLASH_OB_Lock+0x44>)
 80096a8:	695a      	ldr	r2, [r3, #20]
 80096aa:	4b0a      	ldr	r3, [pc, #40]	@ (80096d4 <HAL_FLASH_OB_Lock+0x44>)
 80096ac:	2180      	movs	r1, #128	@ 0x80
 80096ae:	05c9      	lsls	r1, r1, #23
 80096b0:	430a      	orrs	r2, r1
 80096b2:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 80096b4:	4b07      	ldr	r3, [pc, #28]	@ (80096d4 <HAL_FLASH_OB_Lock+0x44>)
 80096b6:	695a      	ldr	r2, [r3, #20]
 80096b8:	2380      	movs	r3, #128	@ 0x80
 80096ba:	05db      	lsls	r3, r3, #23
 80096bc:	4013      	ands	r3, r2
 80096be:	d002      	beq.n	80096c6 <HAL_FLASH_OB_Lock+0x36>
  {
    status = HAL_OK;
 80096c0:	1dfb      	adds	r3, r7, #7
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80096c6:	1dfb      	adds	r3, r7, #7
 80096c8:	781b      	ldrb	r3, [r3, #0]
}
 80096ca:	0018      	movs	r0, r3
 80096cc:	46bd      	mov	sp, r7
 80096ce:	b002      	add	sp, #8
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	46c0      	nop			@ (mov r8, r8)
 80096d4:	40022000 	.word	0x40022000

080096d8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80096dc:	4b05      	ldr	r3, [pc, #20]	@ (80096f4 <HAL_FLASH_OB_Launch+0x1c>)
 80096de:	695a      	ldr	r2, [r3, #20]
 80096e0:	4b04      	ldr	r3, [pc, #16]	@ (80096f4 <HAL_FLASH_OB_Launch+0x1c>)
 80096e2:	2180      	movs	r1, #128	@ 0x80
 80096e4:	0509      	lsls	r1, r1, #20
 80096e6:	430a      	orrs	r2, r1
 80096e8:	615a      	str	r2, [r3, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
}
 80096ec:	0018      	movs	r0, r3
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	46c0      	nop			@ (mov r8, r8)
 80096f4:	40022000 	.word	0x40022000

080096f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8009700:	f7fe f920 	bl	8007944 <HAL_GetTick>
 8009704:	0003      	movs	r3, r0
 8009706:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8009708:	23c0      	movs	r3, #192	@ 0xc0
 800970a:	029b      	lsls	r3, r3, #10
 800970c:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800970e:	e00c      	b.n	800972a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3301      	adds	r3, #1
 8009714:	d009      	beq.n	800972a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8009716:	f7fe f915 	bl	8007944 <HAL_GetTick>
 800971a:	0002      	movs	r2, r0
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	429a      	cmp	r2, r3
 8009724:	d801      	bhi.n	800972a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e028      	b.n	800977c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800972a:	4b16      	ldr	r3, [pc, #88]	@ (8009784 <FLASH_WaitForLastOperation+0x8c>)
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	4013      	ands	r3, r2
 8009732:	d1ed      	bne.n	8009710 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8009734:	4b13      	ldr	r3, [pc, #76]	@ (8009784 <FLASH_WaitForLastOperation+0x8c>)
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	4a13      	ldr	r2, [pc, #76]	@ (8009788 <FLASH_WaitForLastOperation+0x90>)
 800973a:	4013      	ands	r3, r2
 800973c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800973e:	4b11      	ldr	r3, [pc, #68]	@ (8009784 <FLASH_WaitForLastOperation+0x8c>)
 8009740:	4a12      	ldr	r2, [pc, #72]	@ (800978c <FLASH_WaitForLastOperation+0x94>)
 8009742:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d011      	beq.n	800976e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800974a:	4b11      	ldr	r3, [pc, #68]	@ (8009790 <FLASH_WaitForLastOperation+0x98>)
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e013      	b.n	800977c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3301      	adds	r3, #1
 8009758:	d009      	beq.n	800976e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800975a:	f7fe f8f3 	bl	8007944 <HAL_GetTick>
 800975e:	0002      	movs	r2, r0
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	429a      	cmp	r2, r3
 8009768:	d801      	bhi.n	800976e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e006      	b.n	800977c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800976e:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <FLASH_WaitForLastOperation+0x8c>)
 8009770:	691a      	ldr	r2, [r3, #16]
 8009772:	2380      	movs	r3, #128	@ 0x80
 8009774:	02db      	lsls	r3, r3, #11
 8009776:	4013      	ands	r3, r2
 8009778:	d1ec      	bne.n	8009754 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	0018      	movs	r0, r3
 800977e:	46bd      	mov	sp, r7
 8009780:	b004      	add	sp, #16
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40022000 	.word	0x40022000
 8009788:	0000c3fa 	.word	0x0000c3fa
 800978c:	0008c3fb 	.word	0x0008c3fb
 8009790:	20001e54 	.word	0x20001e54

08009794 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009794:	b5b0      	push	{r4, r5, r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	603a      	str	r2, [r7, #0]
 800979e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80097a0:	4b0b      	ldr	r3, [pc, #44]	@ (80097d0 <FLASH_Program_DoubleWord+0x3c>)
 80097a2:	695a      	ldr	r2, [r3, #20]
 80097a4:	4b0a      	ldr	r3, [pc, #40]	@ (80097d0 <FLASH_Program_DoubleWord+0x3c>)
 80097a6:	2101      	movs	r1, #1
 80097a8:	430a      	orrs	r2, r1
 80097aa:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80097b2:	f3bf 8f6f 	isb	sy
}
 80097b6:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	001c      	movs	r4, r3
 80097bc:	2300      	movs	r3, #0
 80097be:	001d      	movs	r5, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3304      	adds	r3, #4
 80097c4:	0022      	movs	r2, r4
 80097c6:	601a      	str	r2, [r3, #0]
}
 80097c8:	46c0      	nop			@ (mov r8, r8)
 80097ca:	46bd      	mov	sp, r7
 80097cc:	b004      	add	sp, #16
 80097ce:	bdb0      	pop	{r4, r5, r7, pc}
 80097d0:	40022000 	.word	0x40022000

080097d4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80097d4:	b5b0      	push	{r4, r5, r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80097de:	4b33      	ldr	r3, [pc, #204]	@ (80098ac <HAL_FLASHEx_Erase+0xd8>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d101      	bne.n	80097ea <HAL_FLASHEx_Erase+0x16>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e05c      	b.n	80098a4 <HAL_FLASHEx_Erase+0xd0>
 80097ea:	4b30      	ldr	r3, [pc, #192]	@ (80098ac <HAL_FLASHEx_Erase+0xd8>)
 80097ec:	2201      	movs	r2, #1
 80097ee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80097f0:	4b2e      	ldr	r3, [pc, #184]	@ (80098ac <HAL_FLASHEx_Erase+0xd8>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80097f6:	250f      	movs	r5, #15
 80097f8:	197c      	adds	r4, r7, r5
 80097fa:	23fa      	movs	r3, #250	@ 0xfa
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	0018      	movs	r0, r3
 8009800:	f7ff ff7a 	bl	80096f8 <FLASH_WaitForLastOperation>
 8009804:	0003      	movs	r3, r0
 8009806:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8009808:	002c      	movs	r4, r5
 800980a:	193b      	adds	r3, r7, r4
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d142      	bne.n	8009898 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b04      	cmp	r3, #4
 8009818:	d10d      	bne.n	8009836 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	0018      	movs	r0, r3
 8009820:	f000 f978 	bl	8009b14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009824:	193c      	adds	r4, r7, r4
 8009826:	23fa      	movs	r3, #250	@ 0xfa
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	0018      	movs	r0, r3
 800982c:	f7ff ff64 	bl	80096f8 <FLASH_WaitForLastOperation>
 8009830:	0003      	movs	r3, r0
 8009832:	7023      	strb	r3, [r4, #0]
 8009834:	e030      	b.n	8009898 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2201      	movs	r2, #1
 800983a:	4252      	negs	r2, r2
 800983c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	60bb      	str	r3, [r7, #8]
 8009844:	e01a      	b.n	800987c <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	0011      	movs	r1, r2
 800984e:	0018      	movs	r0, r3
 8009850:	f000 f974 	bl	8009b3c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009854:	250f      	movs	r5, #15
 8009856:	197c      	adds	r4, r7, r5
 8009858:	23fa      	movs	r3, #250	@ 0xfa
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	0018      	movs	r0, r3
 800985e:	f7ff ff4b 	bl	80096f8 <FLASH_WaitForLastOperation>
 8009862:	0003      	movs	r3, r0
 8009864:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8009866:	197b      	adds	r3, r7, r5
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	601a      	str	r2, [r3, #0]
          break;
 8009874:	e00a      	b.n	800988c <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3301      	adds	r3, #1
 800987a:	60bb      	str	r3, [r7, #8]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	18d3      	adds	r3, r2, r3
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	429a      	cmp	r2, r3
 800988a:	d3dc      	bcc.n	8009846 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800988c:	4b08      	ldr	r3, [pc, #32]	@ (80098b0 <HAL_FLASHEx_Erase+0xdc>)
 800988e:	695a      	ldr	r2, [r3, #20]
 8009890:	4b07      	ldr	r3, [pc, #28]	@ (80098b0 <HAL_FLASHEx_Erase+0xdc>)
 8009892:	2102      	movs	r1, #2
 8009894:	438a      	bics	r2, r1
 8009896:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009898:	4b04      	ldr	r3, [pc, #16]	@ (80098ac <HAL_FLASHEx_Erase+0xd8>)
 800989a:	2200      	movs	r2, #0
 800989c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800989e:	230f      	movs	r3, #15
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	781b      	ldrb	r3, [r3, #0]
}
 80098a4:	0018      	movs	r0, r3
 80098a6:	46bd      	mov	sp, r7
 80098a8:	b004      	add	sp, #16
 80098aa:	bdb0      	pop	{r4, r5, r7, pc}
 80098ac:	20001e54 	.word	0x20001e54
 80098b0:	40022000 	.word	0x40022000

080098b4 <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80098b4:	b5b0      	push	{r4, r5, r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80098bc:	4b60      	ldr	r3, [pc, #384]	@ (8009a40 <HAL_FLASHEx_OBProgram+0x18c>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_FLASHEx_OBProgram+0x14>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e0b6      	b.n	8009a36 <HAL_FLASHEx_OBProgram+0x182>
 80098c8:	4b5d      	ldr	r3, [pc, #372]	@ (8009a40 <HAL_FLASHEx_OBProgram+0x18c>)
 80098ca:	2201      	movs	r2, #1
 80098cc:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80098ce:	4b5c      	ldr	r3, [pc, #368]	@ (8009a40 <HAL_FLASHEx_OBProgram+0x18c>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2201      	movs	r2, #1
 80098da:	4013      	ands	r3, r2
 80098dc:	d008      	beq.n	80098f0 <HAL_FLASHEx_OBProgram+0x3c>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6858      	ldr	r0, [r3, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6899      	ldr	r1, [r3, #8]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	001a      	movs	r2, r3
 80098ec:	f000 f952 	bl	8009b94 <FLASH_OB_WRPConfig>
  }

  /* Option register */
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2206      	movs	r2, #6
 80098f6:	4013      	ands	r3, r2
 80098f8:	2b06      	cmp	r3, #6
 80098fa:	d109      	bne.n	8009910 <HAL_FLASHEx_OBProgram+0x5c>
  {
    /* Fully modify OPTR register with RDP & user data */
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, pOBInit->RDPLevel);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6958      	ldr	r0, [r3, #20]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6999      	ldr	r1, [r3, #24]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	001a      	movs	r2, r3
 800990a:	f000 f9bf 	bl	8009c8c <FLASH_OB_OptrConfig>
 800990e:	e021      	b.n	8009954 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2202      	movs	r2, #2
 8009916:	4013      	ands	r3, r2
 8009918:	d00b      	beq.n	8009932 <HAL_FLASHEx_OBProgram+0x7e>
  {
    /* Only modify RDP so get current user data */
    optr = FLASH_OB_GetUser();
 800991a:	f000 f9ed 	bl	8009cf8 <FLASH_OB_GetUser>
 800991e:	0003      	movs	r3, r0
 8009920:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	691a      	ldr	r2, [r3, #16]
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	0018      	movs	r0, r3
 800992c:	f000 f9ae 	bl	8009c8c <FLASH_OB_OptrConfig>
 8009930:	e010      	b.n	8009954 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2204      	movs	r2, #4
 8009938:	4013      	ands	r3, r2
 800993a:	d00b      	beq.n	8009954 <HAL_FLASHEx_OBProgram+0xa0>
  {
    /* Only modify user so get current RDP level */
    optr = FLASH_OB_GetRDP();
 800993c:	f000 f9c4 	bl	8009cc8 <FLASH_OB_GetRDP>
 8009940:	0003      	movs	r3, r0
 8009942:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, optr);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6958      	ldr	r0, [r3, #20]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	0019      	movs	r1, r3
 8009950:	f000 f99c 	bl	8009c8c <FLASH_OB_OptrConfig>
    /* nothing to do */
  }

#if defined(FLASH_PCROP_SUPPORT)
  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0x00U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2208      	movs	r2, #8
 800995a:	4013      	ands	r3, r2
 800995c:	d034      	beq.n	80099c8 <HAL_FLASHEx_OBProgram+0x114>
  {
    /* Check the parameters */
    assert_param(IS_OB_PCROP_CONFIG(pOBInit->PCROPConfig));

    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0x00U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	4a38      	ldr	r2, [pc, #224]	@ (8009a44 <HAL_FLASHEx_OBProgram+0x190>)
 8009964:	4013      	ands	r3, r2
 8009966:	d008      	beq.n	800997a <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the 1A Proprietary code readout protection */
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	69d8      	ldr	r0, [r3, #28]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a19      	ldr	r1, [r3, #32]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009974:	001a      	movs	r2, r3
 8009976:	f000 f9d1 	bl	8009d1c <FLASH_OB_PCROP1AConfig>
    }

    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0x00U)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	2202      	movs	r2, #2
 8009980:	4013      	ands	r3, r2
 8009982:	d007      	beq.n	8009994 <HAL_FLASHEx_OBProgram+0xe0>
    {
      /* Configure the 1B Proprietary code readout protection */
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998c:	0019      	movs	r1, r3
 800998e:	0010      	movs	r0, r2
 8009990:	f000 fa4e 	bl	8009e30 <FLASH_OB_PCROP1BConfig>
    }

#if defined(FLASH_DBANK_SUPPORT)
    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE2_A) != 0x00U)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	2204      	movs	r2, #4
 800999a:	4013      	ands	r3, r2
 800999c:	d007      	beq.n	80099ae <HAL_FLASHEx_OBProgram+0xfa>
    {
      /* Configure the 2A Proprietary code readout protection */
      FLASH_OB_PCROP2AConfig(pOBInit->PCROP2AStartAddr, pOBInit->PCROP2AEndAddr);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a6:	0019      	movs	r1, r3
 80099a8:	0010      	movs	r0, r2
 80099aa:	f000 fbcb 	bl	800a144 <FLASH_OB_PCROP2AConfig>
    }

    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE2_B) != 0x00U)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	2208      	movs	r2, #8
 80099b4:	4013      	ands	r3, r2
 80099b6:	d007      	beq.n	80099c8 <HAL_FLASHEx_OBProgram+0x114>
    {
      /* Configure the 2B Proprietary code readout protection */
      FLASH_OB_PCROP2BConfig(pOBInit->PCROP2BStartAddr, pOBInit->PCROP2BEndAddr);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c0:	0019      	movs	r1, r3
 80099c2:	0010      	movs	r0, r2
 80099c4:	f000 fc18 	bl	800a1f8 <FLASH_OB_PCROP2BConfig>
  }
#endif /* FLASH_PCROP_SUPPORT */

#if defined(FLASH_SECURABLE_MEMORY_SUPPORT)
  /* Securable Memory Area Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0x00U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2210      	movs	r2, #16
 80099ce:	4013      	ands	r3, r2
 80099d0:	d008      	beq.n	80099e4 <HAL_FLASHEx_OBProgram+0x130>
  {
#if defined(FLASH_DBANK_SUPPORT)
    /* Configure the securable memory area protection */
    FLASH_OB_SecMemConfig(pOBInit->BootEntryPoint, pOBInit->SecSize, pOBInit->SecSize2);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099de:	001a      	movs	r2, r3
 80099e0:	f000 fd3c 	bl	800a45c <FLASH_OB_SecMemConfig>
#endif /* FLASH_DBANK_SUPPORT */
  }
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80099e4:	250f      	movs	r5, #15
 80099e6:	197c      	adds	r4, r7, r5
 80099e8:	23fa      	movs	r3, #250	@ 0xfa
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	0018      	movs	r0, r3
 80099ee:	f7ff fe83 	bl	80096f8 <FLASH_WaitForLastOperation>
 80099f2:	0003      	movs	r3, r0
 80099f4:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80099f6:	0028      	movs	r0, r5
 80099f8:	183b      	adds	r3, r7, r0
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d114      	bne.n	8009a2a <HAL_FLASHEx_OBProgram+0x176>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8009a00:	4b11      	ldr	r3, [pc, #68]	@ (8009a48 <HAL_FLASHEx_OBProgram+0x194>)
 8009a02:	695a      	ldr	r2, [r3, #20]
 8009a04:	4b10      	ldr	r3, [pc, #64]	@ (8009a48 <HAL_FLASHEx_OBProgram+0x194>)
 8009a06:	2180      	movs	r1, #128	@ 0x80
 8009a08:	0289      	lsls	r1, r1, #10
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	615a      	str	r2, [r3, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009a0e:	183c      	adds	r4, r7, r0
 8009a10:	23fa      	movs	r3, #250	@ 0xfa
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	0018      	movs	r0, r3
 8009a16:	f7ff fe6f 	bl	80096f8 <FLASH_WaitForLastOperation>
 8009a1a:	0003      	movs	r3, r0
 8009a1c:	7023      	strb	r3, [r4, #0]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <HAL_FLASHEx_OBProgram+0x194>)
 8009a20:	695a      	ldr	r2, [r3, #20]
 8009a22:	4b09      	ldr	r3, [pc, #36]	@ (8009a48 <HAL_FLASHEx_OBProgram+0x194>)
 8009a24:	4909      	ldr	r1, [pc, #36]	@ (8009a4c <HAL_FLASHEx_OBProgram+0x198>)
 8009a26:	400a      	ands	r2, r1
 8009a28:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009a2a:	4b05      	ldr	r3, [pc, #20]	@ (8009a40 <HAL_FLASHEx_OBProgram+0x18c>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009a30:	230f      	movs	r3, #15
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	781b      	ldrb	r3, [r3, #0]
}
 8009a36:	0018      	movs	r0, r3
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	b004      	add	sp, #16
 8009a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a3e:	46c0      	nop			@ (mov r8, r8)
 8009a40:	20001e54 	.word	0x20001e54
 8009a44:	80000001 	.word	0x80000001
 8009a48:	40022000 	.word	0x40022000
 8009a4c:	fffdffff 	.word	0xfffdffff

08009a50 <HAL_FLASHEx_OBGetConfig>:
  *                  configuration information. The fields pOBInit->WRPArea should
  *                  indicate which area is requested for the WRP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	221f      	movs	r2, #31
 8009a5c:	601a      	str	r2, [r3, #0]

  /* Get write protection on the selected area */
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6858      	ldr	r0, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3308      	adds	r3, #8
 8009a66:	0019      	movs	r1, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	330c      	adds	r3, #12
 8009a6c:	001a      	movs	r2, r3
 8009a6e:	f000 f8c1 	bl	8009bf4 <FLASH_OB_GetWRP>

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8009a72:	f000 f929 	bl	8009cc8 <FLASH_OB_GetRDP>
 8009a76:	0002      	movs	r2, r0
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8009a7c:	f000 f93c 	bl	8009cf8 <FLASH_OB_GetUser>
 8009a80:	0002      	movs	r2, r0
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	619a      	str	r2, [r3, #24]
  pOBInit->USERType = OB_USER_ALL;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a21      	ldr	r2, [pc, #132]	@ (8009b10 <HAL_FLASHEx_OBGetConfig+0xc0>)
 8009a8a:	615a      	str	r2, [r3, #20]

#if defined(FLASH_PCROP_SUPPORT)
  /* Get the Proprietary code readout protection */
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	331c      	adds	r3, #28
 8009a90:	0018      	movs	r0, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3320      	adds	r3, #32
 8009a96:	0019      	movs	r1, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3324      	adds	r3, #36	@ 0x24
 8009a9c:	001a      	movs	r2, r3
 8009a9e:	f000 fa39 	bl	8009f14 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3328      	adds	r3, #40	@ 0x28
 8009aa6:	001a      	movs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	332c      	adds	r3, #44	@ 0x2c
 8009aac:	0019      	movs	r1, r3
 8009aae:	0010      	movs	r0, r2
 8009ab0:	f000 fac4 	bl	800a03c <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	2203      	movs	r2, #3
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	61da      	str	r2, [r3, #28]
#if defined(FLASH_DBANK_SUPPORT)
  FLASH_OB_GetPCROP2A(&(pOBInit->PCROP2AStartAddr), &(pOBInit->PCROP2AEndAddr));
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3330      	adds	r3, #48	@ 0x30
 8009ac4:	001a      	movs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3334      	adds	r3, #52	@ 0x34
 8009aca:	0019      	movs	r1, r3
 8009acc:	0010      	movs	r0, r2
 8009ace:	f000 fbed 	bl	800a2ac <FLASH_OB_GetPCROP2A>
  FLASH_OB_GetPCROP2B(&(pOBInit->PCROP2BStartAddr), &(pOBInit->PCROP2BEndAddr));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3338      	adds	r3, #56	@ 0x38
 8009ad6:	001a      	movs	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	333c      	adds	r3, #60	@ 0x3c
 8009adc:	0019      	movs	r1, r3
 8009ade:	0010      	movs	r0, r2
 8009ae0:	f000 fc50 	bl	800a384 <FLASH_OB_GetPCROP2B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE2_A | OB_PCROP_ZONE2_B);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	69db      	ldr	r3, [r3, #28]
 8009ae8:	220c      	movs	r2, #12
 8009aea:	431a      	orrs	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	61da      	str	r2, [r3, #28]
#endif /* FLASH_PCROP_SUPPORT */

#if defined(FLASH_SECURABLE_MEMORY_SUPPORT)
#if defined(FLASH_DBANK_SUPPORT)
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize), &(pOBInit->SecSize2));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3340      	adds	r3, #64	@ 0x40
 8009af4:	0018      	movs	r0, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3344      	adds	r3, #68	@ 0x44
 8009afa:	0019      	movs	r1, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3348      	adds	r3, #72	@ 0x48
 8009b00:	001a      	movs	r2, r3
 8009b02:	f000 fcd1 	bl	800a4a8 <FLASH_OB_GetSecMem>
#else
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
#endif /* FLASH_DBANK_SUPPORT */
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */
}
 8009b06:	46c0      	nop			@ (mov r8, r8)
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	b002      	add	sp, #8
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	46c0      	nop			@ (mov r8, r8)
 8009b10:	3f7fff00 	.word	0x3f7fff00

08009b14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <FLASH_MassErase+0x24>)
 8009b1e:	695a      	ldr	r2, [r3, #20]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	4b04      	ldr	r3, [pc, #16]	@ (8009b38 <FLASH_MassErase+0x24>)
 8009b26:	2180      	movs	r1, #128	@ 0x80
 8009b28:	0249      	lsls	r1, r1, #9
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	615a      	str	r2, [r3, #20]
}
 8009b2e:	46c0      	nop			@ (mov r8, r8)
 8009b30:	46bd      	mov	sp, r7
 8009b32:	b002      	add	sp, #8
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	46c0      	nop			@ (mov r8, r8)
 8009b38:	40022000 	.word	0x40022000

08009b3c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8009b46:	4b0f      	ldr	r3, [pc, #60]	@ (8009b84 <FLASH_PageErase+0x48>)
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b88 <FLASH_PageErase+0x4c>)
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d005      	beq.n	8009b62 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2280      	movs	r2, #128	@ 0x80
 8009b5a:	0192      	lsls	r2, r2, #6
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	e003      	b.n	8009b6a <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4a09      	ldr	r2, [pc, #36]	@ (8009b8c <FLASH_PageErase+0x50>)
 8009b66:	4013      	ands	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	00da      	lsls	r2, r3, #3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	431a      	orrs	r2, r3
 8009b72:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <FLASH_PageErase+0x48>)
 8009b74:	4906      	ldr	r1, [pc, #24]	@ (8009b90 <FLASH_PageErase+0x54>)
 8009b76:	430a      	orrs	r2, r1
 8009b78:	615a      	str	r2, [r3, #20]
}
 8009b7a:	46c0      	nop			@ (mov r8, r8)
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	b004      	add	sp, #16
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	46c0      	nop			@ (mov r8, r8)
 8009b84:	40022000 	.word	0x40022000
 8009b88:	ffffe007 	.word	0xffffe007
 8009b8c:	ffffdfff 	.word	0xffffdfff
 8009b90:	00010002 	.word	0x00010002

08009b94 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset  Specifies the end page of the write protected area
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the Flash Bank - 1)
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d106      	bne.n	8009bb4 <FLASH_OB_WRPConfig+0x20>
  {
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	0419      	lsls	r1, r3, #16
 8009baa:	4b11      	ldr	r3, [pc, #68]	@ (8009bf0 <FLASH_OB_WRPConfig+0x5c>)
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* FLASH_DBANK_SUPPORT */
  else
  {
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
  }
}
 8009bb2:	e019      	b.n	8009be8 <FLASH_OB_WRPConfig+0x54>
  else if (WRPArea == OB_WRPAREA_ZONE2_A)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d106      	bne.n	8009bc8 <FLASH_OB_WRPConfig+0x34>
    FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	0419      	lsls	r1, r3, #16
 8009bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf0 <FLASH_OB_WRPConfig+0x5c>)
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8009bc6:	e00f      	b.n	8009be8 <FLASH_OB_WRPConfig+0x54>
  else if (WRPArea == OB_WRPAREA_ZONE2_B)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b08      	cmp	r3, #8
 8009bcc:	d106      	bne.n	8009bdc <FLASH_OB_WRPConfig+0x48>
    FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	0419      	lsls	r1, r3, #16
 8009bd2:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <FLASH_OB_WRPConfig+0x5c>)
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009bda:	e005      	b.n	8009be8 <FLASH_OB_WRPConfig+0x54>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	0419      	lsls	r1, r3, #16
 8009be0:	4b03      	ldr	r3, [pc, #12]	@ (8009bf0 <FLASH_OB_WRPConfig+0x5c>)
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009be8:	46c0      	nop			@ (mov r8, r8)
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b004      	add	sp, #16
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	40022000 	.word	0x40022000

08009bf4 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset  Dpecifies the address where to copied the end page of
  *                        the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d10d      	bne.n	8009c22 <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8009c06:	4b20      	ldr	r3, [pc, #128]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0a:	227f      	movs	r2, #127	@ 0x7f
 8009c0c:	401a      	ands	r2, r3
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8009c12:	4b1d      	ldr	r3, [pc, #116]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c16:	0c1b      	lsrs	r3, r3, #16
 8009c18:	227f      	movs	r2, #127	@ 0x7f
 8009c1a:	401a      	ands	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	601a      	str	r2, [r3, #0]
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 8009c20:	e02e      	b.n	8009c80 <FLASH_OB_GetWRP+0x8c>
  else if (WRPArea == OB_WRPAREA_ZONE2_A)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d10d      	bne.n	8009c44 <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8009c28:	4b17      	ldr	r3, [pc, #92]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c2c:	227f      	movs	r2, #127	@ 0x7f
 8009c2e:	401a      	ands	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 8009c34:	4b14      	ldr	r3, [pc, #80]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c38:	0c1b      	lsrs	r3, r3, #16
 8009c3a:	227f      	movs	r2, #127	@ 0x7f
 8009c3c:	401a      	ands	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	601a      	str	r2, [r3, #0]
}
 8009c42:	e01d      	b.n	8009c80 <FLASH_OB_GetWRP+0x8c>
  else if (WRPArea == OB_WRPAREA_ZONE2_B)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b08      	cmp	r3, #8
 8009c48:	d10d      	bne.n	8009c66 <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8009c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c4e:	227f      	movs	r2, #127	@ 0x7f
 8009c50:	401a      	ands	r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 8009c56:	4b0c      	ldr	r3, [pc, #48]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c5a:	0c1b      	lsrs	r3, r3, #16
 8009c5c:	227f      	movs	r2, #127	@ 0x7f
 8009c5e:	401a      	ands	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	601a      	str	r2, [r3, #0]
}
 8009c64:	e00c      	b.n	8009c80 <FLASH_OB_GetWRP+0x8c>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8009c66:	4b08      	ldr	r3, [pc, #32]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c6a:	227f      	movs	r2, #127	@ 0x7f
 8009c6c:	401a      	ands	r2, r3
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8009c72:	4b05      	ldr	r3, [pc, #20]	@ (8009c88 <FLASH_OB_GetWRP+0x94>)
 8009c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c76:	0c1b      	lsrs	r3, r3, #16
 8009c78:	227f      	movs	r2, #127	@ 0x7f
 8009c7a:	401a      	ands	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	601a      	str	r2, [r3, #0]
}
 8009c80:	46c0      	nop			@ (mov r8, r8)
 8009c82:	46bd      	mov	sp, r7
 8009c84:	b004      	add	sp, #16
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	40022000 	.word	0x40022000

08009c8c <FLASH_OB_OptrConfig>:
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note  (*) availability depends on devices
  * @retval None
  */
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 8009c98:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc4 <FLASH_OB_OptrConfig+0x38>)
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	617b      	str	r3, [r7, #20]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	22ff      	movs	r2, #255	@ 0xff
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	43da      	mvns	r2, r3
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	4013      	ands	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	0011      	movs	r1, r2
 8009cb4:	4b03      	ldr	r3, [pc, #12]	@ (8009cc4 <FLASH_OB_OptrConfig+0x38>)
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	621a      	str	r2, [r3, #32]
}
 8009cbc:	46c0      	nop			@ (mov r8, r8)
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	b006      	add	sp, #24
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	40022000 	.word	0x40022000

08009cc8 <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8009cce:	4b09      	ldr	r3, [pc, #36]	@ (8009cf4 <FLASH_OB_GetRDP+0x2c>)
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	22ff      	movs	r2, #255	@ 0xff
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2baa      	cmp	r3, #170	@ 0xaa
 8009cdc:	d004      	beq.n	8009ce8 <FLASH_OB_GetRDP+0x20>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2bcc      	cmp	r3, #204	@ 0xcc
 8009ce2:	d001      	beq.n	8009ce8 <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 8009ce4:	23bb      	movs	r3, #187	@ 0xbb
 8009ce6:	e000      	b.n	8009cea <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 8009ce8:	687b      	ldr	r3, [r7, #4]
  }
}
 8009cea:	0018      	movs	r0, r3
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b002      	add	sp, #8
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	46c0      	nop			@ (mov r8, r8)
 8009cf4:	40022000 	.word	0x40022000

08009cf8 <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_nBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 8009cfe:	4b05      	ldr	r3, [pc, #20]	@ (8009d14 <FLASH_OB_GetUser+0x1c>)
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	4a05      	ldr	r2, [pc, #20]	@ (8009d18 <FLASH_OB_GetUser+0x20>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	607b      	str	r3, [r7, #4]
  return user;
 8009d08:	687b      	ldr	r3, [r7, #4]
}
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	b002      	add	sp, #8
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	46c0      	nop			@ (mov r8, r8)
 8009d14:	40022000 	.word	0x40022000
 8009d18:	3f7fff00 	.word	0x3f7fff00

08009d1c <FLASH_OB_PCROP1AConfig>:
  * @param  PCROP1AEndAddr Specifies the Zone 1A end address of the Proprietary code readout protection
  *          This parameter can be an address between PCROP1AStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1AConfig(uint32_t PCROPConfig, uint32_t PCROP1AStartAddr, uint32_t PCROP1AEndAddr)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_PCROP_CONFIG(PCROPConfig));

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 8009d28:	4b3b      	ldr	r3, [pc, #236]	@ (8009e18 <FLASH_OB_PCROP1AConfig+0xfc>)
 8009d2a:	6a1a      	ldr	r2, [r3, #32]
 8009d2c:	2380      	movs	r3, #128	@ 0x80
 8009d2e:	035b      	lsls	r3, r3, #13
 8009d30:	401a      	ands	r2, r3
 8009d32:	2380      	movs	r3, #128	@ 0x80
 8009d34:	035b      	lsls	r3, r3, #13
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d03f      	beq.n	8009dba <FLASH_OB_PCROP1AConfig+0x9e>
 8009d3a:	4b38      	ldr	r3, [pc, #224]	@ (8009e1c <FLASH_OB_PCROP1AConfig+0x100>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	23c0      	movs	r3, #192	@ 0xc0
 8009d40:	049b      	lsls	r3, r3, #18
 8009d42:	4013      	ands	r3, r2
 8009d44:	d039      	beq.n	8009dba <FLASH_OB_PCROP1AConfig+0x9e>
 8009d46:	4b35      	ldr	r3, [pc, #212]	@ (8009e1c <FLASH_OB_PCROP1AConfig+0x100>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	23c0      	movs	r3, #192	@ 0xc0
 8009d4c:	049b      	lsls	r3, r3, #18
 8009d4e:	401a      	ands	r2, r3
 8009d50:	2380      	movs	r3, #128	@ 0x80
 8009d52:	045b      	lsls	r3, r3, #17
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d105      	bne.n	8009d64 <FLASH_OB_PCROP1AConfig+0x48>
 8009d58:	4b31      	ldr	r3, [pc, #196]	@ (8009e20 <FLASH_OB_PCROP1AConfig+0x104>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	2380      	movs	r3, #128	@ 0x80
 8009d5e:	039b      	lsls	r3, r3, #14
 8009d60:	4013      	ands	r3, r2
 8009d62:	d02a      	beq.n	8009dba <FLASH_OB_PCROP1AConfig+0x9e>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP1AStartAddr));
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP1AEndAddr));

    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 8009d64:	4b2d      	ldr	r3, [pc, #180]	@ (8009e1c <FLASH_OB_PCROP1AConfig+0x100>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	23c0      	movs	r3, #192	@ 0xc0
 8009d6a:	049b      	lsls	r3, r3, #18
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	d00e      	beq.n	8009d8e <FLASH_OB_PCROP1AConfig+0x72>
 8009d70:	4b2a      	ldr	r3, [pc, #168]	@ (8009e1c <FLASH_OB_PCROP1AConfig+0x100>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	23c0      	movs	r3, #192	@ 0xc0
 8009d76:	049b      	lsls	r3, r3, #18
 8009d78:	401a      	ands	r2, r3
 8009d7a:	2380      	movs	r3, #128	@ 0x80
 8009d7c:	045b      	lsls	r3, r3, #17
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d10f      	bne.n	8009da2 <FLASH_OB_PCROP1AConfig+0x86>
 8009d82:	4b27      	ldr	r3, [pc, #156]	@ (8009e20 <FLASH_OB_PCROP1AConfig+0x104>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	2380      	movs	r3, #128	@ 0x80
 8009d88:	039b      	lsls	r3, r3, #14
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	d109      	bne.n	8009da2 <FLASH_OB_PCROP1AConfig+0x86>
 8009d8e:	4b25      	ldr	r3, [pc, #148]	@ (8009e24 <FLASH_OB_PCROP1AConfig+0x108>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	029b      	lsls	r3, r3, #10
 8009d94:	4a24      	ldr	r2, [pc, #144]	@ (8009e28 <FLASH_OB_PCROP1AConfig+0x10c>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	2280      	movs	r2, #128	@ 0x80
 8009d9a:	0512      	lsls	r2, r2, #20
 8009d9c:	4694      	mov	ip, r2
 8009d9e:	4463      	add	r3, ip
 8009da0:	e009      	b.n	8009db6 <FLASH_OB_PCROP1AConfig+0x9a>
 8009da2:	4b20      	ldr	r3, [pc, #128]	@ (8009e24 <FLASH_OB_PCROP1AConfig+0x108>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	029b      	lsls	r3, r3, #10
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	4a20      	ldr	r2, [pc, #128]	@ (8009e2c <FLASH_OB_PCROP1AConfig+0x110>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	2280      	movs	r2, #128	@ 0x80
 8009db0:	0512      	lsls	r2, r2, #20
 8009db2:	4694      	mov	ip, r2
 8009db4:	4463      	add	r3, ip
 8009db6:	61bb      	str	r3, [r7, #24]
 8009db8:	e002      	b.n	8009dc0 <FLASH_OB_PCROP1AConfig+0xa4>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1AStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1AEndAddr));

    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8009dba:	2380      	movs	r3, #128	@ 0x80
 8009dbc:	051b      	lsls	r3, r3, #20
 8009dbe:	61bb      	str	r3, [r7, #24]
  }

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 8009dc0:	4b15      	ldr	r3, [pc, #84]	@ (8009e18 <FLASH_OB_PCROP1AConfig+0xfc>)
 8009dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc4:	61fb      	str	r3, [r7, #28]

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0x00U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	4013      	ands	r3, r2
 8009dcc:	d014      	beq.n	8009df8 <FLASH_OB_PCROP1AConfig+0xdc>
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	0a5b      	lsrs	r3, r3, #9
 8009dd6:	617b      	str	r3, [r7, #20]
    endoffset = ((PCROP1AEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	0a5b      	lsrs	r3, r3, #9
 8009de0:	613b      	str	r3, [r7, #16]

    /* Set Zone A start offset */
    FLASH->PCROP1ASR = startoffset;
 8009de2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e18 <FLASH_OB_PCROP1AConfig+0xfc>)
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	0a5b      	lsrs	r3, r3, #9
 8009dec:	025b      	lsls	r3, r3, #9
 8009dee:	61fb      	str	r3, [r7, #28]
    pcrop1aend |= endoffset;
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61fb      	str	r3, [r7, #28]
  }

  /* Set RDP erase protection if needed. This bit is only set & will be reset by mass erase */
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0x00U)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	da04      	bge.n	8009e08 <FLASH_OB_PCROP1AConfig+0xec>
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	2280      	movs	r2, #128	@ 0x80
 8009e02:	0612      	lsls	r2, r2, #24
 8009e04:	4313      	orrs	r3, r2
 8009e06:	61fb      	str	r3, [r7, #28]
  }

  /* set 1A End register */
  FLASH->PCROP1AER = pcrop1aend;
 8009e08:	4b03      	ldr	r3, [pc, #12]	@ (8009e18 <FLASH_OB_PCROP1AConfig+0xfc>)
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009e0e:	46c0      	nop			@ (mov r8, r8)
 8009e10:	46bd      	mov	sp, r7
 8009e12:	b008      	add	sp, #32
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	46c0      	nop			@ (mov r8, r8)
 8009e18:	40022000 	.word	0x40022000
 8009e1c:	1fff7500 	.word	0x1fff7500
 8009e20:	40022020 	.word	0x40022020
 8009e24:	1fff75e0 	.word	0x1fff75e0
 8009e28:	000ffc00 	.word	0x000ffc00
 8009e2c:	0007fe00 	.word	0x0007fe00

08009e30 <FLASH_OB_PCROP1BConfig>:
  * @param  PCROP1BEndAddr  Specifies the Zone 1B end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP1BStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1BConfig(uint32_t PCROP1BStartAddr, uint32_t PCROP1BEndAddr)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint32_t endoffset;
  uint32_t ropbase;

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 8009e3a:	4b30      	ldr	r3, [pc, #192]	@ (8009efc <FLASH_OB_PCROP1BConfig+0xcc>)
 8009e3c:	6a1a      	ldr	r2, [r3, #32]
 8009e3e:	2380      	movs	r3, #128	@ 0x80
 8009e40:	035b      	lsls	r3, r3, #13
 8009e42:	401a      	ands	r2, r3
 8009e44:	2380      	movs	r3, #128	@ 0x80
 8009e46:	035b      	lsls	r3, r3, #13
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d03f      	beq.n	8009ecc <FLASH_OB_PCROP1BConfig+0x9c>
 8009e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8009f00 <FLASH_OB_PCROP1BConfig+0xd0>)
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	23c0      	movs	r3, #192	@ 0xc0
 8009e52:	049b      	lsls	r3, r3, #18
 8009e54:	4013      	ands	r3, r2
 8009e56:	d039      	beq.n	8009ecc <FLASH_OB_PCROP1BConfig+0x9c>
 8009e58:	4b29      	ldr	r3, [pc, #164]	@ (8009f00 <FLASH_OB_PCROP1BConfig+0xd0>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	23c0      	movs	r3, #192	@ 0xc0
 8009e5e:	049b      	lsls	r3, r3, #18
 8009e60:	401a      	ands	r2, r3
 8009e62:	2380      	movs	r3, #128	@ 0x80
 8009e64:	045b      	lsls	r3, r3, #17
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d105      	bne.n	8009e76 <FLASH_OB_PCROP1BConfig+0x46>
 8009e6a:	4b26      	ldr	r3, [pc, #152]	@ (8009f04 <FLASH_OB_PCROP1BConfig+0xd4>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	2380      	movs	r3, #128	@ 0x80
 8009e70:	039b      	lsls	r3, r3, #14
 8009e72:	4013      	ands	r3, r2
 8009e74:	d02a      	beq.n	8009ecc <FLASH_OB_PCROP1BConfig+0x9c>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP1BStartAddr));
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP1BEndAddr));

    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 8009e76:	4b22      	ldr	r3, [pc, #136]	@ (8009f00 <FLASH_OB_PCROP1BConfig+0xd0>)
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	23c0      	movs	r3, #192	@ 0xc0
 8009e7c:	049b      	lsls	r3, r3, #18
 8009e7e:	4013      	ands	r3, r2
 8009e80:	d00e      	beq.n	8009ea0 <FLASH_OB_PCROP1BConfig+0x70>
 8009e82:	4b1f      	ldr	r3, [pc, #124]	@ (8009f00 <FLASH_OB_PCROP1BConfig+0xd0>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	23c0      	movs	r3, #192	@ 0xc0
 8009e88:	049b      	lsls	r3, r3, #18
 8009e8a:	401a      	ands	r2, r3
 8009e8c:	2380      	movs	r3, #128	@ 0x80
 8009e8e:	045b      	lsls	r3, r3, #17
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d10f      	bne.n	8009eb4 <FLASH_OB_PCROP1BConfig+0x84>
 8009e94:	4b1b      	ldr	r3, [pc, #108]	@ (8009f04 <FLASH_OB_PCROP1BConfig+0xd4>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	2380      	movs	r3, #128	@ 0x80
 8009e9a:	039b      	lsls	r3, r3, #14
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	d109      	bne.n	8009eb4 <FLASH_OB_PCROP1BConfig+0x84>
 8009ea0:	4b19      	ldr	r3, [pc, #100]	@ (8009f08 <FLASH_OB_PCROP1BConfig+0xd8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	029b      	lsls	r3, r3, #10
 8009ea6:	4a19      	ldr	r2, [pc, #100]	@ (8009f0c <FLASH_OB_PCROP1BConfig+0xdc>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	2280      	movs	r2, #128	@ 0x80
 8009eac:	0512      	lsls	r2, r2, #20
 8009eae:	4694      	mov	ip, r2
 8009eb0:	4463      	add	r3, ip
 8009eb2:	e009      	b.n	8009ec8 <FLASH_OB_PCROP1BConfig+0x98>
 8009eb4:	4b14      	ldr	r3, [pc, #80]	@ (8009f08 <FLASH_OB_PCROP1BConfig+0xd8>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	029b      	lsls	r3, r3, #10
 8009eba:	085b      	lsrs	r3, r3, #1
 8009ebc:	4a14      	ldr	r2, [pc, #80]	@ (8009f10 <FLASH_OB_PCROP1BConfig+0xe0>)
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	2280      	movs	r2, #128	@ 0x80
 8009ec2:	0512      	lsls	r2, r2, #20
 8009ec4:	4694      	mov	ip, r2
 8009ec6:	4463      	add	r3, ip
 8009ec8:	617b      	str	r3, [r7, #20]
 8009eca:	e002      	b.n	8009ed2 <FLASH_OB_PCROP1BConfig+0xa2>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1BStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1BEndAddr));

    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8009ecc:	2380      	movs	r3, #128	@ 0x80
 8009ece:	051b      	lsls	r3, r3, #20
 8009ed0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the Proprietary code readout protection offset */
  startoffset = ((PCROP1BStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	0a5b      	lsrs	r3, r3, #9
 8009eda:	613b      	str	r3, [r7, #16]
  endoffset = ((PCROP1BEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	0a5b      	lsrs	r3, r3, #9
 8009ee4:	60fb      	str	r3, [r7, #12]

  /* Set Zone B start offset */
  FLASH->PCROP1BSR = startoffset;
 8009ee6:	4b05      	ldr	r3, [pc, #20]	@ (8009efc <FLASH_OB_PCROP1BConfig+0xcc>)
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Set Zone B end offset */
  FLASH->PCROP1BER = endoffset;
 8009eec:	4b03      	ldr	r3, [pc, #12]	@ (8009efc <FLASH_OB_PCROP1BConfig+0xcc>)
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009ef2:	46c0      	nop			@ (mov r8, r8)
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b006      	add	sp, #24
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			@ (mov r8, r8)
 8009efc:	40022000 	.word	0x40022000
 8009f00:	1fff7500 	.word	0x1fff7500
 8009f04:	40022020 	.word	0x40022020
 8009f08:	1fff75e0 	.word	0x1fff75e0
 8009f0c:	000ffc00 	.word	0x000ffc00
 8009f10:	0007fe00 	.word	0x0007fe00

08009f14 <FLASH_OB_GetPCROP1A>:
  * @param  PCROP1AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  uint32_t pcrop;
  uint32_t ropbase;

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 8009f20:	4b3e      	ldr	r3, [pc, #248]	@ (800a01c <FLASH_OB_GetPCROP1A+0x108>)
 8009f22:	6a1a      	ldr	r2, [r3, #32]
 8009f24:	2380      	movs	r3, #128	@ 0x80
 8009f26:	035b      	lsls	r3, r3, #13
 8009f28:	401a      	ands	r2, r3
 8009f2a:	2380      	movs	r3, #128	@ 0x80
 8009f2c:	035b      	lsls	r3, r3, #13
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d03f      	beq.n	8009fb2 <FLASH_OB_GetPCROP1A+0x9e>
 8009f32:	4b3b      	ldr	r3, [pc, #236]	@ (800a020 <FLASH_OB_GetPCROP1A+0x10c>)
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	23c0      	movs	r3, #192	@ 0xc0
 8009f38:	049b      	lsls	r3, r3, #18
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	d039      	beq.n	8009fb2 <FLASH_OB_GetPCROP1A+0x9e>
 8009f3e:	4b38      	ldr	r3, [pc, #224]	@ (800a020 <FLASH_OB_GetPCROP1A+0x10c>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	23c0      	movs	r3, #192	@ 0xc0
 8009f44:	049b      	lsls	r3, r3, #18
 8009f46:	401a      	ands	r2, r3
 8009f48:	2380      	movs	r3, #128	@ 0x80
 8009f4a:	045b      	lsls	r3, r3, #17
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d105      	bne.n	8009f5c <FLASH_OB_GetPCROP1A+0x48>
 8009f50:	4b34      	ldr	r3, [pc, #208]	@ (800a024 <FLASH_OB_GetPCROP1A+0x110>)
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	2380      	movs	r3, #128	@ 0x80
 8009f56:	039b      	lsls	r3, r3, #14
 8009f58:	4013      	ands	r3, r2
 8009f5a:	d02a      	beq.n	8009fb2 <FLASH_OB_GetPCROP1A+0x9e>
  {
    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 8009f5c:	4b30      	ldr	r3, [pc, #192]	@ (800a020 <FLASH_OB_GetPCROP1A+0x10c>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	23c0      	movs	r3, #192	@ 0xc0
 8009f62:	049b      	lsls	r3, r3, #18
 8009f64:	4013      	ands	r3, r2
 8009f66:	d00e      	beq.n	8009f86 <FLASH_OB_GetPCROP1A+0x72>
 8009f68:	4b2d      	ldr	r3, [pc, #180]	@ (800a020 <FLASH_OB_GetPCROP1A+0x10c>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	23c0      	movs	r3, #192	@ 0xc0
 8009f6e:	049b      	lsls	r3, r3, #18
 8009f70:	401a      	ands	r2, r3
 8009f72:	2380      	movs	r3, #128	@ 0x80
 8009f74:	045b      	lsls	r3, r3, #17
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d10f      	bne.n	8009f9a <FLASH_OB_GetPCROP1A+0x86>
 8009f7a:	4b2a      	ldr	r3, [pc, #168]	@ (800a024 <FLASH_OB_GetPCROP1A+0x110>)
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	2380      	movs	r3, #128	@ 0x80
 8009f80:	039b      	lsls	r3, r3, #14
 8009f82:	4013      	ands	r3, r2
 8009f84:	d109      	bne.n	8009f9a <FLASH_OB_GetPCROP1A+0x86>
 8009f86:	4b28      	ldr	r3, [pc, #160]	@ (800a028 <FLASH_OB_GetPCROP1A+0x114>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	029b      	lsls	r3, r3, #10
 8009f8c:	4a27      	ldr	r2, [pc, #156]	@ (800a02c <FLASH_OB_GetPCROP1A+0x118>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	2280      	movs	r2, #128	@ 0x80
 8009f92:	0512      	lsls	r2, r2, #20
 8009f94:	4694      	mov	ip, r2
 8009f96:	4463      	add	r3, ip
 8009f98:	e009      	b.n	8009fae <FLASH_OB_GetPCROP1A+0x9a>
 8009f9a:	4b23      	ldr	r3, [pc, #140]	@ (800a028 <FLASH_OB_GetPCROP1A+0x114>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	029b      	lsls	r3, r3, #10
 8009fa0:	085b      	lsrs	r3, r3, #1
 8009fa2:	4a23      	ldr	r2, [pc, #140]	@ (800a030 <FLASH_OB_GetPCROP1A+0x11c>)
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	2280      	movs	r2, #128	@ 0x80
 8009fa8:	0512      	lsls	r2, r2, #20
 8009faa:	4694      	mov	ip, r2
 8009fac:	4463      	add	r3, ip
 8009fae:	617b      	str	r3, [r7, #20]
 8009fb0:	e002      	b.n	8009fb8 <FLASH_OB_GetPCROP1A+0xa4>
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8009fb2:	2380      	movs	r3, #128	@ 0x80
 8009fb4:	051b      	lsls	r3, r3, #20
 8009fb6:	617b      	str	r3, [r7, #20]
  }

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 8009fb8:	4b18      	ldr	r3, [pc, #96]	@ (800a01c <FLASH_OB_GetPCROP1A+0x108>)
 8009fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbc:	05db      	lsls	r3, r3, #23
 8009fbe:	0ddb      	lsrs	r3, r3, #23
 8009fc0:	613b      	str	r3, [r7, #16]
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	025a      	lsls	r2, r3, #9
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	601a      	str	r2, [r3, #0]
  *PCROP1AStartAddr += ropbase;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	18d2      	adds	r2, r2, r3
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	601a      	str	r2, [r3, #0]

  pcrop = FLASH->PCROP1AER;
 8009fd6:	4b11      	ldr	r3, [pc, #68]	@ (800a01c <FLASH_OB_GetPCROP1A+0x108>)
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fda:	613b      	str	r3, [r7, #16]
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	025b      	lsls	r3, r3, #9
 8009fe0:	4a14      	ldr	r2, [pc, #80]	@ (800a034 <FLASH_OB_GetPCROP1A+0x120>)
 8009fe2:	401a      	ands	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	601a      	str	r2, [r3, #0]
  *PCROP1AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	18d3      	adds	r3, r2, r3
 8009ff0:	4a11      	ldr	r2, [pc, #68]	@ (800a038 <FLASH_OB_GetPCROP1A+0x124>)
 8009ff2:	189a      	adds	r2, r3, r2
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	601a      	str	r2, [r3, #0]

  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	085a      	lsrs	r2, r3, #1
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	0fdb      	lsrs	r3, r3, #31
 800a00c:	07db      	lsls	r3, r3, #31
 800a00e:	431a      	orrs	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	601a      	str	r2, [r3, #0]
}
 800a014:	46c0      	nop			@ (mov r8, r8)
 800a016:	46bd      	mov	sp, r7
 800a018:	b006      	add	sp, #24
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	40022000 	.word	0x40022000
 800a020:	1fff7500 	.word	0x1fff7500
 800a024:	40022020 	.word	0x40022020
 800a028:	1fff75e0 	.word	0x1fff75e0
 800a02c:	000ffc00 	.word	0x000ffc00
 800a030:	0007fe00 	.word	0x0007fe00
 800a034:	0003fe00 	.word	0x0003fe00
 800a038:	000001ff 	.word	0x000001ff

0800a03c <FLASH_OB_GetPCROP1B>:
  * @param  PCROP1BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 800a046:	4b38      	ldr	r3, [pc, #224]	@ (800a128 <FLASH_OB_GetPCROP1B+0xec>)
 800a048:	6a1a      	ldr	r2, [r3, #32]
 800a04a:	2380      	movs	r3, #128	@ 0x80
 800a04c:	035b      	lsls	r3, r3, #13
 800a04e:	401a      	ands	r2, r3
 800a050:	2380      	movs	r3, #128	@ 0x80
 800a052:	035b      	lsls	r3, r3, #13
 800a054:	429a      	cmp	r2, r3
 800a056:	d03f      	beq.n	800a0d8 <FLASH_OB_GetPCROP1B+0x9c>
 800a058:	4b34      	ldr	r3, [pc, #208]	@ (800a12c <FLASH_OB_GetPCROP1B+0xf0>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	23c0      	movs	r3, #192	@ 0xc0
 800a05e:	049b      	lsls	r3, r3, #18
 800a060:	4013      	ands	r3, r2
 800a062:	d039      	beq.n	800a0d8 <FLASH_OB_GetPCROP1B+0x9c>
 800a064:	4b31      	ldr	r3, [pc, #196]	@ (800a12c <FLASH_OB_GetPCROP1B+0xf0>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	23c0      	movs	r3, #192	@ 0xc0
 800a06a:	049b      	lsls	r3, r3, #18
 800a06c:	401a      	ands	r2, r3
 800a06e:	2380      	movs	r3, #128	@ 0x80
 800a070:	045b      	lsls	r3, r3, #17
 800a072:	429a      	cmp	r2, r3
 800a074:	d105      	bne.n	800a082 <FLASH_OB_GetPCROP1B+0x46>
 800a076:	4b2e      	ldr	r3, [pc, #184]	@ (800a130 <FLASH_OB_GetPCROP1B+0xf4>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	2380      	movs	r3, #128	@ 0x80
 800a07c:	039b      	lsls	r3, r3, #14
 800a07e:	4013      	ands	r3, r2
 800a080:	d02a      	beq.n	800a0d8 <FLASH_OB_GetPCROP1B+0x9c>
  {
    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 800a082:	4b2a      	ldr	r3, [pc, #168]	@ (800a12c <FLASH_OB_GetPCROP1B+0xf0>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	23c0      	movs	r3, #192	@ 0xc0
 800a088:	049b      	lsls	r3, r3, #18
 800a08a:	4013      	ands	r3, r2
 800a08c:	d00e      	beq.n	800a0ac <FLASH_OB_GetPCROP1B+0x70>
 800a08e:	4b27      	ldr	r3, [pc, #156]	@ (800a12c <FLASH_OB_GetPCROP1B+0xf0>)
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	23c0      	movs	r3, #192	@ 0xc0
 800a094:	049b      	lsls	r3, r3, #18
 800a096:	401a      	ands	r2, r3
 800a098:	2380      	movs	r3, #128	@ 0x80
 800a09a:	045b      	lsls	r3, r3, #17
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d10f      	bne.n	800a0c0 <FLASH_OB_GetPCROP1B+0x84>
 800a0a0:	4b23      	ldr	r3, [pc, #140]	@ (800a130 <FLASH_OB_GetPCROP1B+0xf4>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	2380      	movs	r3, #128	@ 0x80
 800a0a6:	039b      	lsls	r3, r3, #14
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	d109      	bne.n	800a0c0 <FLASH_OB_GetPCROP1B+0x84>
 800a0ac:	4b21      	ldr	r3, [pc, #132]	@ (800a134 <FLASH_OB_GetPCROP1B+0xf8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	029b      	lsls	r3, r3, #10
 800a0b2:	4a21      	ldr	r2, [pc, #132]	@ (800a138 <FLASH_OB_GetPCROP1B+0xfc>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	2280      	movs	r2, #128	@ 0x80
 800a0b8:	0512      	lsls	r2, r2, #20
 800a0ba:	4694      	mov	ip, r2
 800a0bc:	4463      	add	r3, ip
 800a0be:	e009      	b.n	800a0d4 <FLASH_OB_GetPCROP1B+0x98>
 800a0c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a134 <FLASH_OB_GetPCROP1B+0xf8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	029b      	lsls	r3, r3, #10
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a13c <FLASH_OB_GetPCROP1B+0x100>)
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2280      	movs	r2, #128	@ 0x80
 800a0ce:	0512      	lsls	r2, r2, #20
 800a0d0:	4694      	mov	ip, r2
 800a0d2:	4463      	add	r3, ip
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	e002      	b.n	800a0de <FLASH_OB_GetPCROP1B+0xa2>
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800a0d8:	2380      	movs	r3, #128	@ 0x80
 800a0da:	051b      	lsls	r3, r3, #20
 800a0dc:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 800a0de:	4b12      	ldr	r3, [pc, #72]	@ (800a128 <FLASH_OB_GetPCROP1B+0xec>)
 800a0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e2:	05db      	lsls	r3, r3, #23
 800a0e4:	0ddb      	lsrs	r3, r3, #23
 800a0e6:	60bb      	str	r3, [r7, #8]
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	025a      	lsls	r2, r3, #9
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]
  *PCROP1BStartAddr += ropbase;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	18d2      	adds	r2, r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <FLASH_OB_GetPCROP1B+0xec>)
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a100:	05db      	lsls	r3, r3, #23
 800a102:	0ddb      	lsrs	r3, r3, #23
 800a104:	60bb      	str	r3, [r7, #8]
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	025a      	lsls	r2, r3, #9
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	601a      	str	r2, [r3, #0]
  *PCROP1BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	18d3      	adds	r3, r2, r3
 800a116:	4a0a      	ldr	r2, [pc, #40]	@ (800a140 <FLASH_OB_GetPCROP1B+0x104>)
 800a118:	189a      	adds	r2, r3, r2
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	601a      	str	r2, [r3, #0]
}
 800a11e:	46c0      	nop			@ (mov r8, r8)
 800a120:	46bd      	mov	sp, r7
 800a122:	b004      	add	sp, #16
 800a124:	bd80      	pop	{r7, pc}
 800a126:	46c0      	nop			@ (mov r8, r8)
 800a128:	40022000 	.word	0x40022000
 800a12c:	1fff7500 	.word	0x1fff7500
 800a130:	40022020 	.word	0x40022020
 800a134:	1fff75e0 	.word	0x1fff75e0
 800a138:	000ffc00 	.word	0x000ffc00
 800a13c:	0007fe00 	.word	0x0007fe00
 800a140:	000001ff 	.word	0x000001ff

0800a144 <FLASH_OB_PCROP2AConfig>:
  * @param  PCROP2AEndAddr  Specifies the Zone 2A end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP2AStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP2AConfig(uint32_t PCROP2AStartAddr, uint32_t PCROP2AEndAddr)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t startoffset;
  uint32_t endoffset;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 800a14e:	4b24      	ldr	r3, [pc, #144]	@ (800a1e0 <FLASH_OB_PCROP2AConfig+0x9c>)
 800a150:	6a1a      	ldr	r2, [r3, #32]
 800a152:	2380      	movs	r3, #128	@ 0x80
 800a154:	035b      	lsls	r3, r3, #13
 800a156:	4013      	ands	r3, r2
 800a158:	d02a      	beq.n	800a1b0 <FLASH_OB_PCROP2AConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP2AStartAddr));
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP2AEndAddr));

    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 800a15a:	4b22      	ldr	r3, [pc, #136]	@ (800a1e4 <FLASH_OB_PCROP2AConfig+0xa0>)
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	23c0      	movs	r3, #192	@ 0xc0
 800a160:	049b      	lsls	r3, r3, #18
 800a162:	4013      	ands	r3, r2
 800a164:	d00e      	beq.n	800a184 <FLASH_OB_PCROP2AConfig+0x40>
 800a166:	4b1f      	ldr	r3, [pc, #124]	@ (800a1e4 <FLASH_OB_PCROP2AConfig+0xa0>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	23c0      	movs	r3, #192	@ 0xc0
 800a16c:	049b      	lsls	r3, r3, #18
 800a16e:	401a      	ands	r2, r3
 800a170:	2380      	movs	r3, #128	@ 0x80
 800a172:	045b      	lsls	r3, r3, #17
 800a174:	429a      	cmp	r2, r3
 800a176:	d10f      	bne.n	800a198 <FLASH_OB_PCROP2AConfig+0x54>
 800a178:	4b1b      	ldr	r3, [pc, #108]	@ (800a1e8 <FLASH_OB_PCROP2AConfig+0xa4>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	2380      	movs	r3, #128	@ 0x80
 800a17e:	039b      	lsls	r3, r3, #14
 800a180:	4013      	ands	r3, r2
 800a182:	d109      	bne.n	800a198 <FLASH_OB_PCROP2AConfig+0x54>
 800a184:	4b19      	ldr	r3, [pc, #100]	@ (800a1ec <FLASH_OB_PCROP2AConfig+0xa8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	029b      	lsls	r3, r3, #10
 800a18a:	4a19      	ldr	r2, [pc, #100]	@ (800a1f0 <FLASH_OB_PCROP2AConfig+0xac>)
 800a18c:	4013      	ands	r3, r2
 800a18e:	2280      	movs	r2, #128	@ 0x80
 800a190:	0512      	lsls	r2, r2, #20
 800a192:	4694      	mov	ip, r2
 800a194:	4463      	add	r3, ip
 800a196:	e009      	b.n	800a1ac <FLASH_OB_PCROP2AConfig+0x68>
 800a198:	4b14      	ldr	r3, [pc, #80]	@ (800a1ec <FLASH_OB_PCROP2AConfig+0xa8>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	029b      	lsls	r3, r3, #10
 800a19e:	085b      	lsrs	r3, r3, #1
 800a1a0:	4a14      	ldr	r2, [pc, #80]	@ (800a1f4 <FLASH_OB_PCROP2AConfig+0xb0>)
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	2280      	movs	r2, #128	@ 0x80
 800a1a6:	0512      	lsls	r2, r2, #20
 800a1a8:	4694      	mov	ip, r2
 800a1aa:	4463      	add	r3, ip
 800a1ac:	617b      	str	r3, [r7, #20]
 800a1ae:	e002      	b.n	800a1b6 <FLASH_OB_PCROP2AConfig+0x72>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP2AStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP2AEndAddr));

    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800a1b0:	2380      	movs	r3, #128	@ 0x80
 800a1b2:	051b      	lsls	r3, r3, #20
 800a1b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the Proprietary code readout protection offset */
  startoffset = ((PCROP2AStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	0a5b      	lsrs	r3, r3, #9
 800a1be:	613b      	str	r3, [r7, #16]
  endoffset = ((PCROP2AEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	0a5b      	lsrs	r3, r3, #9
 800a1c8:	60fb      	str	r3, [r7, #12]

  /* Set Zone A start offset */
  FLASH->PCROP2ASR = startoffset;
 800a1ca:	4b05      	ldr	r3, [pc, #20]	@ (800a1e0 <FLASH_OB_PCROP2AConfig+0x9c>)
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set Zone A end offset */
  FLASH->PCROP2AER = endoffset;
 800a1d0:	4b03      	ldr	r3, [pc, #12]	@ (800a1e0 <FLASH_OB_PCROP2AConfig+0x9c>)
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a1d6:	46c0      	nop			@ (mov r8, r8)
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	b006      	add	sp, #24
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	46c0      	nop			@ (mov r8, r8)
 800a1e0:	40022000 	.word	0x40022000
 800a1e4:	1fff7500 	.word	0x1fff7500
 800a1e8:	40022020 	.word	0x40022020
 800a1ec:	1fff75e0 	.word	0x1fff75e0
 800a1f0:	000ffc00 	.word	0x000ffc00
 800a1f4:	0007fe00 	.word	0x0007fe00

0800a1f8 <FLASH_OB_PCROP2BConfig>:
  * @param  PCROP2BEndAddr  Specifies the Zone 2B end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP2BStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP2BConfig(uint32_t PCROP2BStartAddr, uint32_t PCROP2BEndAddr)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  uint32_t startoffset;
  uint32_t endoffset;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 800a202:	4b24      	ldr	r3, [pc, #144]	@ (800a294 <FLASH_OB_PCROP2BConfig+0x9c>)
 800a204:	6a1a      	ldr	r2, [r3, #32]
 800a206:	2380      	movs	r3, #128	@ 0x80
 800a208:	035b      	lsls	r3, r3, #13
 800a20a:	4013      	ands	r3, r2
 800a20c:	d02a      	beq.n	800a264 <FLASH_OB_PCROP2BConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP2BStartAddr));
    assert_param(IS_FLASH_MAIN_SECONDHALF_MEM_ADDRESS(PCROP2BEndAddr));

    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 800a20e:	4b22      	ldr	r3, [pc, #136]	@ (800a298 <FLASH_OB_PCROP2BConfig+0xa0>)
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	23c0      	movs	r3, #192	@ 0xc0
 800a214:	049b      	lsls	r3, r3, #18
 800a216:	4013      	ands	r3, r2
 800a218:	d00e      	beq.n	800a238 <FLASH_OB_PCROP2BConfig+0x40>
 800a21a:	4b1f      	ldr	r3, [pc, #124]	@ (800a298 <FLASH_OB_PCROP2BConfig+0xa0>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	23c0      	movs	r3, #192	@ 0xc0
 800a220:	049b      	lsls	r3, r3, #18
 800a222:	401a      	ands	r2, r3
 800a224:	2380      	movs	r3, #128	@ 0x80
 800a226:	045b      	lsls	r3, r3, #17
 800a228:	429a      	cmp	r2, r3
 800a22a:	d10f      	bne.n	800a24c <FLASH_OB_PCROP2BConfig+0x54>
 800a22c:	4b1b      	ldr	r3, [pc, #108]	@ (800a29c <FLASH_OB_PCROP2BConfig+0xa4>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	039b      	lsls	r3, r3, #14
 800a234:	4013      	ands	r3, r2
 800a236:	d109      	bne.n	800a24c <FLASH_OB_PCROP2BConfig+0x54>
 800a238:	4b19      	ldr	r3, [pc, #100]	@ (800a2a0 <FLASH_OB_PCROP2BConfig+0xa8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	029b      	lsls	r3, r3, #10
 800a23e:	4a19      	ldr	r2, [pc, #100]	@ (800a2a4 <FLASH_OB_PCROP2BConfig+0xac>)
 800a240:	4013      	ands	r3, r2
 800a242:	2280      	movs	r2, #128	@ 0x80
 800a244:	0512      	lsls	r2, r2, #20
 800a246:	4694      	mov	ip, r2
 800a248:	4463      	add	r3, ip
 800a24a:	e009      	b.n	800a260 <FLASH_OB_PCROP2BConfig+0x68>
 800a24c:	4b14      	ldr	r3, [pc, #80]	@ (800a2a0 <FLASH_OB_PCROP2BConfig+0xa8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	029b      	lsls	r3, r3, #10
 800a252:	085b      	lsrs	r3, r3, #1
 800a254:	4a14      	ldr	r2, [pc, #80]	@ (800a2a8 <FLASH_OB_PCROP2BConfig+0xb0>)
 800a256:	4013      	ands	r3, r2
 800a258:	2280      	movs	r2, #128	@ 0x80
 800a25a:	0512      	lsls	r2, r2, #20
 800a25c:	4694      	mov	ip, r2
 800a25e:	4463      	add	r3, ip
 800a260:	617b      	str	r3, [r7, #20]
 800a262:	e002      	b.n	800a26a <FLASH_OB_PCROP2BConfig+0x72>
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP2BStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP2BEndAddr));

    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800a264:	2380      	movs	r3, #128	@ 0x80
 800a266:	051b      	lsls	r3, r3, #20
 800a268:	617b      	str	r3, [r7, #20]
  }

  /* Configure the Proprietary code readout protection offset */
  startoffset = ((PCROP2BStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	0a5b      	lsrs	r3, r3, #9
 800a272:	613b      	str	r3, [r7, #16]
  endoffset = ((PCROP2BEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	0a5b      	lsrs	r3, r3, #9
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Set Zone B start offset */
  FLASH->PCROP2BSR = startoffset;
 800a27e:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <FLASH_OB_PCROP2BConfig+0x9c>)
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set Zone B end offset */
  FLASH->PCROP2BER = endoffset;
 800a284:	4b03      	ldr	r3, [pc, #12]	@ (800a294 <FLASH_OB_PCROP2BConfig+0x9c>)
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800a28a:	46c0      	nop			@ (mov r8, r8)
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b006      	add	sp, #24
 800a290:	bd80      	pop	{r7, pc}
 800a292:	46c0      	nop			@ (mov r8, r8)
 800a294:	40022000 	.word	0x40022000
 800a298:	1fff7500 	.word	0x1fff7500
 800a29c:	40022020 	.word	0x40022020
 800a2a0:	1fff75e0 	.word	0x1fff75e0
 800a2a4:	000ffc00 	.word	0x000ffc00
 800a2a8:	0007fe00 	.word	0x0007fe00

0800a2ac <FLASH_OB_GetPCROP2A>:
  * @param  PCROP2AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 2A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP2A(uint32_t *PCROP2AStartAddr, uint32_t *PCROP2AEndAddr)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 800a2b6:	4b2c      	ldr	r3, [pc, #176]	@ (800a368 <FLASH_OB_GetPCROP2A+0xbc>)
 800a2b8:	6a1a      	ldr	r2, [r3, #32]
 800a2ba:	2380      	movs	r3, #128	@ 0x80
 800a2bc:	035b      	lsls	r3, r3, #13
 800a2be:	4013      	ands	r3, r2
 800a2c0:	d02a      	beq.n	800a318 <FLASH_OB_GetPCROP2A+0x6c>
  {
    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 800a2c2:	4b2a      	ldr	r3, [pc, #168]	@ (800a36c <FLASH_OB_GetPCROP2A+0xc0>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	23c0      	movs	r3, #192	@ 0xc0
 800a2c8:	049b      	lsls	r3, r3, #18
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	d00e      	beq.n	800a2ec <FLASH_OB_GetPCROP2A+0x40>
 800a2ce:	4b27      	ldr	r3, [pc, #156]	@ (800a36c <FLASH_OB_GetPCROP2A+0xc0>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	23c0      	movs	r3, #192	@ 0xc0
 800a2d4:	049b      	lsls	r3, r3, #18
 800a2d6:	401a      	ands	r2, r3
 800a2d8:	2380      	movs	r3, #128	@ 0x80
 800a2da:	045b      	lsls	r3, r3, #17
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d10f      	bne.n	800a300 <FLASH_OB_GetPCROP2A+0x54>
 800a2e0:	4b23      	ldr	r3, [pc, #140]	@ (800a370 <FLASH_OB_GetPCROP2A+0xc4>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	2380      	movs	r3, #128	@ 0x80
 800a2e6:	039b      	lsls	r3, r3, #14
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	d109      	bne.n	800a300 <FLASH_OB_GetPCROP2A+0x54>
 800a2ec:	4b21      	ldr	r3, [pc, #132]	@ (800a374 <FLASH_OB_GetPCROP2A+0xc8>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	029b      	lsls	r3, r3, #10
 800a2f2:	4a21      	ldr	r2, [pc, #132]	@ (800a378 <FLASH_OB_GetPCROP2A+0xcc>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	2280      	movs	r2, #128	@ 0x80
 800a2f8:	0512      	lsls	r2, r2, #20
 800a2fa:	4694      	mov	ip, r2
 800a2fc:	4463      	add	r3, ip
 800a2fe:	e009      	b.n	800a314 <FLASH_OB_GetPCROP2A+0x68>
 800a300:	4b1c      	ldr	r3, [pc, #112]	@ (800a374 <FLASH_OB_GetPCROP2A+0xc8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	029b      	lsls	r3, r3, #10
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	4a1c      	ldr	r2, [pc, #112]	@ (800a37c <FLASH_OB_GetPCROP2A+0xd0>)
 800a30a:	4013      	ands	r3, r2
 800a30c:	2280      	movs	r2, #128	@ 0x80
 800a30e:	0512      	lsls	r2, r2, #20
 800a310:	4694      	mov	ip, r2
 800a312:	4463      	add	r3, ip
 800a314:	60fb      	str	r3, [r7, #12]
 800a316:	e002      	b.n	800a31e <FLASH_OB_GetPCROP2A+0x72>
  }
  else
  {
    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800a318:	2380      	movs	r3, #128	@ 0x80
 800a31a:	051b      	lsls	r3, r3, #20
 800a31c:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP2ASR & FLASH_PCROP2ASR_PCROP2A_STRT);
 800a31e:	4b12      	ldr	r3, [pc, #72]	@ (800a368 <FLASH_OB_GetPCROP2A+0xbc>)
 800a320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a322:	05db      	lsls	r3, r3, #23
 800a324:	0ddb      	lsrs	r3, r3, #23
 800a326:	60bb      	str	r3, [r7, #8]
  *PCROP2AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	025a      	lsls	r2, r3, #9
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	601a      	str	r2, [r3, #0]
  *PCROP2AStartAddr += ropbase;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	18d2      	adds	r2, r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP2AER & FLASH_PCROP2AER_PCROP2A_END);
 800a33c:	4b0a      	ldr	r3, [pc, #40]	@ (800a368 <FLASH_OB_GetPCROP2A+0xbc>)
 800a33e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a340:	05db      	lsls	r3, r3, #23
 800a342:	0ddb      	lsrs	r3, r3, #23
 800a344:	60bb      	str	r3, [r7, #8]
  *PCROP2AEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	025a      	lsls	r2, r3, #9
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	601a      	str	r2, [r3, #0]
  *PCROP2AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	18d3      	adds	r3, r2, r3
 800a356:	4a0a      	ldr	r2, [pc, #40]	@ (800a380 <FLASH_OB_GetPCROP2A+0xd4>)
 800a358:	189a      	adds	r2, r3, r2
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	601a      	str	r2, [r3, #0]
}
 800a35e:	46c0      	nop			@ (mov r8, r8)
 800a360:	46bd      	mov	sp, r7
 800a362:	b004      	add	sp, #16
 800a364:	bd80      	pop	{r7, pc}
 800a366:	46c0      	nop			@ (mov r8, r8)
 800a368:	40022000 	.word	0x40022000
 800a36c:	1fff7500 	.word	0x1fff7500
 800a370:	40022020 	.word	0x40022020
 800a374:	1fff75e0 	.word	0x1fff75e0
 800a378:	000ffc00 	.word	0x000ffc00
 800a37c:	0007fe00 	.word	0x0007fe00
 800a380:	000001ff 	.word	0x000001ff

0800a384 <FLASH_OB_GetPCROP2B>:
  * @param  PCROP2BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 2B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP2B(uint32_t *PCROP2BStartAddr, uint32_t *PCROP2BEndAddr)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 800a38e:	4b2c      	ldr	r3, [pc, #176]	@ (800a440 <FLASH_OB_GetPCROP2B+0xbc>)
 800a390:	6a1a      	ldr	r2, [r3, #32]
 800a392:	2380      	movs	r3, #128	@ 0x80
 800a394:	035b      	lsls	r3, r3, #13
 800a396:	4013      	ands	r3, r2
 800a398:	d02a      	beq.n	800a3f0 <FLASH_OB_GetPCROP2B+0x6c>
  {
    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 800a39a:	4b2a      	ldr	r3, [pc, #168]	@ (800a444 <FLASH_OB_GetPCROP2B+0xc0>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	23c0      	movs	r3, #192	@ 0xc0
 800a3a0:	049b      	lsls	r3, r3, #18
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	d00e      	beq.n	800a3c4 <FLASH_OB_GetPCROP2B+0x40>
 800a3a6:	4b27      	ldr	r3, [pc, #156]	@ (800a444 <FLASH_OB_GetPCROP2B+0xc0>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	23c0      	movs	r3, #192	@ 0xc0
 800a3ac:	049b      	lsls	r3, r3, #18
 800a3ae:	401a      	ands	r2, r3
 800a3b0:	2380      	movs	r3, #128	@ 0x80
 800a3b2:	045b      	lsls	r3, r3, #17
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d10f      	bne.n	800a3d8 <FLASH_OB_GetPCROP2B+0x54>
 800a3b8:	4b23      	ldr	r3, [pc, #140]	@ (800a448 <FLASH_OB_GetPCROP2B+0xc4>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	2380      	movs	r3, #128	@ 0x80
 800a3be:	039b      	lsls	r3, r3, #14
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d109      	bne.n	800a3d8 <FLASH_OB_GetPCROP2B+0x54>
 800a3c4:	4b21      	ldr	r3, [pc, #132]	@ (800a44c <FLASH_OB_GetPCROP2B+0xc8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	029b      	lsls	r3, r3, #10
 800a3ca:	4a21      	ldr	r2, [pc, #132]	@ (800a450 <FLASH_OB_GetPCROP2B+0xcc>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	2280      	movs	r2, #128	@ 0x80
 800a3d0:	0512      	lsls	r2, r2, #20
 800a3d2:	4694      	mov	ip, r2
 800a3d4:	4463      	add	r3, ip
 800a3d6:	e009      	b.n	800a3ec <FLASH_OB_GetPCROP2B+0x68>
 800a3d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a44c <FLASH_OB_GetPCROP2B+0xc8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	029b      	lsls	r3, r3, #10
 800a3de:	085b      	lsrs	r3, r3, #1
 800a3e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a454 <FLASH_OB_GetPCROP2B+0xd0>)
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	2280      	movs	r2, #128	@ 0x80
 800a3e6:	0512      	lsls	r2, r2, #20
 800a3e8:	4694      	mov	ip, r2
 800a3ea:	4463      	add	r3, ip
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	e002      	b.n	800a3f6 <FLASH_OB_GetPCROP2B+0x72>
  }
  else
  {
    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800a3f0:	2380      	movs	r3, #128	@ 0x80
 800a3f2:	051b      	lsls	r3, r3, #20
 800a3f4:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP2BSR & FLASH_PCROP2BSR_PCROP2B_STRT);
 800a3f6:	4b12      	ldr	r3, [pc, #72]	@ (800a440 <FLASH_OB_GetPCROP2B+0xbc>)
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3fa:	05db      	lsls	r3, r3, #23
 800a3fc:	0ddb      	lsrs	r3, r3, #23
 800a3fe:	60bb      	str	r3, [r7, #8]
  *PCROP2BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	025a      	lsls	r2, r3, #9
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	601a      	str	r2, [r3, #0]
  *PCROP2BStartAddr += ropbase;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	18d2      	adds	r2, r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP2BER & FLASH_PCROP2BER_PCROP2B_END);
 800a414:	4b0a      	ldr	r3, [pc, #40]	@ (800a440 <FLASH_OB_GetPCROP2B+0xbc>)
 800a416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a418:	05db      	lsls	r3, r3, #23
 800a41a:	0ddb      	lsrs	r3, r3, #23
 800a41c:	60bb      	str	r3, [r7, #8]
  *PCROP2BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	025a      	lsls	r2, r3, #9
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	601a      	str	r2, [r3, #0]
  *PCROP2BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	18d3      	adds	r3, r2, r3
 800a42e:	4a0a      	ldr	r2, [pc, #40]	@ (800a458 <FLASH_OB_GetPCROP2B+0xd4>)
 800a430:	189a      	adds	r2, r3, r2
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	601a      	str	r2, [r3, #0]
}
 800a436:	46c0      	nop			@ (mov r8, r8)
 800a438:	46bd      	mov	sp, r7
 800a43a:	b004      	add	sp, #16
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	46c0      	nop			@ (mov r8, r8)
 800a440:	40022000 	.word	0x40022000
 800a444:	1fff7500 	.word	0x1fff7500
 800a448:	40022020 	.word	0x40022020
 800a44c:	1fff75e0 	.word	0x1fff75e0
 800a450:	000ffc00 	.word	0x000ffc00
 800a454:	0007fe00 	.word	0x0007fe00
 800a458:	000001ff 	.word	0x000001ff

0800a45c <FLASH_OB_SecMemConfig>:
  * @param  SecSize2 specifies number of pages to protect as securable memory area, starting from
  *         beginning of Bank2 (page 0).
  * @retval None
  */
static void FLASH_OB_SecMemConfig(uint32_t BootEntry, uint32_t SecSize, uint32_t SecSize2)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_SEC_BOOT_LOCK(BootEntry));
  assert_param(IS_OB_SEC_SIZE(SecSize));

  if ((FLASH_BANK_NB == 2U))
 800a468:	4b0c      	ldr	r3, [pc, #48]	@ (800a49c <FLASH_OB_SecMemConfig+0x40>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	23c0      	movs	r3, #192	@ 0xc0
 800a46e:	049b      	lsls	r3, r3, #18
 800a470:	4013      	ands	r3, r2
  {
    assert_param(IS_OB_SEC_SIZE(SecSize2));
  }

  /* Set securable memory area configuration */
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE | FLASH_SECR_SEC_SIZE2));
 800a472:	4a0b      	ldr	r2, [pc, #44]	@ (800a4a0 <FLASH_OB_SecMemConfig+0x44>)
 800a474:	2380      	movs	r3, #128	@ 0x80
 800a476:	58d3      	ldr	r3, [r2, r3]
 800a478:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a4 <FLASH_OB_SecMemConfig+0x48>)
 800a47a:	4013      	ands	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]
  FLASH->SECR = (secmem | BootEntry | SecSize | (SecSize2 << FLASH_SECR_SEC_SIZE2_Pos));
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	431a      	orrs	r2, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	431a      	orrs	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	051b      	lsls	r3, r3, #20
 800a48c:	4904      	ldr	r1, [pc, #16]	@ (800a4a0 <FLASH_OB_SecMemConfig+0x44>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	2280      	movs	r2, #128	@ 0x80
 800a492:	508b      	str	r3, [r1, r2]
}
 800a494:	46c0      	nop			@ (mov r8, r8)
 800a496:	46bd      	mov	sp, r7
 800a498:	b006      	add	sp, #24
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	1fff7500 	.word	0x1fff7500
 800a4a0:	40022000 	.word	0x40022000
 800a4a4:	f00eff00 	.word	0xf00eff00

0800a4a8 <FLASH_OB_GetSecMem>:
  * @param  SecSize2 specifies number of pages to protect as secure memory area, starting from
  *         beginning of Bank2 (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize, uint32_t *SecSize2)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  uint32_t secmem = FLASH->SECR;
 800a4b4:	4a0c      	ldr	r2, [pc, #48]	@ (800a4e8 <FLASH_OB_GetSecMem+0x40>)
 800a4b6:	2380      	movs	r3, #128	@ 0x80
 800a4b8:	58d3      	ldr	r3, [r2, r3]
 800a4ba:	617b      	str	r3, [r7, #20]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	2380      	movs	r3, #128	@ 0x80
 800a4c0:	025b      	lsls	r3, r3, #9
 800a4c2:	401a      	ands	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	601a      	str	r2, [r3, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	22ff      	movs	r2, #255	@ 0xff
 800a4cc:	401a      	ands	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	601a      	str	r2, [r3, #0]
  *SecSize2 = (secmem & FLASH_SECR_SEC_SIZE2) >> FLASH_SECR_SEC_SIZE2_Pos;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	0d1b      	lsrs	r3, r3, #20
 800a4d6:	22ff      	movs	r2, #255	@ 0xff
 800a4d8:	401a      	ands	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
}
 800a4de:	46c0      	nop			@ (mov r8, r8)
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	b006      	add	sp, #24
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	46c0      	nop			@ (mov r8, r8)
 800a4e8:	40022000 	.word	0x40022000

0800a4ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a4fa:	e14d      	b.n	800a798 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2101      	movs	r1, #1
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	4091      	lsls	r1, r2
 800a506:	000a      	movs	r2, r1
 800a508:	4013      	ands	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d100      	bne.n	800a514 <HAL_GPIO_Init+0x28>
 800a512:	e13e      	b.n	800a792 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	2203      	movs	r2, #3
 800a51a:	4013      	ands	r3, r2
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d005      	beq.n	800a52c <HAL_GPIO_Init+0x40>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	2203      	movs	r2, #3
 800a526:	4013      	ands	r3, r2
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d130      	bne.n	800a58e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	2203      	movs	r2, #3
 800a538:	409a      	lsls	r2, r3
 800a53a:	0013      	movs	r3, r2
 800a53c:	43da      	mvns	r2, r3
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	4013      	ands	r3, r2
 800a542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68da      	ldr	r2, [r3, #12]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	409a      	lsls	r2, r3
 800a54e:	0013      	movs	r3, r2
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4313      	orrs	r3, r2
 800a554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a562:	2201      	movs	r2, #1
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	409a      	lsls	r2, r3
 800a568:	0013      	movs	r3, r2
 800a56a:	43da      	mvns	r2, r3
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	4013      	ands	r3, r2
 800a570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	091b      	lsrs	r3, r3, #4
 800a578:	2201      	movs	r2, #1
 800a57a:	401a      	ands	r2, r3
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	409a      	lsls	r2, r3
 800a580:	0013      	movs	r3, r2
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	4313      	orrs	r3, r2
 800a586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	2203      	movs	r2, #3
 800a594:	4013      	ands	r3, r2
 800a596:	2b03      	cmp	r3, #3
 800a598:	d017      	beq.n	800a5ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	409a      	lsls	r2, r3
 800a5a8:	0013      	movs	r3, r2
 800a5aa:	43da      	mvns	r2, r3
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	409a      	lsls	r2, r3
 800a5bc:	0013      	movs	r3, r2
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d123      	bne.n	800a61e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	08da      	lsrs	r2, r3, #3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3208      	adds	r2, #8
 800a5de:	0092      	lsls	r2, r2, #2
 800a5e0:	58d3      	ldr	r3, [r2, r3]
 800a5e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	2207      	movs	r2, #7
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	220f      	movs	r2, #15
 800a5ee:	409a      	lsls	r2, r3
 800a5f0:	0013      	movs	r3, r2
 800a5f2:	43da      	mvns	r2, r3
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691a      	ldr	r2, [r3, #16]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2107      	movs	r1, #7
 800a602:	400b      	ands	r3, r1
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	409a      	lsls	r2, r3
 800a608:	0013      	movs	r3, r2
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	08da      	lsrs	r2, r3, #3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3208      	adds	r2, #8
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	6939      	ldr	r1, [r7, #16]
 800a61c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	2203      	movs	r2, #3
 800a62a:	409a      	lsls	r2, r3
 800a62c:	0013      	movs	r3, r2
 800a62e:	43da      	mvns	r2, r3
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	4013      	ands	r3, r2
 800a634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	2203      	movs	r2, #3
 800a63c:	401a      	ands	r2, r3
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	409a      	lsls	r2, r3
 800a644:	0013      	movs	r3, r2
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4313      	orrs	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	23c0      	movs	r3, #192	@ 0xc0
 800a658:	029b      	lsls	r3, r3, #10
 800a65a:	4013      	ands	r3, r2
 800a65c:	d100      	bne.n	800a660 <HAL_GPIO_Init+0x174>
 800a65e:	e098      	b.n	800a792 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800a660:	4a53      	ldr	r2, [pc, #332]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	089b      	lsrs	r3, r3, #2
 800a666:	3318      	adds	r3, #24
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	589b      	ldr	r3, [r3, r2]
 800a66c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2203      	movs	r2, #3
 800a672:	4013      	ands	r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	220f      	movs	r2, #15
 800a678:	409a      	lsls	r2, r3
 800a67a:	0013      	movs	r3, r2
 800a67c:	43da      	mvns	r2, r3
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	4013      	ands	r3, r2
 800a682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	23a0      	movs	r3, #160	@ 0xa0
 800a688:	05db      	lsls	r3, r3, #23
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d019      	beq.n	800a6c2 <HAL_GPIO_Init+0x1d6>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a48      	ldr	r2, [pc, #288]	@ (800a7b4 <HAL_GPIO_Init+0x2c8>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d013      	beq.n	800a6be <HAL_GPIO_Init+0x1d2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a47      	ldr	r2, [pc, #284]	@ (800a7b8 <HAL_GPIO_Init+0x2cc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d00d      	beq.n	800a6ba <HAL_GPIO_Init+0x1ce>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a46      	ldr	r2, [pc, #280]	@ (800a7bc <HAL_GPIO_Init+0x2d0>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d007      	beq.n	800a6b6 <HAL_GPIO_Init+0x1ca>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a45      	ldr	r2, [pc, #276]	@ (800a7c0 <HAL_GPIO_Init+0x2d4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d101      	bne.n	800a6b2 <HAL_GPIO_Init+0x1c6>
 800a6ae:	2304      	movs	r3, #4
 800a6b0:	e008      	b.n	800a6c4 <HAL_GPIO_Init+0x1d8>
 800a6b2:	2305      	movs	r3, #5
 800a6b4:	e006      	b.n	800a6c4 <HAL_GPIO_Init+0x1d8>
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e004      	b.n	800a6c4 <HAL_GPIO_Init+0x1d8>
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	e002      	b.n	800a6c4 <HAL_GPIO_Init+0x1d8>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <HAL_GPIO_Init+0x1d8>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	2103      	movs	r1, #3
 800a6c8:	400a      	ands	r2, r1
 800a6ca:	00d2      	lsls	r2, r2, #3
 800a6cc:	4093      	lsls	r3, r2
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800a6d4:	4936      	ldr	r1, [pc, #216]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	089b      	lsrs	r3, r3, #2
 800a6da:	3318      	adds	r3, #24
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a6e2:	4b33      	ldr	r3, [pc, #204]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	43da      	mvns	r2, r3
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	2380      	movs	r3, #128	@ 0x80
 800a6f8:	035b      	lsls	r3, r3, #13
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	d003      	beq.n	800a706 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a706:	4b2a      	ldr	r3, [pc, #168]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800a70c:	4b28      	ldr	r3, [pc, #160]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	43da      	mvns	r2, r3
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	4013      	ands	r3, r2
 800a71a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	2380      	movs	r3, #128	@ 0x80
 800a722:	039b      	lsls	r3, r3, #14
 800a724:	4013      	ands	r3, r2
 800a726:	d003      	beq.n	800a730 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a730:	4b1f      	ldr	r3, [pc, #124]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a736:	4a1e      	ldr	r2, [pc, #120]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a738:	2384      	movs	r3, #132	@ 0x84
 800a73a:	58d3      	ldr	r3, [r2, r3]
 800a73c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	43da      	mvns	r2, r3
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	4013      	ands	r3, r2
 800a746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	2380      	movs	r3, #128	@ 0x80
 800a74e:	029b      	lsls	r3, r3, #10
 800a750:	4013      	ands	r3, r2
 800a752:	d003      	beq.n	800a75c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4313      	orrs	r3, r2
 800a75a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a75c:	4914      	ldr	r1, [pc, #80]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a75e:	2284      	movs	r2, #132	@ 0x84
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800a764:	4a12      	ldr	r2, [pc, #72]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a766:	2380      	movs	r3, #128	@ 0x80
 800a768:	58d3      	ldr	r3, [r2, r3]
 800a76a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	43da      	mvns	r2, r3
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	4013      	ands	r3, r2
 800a774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	2380      	movs	r3, #128	@ 0x80
 800a77c:	025b      	lsls	r3, r3, #9
 800a77e:	4013      	ands	r3, r2
 800a780:	d003      	beq.n	800a78a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a78a:	4909      	ldr	r1, [pc, #36]	@ (800a7b0 <HAL_GPIO_Init+0x2c4>)
 800a78c:	2280      	movs	r2, #128	@ 0x80
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	3301      	adds	r3, #1
 800a796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	40da      	lsrs	r2, r3
 800a7a0:	1e13      	subs	r3, r2, #0
 800a7a2:	d000      	beq.n	800a7a6 <HAL_GPIO_Init+0x2ba>
 800a7a4:	e6aa      	b.n	800a4fc <HAL_GPIO_Init+0x10>
  }
}
 800a7a6:	46c0      	nop			@ (mov r8, r8)
 800a7a8:	46c0      	nop			@ (mov r8, r8)
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	b006      	add	sp, #24
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	40021800 	.word	0x40021800
 800a7b4:	50000400 	.word	0x50000400
 800a7b8:	50000800 	.word	0x50000800
 800a7bc:	50000c00 	.word	0x50000c00
 800a7c0:	50001000 	.word	0x50001000

0800a7c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	000a      	movs	r2, r1
 800a7ce:	1cbb      	adds	r3, r7, #2
 800a7d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	1cba      	adds	r2, r7, #2
 800a7d8:	8812      	ldrh	r2, [r2, #0]
 800a7da:	4013      	ands	r3, r2
 800a7dc:	d004      	beq.n	800a7e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800a7de:	230f      	movs	r3, #15
 800a7e0:	18fb      	adds	r3, r7, r3
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	701a      	strb	r2, [r3, #0]
 800a7e6:	e003      	b.n	800a7f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a7e8:	230f      	movs	r3, #15
 800a7ea:	18fb      	adds	r3, r7, r3
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800a7f0:	230f      	movs	r3, #15
 800a7f2:	18fb      	adds	r3, r7, r3
 800a7f4:	781b      	ldrb	r3, [r3, #0]
}
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	b004      	add	sp, #16
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	0008      	movs	r0, r1
 800a808:	0011      	movs	r1, r2
 800a80a:	1cbb      	adds	r3, r7, #2
 800a80c:	1c02      	adds	r2, r0, #0
 800a80e:	801a      	strh	r2, [r3, #0]
 800a810:	1c7b      	adds	r3, r7, #1
 800a812:	1c0a      	adds	r2, r1, #0
 800a814:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a816:	1c7b      	adds	r3, r7, #1
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d004      	beq.n	800a828 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a81e:	1cbb      	adds	r3, r7, #2
 800a820:	881a      	ldrh	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a826:	e003      	b.n	800a830 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a828:	1cbb      	adds	r3, r7, #2
 800a82a:	881a      	ldrh	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a830:	46c0      	nop			@ (mov r8, r8)
 800a832:	46bd      	mov	sp, r7
 800a834:	b002      	add	sp, #8
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	0002      	movs	r2, r0
 800a840:	1dbb      	adds	r3, r7, #6
 800a842:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800a844:	4b10      	ldr	r3, [pc, #64]	@ (800a888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	1dba      	adds	r2, r7, #6
 800a84a:	8812      	ldrh	r2, [r2, #0]
 800a84c:	4013      	ands	r3, r2
 800a84e:	d008      	beq.n	800a862 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a850:	4b0d      	ldr	r3, [pc, #52]	@ (800a888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a852:	1dba      	adds	r2, r7, #6
 800a854:	8812      	ldrh	r2, [r2, #0]
 800a856:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a858:	1dbb      	adds	r3, r7, #6
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	0018      	movs	r0, r3
 800a85e:	f7fb f935 	bl	8005acc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800a862:	4b09      	ldr	r3, [pc, #36]	@ (800a888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	1dba      	adds	r2, r7, #6
 800a868:	8812      	ldrh	r2, [r2, #0]
 800a86a:	4013      	ands	r3, r2
 800a86c:	d008      	beq.n	800a880 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a86e:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800a870:	1dba      	adds	r2, r7, #6
 800a872:	8812      	ldrh	r2, [r2, #0]
 800a874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a876:	1dbb      	adds	r3, r7, #6
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	0018      	movs	r0, r3
 800a87c:	f7fb f935 	bl	8005aea <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a880:	46c0      	nop			@ (mov r8, r8)
 800a882:	46bd      	mov	sp, r7
 800a884:	b002      	add	sp, #8
 800a886:	bd80      	pop	{r7, pc}
 800a888:	40021800 	.word	0x40021800

0800a88c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e08f      	b.n	800a9be <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2241      	movs	r2, #65	@ 0x41
 800a8a2:	5c9b      	ldrb	r3, [r3, r2]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d107      	bne.n	800a8ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2240      	movs	r2, #64	@ 0x40
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f7fa ff49 	bl	800574c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2241      	movs	r2, #65	@ 0x41
 800a8be:	2124      	movs	r1, #36	@ 0x24
 800a8c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	438a      	bics	r2, r1
 800a8d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	493b      	ldr	r1, [pc, #236]	@ (800a9c8 <HAL_I2C_Init+0x13c>)
 800a8dc:	400a      	ands	r2, r1
 800a8de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689a      	ldr	r2, [r3, #8]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4938      	ldr	r1, [pc, #224]	@ (800a9cc <HAL_I2C_Init+0x140>)
 800a8ec:	400a      	ands	r2, r1
 800a8ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d108      	bne.n	800a90a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	689a      	ldr	r2, [r3, #8]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2180      	movs	r1, #128	@ 0x80
 800a902:	0209      	lsls	r1, r1, #8
 800a904:	430a      	orrs	r2, r1
 800a906:	609a      	str	r2, [r3, #8]
 800a908:	e007      	b.n	800a91a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2184      	movs	r1, #132	@ 0x84
 800a914:	0209      	lsls	r1, r1, #8
 800a916:	430a      	orrs	r2, r1
 800a918:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d109      	bne.n	800a936 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2180      	movs	r1, #128	@ 0x80
 800a92e:	0109      	lsls	r1, r1, #4
 800a930:	430a      	orrs	r2, r1
 800a932:	605a      	str	r2, [r3, #4]
 800a934:	e007      	b.n	800a946 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4923      	ldr	r1, [pc, #140]	@ (800a9d0 <HAL_I2C_Init+0x144>)
 800a942:	400a      	ands	r2, r1
 800a944:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4920      	ldr	r1, [pc, #128]	@ (800a9d4 <HAL_I2C_Init+0x148>)
 800a952:	430a      	orrs	r2, r1
 800a954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	491a      	ldr	r1, [pc, #104]	@ (800a9cc <HAL_I2C_Init+0x140>)
 800a962:	400a      	ands	r2, r1
 800a964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691a      	ldr	r2, [r3, #16]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	431a      	orrs	r2, r3
 800a970:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	69d9      	ldr	r1, [r3, #28]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a1a      	ldr	r2, [r3, #32]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2101      	movs	r1, #1
 800a99c:	430a      	orrs	r2, r1
 800a99e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2241      	movs	r2, #65	@ 0x41
 800a9aa:	2120      	movs	r1, #32
 800a9ac:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2242      	movs	r2, #66	@ 0x42
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	0018      	movs	r0, r3
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	b002      	add	sp, #8
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	46c0      	nop			@ (mov r8, r8)
 800a9c8:	f0ffffff 	.word	0xf0ffffff
 800a9cc:	ffff7fff 	.word	0xffff7fff
 800a9d0:	fffff7ff 	.word	0xfffff7ff
 800a9d4:	02008000 	.word	0x02008000

0800a9d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9d8:	b590      	push	{r4, r7, lr}
 800a9da:	b089      	sub	sp, #36	@ 0x24
 800a9dc:	af02      	add	r7, sp, #8
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	000c      	movs	r4, r1
 800a9e2:	0010      	movs	r0, r2
 800a9e4:	0019      	movs	r1, r3
 800a9e6:	230a      	movs	r3, #10
 800a9e8:	18fb      	adds	r3, r7, r3
 800a9ea:	1c22      	adds	r2, r4, #0
 800a9ec:	801a      	strh	r2, [r3, #0]
 800a9ee:	2308      	movs	r3, #8
 800a9f0:	18fb      	adds	r3, r7, r3
 800a9f2:	1c02      	adds	r2, r0, #0
 800a9f4:	801a      	strh	r2, [r3, #0]
 800a9f6:	1dbb      	adds	r3, r7, #6
 800a9f8:	1c0a      	adds	r2, r1, #0
 800a9fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2241      	movs	r2, #65	@ 0x41
 800aa00:	5c9b      	ldrb	r3, [r3, r2]
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d000      	beq.n	800aa0a <HAL_I2C_Mem_Write+0x32>
 800aa08:	e10c      	b.n	800ac24 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d004      	beq.n	800aa1a <HAL_I2C_Mem_Write+0x42>
 800aa10:	232c      	movs	r3, #44	@ 0x2c
 800aa12:	18fb      	adds	r3, r7, r3
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d105      	bne.n	800aa26 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2280      	movs	r2, #128	@ 0x80
 800aa1e:	0092      	lsls	r2, r2, #2
 800aa20:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e0ff      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2240      	movs	r2, #64	@ 0x40
 800aa2a:	5c9b      	ldrb	r3, [r3, r2]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d101      	bne.n	800aa34 <HAL_I2C_Mem_Write+0x5c>
 800aa30:	2302      	movs	r3, #2
 800aa32:	e0f8      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2240      	movs	r2, #64	@ 0x40
 800aa38:	2101      	movs	r1, #1
 800aa3a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aa3c:	f7fc ff82 	bl	8007944 <HAL_GetTick>
 800aa40:	0003      	movs	r3, r0
 800aa42:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa44:	2380      	movs	r3, #128	@ 0x80
 800aa46:	0219      	lsls	r1, r3, #8
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	2319      	movs	r3, #25
 800aa50:	2201      	movs	r2, #1
 800aa52:	f000 fc07 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800aa56:	1e03      	subs	r3, r0, #0
 800aa58:	d001      	beq.n	800aa5e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e0e3      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2241      	movs	r2, #65	@ 0x41
 800aa62:	2121      	movs	r1, #33	@ 0x21
 800aa64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2242      	movs	r2, #66	@ 0x42
 800aa6a:	2140      	movs	r1, #64	@ 0x40
 800aa6c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	222c      	movs	r2, #44	@ 0x2c
 800aa7e:	18ba      	adds	r2, r7, r2
 800aa80:	8812      	ldrh	r2, [r2, #0]
 800aa82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa8a:	1dbb      	adds	r3, r7, #6
 800aa8c:	881c      	ldrh	r4, [r3, #0]
 800aa8e:	2308      	movs	r3, #8
 800aa90:	18fb      	adds	r3, r7, r3
 800aa92:	881a      	ldrh	r2, [r3, #0]
 800aa94:	230a      	movs	r3, #10
 800aa96:	18fb      	adds	r3, r7, r3
 800aa98:	8819      	ldrh	r1, [r3, #0]
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	0023      	movs	r3, r4
 800aaa6:	f000 faf5 	bl	800b094 <I2C_RequestMemoryWrite>
 800aaaa:	1e03      	subs	r3, r0, #0
 800aaac:	d005      	beq.n	800aaba <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2240      	movs	r2, #64	@ 0x40
 800aab2:	2100      	movs	r1, #0
 800aab4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e0b5      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	2bff      	cmp	r3, #255	@ 0xff
 800aac2:	d911      	bls.n	800aae8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	22ff      	movs	r2, #255	@ 0xff
 800aac8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	2380      	movs	r3, #128	@ 0x80
 800aad2:	045c      	lsls	r4, r3, #17
 800aad4:	230a      	movs	r3, #10
 800aad6:	18fb      	adds	r3, r7, r3
 800aad8:	8819      	ldrh	r1, [r3, #0]
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	2300      	movs	r3, #0
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	0023      	movs	r3, r4
 800aae2:	f000 fd99 	bl	800b618 <I2C_TransferConfig>
 800aae6:	e012      	b.n	800ab0e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	2380      	movs	r3, #128	@ 0x80
 800aafa:	049c      	lsls	r4, r3, #18
 800aafc:	230a      	movs	r3, #10
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	8819      	ldrh	r1, [r3, #0]
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	2300      	movs	r3, #0
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	0023      	movs	r3, r4
 800ab0a:	f000 fd85 	bl	800b618 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	0018      	movs	r0, r3
 800ab16:	f000 fbfd 	bl	800b314 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab1a:	1e03      	subs	r3, r0, #0
 800ab1c:	d001      	beq.n	800ab22 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e081      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	781a      	ldrb	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d03a      	beq.n	800abd2 <HAL_I2C_Mem_Write+0x1fa>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d136      	bne.n	800abd2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	0013      	movs	r3, r2
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2180      	movs	r1, #128	@ 0x80
 800ab72:	f000 fb77 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800ab76:	1e03      	subs	r3, r0, #0
 800ab78:	d001      	beq.n	800ab7e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e053      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2bff      	cmp	r3, #255	@ 0xff
 800ab86:	d911      	bls.n	800abac <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	22ff      	movs	r2, #255	@ 0xff
 800ab8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	2380      	movs	r3, #128	@ 0x80
 800ab96:	045c      	lsls	r4, r3, #17
 800ab98:	230a      	movs	r3, #10
 800ab9a:	18fb      	adds	r3, r7, r3
 800ab9c:	8819      	ldrh	r1, [r3, #0]
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	2300      	movs	r3, #0
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	0023      	movs	r3, r4
 800aba6:	f000 fd37 	bl	800b618 <I2C_TransferConfig>
 800abaa:	e012      	b.n	800abd2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	2380      	movs	r3, #128	@ 0x80
 800abbe:	049c      	lsls	r4, r3, #18
 800abc0:	230a      	movs	r3, #10
 800abc2:	18fb      	adds	r3, r7, r3
 800abc4:	8819      	ldrh	r1, [r3, #0]
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	2300      	movs	r3, #0
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	0023      	movs	r3, r4
 800abce:	f000 fd23 	bl	800b618 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d198      	bne.n	800ab0e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	0018      	movs	r0, r3
 800abe4:	f000 fbdc 	bl	800b3a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800abe8:	1e03      	subs	r3, r0, #0
 800abea:	d001      	beq.n	800abf0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e01a      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2220      	movs	r2, #32
 800abf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	490b      	ldr	r1, [pc, #44]	@ (800ac30 <HAL_I2C_Mem_Write+0x258>)
 800ac04:	400a      	ands	r2, r1
 800ac06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2241      	movs	r2, #65	@ 0x41
 800ac0c:	2120      	movs	r1, #32
 800ac0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2242      	movs	r2, #66	@ 0x42
 800ac14:	2100      	movs	r1, #0
 800ac16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2240      	movs	r2, #64	@ 0x40
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	e000      	b.n	800ac26 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800ac24:	2302      	movs	r3, #2
  }
}
 800ac26:	0018      	movs	r0, r3
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	b007      	add	sp, #28
 800ac2c:	bd90      	pop	{r4, r7, pc}
 800ac2e:	46c0      	nop			@ (mov r8, r8)
 800ac30:	fe00e800 	.word	0xfe00e800

0800ac34 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac34:	b590      	push	{r4, r7, lr}
 800ac36:	b089      	sub	sp, #36	@ 0x24
 800ac38:	af02      	add	r7, sp, #8
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	000c      	movs	r4, r1
 800ac3e:	0010      	movs	r0, r2
 800ac40:	0019      	movs	r1, r3
 800ac42:	230a      	movs	r3, #10
 800ac44:	18fb      	adds	r3, r7, r3
 800ac46:	1c22      	adds	r2, r4, #0
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	2308      	movs	r3, #8
 800ac4c:	18fb      	adds	r3, r7, r3
 800ac4e:	1c02      	adds	r2, r0, #0
 800ac50:	801a      	strh	r2, [r3, #0]
 800ac52:	1dbb      	adds	r3, r7, #6
 800ac54:	1c0a      	adds	r2, r1, #0
 800ac56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2241      	movs	r2, #65	@ 0x41
 800ac5c:	5c9b      	ldrb	r3, [r3, r2]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b20      	cmp	r3, #32
 800ac62:	d000      	beq.n	800ac66 <HAL_I2C_Mem_Read+0x32>
 800ac64:	e110      	b.n	800ae88 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d004      	beq.n	800ac76 <HAL_I2C_Mem_Read+0x42>
 800ac6c:	232c      	movs	r3, #44	@ 0x2c
 800ac6e:	18fb      	adds	r3, r7, r3
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2280      	movs	r2, #128	@ 0x80
 800ac7a:	0092      	lsls	r2, r2, #2
 800ac7c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e103      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2240      	movs	r2, #64	@ 0x40
 800ac86:	5c9b      	ldrb	r3, [r3, r2]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_I2C_Mem_Read+0x5c>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e0fc      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2240      	movs	r2, #64	@ 0x40
 800ac94:	2101      	movs	r1, #1
 800ac96:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ac98:	f7fc fe54 	bl	8007944 <HAL_GetTick>
 800ac9c:	0003      	movs	r3, r0
 800ac9e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aca0:	2380      	movs	r3, #128	@ 0x80
 800aca2:	0219      	lsls	r1, r3, #8
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	2319      	movs	r3, #25
 800acac:	2201      	movs	r2, #1
 800acae:	f000 fad9 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800acb2:	1e03      	subs	r3, r0, #0
 800acb4:	d001      	beq.n	800acba <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e0e7      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2241      	movs	r2, #65	@ 0x41
 800acbe:	2122      	movs	r1, #34	@ 0x22
 800acc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2242      	movs	r2, #66	@ 0x42
 800acc6:	2140      	movs	r1, #64	@ 0x40
 800acc8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	222c      	movs	r2, #44	@ 0x2c
 800acda:	18ba      	adds	r2, r7, r2
 800acdc:	8812      	ldrh	r2, [r2, #0]
 800acde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ace6:	1dbb      	adds	r3, r7, #6
 800ace8:	881c      	ldrh	r4, [r3, #0]
 800acea:	2308      	movs	r3, #8
 800acec:	18fb      	adds	r3, r7, r3
 800acee:	881a      	ldrh	r2, [r3, #0]
 800acf0:	230a      	movs	r3, #10
 800acf2:	18fb      	adds	r3, r7, r3
 800acf4:	8819      	ldrh	r1, [r3, #0]
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	0023      	movs	r3, r4
 800ad02:	f000 fa2b 	bl	800b15c <I2C_RequestMemoryRead>
 800ad06:	1e03      	subs	r3, r0, #0
 800ad08:	d005      	beq.n	800ad16 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2240      	movs	r2, #64	@ 0x40
 800ad0e:	2100      	movs	r1, #0
 800ad10:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e0b9      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	2bff      	cmp	r3, #255	@ 0xff
 800ad1e:	d911      	bls.n	800ad44 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	22ff      	movs	r2, #255	@ 0xff
 800ad24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	2380      	movs	r3, #128	@ 0x80
 800ad2e:	045c      	lsls	r4, r3, #17
 800ad30:	230a      	movs	r3, #10
 800ad32:	18fb      	adds	r3, r7, r3
 800ad34:	8819      	ldrh	r1, [r3, #0]
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	4b56      	ldr	r3, [pc, #344]	@ (800ae94 <HAL_I2C_Mem_Read+0x260>)
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	0023      	movs	r3, r4
 800ad3e:	f000 fc6b 	bl	800b618 <I2C_TransferConfig>
 800ad42:	e012      	b.n	800ad6a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	2380      	movs	r3, #128	@ 0x80
 800ad56:	049c      	lsls	r4, r3, #18
 800ad58:	230a      	movs	r3, #10
 800ad5a:	18fb      	adds	r3, r7, r3
 800ad5c:	8819      	ldrh	r1, [r3, #0]
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	4b4c      	ldr	r3, [pc, #304]	@ (800ae94 <HAL_I2C_Mem_Read+0x260>)
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	0023      	movs	r3, r4
 800ad66:	f000 fc57 	bl	800b618 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ad6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	0013      	movs	r3, r2
 800ad74:	2200      	movs	r2, #0
 800ad76:	2104      	movs	r1, #4
 800ad78:	f000 fa74 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800ad7c:	1e03      	subs	r3, r0, #0
 800ad7e:	d001      	beq.n	800ad84 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e082      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ada0:	3b01      	subs	r3, #1
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adac:	b29b      	uxth	r3, r3
 800adae:	3b01      	subs	r3, #1
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adba:	b29b      	uxth	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d03a      	beq.n	800ae36 <HAL_I2C_Mem_Read+0x202>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d136      	bne.n	800ae36 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800adc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	0013      	movs	r3, r2
 800add2:	2200      	movs	r2, #0
 800add4:	2180      	movs	r1, #128	@ 0x80
 800add6:	f000 fa45 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800adda:	1e03      	subs	r3, r0, #0
 800addc:	d001      	beq.n	800ade2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e053      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	2bff      	cmp	r3, #255	@ 0xff
 800adea:	d911      	bls.n	800ae10 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	22ff      	movs	r2, #255	@ 0xff
 800adf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	2380      	movs	r3, #128	@ 0x80
 800adfa:	045c      	lsls	r4, r3, #17
 800adfc:	230a      	movs	r3, #10
 800adfe:	18fb      	adds	r3, r7, r3
 800ae00:	8819      	ldrh	r1, [r3, #0]
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	2300      	movs	r3, #0
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	0023      	movs	r3, r4
 800ae0a:	f000 fc05 	bl	800b618 <I2C_TransferConfig>
 800ae0e:	e012      	b.n	800ae36 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	2380      	movs	r3, #128	@ 0x80
 800ae22:	049c      	lsls	r4, r3, #18
 800ae24:	230a      	movs	r3, #10
 800ae26:	18fb      	adds	r3, r7, r3
 800ae28:	8819      	ldrh	r1, [r3, #0]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	0023      	movs	r3, r4
 800ae32:	f000 fbf1 	bl	800b618 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d194      	bne.n	800ad6a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	0018      	movs	r0, r3
 800ae48:	f000 faaa 	bl	800b3a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ae4c:	1e03      	subs	r3, r0, #0
 800ae4e:	d001      	beq.n	800ae54 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e01a      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	490c      	ldr	r1, [pc, #48]	@ (800ae98 <HAL_I2C_Mem_Read+0x264>)
 800ae68:	400a      	ands	r2, r1
 800ae6a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2241      	movs	r2, #65	@ 0x41
 800ae70:	2120      	movs	r1, #32
 800ae72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2242      	movs	r2, #66	@ 0x42
 800ae78:	2100      	movs	r1, #0
 800ae7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2240      	movs	r2, #64	@ 0x40
 800ae80:	2100      	movs	r1, #0
 800ae82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	e000      	b.n	800ae8a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800ae88:	2302      	movs	r3, #2
  }
}
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	b007      	add	sp, #28
 800ae90:	bd90      	pop	{r4, r7, pc}
 800ae92:	46c0      	nop			@ (mov r8, r8)
 800ae94:	80002400 	.word	0x80002400
 800ae98:	fe00e800 	.word	0xfe00e800

0800ae9c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	@ 0x28
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	607a      	str	r2, [r7, #4]
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	230a      	movs	r3, #10
 800aeaa:	18fb      	adds	r3, r7, r3
 800aeac:	1c0a      	adds	r2, r1, #0
 800aeae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2241      	movs	r2, #65	@ 0x41
 800aeb8:	5c9b      	ldrb	r3, [r3, r2]
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d000      	beq.n	800aec2 <HAL_I2C_IsDeviceReady+0x26>
 800aec0:	e0df      	b.n	800b082 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	699a      	ldr	r2, [r3, #24]
 800aec8:	2380      	movs	r3, #128	@ 0x80
 800aeca:	021b      	lsls	r3, r3, #8
 800aecc:	401a      	ands	r2, r3
 800aece:	2380      	movs	r3, #128	@ 0x80
 800aed0:	021b      	lsls	r3, r3, #8
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d101      	bne.n	800aeda <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800aed6:	2302      	movs	r3, #2
 800aed8:	e0d4      	b.n	800b084 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2240      	movs	r2, #64	@ 0x40
 800aede:	5c9b      	ldrb	r3, [r3, r2]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_I2C_IsDeviceReady+0x4c>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e0cd      	b.n	800b084 <HAL_I2C_IsDeviceReady+0x1e8>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2240      	movs	r2, #64	@ 0x40
 800aeec:	2101      	movs	r1, #1
 800aeee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2241      	movs	r2, #65	@ 0x41
 800aef4:	2124      	movs	r1, #36	@ 0x24
 800aef6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d107      	bne.n	800af16 <HAL_I2C_IsDeviceReady+0x7a>
 800af06:	230a      	movs	r3, #10
 800af08:	18fb      	adds	r3, r7, r3
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	059b      	lsls	r3, r3, #22
 800af0e:	0d9b      	lsrs	r3, r3, #22
 800af10:	4a5e      	ldr	r2, [pc, #376]	@ (800b08c <HAL_I2C_IsDeviceReady+0x1f0>)
 800af12:	431a      	orrs	r2, r3
 800af14:	e006      	b.n	800af24 <HAL_I2C_IsDeviceReady+0x88>
 800af16:	230a      	movs	r3, #10
 800af18:	18fb      	adds	r3, r7, r3
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	059b      	lsls	r3, r3, #22
 800af1e:	0d9b      	lsrs	r3, r3, #22
 800af20:	4a5b      	ldr	r2, [pc, #364]	@ (800b090 <HAL_I2C_IsDeviceReady+0x1f4>)
 800af22:	431a      	orrs	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800af2a:	f7fc fd0b 	bl	8007944 <HAL_GetTick>
 800af2e:	0003      	movs	r3, r0
 800af30:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	2220      	movs	r2, #32
 800af3a:	4013      	ands	r3, r2
 800af3c:	3b20      	subs	r3, #32
 800af3e:	425a      	negs	r2, r3
 800af40:	4153      	adcs	r3, r2
 800af42:	b2da      	uxtb	r2, r3
 800af44:	231f      	movs	r3, #31
 800af46:	18fb      	adds	r3, r7, r3
 800af48:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	2210      	movs	r2, #16
 800af52:	4013      	ands	r3, r2
 800af54:	3b10      	subs	r3, #16
 800af56:	425a      	negs	r2, r3
 800af58:	4153      	adcs	r3, r2
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	231e      	movs	r3, #30
 800af5e:	18fb      	adds	r3, r7, r3
 800af60:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800af62:	e035      	b.n	800afd0 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	3301      	adds	r3, #1
 800af68:	d01a      	beq.n	800afa0 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800af6a:	f7fc fceb 	bl	8007944 <HAL_GetTick>
 800af6e:	0002      	movs	r2, r0
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d302      	bcc.n	800af80 <HAL_I2C_IsDeviceReady+0xe4>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10f      	bne.n	800afa0 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2241      	movs	r2, #65	@ 0x41
 800af84:	2120      	movs	r1, #32
 800af86:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af8c:	2220      	movs	r2, #32
 800af8e:	431a      	orrs	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2240      	movs	r2, #64	@ 0x40
 800af98:	2100      	movs	r1, #0
 800af9a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e071      	b.n	800b084 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	2220      	movs	r2, #32
 800afa8:	4013      	ands	r3, r2
 800afaa:	3b20      	subs	r3, #32
 800afac:	425a      	negs	r2, r3
 800afae:	4153      	adcs	r3, r2
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	231f      	movs	r3, #31
 800afb4:	18fb      	adds	r3, r7, r3
 800afb6:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	2210      	movs	r2, #16
 800afc0:	4013      	ands	r3, r2
 800afc2:	3b10      	subs	r3, #16
 800afc4:	425a      	negs	r2, r3
 800afc6:	4153      	adcs	r3, r2
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	231e      	movs	r3, #30
 800afcc:	18fb      	adds	r3, r7, r3
 800afce:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800afd0:	231f      	movs	r3, #31
 800afd2:	18fb      	adds	r3, r7, r3
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <HAL_I2C_IsDeviceReady+0x148>
 800afda:	231e      	movs	r3, #30
 800afdc:	18fb      	adds	r3, r7, r3
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0bf      	beq.n	800af64 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	2210      	movs	r2, #16
 800afec:	4013      	ands	r3, r2
 800afee:	2b10      	cmp	r3, #16
 800aff0:	d01a      	beq.n	800b028 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	0013      	movs	r3, r2
 800affc:	2200      	movs	r2, #0
 800affe:	2120      	movs	r1, #32
 800b000:	f000 f930 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800b004:	1e03      	subs	r3, r0, #0
 800b006:	d001      	beq.n	800b00c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e03b      	b.n	800b084 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2220      	movs	r2, #32
 800b012:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2241      	movs	r2, #65	@ 0x41
 800b018:	2120      	movs	r1, #32
 800b01a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2240      	movs	r2, #64	@ 0x40
 800b020:	2100      	movs	r1, #0
 800b022:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	e02d      	b.n	800b084 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	0013      	movs	r3, r2
 800b032:	2200      	movs	r2, #0
 800b034:	2120      	movs	r1, #32
 800b036:	f000 f915 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800b03a:	1e03      	subs	r3, r0, #0
 800b03c:	d001      	beq.n	800b042 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e020      	b.n	800b084 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2210      	movs	r2, #16
 800b048:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2220      	movs	r2, #32
 800b050:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	3301      	adds	r3, #1
 800b056:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d900      	bls.n	800b062 <HAL_I2C_IsDeviceReady+0x1c6>
 800b060:	e74d      	b.n	800aefe <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2241      	movs	r2, #65	@ 0x41
 800b066:	2120      	movs	r1, #32
 800b068:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b06e:	2220      	movs	r2, #32
 800b070:	431a      	orrs	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2240      	movs	r2, #64	@ 0x40
 800b07a:	2100      	movs	r1, #0
 800b07c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e000      	b.n	800b084 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800b082:	2302      	movs	r3, #2
  }
}
 800b084:	0018      	movs	r0, r3
 800b086:	46bd      	mov	sp, r7
 800b088:	b008      	add	sp, #32
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	02002000 	.word	0x02002000
 800b090:	02002800 	.word	0x02002800

0800b094 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b094:	b5b0      	push	{r4, r5, r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af02      	add	r7, sp, #8
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	000c      	movs	r4, r1
 800b09e:	0010      	movs	r0, r2
 800b0a0:	0019      	movs	r1, r3
 800b0a2:	250a      	movs	r5, #10
 800b0a4:	197b      	adds	r3, r7, r5
 800b0a6:	1c22      	adds	r2, r4, #0
 800b0a8:	801a      	strh	r2, [r3, #0]
 800b0aa:	2308      	movs	r3, #8
 800b0ac:	18fb      	adds	r3, r7, r3
 800b0ae:	1c02      	adds	r2, r0, #0
 800b0b0:	801a      	strh	r2, [r3, #0]
 800b0b2:	1dbb      	adds	r3, r7, #6
 800b0b4:	1c0a      	adds	r2, r1, #0
 800b0b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b0b8:	1dbb      	adds	r3, r7, #6
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	2380      	movs	r3, #128	@ 0x80
 800b0c0:	045c      	lsls	r4, r3, #17
 800b0c2:	197b      	adds	r3, r7, r5
 800b0c4:	8819      	ldrh	r1, [r3, #0]
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	4b23      	ldr	r3, [pc, #140]	@ (800b158 <I2C_RequestMemoryWrite+0xc4>)
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	0023      	movs	r3, r4
 800b0ce:	f000 faa3 	bl	800b618 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0d4:	6a39      	ldr	r1, [r7, #32]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f000 f91b 	bl	800b314 <I2C_WaitOnTXISFlagUntilTimeout>
 800b0de:	1e03      	subs	r3, r0, #0
 800b0e0:	d001      	beq.n	800b0e6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e033      	b.n	800b14e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0e6:	1dbb      	adds	r3, r7, #6
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d107      	bne.n	800b0fe <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0ee:	2308      	movs	r3, #8
 800b0f0:	18fb      	adds	r3, r7, r3
 800b0f2:	881b      	ldrh	r3, [r3, #0]
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	629a      	str	r2, [r3, #40]	@ 0x28
 800b0fc:	e019      	b.n	800b132 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b0fe:	2308      	movs	r3, #8
 800b100:	18fb      	adds	r3, r7, r3
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	0a1b      	lsrs	r3, r3, #8
 800b106:	b29b      	uxth	r3, r3
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b112:	6a39      	ldr	r1, [r7, #32]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	0018      	movs	r0, r3
 800b118:	f000 f8fc 	bl	800b314 <I2C_WaitOnTXISFlagUntilTimeout>
 800b11c:	1e03      	subs	r3, r0, #0
 800b11e:	d001      	beq.n	800b124 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e014      	b.n	800b14e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b124:	2308      	movs	r3, #8
 800b126:	18fb      	adds	r3, r7, r3
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b132:	6a3a      	ldr	r2, [r7, #32]
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	0013      	movs	r3, r2
 800b13c:	2200      	movs	r2, #0
 800b13e:	2180      	movs	r1, #128	@ 0x80
 800b140:	f000 f890 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800b144:	1e03      	subs	r3, r0, #0
 800b146:	d001      	beq.n	800b14c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	0018      	movs	r0, r3
 800b150:	46bd      	mov	sp, r7
 800b152:	b004      	add	sp, #16
 800b154:	bdb0      	pop	{r4, r5, r7, pc}
 800b156:	46c0      	nop			@ (mov r8, r8)
 800b158:	80002000 	.word	0x80002000

0800b15c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b15c:	b5b0      	push	{r4, r5, r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af02      	add	r7, sp, #8
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	000c      	movs	r4, r1
 800b166:	0010      	movs	r0, r2
 800b168:	0019      	movs	r1, r3
 800b16a:	250a      	movs	r5, #10
 800b16c:	197b      	adds	r3, r7, r5
 800b16e:	1c22      	adds	r2, r4, #0
 800b170:	801a      	strh	r2, [r3, #0]
 800b172:	2308      	movs	r3, #8
 800b174:	18fb      	adds	r3, r7, r3
 800b176:	1c02      	adds	r2, r0, #0
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	1dbb      	adds	r3, r7, #6
 800b17c:	1c0a      	adds	r2, r1, #0
 800b17e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b180:	1dbb      	adds	r3, r7, #6
 800b182:	881b      	ldrh	r3, [r3, #0]
 800b184:	b2da      	uxtb	r2, r3
 800b186:	197b      	adds	r3, r7, r5
 800b188:	8819      	ldrh	r1, [r3, #0]
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	4b23      	ldr	r3, [pc, #140]	@ (800b21c <I2C_RequestMemoryRead+0xc0>)
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	2300      	movs	r3, #0
 800b192:	f000 fa41 	bl	800b618 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b198:	6a39      	ldr	r1, [r7, #32]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	0018      	movs	r0, r3
 800b19e:	f000 f8b9 	bl	800b314 <I2C_WaitOnTXISFlagUntilTimeout>
 800b1a2:	1e03      	subs	r3, r0, #0
 800b1a4:	d001      	beq.n	800b1aa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e033      	b.n	800b212 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b1aa:	1dbb      	adds	r3, r7, #6
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d107      	bne.n	800b1c2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	18fb      	adds	r3, r7, r3
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	629a      	str	r2, [r3, #40]	@ 0x28
 800b1c0:	e019      	b.n	800b1f6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b1c2:	2308      	movs	r3, #8
 800b1c4:	18fb      	adds	r3, r7, r3
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	0a1b      	lsrs	r3, r3, #8
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d6:	6a39      	ldr	r1, [r7, #32]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f000 f89a 	bl	800b314 <I2C_WaitOnTXISFlagUntilTimeout>
 800b1e0:	1e03      	subs	r3, r0, #0
 800b1e2:	d001      	beq.n	800b1e8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e014      	b.n	800b212 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b1e8:	2308      	movs	r3, #8
 800b1ea:	18fb      	adds	r3, r7, r3
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b1f6:	6a3a      	ldr	r2, [r7, #32]
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	0013      	movs	r3, r2
 800b200:	2200      	movs	r2, #0
 800b202:	2140      	movs	r1, #64	@ 0x40
 800b204:	f000 f82e 	bl	800b264 <I2C_WaitOnFlagUntilTimeout>
 800b208:	1e03      	subs	r3, r0, #0
 800b20a:	d001      	beq.n	800b210 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e000      	b.n	800b212 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	0018      	movs	r0, r3
 800b214:	46bd      	mov	sp, r7
 800b216:	b004      	add	sp, #16
 800b218:	bdb0      	pop	{r4, r5, r7, pc}
 800b21a:	46c0      	nop			@ (mov r8, r8)
 800b21c:	80002000 	.word	0x80002000

0800b220 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	2202      	movs	r2, #2
 800b230:	4013      	ands	r3, r2
 800b232:	2b02      	cmp	r3, #2
 800b234:	d103      	bne.n	800b23e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2200      	movs	r2, #0
 800b23c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	2201      	movs	r2, #1
 800b246:	4013      	ands	r3, r2
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d007      	beq.n	800b25c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	699a      	ldr	r2, [r3, #24]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2101      	movs	r1, #1
 800b258:	430a      	orrs	r2, r1
 800b25a:	619a      	str	r2, [r3, #24]
  }
}
 800b25c:	46c0      	nop			@ (mov r8, r8)
 800b25e:	46bd      	mov	sp, r7
 800b260:	b002      	add	sp, #8
 800b262:	bd80      	pop	{r7, pc}

0800b264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	1dfb      	adds	r3, r7, #7
 800b272:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b274:	e03a      	b.n	800b2ec <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	0018      	movs	r0, r3
 800b27e:	f000 f8d3 	bl	800b428 <I2C_IsErrorOccurred>
 800b282:	1e03      	subs	r3, r0, #0
 800b284:	d001      	beq.n	800b28a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e040      	b.n	800b30c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	3301      	adds	r3, #1
 800b28e:	d02d      	beq.n	800b2ec <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b290:	f7fc fb58 	bl	8007944 <HAL_GetTick>
 800b294:	0002      	movs	r2, r0
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d302      	bcc.n	800b2a6 <I2C_WaitOnFlagUntilTimeout+0x42>
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d122      	bne.n	800b2ec <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	425a      	negs	r2, r3
 800b2b6:	4153      	adcs	r3, r2
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	001a      	movs	r2, r3
 800b2bc:	1dfb      	adds	r3, r7, #7
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d113      	bne.n	800b2ec <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2241      	movs	r2, #65	@ 0x41
 800b2d4:	2120      	movs	r1, #32
 800b2d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2242      	movs	r2, #66	@ 0x42
 800b2dc:	2100      	movs	r1, #0
 800b2de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2240      	movs	r2, #64	@ 0x40
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e00f      	b.n	800b30c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	425a      	negs	r2, r3
 800b2fc:	4153      	adcs	r3, r2
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	001a      	movs	r2, r3
 800b302:	1dfb      	adds	r3, r7, #7
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d0b5      	beq.n	800b276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	0018      	movs	r0, r3
 800b30e:	46bd      	mov	sp, r7
 800b310:	b004      	add	sp, #16
 800b312:	bd80      	pop	{r7, pc}

0800b314 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b320:	e032      	b.n	800b388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	0018      	movs	r0, r3
 800b32a:	f000 f87d 	bl	800b428 <I2C_IsErrorOccurred>
 800b32e:	1e03      	subs	r3, r0, #0
 800b330:	d001      	beq.n	800b336 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e030      	b.n	800b398 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	3301      	adds	r3, #1
 800b33a:	d025      	beq.n	800b388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b33c:	f7fc fb02 	bl	8007944 <HAL_GetTick>
 800b340:	0002      	movs	r2, r0
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d302      	bcc.n	800b352 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d11a      	bne.n	800b388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	2202      	movs	r2, #2
 800b35a:	4013      	ands	r3, r2
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d013      	beq.n	800b388 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b364:	2220      	movs	r2, #32
 800b366:	431a      	orrs	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2241      	movs	r2, #65	@ 0x41
 800b370:	2120      	movs	r1, #32
 800b372:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2242      	movs	r2, #66	@ 0x42
 800b378:	2100      	movs	r1, #0
 800b37a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2240      	movs	r2, #64	@ 0x40
 800b380:	2100      	movs	r1, #0
 800b382:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e007      	b.n	800b398 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	2202      	movs	r2, #2
 800b390:	4013      	ands	r3, r2
 800b392:	2b02      	cmp	r3, #2
 800b394:	d1c5      	bne.n	800b322 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	0018      	movs	r0, r3
 800b39a:	46bd      	mov	sp, r7
 800b39c:	b004      	add	sp, #16
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b3ac:	e02f      	b.n	800b40e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	f000 f837 	bl	800b428 <I2C_IsErrorOccurred>
 800b3ba:	1e03      	subs	r3, r0, #0
 800b3bc:	d001      	beq.n	800b3c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e02d      	b.n	800b41e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3c2:	f7fc fabf 	bl	8007944 <HAL_GetTick>
 800b3c6:	0002      	movs	r2, r0
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d302      	bcc.n	800b3d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d11a      	bne.n	800b40e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	d013      	beq.n	800b40e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ea:	2220      	movs	r2, #32
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2241      	movs	r2, #65	@ 0x41
 800b3f6:	2120      	movs	r1, #32
 800b3f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2242      	movs	r2, #66	@ 0x42
 800b3fe:	2100      	movs	r1, #0
 800b400:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2240      	movs	r2, #64	@ 0x40
 800b406:	2100      	movs	r1, #0
 800b408:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e007      	b.n	800b41e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	2220      	movs	r2, #32
 800b416:	4013      	ands	r3, r2
 800b418:	2b20      	cmp	r3, #32
 800b41a:	d1c8      	bne.n	800b3ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	0018      	movs	r0, r3
 800b420:	46bd      	mov	sp, r7
 800b422:	b004      	add	sp, #16
 800b424:	bd80      	pop	{r7, pc}
	...

0800b428 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08a      	sub	sp, #40	@ 0x28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b434:	2327      	movs	r3, #39	@ 0x27
 800b436:	18fb      	adds	r3, r7, r3
 800b438:	2200      	movs	r2, #0
 800b43a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	2210      	movs	r2, #16
 800b450:	4013      	ands	r3, r2
 800b452:	d100      	bne.n	800b456 <I2C_IsErrorOccurred+0x2e>
 800b454:	e079      	b.n	800b54a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2210      	movs	r2, #16
 800b45c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b45e:	e057      	b.n	800b510 <I2C_IsErrorOccurred+0xe8>
 800b460:	2227      	movs	r2, #39	@ 0x27
 800b462:	18bb      	adds	r3, r7, r2
 800b464:	18ba      	adds	r2, r7, r2
 800b466:	7812      	ldrb	r2, [r2, #0]
 800b468:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3301      	adds	r3, #1
 800b46e:	d04f      	beq.n	800b510 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b470:	f7fc fa68 	bl	8007944 <HAL_GetTick>
 800b474:	0002      	movs	r2, r0
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d302      	bcc.n	800b486 <I2C_IsErrorOccurred+0x5e>
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d144      	bne.n	800b510 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	2380      	movs	r3, #128	@ 0x80
 800b48e:	01db      	lsls	r3, r3, #7
 800b490:	4013      	ands	r3, r2
 800b492:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b494:	2013      	movs	r0, #19
 800b496:	183b      	adds	r3, r7, r0
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	2142      	movs	r1, #66	@ 0x42
 800b49c:	5c52      	ldrb	r2, [r2, r1]
 800b49e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	2380      	movs	r3, #128	@ 0x80
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	401a      	ands	r2, r3
 800b4ac:	2380      	movs	r3, #128	@ 0x80
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d126      	bne.n	800b502 <I2C_IsErrorOccurred+0xda>
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	2380      	movs	r3, #128	@ 0x80
 800b4b8:	01db      	lsls	r3, r3, #7
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d021      	beq.n	800b502 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800b4be:	183b      	adds	r3, r7, r0
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	d01d      	beq.n	800b502 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2180      	movs	r1, #128	@ 0x80
 800b4d2:	01c9      	lsls	r1, r1, #7
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b4d8:	f7fc fa34 	bl	8007944 <HAL_GetTick>
 800b4dc:	0003      	movs	r3, r0
 800b4de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4e0:	e00f      	b.n	800b502 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b4e2:	f7fc fa2f 	bl	8007944 <HAL_GetTick>
 800b4e6:	0002      	movs	r2, r0
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	2b19      	cmp	r3, #25
 800b4ee:	d908      	bls.n	800b502 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	2220      	movs	r2, #32
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b4f8:	2327      	movs	r3, #39	@ 0x27
 800b4fa:	18fb      	adds	r3, r7, r3
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	701a      	strb	r2, [r3, #0]

              break;
 800b500:	e006      	b.n	800b510 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	2220      	movs	r2, #32
 800b50a:	4013      	ands	r3, r2
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	d1e8      	bne.n	800b4e2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	2220      	movs	r2, #32
 800b518:	4013      	ands	r3, r2
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	d004      	beq.n	800b528 <I2C_IsErrorOccurred+0x100>
 800b51e:	2327      	movs	r3, #39	@ 0x27
 800b520:	18fb      	adds	r3, r7, r3
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d09b      	beq.n	800b460 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b528:	2327      	movs	r3, #39	@ 0x27
 800b52a:	18fb      	adds	r3, r7, r3
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d103      	bne.n	800b53a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2220      	movs	r2, #32
 800b538:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	2204      	movs	r2, #4
 800b53e:	4313      	orrs	r3, r2
 800b540:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b542:	2327      	movs	r3, #39	@ 0x27
 800b544:	18fb      	adds	r3, r7, r3
 800b546:	2201      	movs	r2, #1
 800b548:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	2380      	movs	r3, #128	@ 0x80
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	4013      	ands	r3, r2
 800b55a:	d00c      	beq.n	800b576 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	2201      	movs	r2, #1
 800b560:	4313      	orrs	r3, r2
 800b562:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2280      	movs	r2, #128	@ 0x80
 800b56a:	0052      	lsls	r2, r2, #1
 800b56c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b56e:	2327      	movs	r3, #39	@ 0x27
 800b570:	18fb      	adds	r3, r7, r3
 800b572:	2201      	movs	r2, #1
 800b574:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	2380      	movs	r3, #128	@ 0x80
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	4013      	ands	r3, r2
 800b57e:	d00c      	beq.n	800b59a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	2208      	movs	r2, #8
 800b584:	4313      	orrs	r3, r2
 800b586:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2280      	movs	r2, #128	@ 0x80
 800b58e:	00d2      	lsls	r2, r2, #3
 800b590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b592:	2327      	movs	r3, #39	@ 0x27
 800b594:	18fb      	adds	r3, r7, r3
 800b596:	2201      	movs	r2, #1
 800b598:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	2380      	movs	r3, #128	@ 0x80
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4013      	ands	r3, r2
 800b5a2:	d00c      	beq.n	800b5be <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2280      	movs	r2, #128	@ 0x80
 800b5b2:	0092      	lsls	r2, r2, #2
 800b5b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b5b6:	2327      	movs	r3, #39	@ 0x27
 800b5b8:	18fb      	adds	r3, r7, r3
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800b5be:	2327      	movs	r3, #39	@ 0x27
 800b5c0:	18fb      	adds	r3, r7, r3
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d01d      	beq.n	800b604 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	f7ff fe28 	bl	800b220 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	490e      	ldr	r1, [pc, #56]	@ (800b614 <I2C_IsErrorOccurred+0x1ec>)
 800b5dc:	400a      	ands	r2, r1
 800b5de:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	431a      	orrs	r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2241      	movs	r2, #65	@ 0x41
 800b5f0:	2120      	movs	r1, #32
 800b5f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2242      	movs	r2, #66	@ 0x42
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2240      	movs	r2, #64	@ 0x40
 800b600:	2100      	movs	r1, #0
 800b602:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800b604:	2327      	movs	r3, #39	@ 0x27
 800b606:	18fb      	adds	r3, r7, r3
 800b608:	781b      	ldrb	r3, [r3, #0]
}
 800b60a:	0018      	movs	r0, r3
 800b60c:	46bd      	mov	sp, r7
 800b60e:	b00a      	add	sp, #40	@ 0x28
 800b610:	bd80      	pop	{r7, pc}
 800b612:	46c0      	nop			@ (mov r8, r8)
 800b614:	fe00e800 	.word	0xfe00e800

0800b618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	0008      	movs	r0, r1
 800b622:	0011      	movs	r1, r2
 800b624:	607b      	str	r3, [r7, #4]
 800b626:	240a      	movs	r4, #10
 800b628:	193b      	adds	r3, r7, r4
 800b62a:	1c02      	adds	r2, r0, #0
 800b62c:	801a      	strh	r2, [r3, #0]
 800b62e:	2009      	movs	r0, #9
 800b630:	183b      	adds	r3, r7, r0
 800b632:	1c0a      	adds	r2, r1, #0
 800b634:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b636:	193b      	adds	r3, r7, r4
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	059b      	lsls	r3, r3, #22
 800b63c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b63e:	183b      	adds	r3, r7, r0
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	0419      	lsls	r1, r3, #16
 800b644:	23ff      	movs	r3, #255	@ 0xff
 800b646:	041b      	lsls	r3, r3, #16
 800b648:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b64a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b652:	4313      	orrs	r3, r2
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	085b      	lsrs	r3, r3, #1
 800b658:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b662:	0d51      	lsrs	r1, r2, #21
 800b664:	2280      	movs	r2, #128	@ 0x80
 800b666:	00d2      	lsls	r2, r2, #3
 800b668:	400a      	ands	r2, r1
 800b66a:	4907      	ldr	r1, [pc, #28]	@ (800b688 <I2C_TransferConfig+0x70>)
 800b66c:	430a      	orrs	r2, r1
 800b66e:	43d2      	mvns	r2, r2
 800b670:	401a      	ands	r2, r3
 800b672:	0011      	movs	r1, r2
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b67e:	46c0      	nop			@ (mov r8, r8)
 800b680:	46bd      	mov	sp, r7
 800b682:	b007      	add	sp, #28
 800b684:	bd90      	pop	{r4, r7, pc}
 800b686:	46c0      	nop			@ (mov r8, r8)
 800b688:	03ff63ff 	.word	0x03ff63ff

0800b68c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2241      	movs	r2, #65	@ 0x41
 800b69a:	5c9b      	ldrb	r3, [r3, r2]
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b20      	cmp	r3, #32
 800b6a0:	d138      	bne.n	800b714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2240      	movs	r2, #64	@ 0x40
 800b6a6:	5c9b      	ldrb	r3, [r3, r2]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d101      	bne.n	800b6b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	e032      	b.n	800b716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2240      	movs	r2, #64	@ 0x40
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2241      	movs	r2, #65	@ 0x41
 800b6bc:	2124      	movs	r1, #36	@ 0x24
 800b6be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	438a      	bics	r2, r1
 800b6ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4911      	ldr	r1, [pc, #68]	@ (800b720 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800b6dc:	400a      	ands	r2, r1
 800b6de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6819      	ldr	r1, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2241      	movs	r2, #65	@ 0x41
 800b704:	2120      	movs	r1, #32
 800b706:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2240      	movs	r2, #64	@ 0x40
 800b70c:	2100      	movs	r1, #0
 800b70e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	e000      	b.n	800b716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b714:	2302      	movs	r3, #2
  }
}
 800b716:	0018      	movs	r0, r3
 800b718:	46bd      	mov	sp, r7
 800b71a:	b002      	add	sp, #8
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	46c0      	nop			@ (mov r8, r8)
 800b720:	ffffefff 	.word	0xffffefff

0800b724 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2241      	movs	r2, #65	@ 0x41
 800b732:	5c9b      	ldrb	r3, [r3, r2]
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b20      	cmp	r3, #32
 800b738:	d139      	bne.n	800b7ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2240      	movs	r2, #64	@ 0x40
 800b73e:	5c9b      	ldrb	r3, [r3, r2]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d101      	bne.n	800b748 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b744:	2302      	movs	r3, #2
 800b746:	e033      	b.n	800b7b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2240      	movs	r2, #64	@ 0x40
 800b74c:	2101      	movs	r1, #1
 800b74e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2241      	movs	r2, #65	@ 0x41
 800b754:	2124      	movs	r1, #36	@ 0x24
 800b756:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2101      	movs	r1, #1
 800b764:	438a      	bics	r2, r1
 800b766:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4a11      	ldr	r2, [pc, #68]	@ (800b7b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b774:	4013      	ands	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	021b      	lsls	r3, r3, #8
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2101      	movs	r1, #1
 800b796:	430a      	orrs	r2, r1
 800b798:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2241      	movs	r2, #65	@ 0x41
 800b79e:	2120      	movs	r1, #32
 800b7a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2240      	movs	r2, #64	@ 0x40
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e000      	b.n	800b7b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b7ae:	2302      	movs	r3, #2
  }
}
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	b004      	add	sp, #16
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	fffff0ff 	.word	0xfffff0ff

0800b7bc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e03d      	b.n	800b84a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a20      	ldr	r2, [pc, #128]	@ (800b854 <HAL_IWDG_Init+0x98>)
 800b7d4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a1f      	ldr	r2, [pc, #124]	@ (800b858 <HAL_IWDG_Init+0x9c>)
 800b7dc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	6852      	ldr	r2, [r2, #4]
 800b7e6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6892      	ldr	r2, [r2, #8]
 800b7f0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b7f2:	f7fc f8a7 	bl	8007944 <HAL_GetTick>
 800b7f6:	0003      	movs	r3, r0
 800b7f8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b7fa:	e00e      	b.n	800b81a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b7fc:	f7fc f8a2 	bl	8007944 <HAL_GetTick>
 800b800:	0002      	movs	r2, r0
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	2b31      	cmp	r3, #49	@ 0x31
 800b808:	d907      	bls.n	800b81a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	2207      	movs	r2, #7
 800b812:	4013      	ands	r3, r2
 800b814:	d001      	beq.n	800b81a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e017      	b.n	800b84a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	2207      	movs	r2, #7
 800b822:	4013      	ands	r3, r2
 800b824:	d1ea      	bne.n	800b7fc <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	691a      	ldr	r2, [r3, #16]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	429a      	cmp	r2, r3
 800b832:	d005      	beq.n	800b840 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	68d2      	ldr	r2, [r2, #12]
 800b83c:	611a      	str	r2, [r3, #16]
 800b83e:	e003      	b.n	800b848 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a05      	ldr	r2, [pc, #20]	@ (800b85c <HAL_IWDG_Init+0xa0>)
 800b846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	0018      	movs	r0, r3
 800b84c:	46bd      	mov	sp, r7
 800b84e:	b004      	add	sp, #16
 800b850:	bd80      	pop	{r7, pc}
 800b852:	46c0      	nop			@ (mov r8, r8)
 800b854:	0000cccc 	.word	0x0000cccc
 800b858:	00005555 	.word	0x00005555
 800b85c:	0000aaaa 	.word	0x0000aaaa

0800b860 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a03      	ldr	r2, [pc, #12]	@ (800b87c <HAL_IWDG_Refresh+0x1c>)
 800b86e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	0018      	movs	r0, r3
 800b874:	46bd      	mov	sp, r7
 800b876:	b002      	add	sp, #8
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	46c0      	nop			@ (mov r8, r8)
 800b87c:	0000aaaa 	.word	0x0000aaaa

0800b880 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b884:	4b04      	ldr	r3, [pc, #16]	@ (800b898 <HAL_PWR_EnableBkUpAccess+0x18>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	4b03      	ldr	r3, [pc, #12]	@ (800b898 <HAL_PWR_EnableBkUpAccess+0x18>)
 800b88a:	2180      	movs	r1, #128	@ 0x80
 800b88c:	0049      	lsls	r1, r1, #1
 800b88e:	430a      	orrs	r2, r1
 800b890:	601a      	str	r2, [r3, #0]
}
 800b892:	46c0      	nop			@ (mov r8, r8)
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	40007000 	.word	0x40007000

0800b89c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b8a4:	4b19      	ldr	r3, [pc, #100]	@ (800b90c <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a19      	ldr	r2, [pc, #100]	@ (800b910 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	0019      	movs	r1, r3
 800b8ae:	4b17      	ldr	r3, [pc, #92]	@ (800b90c <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	2380      	movs	r3, #128	@ 0x80
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d11f      	bne.n	800b900 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b8c0:	4b14      	ldr	r3, [pc, #80]	@ (800b914 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	0013      	movs	r3, r2
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	189b      	adds	r3, r3, r2
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	4912      	ldr	r1, [pc, #72]	@ (800b918 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f7f8 fd24 	bl	800431c <__udivsi3>
 800b8d4:	0003      	movs	r3, r0
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b8da:	e008      	b.n	800b8ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	60fb      	str	r3, [r7, #12]
 800b8e8:	e001      	b.n	800b8ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e009      	b.n	800b902 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b8ee:	4b07      	ldr	r3, [pc, #28]	@ (800b90c <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b8f0:	695a      	ldr	r2, [r3, #20]
 800b8f2:	2380      	movs	r3, #128	@ 0x80
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	401a      	ands	r2, r3
 800b8f8:	2380      	movs	r3, #128	@ 0x80
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d0ed      	beq.n	800b8dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	0018      	movs	r0, r3
 800b904:	46bd      	mov	sp, r7
 800b906:	b004      	add	sp, #16
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	46c0      	nop			@ (mov r8, r8)
 800b90c:	40007000 	.word	0x40007000
 800b910:	fffff9ff 	.word	0xfffff9ff
 800b914:	20000018 	.word	0x20000018
 800b918:	000f4240 	.word	0x000f4240

0800b91c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b920:	4b03      	ldr	r3, [pc, #12]	@ (800b930 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b922:	689a      	ldr	r2, [r3, #8]
 800b924:	23e0      	movs	r3, #224	@ 0xe0
 800b926:	01db      	lsls	r3, r3, #7
 800b928:	4013      	ands	r3, r2
}
 800b92a:	0018      	movs	r0, r3
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	40021000 	.word	0x40021000

0800b934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d102      	bne.n	800b948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	f000 fb50 	bl	800bfe8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2201      	movs	r2, #1
 800b94e:	4013      	ands	r3, r2
 800b950:	d100      	bne.n	800b954 <HAL_RCC_OscConfig+0x20>
 800b952:	e07c      	b.n	800ba4e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b954:	4bc3      	ldr	r3, [pc, #780]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	2238      	movs	r2, #56	@ 0x38
 800b95a:	4013      	ands	r3, r2
 800b95c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b95e:	4bc1      	ldr	r3, [pc, #772]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	2203      	movs	r2, #3
 800b964:	4013      	ands	r3, r2
 800b966:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	2b10      	cmp	r3, #16
 800b96c:	d102      	bne.n	800b974 <HAL_RCC_OscConfig+0x40>
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b03      	cmp	r3, #3
 800b972:	d002      	beq.n	800b97a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b08      	cmp	r3, #8
 800b978:	d10b      	bne.n	800b992 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b97a:	4bba      	ldr	r3, [pc, #744]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	2380      	movs	r3, #128	@ 0x80
 800b980:	029b      	lsls	r3, r3, #10
 800b982:	4013      	ands	r3, r2
 800b984:	d062      	beq.n	800ba4c <HAL_RCC_OscConfig+0x118>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d15e      	bne.n	800ba4c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e32a      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	2380      	movs	r3, #128	@ 0x80
 800b998:	025b      	lsls	r3, r3, #9
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d107      	bne.n	800b9ae <HAL_RCC_OscConfig+0x7a>
 800b99e:	4bb1      	ldr	r3, [pc, #708]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	4bb0      	ldr	r3, [pc, #704]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9a4:	2180      	movs	r1, #128	@ 0x80
 800b9a6:	0249      	lsls	r1, r1, #9
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	e020      	b.n	800b9f0 <HAL_RCC_OscConfig+0xbc>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	23a0      	movs	r3, #160	@ 0xa0
 800b9b4:	02db      	lsls	r3, r3, #11
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d10e      	bne.n	800b9d8 <HAL_RCC_OscConfig+0xa4>
 800b9ba:	4baa      	ldr	r3, [pc, #680]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	4ba9      	ldr	r3, [pc, #676]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9c0:	2180      	movs	r1, #128	@ 0x80
 800b9c2:	02c9      	lsls	r1, r1, #11
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	4ba6      	ldr	r3, [pc, #664]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	4ba5      	ldr	r3, [pc, #660]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9ce:	2180      	movs	r1, #128	@ 0x80
 800b9d0:	0249      	lsls	r1, r1, #9
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	e00b      	b.n	800b9f0 <HAL_RCC_OscConfig+0xbc>
 800b9d8:	4ba2      	ldr	r3, [pc, #648]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	4ba1      	ldr	r3, [pc, #644]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9de:	49a2      	ldr	r1, [pc, #648]	@ (800bc68 <HAL_RCC_OscConfig+0x334>)
 800b9e0:	400a      	ands	r2, r1
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	4b9f      	ldr	r3, [pc, #636]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	4b9e      	ldr	r3, [pc, #632]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800b9ea:	49a0      	ldr	r1, [pc, #640]	@ (800bc6c <HAL_RCC_OscConfig+0x338>)
 800b9ec:	400a      	ands	r2, r1
 800b9ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d014      	beq.n	800ba22 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f8:	f7fb ffa4 	bl	8007944 <HAL_GetTick>
 800b9fc:	0003      	movs	r3, r0
 800b9fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba00:	e008      	b.n	800ba14 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba02:	f7fb ff9f 	bl	8007944 <HAL_GetTick>
 800ba06:	0002      	movs	r2, r0
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	2b64      	cmp	r3, #100	@ 0x64
 800ba0e:	d901      	bls.n	800ba14 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e2e9      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba14:	4b93      	ldr	r3, [pc, #588]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	2380      	movs	r3, #128	@ 0x80
 800ba1a:	029b      	lsls	r3, r3, #10
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	d0f0      	beq.n	800ba02 <HAL_RCC_OscConfig+0xce>
 800ba20:	e015      	b.n	800ba4e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba22:	f7fb ff8f 	bl	8007944 <HAL_GetTick>
 800ba26:	0003      	movs	r3, r0
 800ba28:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba2a:	e008      	b.n	800ba3e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba2c:	f7fb ff8a 	bl	8007944 <HAL_GetTick>
 800ba30:	0002      	movs	r2, r0
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	2b64      	cmp	r3, #100	@ 0x64
 800ba38:	d901      	bls.n	800ba3e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e2d4      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba3e:	4b89      	ldr	r3, [pc, #548]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	2380      	movs	r3, #128	@ 0x80
 800ba44:	029b      	lsls	r3, r3, #10
 800ba46:	4013      	ands	r3, r2
 800ba48:	d1f0      	bne.n	800ba2c <HAL_RCC_OscConfig+0xf8>
 800ba4a:	e000      	b.n	800ba4e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba4c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2202      	movs	r2, #2
 800ba54:	4013      	ands	r3, r2
 800ba56:	d100      	bne.n	800ba5a <HAL_RCC_OscConfig+0x126>
 800ba58:	e099      	b.n	800bb8e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba5a:	4b82      	ldr	r3, [pc, #520]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2238      	movs	r2, #56	@ 0x38
 800ba60:	4013      	ands	r3, r2
 800ba62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba64:	4b7f      	ldr	r3, [pc, #508]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	2203      	movs	r2, #3
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	2b10      	cmp	r3, #16
 800ba72:	d102      	bne.n	800ba7a <HAL_RCC_OscConfig+0x146>
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d002      	beq.n	800ba80 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d135      	bne.n	800baec <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba80:	4b78      	ldr	r3, [pc, #480]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	2380      	movs	r3, #128	@ 0x80
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	4013      	ands	r3, r2
 800ba8a:	d005      	beq.n	800ba98 <HAL_RCC_OscConfig+0x164>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d101      	bne.n	800ba98 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e2a7      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba98:	4b72      	ldr	r3, [pc, #456]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	4a74      	ldr	r2, [pc, #464]	@ (800bc70 <HAL_RCC_OscConfig+0x33c>)
 800ba9e:	4013      	ands	r3, r2
 800baa0:	0019      	movs	r1, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	021a      	lsls	r2, r3, #8
 800baa8:	4b6e      	ldr	r3, [pc, #440]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800baaa:	430a      	orrs	r2, r1
 800baac:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d112      	bne.n	800bada <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800bab4:	4b6b      	ldr	r3, [pc, #428]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a6e      	ldr	r2, [pc, #440]	@ (800bc74 <HAL_RCC_OscConfig+0x340>)
 800baba:	4013      	ands	r3, r2
 800babc:	0019      	movs	r1, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	691a      	ldr	r2, [r3, #16]
 800bac2:	4b68      	ldr	r3, [pc, #416]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bac4:	430a      	orrs	r2, r1
 800bac6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800bac8:	4b66      	ldr	r3, [pc, #408]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	0adb      	lsrs	r3, r3, #11
 800bace:	2207      	movs	r2, #7
 800bad0:	4013      	ands	r3, r2
 800bad2:	4a69      	ldr	r2, [pc, #420]	@ (800bc78 <HAL_RCC_OscConfig+0x344>)
 800bad4:	40da      	lsrs	r2, r3
 800bad6:	4b69      	ldr	r3, [pc, #420]	@ (800bc7c <HAL_RCC_OscConfig+0x348>)
 800bad8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bada:	4b69      	ldr	r3, [pc, #420]	@ (800bc80 <HAL_RCC_OscConfig+0x34c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	0018      	movs	r0, r3
 800bae0:	f7fb fed4 	bl	800788c <HAL_InitTick>
 800bae4:	1e03      	subs	r3, r0, #0
 800bae6:	d051      	beq.n	800bb8c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	e27d      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d030      	beq.n	800bb56 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800baf4:	4b5b      	ldr	r3, [pc, #364]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a5e      	ldr	r2, [pc, #376]	@ (800bc74 <HAL_RCC_OscConfig+0x340>)
 800bafa:	4013      	ands	r3, r2
 800bafc:	0019      	movs	r1, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	691a      	ldr	r2, [r3, #16]
 800bb02:	4b58      	ldr	r3, [pc, #352]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb04:	430a      	orrs	r2, r1
 800bb06:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800bb08:	4b56      	ldr	r3, [pc, #344]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	4b55      	ldr	r3, [pc, #340]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb0e:	2180      	movs	r1, #128	@ 0x80
 800bb10:	0049      	lsls	r1, r1, #1
 800bb12:	430a      	orrs	r2, r1
 800bb14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb16:	f7fb ff15 	bl	8007944 <HAL_GetTick>
 800bb1a:	0003      	movs	r3, r0
 800bb1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb1e:	e008      	b.n	800bb32 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb20:	f7fb ff10 	bl	8007944 <HAL_GetTick>
 800bb24:	0002      	movs	r2, r0
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d901      	bls.n	800bb32 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	e25a      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb32:	4b4c      	ldr	r3, [pc, #304]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	2380      	movs	r3, #128	@ 0x80
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	d0f0      	beq.n	800bb20 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb3e:	4b49      	ldr	r3, [pc, #292]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	4a4b      	ldr	r2, [pc, #300]	@ (800bc70 <HAL_RCC_OscConfig+0x33c>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	0019      	movs	r1, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	021a      	lsls	r2, r3, #8
 800bb4e:	4b45      	ldr	r3, [pc, #276]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb50:	430a      	orrs	r2, r1
 800bb52:	605a      	str	r2, [r3, #4]
 800bb54:	e01b      	b.n	800bb8e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800bb56:	4b43      	ldr	r3, [pc, #268]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	4b42      	ldr	r3, [pc, #264]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb5c:	4949      	ldr	r1, [pc, #292]	@ (800bc84 <HAL_RCC_OscConfig+0x350>)
 800bb5e:	400a      	ands	r2, r1
 800bb60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb62:	f7fb feef 	bl	8007944 <HAL_GetTick>
 800bb66:	0003      	movs	r3, r0
 800bb68:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb6a:	e008      	b.n	800bb7e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb6c:	f7fb feea 	bl	8007944 <HAL_GetTick>
 800bb70:	0002      	movs	r2, r0
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d901      	bls.n	800bb7e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e234      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb7e:	4b39      	ldr	r3, [pc, #228]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	2380      	movs	r3, #128	@ 0x80
 800bb84:	00db      	lsls	r3, r3, #3
 800bb86:	4013      	ands	r3, r2
 800bb88:	d1f0      	bne.n	800bb6c <HAL_RCC_OscConfig+0x238>
 800bb8a:	e000      	b.n	800bb8e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb8c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2208      	movs	r2, #8
 800bb94:	4013      	ands	r3, r2
 800bb96:	d047      	beq.n	800bc28 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800bb98:	4b32      	ldr	r3, [pc, #200]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	2238      	movs	r2, #56	@ 0x38
 800bb9e:	4013      	ands	r3, r2
 800bba0:	2b18      	cmp	r3, #24
 800bba2:	d10a      	bne.n	800bbba <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800bba4:	4b2f      	ldr	r3, [pc, #188]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bba8:	2202      	movs	r2, #2
 800bbaa:	4013      	ands	r3, r2
 800bbac:	d03c      	beq.n	800bc28 <HAL_RCC_OscConfig+0x2f4>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d138      	bne.n	800bc28 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e216      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d019      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800bbc2:	4b28      	ldr	r3, [pc, #160]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bbc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bbc6:	4b27      	ldr	r3, [pc, #156]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bbc8:	2101      	movs	r1, #1
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbce:	f7fb feb9 	bl	8007944 <HAL_GetTick>
 800bbd2:	0003      	movs	r3, r0
 800bbd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbd6:	e008      	b.n	800bbea <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbd8:	f7fb feb4 	bl	8007944 <HAL_GetTick>
 800bbdc:	0002      	movs	r2, r0
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d901      	bls.n	800bbea <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e1fe      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbea:	4b1e      	ldr	r3, [pc, #120]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bbec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbee:	2202      	movs	r2, #2
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	d0f1      	beq.n	800bbd8 <HAL_RCC_OscConfig+0x2a4>
 800bbf4:	e018      	b.n	800bc28 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800bbf6:	4b1b      	ldr	r3, [pc, #108]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bbf8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bbfa:	4b1a      	ldr	r3, [pc, #104]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	438a      	bics	r2, r1
 800bc00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc02:	f7fb fe9f 	bl	8007944 <HAL_GetTick>
 800bc06:	0003      	movs	r3, r0
 800bc08:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc0a:	e008      	b.n	800bc1e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc0c:	f7fb fe9a 	bl	8007944 <HAL_GetTick>
 800bc10:	0002      	movs	r2, r0
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d901      	bls.n	800bc1e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	e1e4      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc1e:	4b11      	ldr	r3, [pc, #68]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bc20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc22:	2202      	movs	r2, #2
 800bc24:	4013      	ands	r3, r2
 800bc26:	d1f1      	bne.n	800bc0c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2204      	movs	r2, #4
 800bc2e:	4013      	ands	r3, r2
 800bc30:	d100      	bne.n	800bc34 <HAL_RCC_OscConfig+0x300>
 800bc32:	e0c7      	b.n	800bdc4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc34:	231f      	movs	r3, #31
 800bc36:	18fb      	adds	r3, r7, r3
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800bc3c:	4b09      	ldr	r3, [pc, #36]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	2238      	movs	r2, #56	@ 0x38
 800bc42:	4013      	ands	r3, r2
 800bc44:	2b20      	cmp	r3, #32
 800bc46:	d11f      	bne.n	800bc88 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800bc48:	4b06      	ldr	r3, [pc, #24]	@ (800bc64 <HAL_RCC_OscConfig+0x330>)
 800bc4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	4013      	ands	r3, r2
 800bc50:	d100      	bne.n	800bc54 <HAL_RCC_OscConfig+0x320>
 800bc52:	e0b7      	b.n	800bdc4 <HAL_RCC_OscConfig+0x490>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d000      	beq.n	800bc5e <HAL_RCC_OscConfig+0x32a>
 800bc5c:	e0b2      	b.n	800bdc4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e1c2      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
 800bc62:	46c0      	nop			@ (mov r8, r8)
 800bc64:	40021000 	.word	0x40021000
 800bc68:	fffeffff 	.word	0xfffeffff
 800bc6c:	fffbffff 	.word	0xfffbffff
 800bc70:	ffff80ff 	.word	0xffff80ff
 800bc74:	ffffc7ff 	.word	0xffffc7ff
 800bc78:	00f42400 	.word	0x00f42400
 800bc7c:	20000018 	.word	0x20000018
 800bc80:	2000003c 	.word	0x2000003c
 800bc84:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bc88:	4bb5      	ldr	r3, [pc, #724]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bc8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc8c:	2380      	movs	r3, #128	@ 0x80
 800bc8e:	055b      	lsls	r3, r3, #21
 800bc90:	4013      	ands	r3, r2
 800bc92:	d101      	bne.n	800bc98 <HAL_RCC_OscConfig+0x364>
 800bc94:	2301      	movs	r3, #1
 800bc96:	e000      	b.n	800bc9a <HAL_RCC_OscConfig+0x366>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d011      	beq.n	800bcc2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800bc9e:	4bb0      	ldr	r3, [pc, #704]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bca2:	4baf      	ldr	r3, [pc, #700]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bca4:	2180      	movs	r1, #128	@ 0x80
 800bca6:	0549      	lsls	r1, r1, #21
 800bca8:	430a      	orrs	r2, r1
 800bcaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bcac:	4bac      	ldr	r3, [pc, #688]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bcae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcb0:	2380      	movs	r3, #128	@ 0x80
 800bcb2:	055b      	lsls	r3, r3, #21
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800bcba:	231f      	movs	r3, #31
 800bcbc:	18fb      	adds	r3, r7, r3
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcc2:	4ba8      	ldr	r3, [pc, #672]	@ (800bf64 <HAL_RCC_OscConfig+0x630>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	2380      	movs	r3, #128	@ 0x80
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	4013      	ands	r3, r2
 800bccc:	d11a      	bne.n	800bd04 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcce:	4ba5      	ldr	r3, [pc, #660]	@ (800bf64 <HAL_RCC_OscConfig+0x630>)
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	4ba4      	ldr	r3, [pc, #656]	@ (800bf64 <HAL_RCC_OscConfig+0x630>)
 800bcd4:	2180      	movs	r1, #128	@ 0x80
 800bcd6:	0049      	lsls	r1, r1, #1
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800bcdc:	f7fb fe32 	bl	8007944 <HAL_GetTick>
 800bce0:	0003      	movs	r3, r0
 800bce2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bce4:	e008      	b.n	800bcf8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bce6:	f7fb fe2d 	bl	8007944 <HAL_GetTick>
 800bcea:	0002      	movs	r2, r0
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d901      	bls.n	800bcf8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e177      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcf8:	4b9a      	ldr	r3, [pc, #616]	@ (800bf64 <HAL_RCC_OscConfig+0x630>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	2380      	movs	r3, #128	@ 0x80
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	4013      	ands	r3, r2
 800bd02:	d0f0      	beq.n	800bce6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d106      	bne.n	800bd1a <HAL_RCC_OscConfig+0x3e6>
 800bd0c:	4b94      	ldr	r3, [pc, #592]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd10:	4b93      	ldr	r3, [pc, #588]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd12:	2101      	movs	r1, #1
 800bd14:	430a      	orrs	r2, r1
 800bd16:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bd18:	e01c      	b.n	800bd54 <HAL_RCC_OscConfig+0x420>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	2b05      	cmp	r3, #5
 800bd20:	d10c      	bne.n	800bd3c <HAL_RCC_OscConfig+0x408>
 800bd22:	4b8f      	ldr	r3, [pc, #572]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd26:	4b8e      	ldr	r3, [pc, #568]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd28:	2104      	movs	r1, #4
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bd2e:	4b8c      	ldr	r3, [pc, #560]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd32:	4b8b      	ldr	r3, [pc, #556]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd34:	2101      	movs	r1, #1
 800bd36:	430a      	orrs	r2, r1
 800bd38:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bd3a:	e00b      	b.n	800bd54 <HAL_RCC_OscConfig+0x420>
 800bd3c:	4b88      	ldr	r3, [pc, #544]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd40:	4b87      	ldr	r3, [pc, #540]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd42:	2101      	movs	r1, #1
 800bd44:	438a      	bics	r2, r1
 800bd46:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bd48:	4b85      	ldr	r3, [pc, #532]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd4c:	4b84      	ldr	r3, [pc, #528]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd4e:	2104      	movs	r1, #4
 800bd50:	438a      	bics	r2, r1
 800bd52:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d014      	beq.n	800bd86 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd5c:	f7fb fdf2 	bl	8007944 <HAL_GetTick>
 800bd60:	0003      	movs	r3, r0
 800bd62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd64:	e009      	b.n	800bd7a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd66:	f7fb fded 	bl	8007944 <HAL_GetTick>
 800bd6a:	0002      	movs	r2, r0
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	4a7d      	ldr	r2, [pc, #500]	@ (800bf68 <HAL_RCC_OscConfig+0x634>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d901      	bls.n	800bd7a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800bd76:	2303      	movs	r3, #3
 800bd78:	e136      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd7a:	4b79      	ldr	r3, [pc, #484]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bd7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd7e:	2202      	movs	r2, #2
 800bd80:	4013      	ands	r3, r2
 800bd82:	d0f0      	beq.n	800bd66 <HAL_RCC_OscConfig+0x432>
 800bd84:	e013      	b.n	800bdae <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd86:	f7fb fddd 	bl	8007944 <HAL_GetTick>
 800bd8a:	0003      	movs	r3, r0
 800bd8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd8e:	e009      	b.n	800bda4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd90:	f7fb fdd8 	bl	8007944 <HAL_GetTick>
 800bd94:	0002      	movs	r2, r0
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	4a73      	ldr	r2, [pc, #460]	@ (800bf68 <HAL_RCC_OscConfig+0x634>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d901      	bls.n	800bda4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e121      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bda4:	4b6e      	ldr	r3, [pc, #440]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bda6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bda8:	2202      	movs	r2, #2
 800bdaa:	4013      	ands	r3, r2
 800bdac:	d1f0      	bne.n	800bd90 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800bdae:	231f      	movs	r3, #31
 800bdb0:	18fb      	adds	r3, r7, r3
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d105      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800bdb8:	4b69      	ldr	r3, [pc, #420]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bdba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdbc:	4b68      	ldr	r3, [pc, #416]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bdbe:	496b      	ldr	r1, [pc, #428]	@ (800bf6c <HAL_RCC_OscConfig+0x638>)
 800bdc0:	400a      	ands	r2, r1
 800bdc2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	4013      	ands	r3, r2
 800bdcc:	d039      	beq.n	800be42 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	69db      	ldr	r3, [r3, #28]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d01b      	beq.n	800be0e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bdd6:	4b62      	ldr	r3, [pc, #392]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	4b61      	ldr	r3, [pc, #388]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bddc:	2180      	movs	r1, #128	@ 0x80
 800bdde:	03c9      	lsls	r1, r1, #15
 800bde0:	430a      	orrs	r2, r1
 800bde2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bde4:	f7fb fdae 	bl	8007944 <HAL_GetTick>
 800bde8:	0003      	movs	r3, r0
 800bdea:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800bdec:	e008      	b.n	800be00 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdee:	f7fb fda9 	bl	8007944 <HAL_GetTick>
 800bdf2:	0002      	movs	r2, r0
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d901      	bls.n	800be00 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e0f3      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800be00:	4b57      	ldr	r3, [pc, #348]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	2380      	movs	r3, #128	@ 0x80
 800be06:	041b      	lsls	r3, r3, #16
 800be08:	4013      	ands	r3, r2
 800be0a:	d0f0      	beq.n	800bdee <HAL_RCC_OscConfig+0x4ba>
 800be0c:	e019      	b.n	800be42 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800be0e:	4b54      	ldr	r3, [pc, #336]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	4b53      	ldr	r3, [pc, #332]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be14:	4956      	ldr	r1, [pc, #344]	@ (800bf70 <HAL_RCC_OscConfig+0x63c>)
 800be16:	400a      	ands	r2, r1
 800be18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be1a:	f7fb fd93 	bl	8007944 <HAL_GetTick>
 800be1e:	0003      	movs	r3, r0
 800be20:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800be22:	e008      	b.n	800be36 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be24:	f7fb fd8e 	bl	8007944 <HAL_GetTick>
 800be28:	0002      	movs	r2, r0
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d901      	bls.n	800be36 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e0d8      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800be36:	4b4a      	ldr	r3, [pc, #296]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	2380      	movs	r3, #128	@ 0x80
 800be3c:	041b      	lsls	r3, r3, #16
 800be3e:	4013      	ands	r3, r2
 800be40:	d1f0      	bne.n	800be24 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d100      	bne.n	800be4c <HAL_RCC_OscConfig+0x518>
 800be4a:	e0cc      	b.n	800bfe6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800be4c:	4b44      	ldr	r3, [pc, #272]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	2238      	movs	r2, #56	@ 0x38
 800be52:	4013      	ands	r3, r2
 800be54:	2b10      	cmp	r3, #16
 800be56:	d100      	bne.n	800be5a <HAL_RCC_OscConfig+0x526>
 800be58:	e07b      	b.n	800bf52 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d156      	bne.n	800bf10 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be62:	4b3f      	ldr	r3, [pc, #252]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	4b3e      	ldr	r3, [pc, #248]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be68:	4942      	ldr	r1, [pc, #264]	@ (800bf74 <HAL_RCC_OscConfig+0x640>)
 800be6a:	400a      	ands	r2, r1
 800be6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be6e:	f7fb fd69 	bl	8007944 <HAL_GetTick>
 800be72:	0003      	movs	r3, r0
 800be74:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be76:	e008      	b.n	800be8a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be78:	f7fb fd64 	bl	8007944 <HAL_GetTick>
 800be7c:	0002      	movs	r2, r0
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	2b02      	cmp	r3, #2
 800be84:	d901      	bls.n	800be8a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800be86:	2303      	movs	r3, #3
 800be88:	e0ae      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be8a:	4b35      	ldr	r3, [pc, #212]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	2380      	movs	r3, #128	@ 0x80
 800be90:	049b      	lsls	r3, r3, #18
 800be92:	4013      	ands	r3, r2
 800be94:	d1f0      	bne.n	800be78 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be96:	4b32      	ldr	r3, [pc, #200]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	4a37      	ldr	r2, [pc, #220]	@ (800bf78 <HAL_RCC_OscConfig+0x644>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	0019      	movs	r1, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea8:	431a      	orrs	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	431a      	orrs	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beb6:	431a      	orrs	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bebc:	431a      	orrs	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec2:	431a      	orrs	r2, r3
 800bec4:	4b26      	ldr	r3, [pc, #152]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bec6:	430a      	orrs	r2, r1
 800bec8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800beca:	4b25      	ldr	r3, [pc, #148]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	4b24      	ldr	r3, [pc, #144]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bed0:	2180      	movs	r1, #128	@ 0x80
 800bed2:	0449      	lsls	r1, r1, #17
 800bed4:	430a      	orrs	r2, r1
 800bed6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800bed8:	4b21      	ldr	r3, [pc, #132]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800beda:	68da      	ldr	r2, [r3, #12]
 800bedc:	4b20      	ldr	r3, [pc, #128]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bede:	2180      	movs	r1, #128	@ 0x80
 800bee0:	0549      	lsls	r1, r1, #21
 800bee2:	430a      	orrs	r2, r1
 800bee4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bee6:	f7fb fd2d 	bl	8007944 <HAL_GetTick>
 800beea:	0003      	movs	r3, r0
 800beec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800beee:	e008      	b.n	800bf02 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bef0:	f7fb fd28 	bl	8007944 <HAL_GetTick>
 800bef4:	0002      	movs	r2, r0
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b02      	cmp	r3, #2
 800befc:	d901      	bls.n	800bf02 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e072      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf02:	4b17      	ldr	r3, [pc, #92]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	2380      	movs	r3, #128	@ 0x80
 800bf08:	049b      	lsls	r3, r3, #18
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	d0f0      	beq.n	800bef0 <HAL_RCC_OscConfig+0x5bc>
 800bf0e:	e06a      	b.n	800bfe6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf10:	4b13      	ldr	r3, [pc, #76]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	4b12      	ldr	r3, [pc, #72]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bf16:	4917      	ldr	r1, [pc, #92]	@ (800bf74 <HAL_RCC_OscConfig+0x640>)
 800bf18:	400a      	ands	r2, r1
 800bf1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf1c:	f7fb fd12 	bl	8007944 <HAL_GetTick>
 800bf20:	0003      	movs	r3, r0
 800bf22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf24:	e008      	b.n	800bf38 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf26:	f7fb fd0d 	bl	8007944 <HAL_GetTick>
 800bf2a:	0002      	movs	r2, r0
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d901      	bls.n	800bf38 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800bf34:	2303      	movs	r3, #3
 800bf36:	e057      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bf38:	4b09      	ldr	r3, [pc, #36]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	2380      	movs	r3, #128	@ 0x80
 800bf3e:	049b      	lsls	r3, r3, #18
 800bf40:	4013      	ands	r3, r2
 800bf42:	d1f0      	bne.n	800bf26 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800bf44:	4b06      	ldr	r3, [pc, #24]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bf46:	68da      	ldr	r2, [r3, #12]
 800bf48:	4b05      	ldr	r3, [pc, #20]	@ (800bf60 <HAL_RCC_OscConfig+0x62c>)
 800bf4a:	490c      	ldr	r1, [pc, #48]	@ (800bf7c <HAL_RCC_OscConfig+0x648>)
 800bf4c:	400a      	ands	r2, r1
 800bf4e:	60da      	str	r2, [r3, #12]
 800bf50:	e049      	b.n	800bfe6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d112      	bne.n	800bf80 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e044      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
 800bf5e:	46c0      	nop			@ (mov r8, r8)
 800bf60:	40021000 	.word	0x40021000
 800bf64:	40007000 	.word	0x40007000
 800bf68:	00002710 	.word	0x00002710
 800bf6c:	efffffff 	.word	0xefffffff
 800bf70:	ffbfffff 	.word	0xffbfffff
 800bf74:	feffffff 	.word	0xfeffffff
 800bf78:	11c1808c 	.word	0x11c1808c
 800bf7c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800bf80:	4b1b      	ldr	r3, [pc, #108]	@ (800bff0 <HAL_RCC_OscConfig+0x6bc>)
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2203      	movs	r2, #3
 800bf8a:	401a      	ands	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d126      	bne.n	800bfe2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2270      	movs	r2, #112	@ 0x70
 800bf98:	401a      	ands	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d11f      	bne.n	800bfe2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	23fe      	movs	r3, #254	@ 0xfe
 800bfa6:	01db      	lsls	r3, r3, #7
 800bfa8:	401a      	ands	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d116      	bne.n	800bfe2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	23f8      	movs	r3, #248	@ 0xf8
 800bfb8:	039b      	lsls	r3, r3, #14
 800bfba:	401a      	ands	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d10e      	bne.n	800bfe2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bfc4:	697a      	ldr	r2, [r7, #20]
 800bfc6:	23e0      	movs	r3, #224	@ 0xe0
 800bfc8:	051b      	lsls	r3, r3, #20
 800bfca:	401a      	ands	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d106      	bne.n	800bfe2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	0f5b      	lsrs	r3, r3, #29
 800bfd8:	075a      	lsls	r2, r3, #29
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d001      	beq.n	800bfe6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	0018      	movs	r0, r3
 800bfea:	46bd      	mov	sp, r7
 800bfec:	b008      	add	sp, #32
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	40021000 	.word	0x40021000

0800bff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e0e9      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c008:	4b76      	ldr	r3, [pc, #472]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2207      	movs	r2, #7
 800c00e:	4013      	ands	r3, r2
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d91e      	bls.n	800c054 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c016:	4b73      	ldr	r3, [pc, #460]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2207      	movs	r2, #7
 800c01c:	4393      	bics	r3, r2
 800c01e:	0019      	movs	r1, r3
 800c020:	4b70      	ldr	r3, [pc, #448]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c028:	f7fb fc8c 	bl	8007944 <HAL_GetTick>
 800c02c:	0003      	movs	r3, r0
 800c02e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c030:	e009      	b.n	800c046 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c032:	f7fb fc87 	bl	8007944 <HAL_GetTick>
 800c036:	0002      	movs	r2, r0
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	4a6a      	ldr	r2, [pc, #424]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f4>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d901      	bls.n	800c046 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800c042:	2303      	movs	r3, #3
 800c044:	e0ca      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c046:	4b67      	ldr	r3, [pc, #412]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2207      	movs	r2, #7
 800c04c:	4013      	ands	r3, r2
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d1ee      	bne.n	800c032 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2202      	movs	r2, #2
 800c05a:	4013      	ands	r3, r2
 800c05c:	d015      	beq.n	800c08a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2204      	movs	r2, #4
 800c064:	4013      	ands	r3, r2
 800c066:	d006      	beq.n	800c076 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800c068:	4b60      	ldr	r3, [pc, #384]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c06a:	689a      	ldr	r2, [r3, #8]
 800c06c:	4b5f      	ldr	r3, [pc, #380]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c06e:	21e0      	movs	r1, #224	@ 0xe0
 800c070:	01c9      	lsls	r1, r1, #7
 800c072:	430a      	orrs	r2, r1
 800c074:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c076:	4b5d      	ldr	r3, [pc, #372]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	4a5d      	ldr	r2, [pc, #372]	@ (800c1f0 <HAL_RCC_ClockConfig+0x1fc>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	0019      	movs	r1, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	689a      	ldr	r2, [r3, #8]
 800c084:	4b59      	ldr	r3, [pc, #356]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c086:	430a      	orrs	r2, r1
 800c088:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2201      	movs	r2, #1
 800c090:	4013      	ands	r3, r2
 800c092:	d057      	beq.n	800c144 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d107      	bne.n	800c0ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c09c:	4b53      	ldr	r3, [pc, #332]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	2380      	movs	r3, #128	@ 0x80
 800c0a2:	029b      	lsls	r3, r3, #10
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	d12b      	bne.n	800c100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e097      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d107      	bne.n	800c0c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c0b4:	4b4d      	ldr	r3, [pc, #308]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	2380      	movs	r3, #128	@ 0x80
 800c0ba:	049b      	lsls	r3, r3, #18
 800c0bc:	4013      	ands	r3, r2
 800c0be:	d11f      	bne.n	800c100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e08b      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d107      	bne.n	800c0dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c0cc:	4b47      	ldr	r3, [pc, #284]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	2380      	movs	r3, #128	@ 0x80
 800c0d2:	00db      	lsls	r3, r3, #3
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	d113      	bne.n	800c100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e07f      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	2b03      	cmp	r3, #3
 800c0e2:	d106      	bne.n	800c0f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c0e4:	4b41      	ldr	r3, [pc, #260]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c0e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0e8:	2202      	movs	r2, #2
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	d108      	bne.n	800c100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e074      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0f2:	4b3e      	ldr	r3, [pc, #248]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c0f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	d101      	bne.n	800c100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e06d      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c100:	4b3a      	ldr	r3, [pc, #232]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	2207      	movs	r2, #7
 800c106:	4393      	bics	r3, r2
 800c108:	0019      	movs	r1, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	4b37      	ldr	r3, [pc, #220]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c110:	430a      	orrs	r2, r1
 800c112:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c114:	f7fb fc16 	bl	8007944 <HAL_GetTick>
 800c118:	0003      	movs	r3, r0
 800c11a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c11c:	e009      	b.n	800c132 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c11e:	f7fb fc11 	bl	8007944 <HAL_GetTick>
 800c122:	0002      	movs	r2, r0
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	4a2f      	ldr	r2, [pc, #188]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f4>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d901      	bls.n	800c132 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e054      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c132:	4b2e      	ldr	r3, [pc, #184]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	2238      	movs	r2, #56	@ 0x38
 800c138:	401a      	ands	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	429a      	cmp	r2, r3
 800c142:	d1ec      	bne.n	800c11e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c144:	4b27      	ldr	r3, [pc, #156]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2207      	movs	r2, #7
 800c14a:	4013      	ands	r3, r2
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d21e      	bcs.n	800c190 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c152:	4b24      	ldr	r3, [pc, #144]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2207      	movs	r2, #7
 800c158:	4393      	bics	r3, r2
 800c15a:	0019      	movs	r1, r3
 800c15c:	4b21      	ldr	r3, [pc, #132]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	430a      	orrs	r2, r1
 800c162:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c164:	f7fb fbee 	bl	8007944 <HAL_GetTick>
 800c168:	0003      	movs	r3, r0
 800c16a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c16c:	e009      	b.n	800c182 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c16e:	f7fb fbe9 	bl	8007944 <HAL_GetTick>
 800c172:	0002      	movs	r2, r0
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	4a1b      	ldr	r2, [pc, #108]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f4>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d901      	bls.n	800c182 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e02c      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c182:	4b18      	ldr	r3, [pc, #96]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1f0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2207      	movs	r2, #7
 800c188:	4013      	ands	r3, r2
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d1ee      	bne.n	800c16e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2204      	movs	r2, #4
 800c196:	4013      	ands	r3, r2
 800c198:	d009      	beq.n	800c1ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800c19a:	4b14      	ldr	r3, [pc, #80]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	4a15      	ldr	r2, [pc, #84]	@ (800c1f4 <HAL_RCC_ClockConfig+0x200>)
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	0019      	movs	r1, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	4b10      	ldr	r3, [pc, #64]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800c1ae:	f000 f829 	bl	800c204 <HAL_RCC_GetSysClockFreq>
 800c1b2:	0001      	movs	r1, r0
 800c1b4:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f8>)
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	0a1b      	lsrs	r3, r3, #8
 800c1ba:	220f      	movs	r2, #15
 800c1bc:	401a      	ands	r2, r3
 800c1be:	4b0e      	ldr	r3, [pc, #56]	@ (800c1f8 <HAL_RCC_ClockConfig+0x204>)
 800c1c0:	0092      	lsls	r2, r2, #2
 800c1c2:	58d3      	ldr	r3, [r2, r3]
 800c1c4:	221f      	movs	r2, #31
 800c1c6:	4013      	ands	r3, r2
 800c1c8:	000a      	movs	r2, r1
 800c1ca:	40da      	lsrs	r2, r3
 800c1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c1fc <HAL_RCC_ClockConfig+0x208>)
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800c200 <HAL_RCC_ClockConfig+0x20c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	0018      	movs	r0, r3
 800c1d6:	f7fb fb59 	bl	800788c <HAL_InitTick>
 800c1da:	0003      	movs	r3, r0
}
 800c1dc:	0018      	movs	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	b004      	add	sp, #16
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	40022000 	.word	0x40022000
 800c1e8:	00001388 	.word	0x00001388
 800c1ec:	40021000 	.word	0x40021000
 800c1f0:	fffff0ff 	.word	0xfffff0ff
 800c1f4:	ffff8fff 	.word	0xffff8fff
 800c1f8:	08011a8c 	.word	0x08011a8c
 800c1fc:	20000018 	.word	0x20000018
 800c200:	2000003c 	.word	0x2000003c

0800c204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c20a:	4b3c      	ldr	r3, [pc, #240]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	2238      	movs	r2, #56	@ 0x38
 800c210:	4013      	ands	r3, r2
 800c212:	d10f      	bne.n	800c234 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c214:	4b39      	ldr	r3, [pc, #228]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	0adb      	lsrs	r3, r3, #11
 800c21a:	2207      	movs	r2, #7
 800c21c:	4013      	ands	r3, r2
 800c21e:	2201      	movs	r2, #1
 800c220:	409a      	lsls	r2, r3
 800c222:	0013      	movs	r3, r2
 800c224:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	4835      	ldr	r0, [pc, #212]	@ (800c300 <HAL_RCC_GetSysClockFreq+0xfc>)
 800c22a:	f7f8 f877 	bl	800431c <__udivsi3>
 800c22e:	0003      	movs	r3, r0
 800c230:	613b      	str	r3, [r7, #16]
 800c232:	e05d      	b.n	800c2f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c234:	4b31      	ldr	r3, [pc, #196]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	2238      	movs	r2, #56	@ 0x38
 800c23a:	4013      	ands	r3, r2
 800c23c:	2b08      	cmp	r3, #8
 800c23e:	d102      	bne.n	800c246 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c240:	4b30      	ldr	r3, [pc, #192]	@ (800c304 <HAL_RCC_GetSysClockFreq+0x100>)
 800c242:	613b      	str	r3, [r7, #16]
 800c244:	e054      	b.n	800c2f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c246:	4b2d      	ldr	r3, [pc, #180]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	2238      	movs	r2, #56	@ 0x38
 800c24c:	4013      	ands	r3, r2
 800c24e:	2b10      	cmp	r3, #16
 800c250:	d138      	bne.n	800c2c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800c252:	4b2a      	ldr	r3, [pc, #168]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	2203      	movs	r2, #3
 800c258:	4013      	ands	r3, r2
 800c25a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c25c:	4b27      	ldr	r3, [pc, #156]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	091b      	lsrs	r3, r3, #4
 800c262:	2207      	movs	r2, #7
 800c264:	4013      	ands	r3, r2
 800c266:	3301      	adds	r3, #1
 800c268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d10d      	bne.n	800c28c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c270:	68b9      	ldr	r1, [r7, #8]
 800c272:	4824      	ldr	r0, [pc, #144]	@ (800c304 <HAL_RCC_GetSysClockFreq+0x100>)
 800c274:	f7f8 f852 	bl	800431c <__udivsi3>
 800c278:	0003      	movs	r3, r0
 800c27a:	0019      	movs	r1, r3
 800c27c:	4b1f      	ldr	r3, [pc, #124]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	0a1b      	lsrs	r3, r3, #8
 800c282:	227f      	movs	r2, #127	@ 0x7f
 800c284:	4013      	ands	r3, r2
 800c286:	434b      	muls	r3, r1
 800c288:	617b      	str	r3, [r7, #20]
        break;
 800c28a:	e00d      	b.n	800c2a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800c28c:	68b9      	ldr	r1, [r7, #8]
 800c28e:	481c      	ldr	r0, [pc, #112]	@ (800c300 <HAL_RCC_GetSysClockFreq+0xfc>)
 800c290:	f7f8 f844 	bl	800431c <__udivsi3>
 800c294:	0003      	movs	r3, r0
 800c296:	0019      	movs	r1, r3
 800c298:	4b18      	ldr	r3, [pc, #96]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	0a1b      	lsrs	r3, r3, #8
 800c29e:	227f      	movs	r2, #127	@ 0x7f
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	434b      	muls	r3, r1
 800c2a4:	617b      	str	r3, [r7, #20]
        break;
 800c2a6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800c2a8:	4b14      	ldr	r3, [pc, #80]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	0f5b      	lsrs	r3, r3, #29
 800c2ae:	2207      	movs	r2, #7
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	6978      	ldr	r0, [r7, #20]
 800c2ba:	f7f8 f82f 	bl	800431c <__udivsi3>
 800c2be:	0003      	movs	r3, r0
 800c2c0:	613b      	str	r3, [r7, #16]
 800c2c2:	e015      	b.n	800c2f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800c2c4:	4b0d      	ldr	r3, [pc, #52]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	2238      	movs	r2, #56	@ 0x38
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	2b20      	cmp	r3, #32
 800c2ce:	d103      	bne.n	800c2d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800c2d0:	2380      	movs	r3, #128	@ 0x80
 800c2d2:	021b      	lsls	r3, r3, #8
 800c2d4:	613b      	str	r3, [r7, #16]
 800c2d6:	e00b      	b.n	800c2f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800c2d8:	4b08      	ldr	r3, [pc, #32]	@ (800c2fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	2238      	movs	r2, #56	@ 0x38
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b18      	cmp	r3, #24
 800c2e2:	d103      	bne.n	800c2ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800c2e4:	23fa      	movs	r3, #250	@ 0xfa
 800c2e6:	01db      	lsls	r3, r3, #7
 800c2e8:	613b      	str	r3, [r7, #16]
 800c2ea:	e001      	b.n	800c2f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c2f0:	693b      	ldr	r3, [r7, #16]
}
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	b006      	add	sp, #24
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	46c0      	nop			@ (mov r8, r8)
 800c2fc:	40021000 	.word	0x40021000
 800c300:	00f42400 	.word	0x00f42400
 800c304:	007a1200 	.word	0x007a1200

0800c308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c30c:	4b02      	ldr	r3, [pc, #8]	@ (800c318 <HAL_RCC_GetHCLKFreq+0x10>)
 800c30e:	681b      	ldr	r3, [r3, #0]
}
 800c310:	0018      	movs	r0, r3
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	46c0      	nop			@ (mov r8, r8)
 800c318:	20000018 	.word	0x20000018

0800c31c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c31c:	b5b0      	push	{r4, r5, r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c320:	f7ff fff2 	bl	800c308 <HAL_RCC_GetHCLKFreq>
 800c324:	0004      	movs	r4, r0
 800c326:	f7ff faf9 	bl	800b91c <LL_RCC_GetAPB1Prescaler>
 800c32a:	0003      	movs	r3, r0
 800c32c:	0b1a      	lsrs	r2, r3, #12
 800c32e:	4b05      	ldr	r3, [pc, #20]	@ (800c344 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c330:	0092      	lsls	r2, r2, #2
 800c332:	58d3      	ldr	r3, [r2, r3]
 800c334:	221f      	movs	r2, #31
 800c336:	4013      	ands	r3, r2
 800c338:	40dc      	lsrs	r4, r3
 800c33a:	0023      	movs	r3, r4
}
 800c33c:	0018      	movs	r0, r3
 800c33e:	46bd      	mov	sp, r7
 800c340:	bdb0      	pop	{r4, r5, r7, pc}
 800c342:	46c0      	nop			@ (mov r8, r8)
 800c344:	08011acc 	.word	0x08011acc

0800c348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800c350:	2313      	movs	r3, #19
 800c352:	18fb      	adds	r3, r7, r3
 800c354:	2200      	movs	r2, #0
 800c356:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c358:	2312      	movs	r3, #18
 800c35a:	18fb      	adds	r3, r7, r3
 800c35c:	2200      	movs	r2, #0
 800c35e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	2380      	movs	r3, #128	@ 0x80
 800c366:	029b      	lsls	r3, r3, #10
 800c368:	4013      	ands	r3, r2
 800c36a:	d100      	bne.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800c36c:	e0ad      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c36e:	2011      	movs	r0, #17
 800c370:	183b      	adds	r3, r7, r0
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c376:	4b47      	ldr	r3, [pc, #284]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c37a:	2380      	movs	r3, #128	@ 0x80
 800c37c:	055b      	lsls	r3, r3, #21
 800c37e:	4013      	ands	r3, r2
 800c380:	d110      	bne.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c382:	4b44      	ldr	r3, [pc, #272]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c386:	4b43      	ldr	r3, [pc, #268]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c388:	2180      	movs	r1, #128	@ 0x80
 800c38a:	0549      	lsls	r1, r1, #21
 800c38c:	430a      	orrs	r2, r1
 800c38e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c390:	4b40      	ldr	r3, [pc, #256]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c394:	2380      	movs	r3, #128	@ 0x80
 800c396:	055b      	lsls	r3, r3, #21
 800c398:	4013      	ands	r3, r2
 800c39a:	60bb      	str	r3, [r7, #8]
 800c39c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c39e:	183b      	adds	r3, r7, r0
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c3a4:	4b3c      	ldr	r3, [pc, #240]	@ (800c498 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	4b3b      	ldr	r3, [pc, #236]	@ (800c498 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c3aa:	2180      	movs	r1, #128	@ 0x80
 800c3ac:	0049      	lsls	r1, r1, #1
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c3b2:	f7fb fac7 	bl	8007944 <HAL_GetTick>
 800c3b6:	0003      	movs	r3, r0
 800c3b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c3ba:	e00b      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3bc:	f7fb fac2 	bl	8007944 <HAL_GetTick>
 800c3c0:	0002      	movs	r2, r0
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d904      	bls.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800c3ca:	2313      	movs	r3, #19
 800c3cc:	18fb      	adds	r3, r7, r3
 800c3ce:	2203      	movs	r2, #3
 800c3d0:	701a      	strb	r2, [r3, #0]
        break;
 800c3d2:	e005      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c3d4:	4b30      	ldr	r3, [pc, #192]	@ (800c498 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	2380      	movs	r3, #128	@ 0x80
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	4013      	ands	r3, r2
 800c3de:	d0ed      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800c3e0:	2313      	movs	r3, #19
 800c3e2:	18fb      	adds	r3, r7, r3
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d15e      	bne.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c3ea:	4b2a      	ldr	r3, [pc, #168]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c3ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c3ee:	23c0      	movs	r3, #192	@ 0xc0
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d019      	beq.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	429a      	cmp	r2, r3
 800c404:	d014      	beq.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c406:	4b23      	ldr	r3, [pc, #140]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c40a:	4a24      	ldr	r2, [pc, #144]	@ (800c49c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c40c:	4013      	ands	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c410:	4b20      	ldr	r3, [pc, #128]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c412:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c414:	4b1f      	ldr	r3, [pc, #124]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c416:	2180      	movs	r1, #128	@ 0x80
 800c418:	0249      	lsls	r1, r1, #9
 800c41a:	430a      	orrs	r2, r1
 800c41c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c41e:	4b1d      	ldr	r3, [pc, #116]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c420:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c422:	4b1c      	ldr	r3, [pc, #112]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c424:	491e      	ldr	r1, [pc, #120]	@ (800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800c426:	400a      	ands	r2, r1
 800c428:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c42a:	4b1a      	ldr	r3, [pc, #104]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c42c:	697a      	ldr	r2, [r7, #20]
 800c42e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2201      	movs	r2, #1
 800c434:	4013      	ands	r3, r2
 800c436:	d016      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c438:	f7fb fa84 	bl	8007944 <HAL_GetTick>
 800c43c:	0003      	movs	r3, r0
 800c43e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c440:	e00c      	b.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c442:	f7fb fa7f 	bl	8007944 <HAL_GetTick>
 800c446:	0002      	movs	r2, r0
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	4a15      	ldr	r2, [pc, #84]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d904      	bls.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800c452:	2313      	movs	r3, #19
 800c454:	18fb      	adds	r3, r7, r3
 800c456:	2203      	movs	r2, #3
 800c458:	701a      	strb	r2, [r3, #0]
            break;
 800c45a:	e004      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c45c:	4b0d      	ldr	r3, [pc, #52]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c45e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c460:	2202      	movs	r2, #2
 800c462:	4013      	ands	r3, r2
 800c464:	d0ed      	beq.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800c466:	2313      	movs	r3, #19
 800c468:	18fb      	adds	r3, r7, r3
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10a      	bne.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c470:	4b08      	ldr	r3, [pc, #32]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c474:	4a09      	ldr	r2, [pc, #36]	@ (800c49c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c476:	4013      	ands	r3, r2
 800c478:	0019      	movs	r1, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c47e:	4b05      	ldr	r3, [pc, #20]	@ (800c494 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c480:	430a      	orrs	r2, r1
 800c482:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c484:	e016      	b.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c486:	2312      	movs	r3, #18
 800c488:	18fb      	adds	r3, r7, r3
 800c48a:	2213      	movs	r2, #19
 800c48c:	18ba      	adds	r2, r7, r2
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	701a      	strb	r2, [r3, #0]
 800c492:	e00f      	b.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800c494:	40021000 	.word	0x40021000
 800c498:	40007000 	.word	0x40007000
 800c49c:	fffffcff 	.word	0xfffffcff
 800c4a0:	fffeffff 	.word	0xfffeffff
 800c4a4:	00002710 	.word	0x00002710
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a8:	2312      	movs	r3, #18
 800c4aa:	18fb      	adds	r3, r7, r3
 800c4ac:	2213      	movs	r2, #19
 800c4ae:	18ba      	adds	r2, r7, r2
 800c4b0:	7812      	ldrb	r2, [r2, #0]
 800c4b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c4b4:	2311      	movs	r3, #17
 800c4b6:	18fb      	adds	r3, r7, r3
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d105      	bne.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4be:	4bb6      	ldr	r3, [pc, #728]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4c2:	4bb5      	ldr	r3, [pc, #724]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4c4:	49b5      	ldr	r1, [pc, #724]	@ (800c79c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800c4c6:	400a      	ands	r2, r1
 800c4c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	d009      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c4d4:	4bb0      	ldr	r3, [pc, #704]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4d8:	2203      	movs	r2, #3
 800c4da:	4393      	bics	r3, r2
 800c4dc:	0019      	movs	r1, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	4bad      	ldr	r3, [pc, #692]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4e4:	430a      	orrs	r2, r1
 800c4e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	d009      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c4f2:	4ba9      	ldr	r3, [pc, #676]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f6:	220c      	movs	r2, #12
 800c4f8:	4393      	bics	r3, r2
 800c4fa:	0019      	movs	r1, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	689a      	ldr	r2, [r3, #8]
 800c500:	4ba5      	ldr	r3, [pc, #660]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c502:	430a      	orrs	r2, r1
 800c504:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2204      	movs	r2, #4
 800c50c:	4013      	ands	r3, r2
 800c50e:	d009      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c510:	4ba1      	ldr	r3, [pc, #644]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c514:	2230      	movs	r2, #48	@ 0x30
 800c516:	4393      	bics	r3, r2
 800c518:	0019      	movs	r1, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68da      	ldr	r2, [r3, #12]
 800c51e:	4b9e      	ldr	r3, [pc, #632]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c520:	430a      	orrs	r2, r1
 800c522:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2210      	movs	r2, #16
 800c52a:	4013      	ands	r3, r2
 800c52c:	d009      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c52e:	4b9a      	ldr	r3, [pc, #616]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c532:	4a9b      	ldr	r2, [pc, #620]	@ (800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800c534:	4013      	ands	r3, r2
 800c536:	0019      	movs	r1, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691a      	ldr	r2, [r3, #16]
 800c53c:	4b96      	ldr	r3, [pc, #600]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c53e:	430a      	orrs	r2, r1
 800c540:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	2380      	movs	r3, #128	@ 0x80
 800c548:	015b      	lsls	r3, r3, #5
 800c54a:	4013      	ands	r3, r2
 800c54c:	d009      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800c54e:	4b92      	ldr	r3, [pc, #584]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c552:	4a94      	ldr	r2, [pc, #592]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c554:	4013      	ands	r3, r2
 800c556:	0019      	movs	r1, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	695a      	ldr	r2, [r3, #20]
 800c55c:	4b8e      	ldr	r3, [pc, #568]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c55e:	430a      	orrs	r2, r1
 800c560:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	2380      	movs	r3, #128	@ 0x80
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	4013      	ands	r3, r2
 800c56c:	d009      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c56e:	4b8a      	ldr	r3, [pc, #552]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c572:	4a8d      	ldr	r2, [pc, #564]	@ (800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800c574:	4013      	ands	r3, r2
 800c576:	0019      	movs	r1, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c57c:	4b86      	ldr	r3, [pc, #536]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c57e:	430a      	orrs	r2, r1
 800c580:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	2380      	movs	r3, #128	@ 0x80
 800c588:	00db      	lsls	r3, r3, #3
 800c58a:	4013      	ands	r3, r2
 800c58c:	d009      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c58e:	4b82      	ldr	r3, [pc, #520]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c592:	4a86      	ldr	r2, [pc, #536]	@ (800c7ac <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800c594:	4013      	ands	r3, r2
 800c596:	0019      	movs	r1, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c59c:	4b7e      	ldr	r3, [pc, #504]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	d009      	beq.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c5ac:	4b7a      	ldr	r3, [pc, #488]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5b0:	4a7f      	ldr	r2, [pc, #508]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	0019      	movs	r1, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	699a      	ldr	r2, [r3, #24]
 800c5ba:	4b77      	ldr	r3, [pc, #476]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c5bc:	430a      	orrs	r2, r1
 800c5be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2240      	movs	r2, #64	@ 0x40
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	d009      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c5ca:	4b73      	ldr	r3, [pc, #460]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c5cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ce:	4a79      	ldr	r2, [pc, #484]	@ (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	0019      	movs	r1, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	69da      	ldr	r2, [r3, #28]
 800c5d8:	4b6f      	ldr	r3, [pc, #444]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c5da:	430a      	orrs	r2, r1
 800c5dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	2380      	movs	r3, #128	@ 0x80
 800c5e4:	01db      	lsls	r3, r3, #7
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	d015      	beq.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c5ea:	4b6b      	ldr	r3, [pc, #428]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	0899      	lsrs	r1, r3, #2
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5f6:	4b68      	ldr	r3, [pc, #416]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c5f8:	430a      	orrs	r2, r1
 800c5fa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c600:	2380      	movs	r3, #128	@ 0x80
 800c602:	05db      	lsls	r3, r3, #23
 800c604:	429a      	cmp	r2, r3
 800c606:	d106      	bne.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c608:	4b63      	ldr	r3, [pc, #396]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c60a:	68da      	ldr	r2, [r3, #12]
 800c60c:	4b62      	ldr	r3, [pc, #392]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c60e:	2180      	movs	r1, #128	@ 0x80
 800c610:	0249      	lsls	r1, r1, #9
 800c612:	430a      	orrs	r2, r1
 800c614:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	2380      	movs	r3, #128	@ 0x80
 800c61c:	031b      	lsls	r3, r3, #12
 800c61e:	4013      	ands	r3, r2
 800c620:	d009      	beq.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c622:	4b5d      	ldr	r3, [pc, #372]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c626:	2240      	movs	r2, #64	@ 0x40
 800c628:	4393      	bics	r3, r2
 800c62a:	0019      	movs	r1, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c630:	4b59      	ldr	r3, [pc, #356]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c632:	430a      	orrs	r2, r1
 800c634:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	2380      	movs	r3, #128	@ 0x80
 800c63c:	039b      	lsls	r3, r3, #14
 800c63e:	4013      	ands	r3, r2
 800c640:	d016      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800c642:	4b55      	ldr	r3, [pc, #340]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c646:	4a5c      	ldr	r2, [pc, #368]	@ (800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c648:	4013      	ands	r3, r2
 800c64a:	0019      	movs	r1, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c650:	4b51      	ldr	r3, [pc, #324]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c652:	430a      	orrs	r2, r1
 800c654:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c65a:	2380      	movs	r3, #128	@ 0x80
 800c65c:	03db      	lsls	r3, r3, #15
 800c65e:	429a      	cmp	r2, r3
 800c660:	d106      	bne.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c662:	4b4d      	ldr	r3, [pc, #308]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c664:	68da      	ldr	r2, [r3, #12]
 800c666:	4b4c      	ldr	r3, [pc, #304]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c668:	2180      	movs	r1, #128	@ 0x80
 800c66a:	0449      	lsls	r1, r1, #17
 800c66c:	430a      	orrs	r2, r1
 800c66e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	2380      	movs	r3, #128	@ 0x80
 800c676:	03db      	lsls	r3, r3, #15
 800c678:	4013      	ands	r3, r2
 800c67a:	d016      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800c67c:	4b46      	ldr	r3, [pc, #280]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c680:	4a4e      	ldr	r2, [pc, #312]	@ (800c7bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c682:	4013      	ands	r3, r2
 800c684:	0019      	movs	r1, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c68a:	4b43      	ldr	r3, [pc, #268]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c68c:	430a      	orrs	r2, r1
 800c68e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c694:	2380      	movs	r3, #128	@ 0x80
 800c696:	045b      	lsls	r3, r3, #17
 800c698:	429a      	cmp	r2, r3
 800c69a:	d106      	bne.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c69c:	4b3e      	ldr	r3, [pc, #248]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	4b3d      	ldr	r3, [pc, #244]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c6a2:	2180      	movs	r1, #128	@ 0x80
 800c6a4:	0449      	lsls	r1, r1, #17
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	2380      	movs	r3, #128	@ 0x80
 800c6b0:	011b      	lsls	r3, r3, #4
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	d014      	beq.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800c6b6:	4b38      	ldr	r3, [pc, #224]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6ba:	2203      	movs	r2, #3
 800c6bc:	4393      	bics	r3, r2
 800c6be:	0019      	movs	r1, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a1a      	ldr	r2, [r3, #32]
 800c6c4:	4b34      	ldr	r3, [pc, #208]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d106      	bne.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c6d2:	4b31      	ldr	r3, [pc, #196]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c6d4:	68da      	ldr	r2, [r3, #12]
 800c6d6:	4b30      	ldr	r3, [pc, #192]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c6d8:	2180      	movs	r1, #128	@ 0x80
 800c6da:	0249      	lsls	r1, r1, #9
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	2380      	movs	r3, #128	@ 0x80
 800c6e6:	019b      	lsls	r3, r3, #6
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	d014      	beq.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800c6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c6ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6f0:	220c      	movs	r2, #12
 800c6f2:	4393      	bics	r3, r2
 800c6f4:	0019      	movs	r1, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6fa:	4b27      	ldr	r3, [pc, #156]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c6fc:	430a      	orrs	r2, r1
 800c6fe:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c704:	2b04      	cmp	r3, #4
 800c706:	d106      	bne.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c708:	4b23      	ldr	r3, [pc, #140]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c70a:	68da      	ldr	r2, [r3, #12]
 800c70c:	4b22      	ldr	r3, [pc, #136]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c70e:	2180      	movs	r1, #128	@ 0x80
 800c710:	0249      	lsls	r1, r1, #9
 800c712:	430a      	orrs	r2, r1
 800c714:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	2380      	movs	r3, #128	@ 0x80
 800c71c:	045b      	lsls	r3, r3, #17
 800c71e:	4013      	ands	r3, r2
 800c720:	d016      	beq.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c722:	4b1d      	ldr	r3, [pc, #116]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c726:	4a22      	ldr	r2, [pc, #136]	@ (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c728:	4013      	ands	r3, r2
 800c72a:	0019      	movs	r1, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c730:	4b19      	ldr	r3, [pc, #100]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c732:	430a      	orrs	r2, r1
 800c734:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c73a:	2380      	movs	r3, #128	@ 0x80
 800c73c:	019b      	lsls	r3, r3, #6
 800c73e:	429a      	cmp	r2, r3
 800c740:	d106      	bne.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c742:	4b15      	ldr	r3, [pc, #84]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c744:	68da      	ldr	r2, [r3, #12]
 800c746:	4b14      	ldr	r3, [pc, #80]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c748:	2180      	movs	r1, #128	@ 0x80
 800c74a:	0449      	lsls	r1, r1, #17
 800c74c:	430a      	orrs	r2, r1
 800c74e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	2380      	movs	r3, #128	@ 0x80
 800c756:	049b      	lsls	r3, r3, #18
 800c758:	4013      	ands	r3, r2
 800c75a:	d016      	beq.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c75c:	4b0e      	ldr	r3, [pc, #56]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c75e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c760:	4a10      	ldr	r2, [pc, #64]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c762:	4013      	ands	r3, r2
 800c764:	0019      	movs	r1, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c76a:	4b0b      	ldr	r3, [pc, #44]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c76c:	430a      	orrs	r2, r1
 800c76e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c774:	2380      	movs	r3, #128	@ 0x80
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	429a      	cmp	r2, r3
 800c77a:	d106      	bne.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c77c:	4b06      	ldr	r3, [pc, #24]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c77e:	68da      	ldr	r2, [r3, #12]
 800c780:	4b05      	ldr	r3, [pc, #20]	@ (800c798 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c782:	2180      	movs	r1, #128	@ 0x80
 800c784:	0449      	lsls	r1, r1, #17
 800c786:	430a      	orrs	r2, r1
 800c788:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c78a:	2312      	movs	r3, #18
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	781b      	ldrb	r3, [r3, #0]
}
 800c790:	0018      	movs	r0, r3
 800c792:	46bd      	mov	sp, r7
 800c794:	b006      	add	sp, #24
 800c796:	bd80      	pop	{r7, pc}
 800c798:	40021000 	.word	0x40021000
 800c79c:	efffffff 	.word	0xefffffff
 800c7a0:	fffff3ff 	.word	0xfffff3ff
 800c7a4:	fffffcff 	.word	0xfffffcff
 800c7a8:	fff3ffff 	.word	0xfff3ffff
 800c7ac:	ffcfffff 	.word	0xffcfffff
 800c7b0:	ffffcfff 	.word	0xffffcfff
 800c7b4:	ffff3fff 	.word	0xffff3fff
 800c7b8:	ffbfffff 	.word	0xffbfffff
 800c7bc:	feffffff 	.word	0xfeffffff

0800c7c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c7c0:	b5b0      	push	{r4, r5, r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c7c8:	230f      	movs	r3, #15
 800c7ca:	18fb      	adds	r3, r7, r3
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d100      	bne.n	800c7d8 <HAL_RTC_Init+0x18>
 800c7d6:	e08c      	b.n	800c8f2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2229      	movs	r2, #41	@ 0x29
 800c7dc:	5c9b      	ldrb	r3, [r3, r2]
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2228      	movs	r2, #40	@ 0x28
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2288      	movs	r2, #136	@ 0x88
 800c7f0:	0212      	lsls	r2, r2, #8
 800c7f2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	0018      	movs	r0, r3
 800c7f8:	f7f9 fb70 	bl	8005edc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2229      	movs	r2, #41	@ 0x29
 800c800:	2102      	movs	r1, #2
 800c802:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	2210      	movs	r2, #16
 800c80c:	4013      	ands	r3, r2
 800c80e:	2b10      	cmp	r3, #16
 800c810:	d062      	beq.n	800c8d8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	22ca      	movs	r2, #202	@ 0xca
 800c818:	625a      	str	r2, [r3, #36]	@ 0x24
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2253      	movs	r2, #83	@ 0x53
 800c820:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c822:	250f      	movs	r5, #15
 800c824:	197c      	adds	r4, r7, r5
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	0018      	movs	r0, r3
 800c82a:	f000 f891 	bl	800c950 <RTC_EnterInitMode>
 800c82e:	0003      	movs	r3, r0
 800c830:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800c832:	0028      	movs	r0, r5
 800c834:	183b      	adds	r3, r7, r0
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d12c      	bne.n	800c896 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	699a      	ldr	r2, [r3, #24]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	492e      	ldr	r1, [pc, #184]	@ (800c900 <HAL_RTC_Init+0x140>)
 800c848:	400a      	ands	r2, r1
 800c84a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6999      	ldr	r1, [r3, #24]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	430a      	orrs	r2, r1
 800c868:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	6912      	ldr	r2, [r2, #16]
 800c872:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6919      	ldr	r1, [r3, #16]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	041a      	lsls	r2, r3, #16
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c888:	183c      	adds	r4, r7, r0
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	0018      	movs	r0, r3
 800c88e:	f000 f8a1 	bl	800c9d4 <RTC_ExitInitMode>
 800c892:	0003      	movs	r3, r0
 800c894:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800c896:	230f      	movs	r3, #15
 800c898:	18fb      	adds	r3, r7, r3
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d116      	bne.n	800c8ce <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	699a      	ldr	r2, [r3, #24]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	00d2      	lsls	r2, r2, #3
 800c8ac:	08d2      	lsrs	r2, r2, #3
 800c8ae:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6999      	ldr	r1, [r3, #24]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	430a      	orrs	r2, r1
 800c8cc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	22ff      	movs	r2, #255	@ 0xff
 800c8d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c8d6:	e003      	b.n	800c8e0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c8d8:	230f      	movs	r3, #15
 800c8da:	18fb      	adds	r3, r7, r3
 800c8dc:	2200      	movs	r2, #0
 800c8de:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800c8e0:	230f      	movs	r3, #15
 800c8e2:	18fb      	adds	r3, r7, r3
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d103      	bne.n	800c8f2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2229      	movs	r2, #41	@ 0x29
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800c8f2:	230f      	movs	r3, #15
 800c8f4:	18fb      	adds	r3, r7, r3
 800c8f6:	781b      	ldrb	r3, [r3, #0]
}
 800c8f8:	0018      	movs	r0, r3
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	b004      	add	sp, #16
 800c8fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c900:	fb8fffbf 	.word	0xfb8fffbf

0800c904 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a0e      	ldr	r2, [pc, #56]	@ (800c94c <HAL_RTC_WaitForSynchro+0x48>)
 800c912:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c914:	f7fb f816 	bl	8007944 <HAL_GetTick>
 800c918:	0003      	movs	r3, r0
 800c91a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c91c:	e00a      	b.n	800c934 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c91e:	f7fb f811 	bl	8007944 <HAL_GetTick>
 800c922:	0002      	movs	r2, r0
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	1ad2      	subs	r2, r2, r3
 800c928:	23fa      	movs	r3, #250	@ 0xfa
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d901      	bls.n	800c934 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c930:	2303      	movs	r3, #3
 800c932:	e006      	b.n	800c942 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	2220      	movs	r2, #32
 800c93c:	4013      	ands	r3, r2
 800c93e:	d0ee      	beq.n	800c91e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	0018      	movs	r0, r3
 800c944:	46bd      	mov	sp, r7
 800c946:	b004      	add	sp, #16
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	0001005f 	.word	0x0001005f

0800c950 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800c958:	230f      	movs	r3, #15
 800c95a:	18fb      	adds	r3, r7, r3
 800c95c:	2200      	movs	r2, #0
 800c95e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	2240      	movs	r2, #64	@ 0x40
 800c968:	4013      	ands	r3, r2
 800c96a:	d12c      	bne.n	800c9c6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2180      	movs	r1, #128	@ 0x80
 800c978:	430a      	orrs	r2, r1
 800c97a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c97c:	f7fa ffe2 	bl	8007944 <HAL_GetTick>
 800c980:	0003      	movs	r3, r0
 800c982:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c984:	e014      	b.n	800c9b0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800c986:	f7fa ffdd 	bl	8007944 <HAL_GetTick>
 800c98a:	0002      	movs	r2, r0
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	1ad2      	subs	r2, r2, r3
 800c990:	200f      	movs	r0, #15
 800c992:	183b      	adds	r3, r7, r0
 800c994:	1839      	adds	r1, r7, r0
 800c996:	7809      	ldrb	r1, [r1, #0]
 800c998:	7019      	strb	r1, [r3, #0]
 800c99a:	23fa      	movs	r3, #250	@ 0xfa
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d906      	bls.n	800c9b0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800c9a2:	183b      	adds	r3, r7, r0
 800c9a4:	2203      	movs	r2, #3
 800c9a6:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2229      	movs	r2, #41	@ 0x29
 800c9ac:	2103      	movs	r1, #3
 800c9ae:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	2240      	movs	r2, #64	@ 0x40
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	d104      	bne.n	800c9c6 <RTC_EnterInitMode+0x76>
 800c9bc:	230f      	movs	r3, #15
 800c9be:	18fb      	adds	r3, r7, r3
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d1df      	bne.n	800c986 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c9c6:	230f      	movs	r3, #15
 800c9c8:	18fb      	adds	r3, r7, r3
 800c9ca:	781b      	ldrb	r3, [r3, #0]
}
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	b004      	add	sp, #16
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c9d4:	b590      	push	{r4, r7, lr}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9dc:	240f      	movs	r4, #15
 800c9de:	193b      	adds	r3, r7, r4
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c9e4:	4b1c      	ldr	r3, [pc, #112]	@ (800ca58 <RTC_ExitInitMode+0x84>)
 800c9e6:	68da      	ldr	r2, [r3, #12]
 800c9e8:	4b1b      	ldr	r3, [pc, #108]	@ (800ca58 <RTC_ExitInitMode+0x84>)
 800c9ea:	2180      	movs	r1, #128	@ 0x80
 800c9ec:	438a      	bics	r2, r1
 800c9ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c9f0:	4b19      	ldr	r3, [pc, #100]	@ (800ca58 <RTC_ExitInitMode+0x84>)
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	2220      	movs	r2, #32
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	d10d      	bne.n	800ca16 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	f7ff ff81 	bl	800c904 <HAL_RTC_WaitForSynchro>
 800ca02:	1e03      	subs	r3, r0, #0
 800ca04:	d021      	beq.n	800ca4a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2229      	movs	r2, #41	@ 0x29
 800ca0a:	2103      	movs	r1, #3
 800ca0c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ca0e:	193b      	adds	r3, r7, r4
 800ca10:	2203      	movs	r2, #3
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	e019      	b.n	800ca4a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ca16:	4b10      	ldr	r3, [pc, #64]	@ (800ca58 <RTC_ExitInitMode+0x84>)
 800ca18:	699a      	ldr	r2, [r3, #24]
 800ca1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca58 <RTC_ExitInitMode+0x84>)
 800ca1c:	2120      	movs	r1, #32
 800ca1e:	438a      	bics	r2, r1
 800ca20:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	0018      	movs	r0, r3
 800ca26:	f7ff ff6d 	bl	800c904 <HAL_RTC_WaitForSynchro>
 800ca2a:	1e03      	subs	r3, r0, #0
 800ca2c:	d007      	beq.n	800ca3e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2229      	movs	r2, #41	@ 0x29
 800ca32:	2103      	movs	r1, #3
 800ca34:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ca36:	230f      	movs	r3, #15
 800ca38:	18fb      	adds	r3, r7, r3
 800ca3a:	2203      	movs	r2, #3
 800ca3c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ca3e:	4b06      	ldr	r3, [pc, #24]	@ (800ca58 <RTC_ExitInitMode+0x84>)
 800ca40:	699a      	ldr	r2, [r3, #24]
 800ca42:	4b05      	ldr	r3, [pc, #20]	@ (800ca58 <RTC_ExitInitMode+0x84>)
 800ca44:	2120      	movs	r1, #32
 800ca46:	430a      	orrs	r2, r1
 800ca48:	619a      	str	r2, [r3, #24]
  }

  return status;
 800ca4a:	230f      	movs	r3, #15
 800ca4c:	18fb      	adds	r3, r7, r3
 800ca4e:	781b      	ldrb	r3, [r3, #0]
}
 800ca50:	0018      	movs	r0, r3
 800ca52:	46bd      	mov	sp, r7
 800ca54:	b005      	add	sp, #20
 800ca56:	bd90      	pop	{r4, r7, pc}
 800ca58:	40002800 	.word	0x40002800

0800ca5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e04a      	b.n	800cb04 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	223d      	movs	r2, #61	@ 0x3d
 800ca72:	5c9b      	ldrb	r3, [r3, r2]
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d107      	bne.n	800ca8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	223c      	movs	r2, #60	@ 0x3c
 800ca7e:	2100      	movs	r1, #0
 800ca80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	0018      	movs	r0, r3
 800ca86:	f7f9 fd79 	bl	800657c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	223d      	movs	r2, #61	@ 0x3d
 800ca8e:	2102      	movs	r1, #2
 800ca90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	0019      	movs	r1, r3
 800ca9c:	0010      	movs	r0, r2
 800ca9e:	f000 fc0f 	bl	800d2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2248      	movs	r2, #72	@ 0x48
 800caa6:	2101      	movs	r1, #1
 800caa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	223e      	movs	r2, #62	@ 0x3e
 800caae:	2101      	movs	r1, #1
 800cab0:	5499      	strb	r1, [r3, r2]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	223f      	movs	r2, #63	@ 0x3f
 800cab6:	2101      	movs	r1, #1
 800cab8:	5499      	strb	r1, [r3, r2]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2240      	movs	r2, #64	@ 0x40
 800cabe:	2101      	movs	r1, #1
 800cac0:	5499      	strb	r1, [r3, r2]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2241      	movs	r2, #65	@ 0x41
 800cac6:	2101      	movs	r1, #1
 800cac8:	5499      	strb	r1, [r3, r2]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2242      	movs	r2, #66	@ 0x42
 800cace:	2101      	movs	r1, #1
 800cad0:	5499      	strb	r1, [r3, r2]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2243      	movs	r2, #67	@ 0x43
 800cad6:	2101      	movs	r1, #1
 800cad8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2244      	movs	r2, #68	@ 0x44
 800cade:	2101      	movs	r1, #1
 800cae0:	5499      	strb	r1, [r3, r2]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2245      	movs	r2, #69	@ 0x45
 800cae6:	2101      	movs	r1, #1
 800cae8:	5499      	strb	r1, [r3, r2]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2246      	movs	r2, #70	@ 0x46
 800caee:	2101      	movs	r1, #1
 800caf0:	5499      	strb	r1, [r3, r2]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2247      	movs	r2, #71	@ 0x47
 800caf6:	2101      	movs	r1, #1
 800caf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	223d      	movs	r2, #61	@ 0x3d
 800cafe:	2101      	movs	r1, #1
 800cb00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	0018      	movs	r0, r3
 800cb06:	46bd      	mov	sp, r7
 800cb08:	b002      	add	sp, #8
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	223d      	movs	r2, #61	@ 0x3d
 800cb18:	5c9b      	ldrb	r3, [r3, r2]
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d001      	beq.n	800cb24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e047      	b.n	800cbb4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	223d      	movs	r2, #61	@ 0x3d
 800cb28:	2102      	movs	r1, #2
 800cb2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2101      	movs	r1, #1
 800cb38:	430a      	orrs	r2, r1
 800cb3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a1e      	ldr	r2, [pc, #120]	@ (800cbbc <HAL_TIM_Base_Start_IT+0xb0>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d014      	beq.n	800cb70 <HAL_TIM_Base_Start_IT+0x64>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	2380      	movs	r3, #128	@ 0x80
 800cb4c:	05db      	lsls	r3, r3, #23
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d00e      	beq.n	800cb70 <HAL_TIM_Base_Start_IT+0x64>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a1a      	ldr	r2, [pc, #104]	@ (800cbc0 <HAL_TIM_Base_Start_IT+0xb4>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d009      	beq.n	800cb70 <HAL_TIM_Base_Start_IT+0x64>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a18      	ldr	r2, [pc, #96]	@ (800cbc4 <HAL_TIM_Base_Start_IT+0xb8>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d004      	beq.n	800cb70 <HAL_TIM_Base_Start_IT+0x64>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a17      	ldr	r2, [pc, #92]	@ (800cbc8 <HAL_TIM_Base_Start_IT+0xbc>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d116      	bne.n	800cb9e <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	4a15      	ldr	r2, [pc, #84]	@ (800cbcc <HAL_TIM_Base_Start_IT+0xc0>)
 800cb78:	4013      	ands	r3, r2
 800cb7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b06      	cmp	r3, #6
 800cb80:	d016      	beq.n	800cbb0 <HAL_TIM_Base_Start_IT+0xa4>
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	2380      	movs	r3, #128	@ 0x80
 800cb86:	025b      	lsls	r3, r3, #9
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d011      	beq.n	800cbb0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2101      	movs	r1, #1
 800cb98:	430a      	orrs	r2, r1
 800cb9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb9c:	e008      	b.n	800cbb0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2101      	movs	r1, #1
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	e000      	b.n	800cbb2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	b004      	add	sp, #16
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	40012c00 	.word	0x40012c00
 800cbc0:	40000400 	.word	0x40000400
 800cbc4:	40000800 	.word	0x40000800
 800cbc8:	40014000 	.word	0x40014000
 800cbcc:	00010007 	.word	0x00010007

0800cbd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d101      	bne.n	800cbe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e04a      	b.n	800cc78 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	223d      	movs	r2, #61	@ 0x3d
 800cbe6:	5c9b      	ldrb	r3, [r3, r2]
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d107      	bne.n	800cbfe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	223c      	movs	r2, #60	@ 0x3c
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	0018      	movs	r0, r3
 800cbfa:	f7f9 fca1 	bl	8006540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	223d      	movs	r2, #61	@ 0x3d
 800cc02:	2102      	movs	r1, #2
 800cc04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	0019      	movs	r1, r3
 800cc10:	0010      	movs	r0, r2
 800cc12:	f000 fb55 	bl	800d2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2248      	movs	r2, #72	@ 0x48
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	223e      	movs	r2, #62	@ 0x3e
 800cc22:	2101      	movs	r1, #1
 800cc24:	5499      	strb	r1, [r3, r2]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	223f      	movs	r2, #63	@ 0x3f
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	5499      	strb	r1, [r3, r2]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2240      	movs	r2, #64	@ 0x40
 800cc32:	2101      	movs	r1, #1
 800cc34:	5499      	strb	r1, [r3, r2]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2241      	movs	r2, #65	@ 0x41
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	5499      	strb	r1, [r3, r2]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2242      	movs	r2, #66	@ 0x42
 800cc42:	2101      	movs	r1, #1
 800cc44:	5499      	strb	r1, [r3, r2]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2243      	movs	r2, #67	@ 0x43
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2244      	movs	r2, #68	@ 0x44
 800cc52:	2101      	movs	r1, #1
 800cc54:	5499      	strb	r1, [r3, r2]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2245      	movs	r2, #69	@ 0x45
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	5499      	strb	r1, [r3, r2]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2246      	movs	r2, #70	@ 0x46
 800cc62:	2101      	movs	r1, #1
 800cc64:	5499      	strb	r1, [r3, r2]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2247      	movs	r2, #71	@ 0x47
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	223d      	movs	r2, #61	@ 0x3d
 800cc72:	2101      	movs	r1, #1
 800cc74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	0018      	movs	r0, r3
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	b002      	add	sp, #8
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d108      	bne.n	800cca2 <HAL_TIM_PWM_Start+0x22>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	223e      	movs	r2, #62	@ 0x3e
 800cc94:	5c9b      	ldrb	r3, [r3, r2]
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	1e5a      	subs	r2, r3, #1
 800cc9c:	4193      	sbcs	r3, r2
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	e037      	b.n	800cd12 <HAL_TIM_PWM_Start+0x92>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b04      	cmp	r3, #4
 800cca6:	d108      	bne.n	800ccba <HAL_TIM_PWM_Start+0x3a>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	223f      	movs	r2, #63	@ 0x3f
 800ccac:	5c9b      	ldrb	r3, [r3, r2]
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	1e5a      	subs	r2, r3, #1
 800ccb4:	4193      	sbcs	r3, r2
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	e02b      	b.n	800cd12 <HAL_TIM_PWM_Start+0x92>
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2b08      	cmp	r3, #8
 800ccbe:	d108      	bne.n	800ccd2 <HAL_TIM_PWM_Start+0x52>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2240      	movs	r2, #64	@ 0x40
 800ccc4:	5c9b      	ldrb	r3, [r3, r2]
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	1e5a      	subs	r2, r3, #1
 800cccc:	4193      	sbcs	r3, r2
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	e01f      	b.n	800cd12 <HAL_TIM_PWM_Start+0x92>
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b0c      	cmp	r3, #12
 800ccd6:	d108      	bne.n	800ccea <HAL_TIM_PWM_Start+0x6a>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2241      	movs	r2, #65	@ 0x41
 800ccdc:	5c9b      	ldrb	r3, [r3, r2]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	1e5a      	subs	r2, r3, #1
 800cce4:	4193      	sbcs	r3, r2
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	e013      	b.n	800cd12 <HAL_TIM_PWM_Start+0x92>
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	2b10      	cmp	r3, #16
 800ccee:	d108      	bne.n	800cd02 <HAL_TIM_PWM_Start+0x82>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2242      	movs	r2, #66	@ 0x42
 800ccf4:	5c9b      	ldrb	r3, [r3, r2]
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	1e5a      	subs	r2, r3, #1
 800ccfc:	4193      	sbcs	r3, r2
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	e007      	b.n	800cd12 <HAL_TIM_PWM_Start+0x92>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2243      	movs	r2, #67	@ 0x43
 800cd06:	5c9b      	ldrb	r3, [r3, r2]
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	1e5a      	subs	r2, r3, #1
 800cd0e:	4193      	sbcs	r3, r2
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e090      	b.n	800ce3c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <HAL_TIM_PWM_Start+0xaa>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	223e      	movs	r2, #62	@ 0x3e
 800cd24:	2102      	movs	r1, #2
 800cd26:	5499      	strb	r1, [r3, r2]
 800cd28:	e023      	b.n	800cd72 <HAL_TIM_PWM_Start+0xf2>
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b04      	cmp	r3, #4
 800cd2e:	d104      	bne.n	800cd3a <HAL_TIM_PWM_Start+0xba>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	223f      	movs	r2, #63	@ 0x3f
 800cd34:	2102      	movs	r1, #2
 800cd36:	5499      	strb	r1, [r3, r2]
 800cd38:	e01b      	b.n	800cd72 <HAL_TIM_PWM_Start+0xf2>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d104      	bne.n	800cd4a <HAL_TIM_PWM_Start+0xca>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2240      	movs	r2, #64	@ 0x40
 800cd44:	2102      	movs	r1, #2
 800cd46:	5499      	strb	r1, [r3, r2]
 800cd48:	e013      	b.n	800cd72 <HAL_TIM_PWM_Start+0xf2>
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2b0c      	cmp	r3, #12
 800cd4e:	d104      	bne.n	800cd5a <HAL_TIM_PWM_Start+0xda>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2241      	movs	r2, #65	@ 0x41
 800cd54:	2102      	movs	r1, #2
 800cd56:	5499      	strb	r1, [r3, r2]
 800cd58:	e00b      	b.n	800cd72 <HAL_TIM_PWM_Start+0xf2>
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b10      	cmp	r3, #16
 800cd5e:	d104      	bne.n	800cd6a <HAL_TIM_PWM_Start+0xea>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2242      	movs	r2, #66	@ 0x42
 800cd64:	2102      	movs	r1, #2
 800cd66:	5499      	strb	r1, [r3, r2]
 800cd68:	e003      	b.n	800cd72 <HAL_TIM_PWM_Start+0xf2>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2243      	movs	r2, #67	@ 0x43
 800cd6e:	2102      	movs	r1, #2
 800cd70:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	0018      	movs	r0, r3
 800cd7c:	f000 fdfc 	bl	800d978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a2f      	ldr	r2, [pc, #188]	@ (800ce44 <HAL_TIM_PWM_Start+0x1c4>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d00e      	beq.n	800cda8 <HAL_TIM_PWM_Start+0x128>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a2e      	ldr	r2, [pc, #184]	@ (800ce48 <HAL_TIM_PWM_Start+0x1c8>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d009      	beq.n	800cda8 <HAL_TIM_PWM_Start+0x128>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a2c      	ldr	r2, [pc, #176]	@ (800ce4c <HAL_TIM_PWM_Start+0x1cc>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d004      	beq.n	800cda8 <HAL_TIM_PWM_Start+0x128>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a2b      	ldr	r2, [pc, #172]	@ (800ce50 <HAL_TIM_PWM_Start+0x1d0>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d101      	bne.n	800cdac <HAL_TIM_PWM_Start+0x12c>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e000      	b.n	800cdae <HAL_TIM_PWM_Start+0x12e>
 800cdac:	2300      	movs	r3, #0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d008      	beq.n	800cdc4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2180      	movs	r1, #128	@ 0x80
 800cdbe:	0209      	lsls	r1, r1, #8
 800cdc0:	430a      	orrs	r2, r1
 800cdc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a1e      	ldr	r2, [pc, #120]	@ (800ce44 <HAL_TIM_PWM_Start+0x1c4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d014      	beq.n	800cdf8 <HAL_TIM_PWM_Start+0x178>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	2380      	movs	r3, #128	@ 0x80
 800cdd4:	05db      	lsls	r3, r3, #23
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d00e      	beq.n	800cdf8 <HAL_TIM_PWM_Start+0x178>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a1d      	ldr	r2, [pc, #116]	@ (800ce54 <HAL_TIM_PWM_Start+0x1d4>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d009      	beq.n	800cdf8 <HAL_TIM_PWM_Start+0x178>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a1b      	ldr	r2, [pc, #108]	@ (800ce58 <HAL_TIM_PWM_Start+0x1d8>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d004      	beq.n	800cdf8 <HAL_TIM_PWM_Start+0x178>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a15      	ldr	r2, [pc, #84]	@ (800ce48 <HAL_TIM_PWM_Start+0x1c8>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d116      	bne.n	800ce26 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	4a17      	ldr	r2, [pc, #92]	@ (800ce5c <HAL_TIM_PWM_Start+0x1dc>)
 800ce00:	4013      	ands	r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b06      	cmp	r3, #6
 800ce08:	d016      	beq.n	800ce38 <HAL_TIM_PWM_Start+0x1b8>
 800ce0a:	68fa      	ldr	r2, [r7, #12]
 800ce0c:	2380      	movs	r3, #128	@ 0x80
 800ce0e:	025b      	lsls	r3, r3, #9
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d011      	beq.n	800ce38 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2101      	movs	r1, #1
 800ce20:	430a      	orrs	r2, r1
 800ce22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce24:	e008      	b.n	800ce38 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2101      	movs	r1, #1
 800ce32:	430a      	orrs	r2, r1
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	e000      	b.n	800ce3a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce38:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	b004      	add	sp, #16
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	40012c00 	.word	0x40012c00
 800ce48:	40014000 	.word	0x40014000
 800ce4c:	40014400 	.word	0x40014400
 800ce50:	40014800 	.word	0x40014800
 800ce54:	40000400 	.word	0x40000400
 800ce58:	40000800 	.word	0x40000800
 800ce5c:	00010007 	.word	0x00010007

0800ce60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	d021      	beq.n	800cec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2202      	movs	r2, #2
 800ce84:	4013      	ands	r3, r2
 800ce86:	d01d      	beq.n	800cec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	4252      	negs	r2, r2
 800ce90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2201      	movs	r2, #1
 800ce96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	699b      	ldr	r3, [r3, #24]
 800ce9e:	2203      	movs	r2, #3
 800cea0:	4013      	ands	r3, r2
 800cea2:	d004      	beq.n	800ceae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	0018      	movs	r0, r3
 800cea8:	f000 f9f2 	bl	800d290 <HAL_TIM_IC_CaptureCallback>
 800ceac:	e007      	b.n	800cebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f000 f9e5 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	0018      	movs	r0, r3
 800ceba:	f000 f9f1 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2204      	movs	r2, #4
 800cec8:	4013      	ands	r3, r2
 800ceca:	d022      	beq.n	800cf12 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2204      	movs	r2, #4
 800ced0:	4013      	ands	r3, r2
 800ced2:	d01e      	beq.n	800cf12 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2205      	movs	r2, #5
 800ceda:	4252      	negs	r2, r2
 800cedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2202      	movs	r2, #2
 800cee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	699a      	ldr	r2, [r3, #24]
 800ceea:	23c0      	movs	r3, #192	@ 0xc0
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4013      	ands	r3, r2
 800cef0:	d004      	beq.n	800cefc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	0018      	movs	r0, r3
 800cef6:	f000 f9cb 	bl	800d290 <HAL_TIM_IC_CaptureCallback>
 800cefa:	e007      	b.n	800cf0c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	0018      	movs	r0, r3
 800cf00:	f000 f9be 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	0018      	movs	r0, r3
 800cf08:	f000 f9ca 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2208      	movs	r2, #8
 800cf16:	4013      	ands	r3, r2
 800cf18:	d021      	beq.n	800cf5e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	4013      	ands	r3, r2
 800cf20:	d01d      	beq.n	800cf5e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2209      	movs	r2, #9
 800cf28:	4252      	negs	r2, r2
 800cf2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2204      	movs	r2, #4
 800cf30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	d004      	beq.n	800cf48 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	0018      	movs	r0, r3
 800cf42:	f000 f9a5 	bl	800d290 <HAL_TIM_IC_CaptureCallback>
 800cf46:	e007      	b.n	800cf58 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	0018      	movs	r0, r3
 800cf4c:	f000 f998 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	0018      	movs	r0, r3
 800cf54:	f000 f9a4 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	2210      	movs	r2, #16
 800cf62:	4013      	ands	r3, r2
 800cf64:	d022      	beq.n	800cfac <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2210      	movs	r2, #16
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	d01e      	beq.n	800cfac <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2211      	movs	r2, #17
 800cf74:	4252      	negs	r2, r2
 800cf76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	69da      	ldr	r2, [r3, #28]
 800cf84:	23c0      	movs	r3, #192	@ 0xc0
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4013      	ands	r3, r2
 800cf8a:	d004      	beq.n	800cf96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	0018      	movs	r0, r3
 800cf90:	f000 f97e 	bl	800d290 <HAL_TIM_IC_CaptureCallback>
 800cf94:	e007      	b.n	800cfa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	0018      	movs	r0, r3
 800cf9a:	f000 f971 	bl	800d280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f000 f97d 	bl	800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	d00c      	beq.n	800cfce <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	4013      	ands	r3, r2
 800cfba:	d008      	beq.n	800cfce <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2202      	movs	r2, #2
 800cfc2:	4252      	negs	r2, r2
 800cfc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	0018      	movs	r0, r3
 800cfca:	f000 f951 	bl	800d270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	2280      	movs	r2, #128	@ 0x80
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	d104      	bne.n	800cfe0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	2380      	movs	r3, #128	@ 0x80
 800cfda:	019b      	lsls	r3, r3, #6
 800cfdc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cfde:	d00b      	beq.n	800cff8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2280      	movs	r2, #128	@ 0x80
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	d007      	beq.n	800cff8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a1e      	ldr	r2, [pc, #120]	@ (800d068 <HAL_TIM_IRQHandler+0x208>)
 800cfee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	0018      	movs	r0, r3
 800cff4:	f000 fd62 	bl	800dabc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	2380      	movs	r3, #128	@ 0x80
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	4013      	ands	r3, r2
 800d000:	d00b      	beq.n	800d01a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2280      	movs	r2, #128	@ 0x80
 800d006:	4013      	ands	r3, r2
 800d008:	d007      	beq.n	800d01a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a17      	ldr	r2, [pc, #92]	@ (800d06c <HAL_TIM_IRQHandler+0x20c>)
 800d010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	0018      	movs	r0, r3
 800d016:	f000 fd59 	bl	800dacc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	2240      	movs	r2, #64	@ 0x40
 800d01e:	4013      	ands	r3, r2
 800d020:	d00c      	beq.n	800d03c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2240      	movs	r2, #64	@ 0x40
 800d026:	4013      	ands	r3, r2
 800d028:	d008      	beq.n	800d03c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2241      	movs	r2, #65	@ 0x41
 800d030:	4252      	negs	r2, r2
 800d032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	0018      	movs	r0, r3
 800d038:	f000 f93a 	bl	800d2b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2220      	movs	r2, #32
 800d040:	4013      	ands	r3, r2
 800d042:	d00c      	beq.n	800d05e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2220      	movs	r2, #32
 800d048:	4013      	ands	r3, r2
 800d04a:	d008      	beq.n	800d05e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2221      	movs	r2, #33	@ 0x21
 800d052:	4252      	negs	r2, r2
 800d054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	0018      	movs	r0, r3
 800d05a:	f000 fd27 	bl	800daac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d05e:	46c0      	nop			@ (mov r8, r8)
 800d060:	46bd      	mov	sp, r7
 800d062:	b004      	add	sp, #16
 800d064:	bd80      	pop	{r7, pc}
 800d066:	46c0      	nop			@ (mov r8, r8)
 800d068:	ffffdf7f 	.word	0xffffdf7f
 800d06c:	fffffeff 	.word	0xfffffeff

0800d070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d07c:	2317      	movs	r3, #23
 800d07e:	18fb      	adds	r3, r7, r3
 800d080:	2200      	movs	r2, #0
 800d082:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	223c      	movs	r2, #60	@ 0x3c
 800d088:	5c9b      	ldrb	r3, [r3, r2]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d101      	bne.n	800d092 <HAL_TIM_PWM_ConfigChannel+0x22>
 800d08e:	2302      	movs	r3, #2
 800d090:	e0e5      	b.n	800d25e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	223c      	movs	r2, #60	@ 0x3c
 800d096:	2101      	movs	r1, #1
 800d098:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b14      	cmp	r3, #20
 800d09e:	d900      	bls.n	800d0a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 800d0a0:	e0d1      	b.n	800d246 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	009a      	lsls	r2, r3, #2
 800d0a6:	4b70      	ldr	r3, [pc, #448]	@ (800d268 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800d0a8:	18d3      	adds	r3, r2, r3
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	0011      	movs	r1, r2
 800d0b6:	0018      	movs	r0, r3
 800d0b8:	f000 f99a 	bl	800d3f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	699a      	ldr	r2, [r3, #24]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2108      	movs	r1, #8
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	699a      	ldr	r2, [r3, #24]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2104      	movs	r1, #4
 800d0d8:	438a      	bics	r2, r1
 800d0da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6999      	ldr	r1, [r3, #24]
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	691a      	ldr	r2, [r3, #16]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	430a      	orrs	r2, r1
 800d0ec:	619a      	str	r2, [r3, #24]
      break;
 800d0ee:	e0af      	b.n	800d250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68ba      	ldr	r2, [r7, #8]
 800d0f6:	0011      	movs	r1, r2
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	f000 fa03 	bl	800d504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	699a      	ldr	r2, [r3, #24]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2180      	movs	r1, #128	@ 0x80
 800d10a:	0109      	lsls	r1, r1, #4
 800d10c:	430a      	orrs	r2, r1
 800d10e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	699a      	ldr	r2, [r3, #24]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4954      	ldr	r1, [pc, #336]	@ (800d26c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d11c:	400a      	ands	r2, r1
 800d11e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6999      	ldr	r1, [r3, #24]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	021a      	lsls	r2, r3, #8
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	430a      	orrs	r2, r1
 800d132:	619a      	str	r2, [r3, #24]
      break;
 800d134:	e08c      	b.n	800d250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	0011      	movs	r1, r2
 800d13e:	0018      	movs	r0, r3
 800d140:	f000 fa64 	bl	800d60c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	69da      	ldr	r2, [r3, #28]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2108      	movs	r1, #8
 800d150:	430a      	orrs	r2, r1
 800d152:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	69da      	ldr	r2, [r3, #28]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2104      	movs	r1, #4
 800d160:	438a      	bics	r2, r1
 800d162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	69d9      	ldr	r1, [r3, #28]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	691a      	ldr	r2, [r3, #16]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	430a      	orrs	r2, r1
 800d174:	61da      	str	r2, [r3, #28]
      break;
 800d176:	e06b      	b.n	800d250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	0011      	movs	r1, r2
 800d180:	0018      	movs	r0, r3
 800d182:	f000 facb 	bl	800d71c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	69da      	ldr	r2, [r3, #28]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2180      	movs	r1, #128	@ 0x80
 800d192:	0109      	lsls	r1, r1, #4
 800d194:	430a      	orrs	r2, r1
 800d196:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	69da      	ldr	r2, [r3, #28]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4932      	ldr	r1, [pc, #200]	@ (800d26c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d1a4:	400a      	ands	r2, r1
 800d1a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	69d9      	ldr	r1, [r3, #28]
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	021a      	lsls	r2, r3, #8
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	430a      	orrs	r2, r1
 800d1ba:	61da      	str	r2, [r3, #28]
      break;
 800d1bc:	e048      	b.n	800d250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	0011      	movs	r1, r2
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	f000 fb12 	bl	800d7f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2108      	movs	r1, #8
 800d1d8:	430a      	orrs	r2, r1
 800d1da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2104      	movs	r1, #4
 800d1e8:	438a      	bics	r2, r1
 800d1ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	691a      	ldr	r2, [r3, #16]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d1fe:	e027      	b.n	800d250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	0011      	movs	r1, r2
 800d208:	0018      	movs	r0, r3
 800d20a:	f000 fb51 	bl	800d8b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2180      	movs	r1, #128	@ 0x80
 800d21a:	0109      	lsls	r1, r1, #4
 800d21c:	430a      	orrs	r2, r1
 800d21e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4910      	ldr	r1, [pc, #64]	@ (800d26c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d22c:	400a      	ands	r2, r1
 800d22e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	021a      	lsls	r2, r3, #8
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	430a      	orrs	r2, r1
 800d242:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d244:	e004      	b.n	800d250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800d246:	2317      	movs	r3, #23
 800d248:	18fb      	adds	r3, r7, r3
 800d24a:	2201      	movs	r2, #1
 800d24c:	701a      	strb	r2, [r3, #0]
      break;
 800d24e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	223c      	movs	r2, #60	@ 0x3c
 800d254:	2100      	movs	r1, #0
 800d256:	5499      	strb	r1, [r3, r2]

  return status;
 800d258:	2317      	movs	r3, #23
 800d25a:	18fb      	adds	r3, r7, r3
 800d25c:	781b      	ldrb	r3, [r3, #0]
}
 800d25e:	0018      	movs	r0, r3
 800d260:	46bd      	mov	sp, r7
 800d262:	b006      	add	sp, #24
 800d264:	bd80      	pop	{r7, pc}
 800d266:	46c0      	nop			@ (mov r8, r8)
 800d268:	08011b14 	.word	0x08011b14
 800d26c:	fffffbff 	.word	0xfffffbff

0800d270 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d278:	46c0      	nop			@ (mov r8, r8)
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b002      	add	sp, #8
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d288:	46c0      	nop			@ (mov r8, r8)
 800d28a:	46bd      	mov	sp, r7
 800d28c:	b002      	add	sp, #8
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d298:	46c0      	nop			@ (mov r8, r8)
 800d29a:	46bd      	mov	sp, r7
 800d29c:	b002      	add	sp, #8
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2a8:	46c0      	nop			@ (mov r8, r8)
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	b002      	add	sp, #8
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2b8:	46c0      	nop			@ (mov r8, r8)
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	b002      	add	sp, #8
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a3f      	ldr	r2, [pc, #252]	@ (800d3d0 <TIM_Base_SetConfig+0x110>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d00c      	beq.n	800d2f2 <TIM_Base_SetConfig+0x32>
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	2380      	movs	r3, #128	@ 0x80
 800d2dc:	05db      	lsls	r3, r3, #23
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d007      	beq.n	800d2f2 <TIM_Base_SetConfig+0x32>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a3b      	ldr	r2, [pc, #236]	@ (800d3d4 <TIM_Base_SetConfig+0x114>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d003      	beq.n	800d2f2 <TIM_Base_SetConfig+0x32>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a3a      	ldr	r2, [pc, #232]	@ (800d3d8 <TIM_Base_SetConfig+0x118>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d108      	bne.n	800d304 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2270      	movs	r2, #112	@ 0x70
 800d2f6:	4393      	bics	r3, r2
 800d2f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4313      	orrs	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a32      	ldr	r2, [pc, #200]	@ (800d3d0 <TIM_Base_SetConfig+0x110>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d01c      	beq.n	800d346 <TIM_Base_SetConfig+0x86>
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	2380      	movs	r3, #128	@ 0x80
 800d310:	05db      	lsls	r3, r3, #23
 800d312:	429a      	cmp	r2, r3
 800d314:	d017      	beq.n	800d346 <TIM_Base_SetConfig+0x86>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a2e      	ldr	r2, [pc, #184]	@ (800d3d4 <TIM_Base_SetConfig+0x114>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d013      	beq.n	800d346 <TIM_Base_SetConfig+0x86>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a2d      	ldr	r2, [pc, #180]	@ (800d3d8 <TIM_Base_SetConfig+0x118>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d00f      	beq.n	800d346 <TIM_Base_SetConfig+0x86>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a2c      	ldr	r2, [pc, #176]	@ (800d3dc <TIM_Base_SetConfig+0x11c>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d00b      	beq.n	800d346 <TIM_Base_SetConfig+0x86>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a2b      	ldr	r2, [pc, #172]	@ (800d3e0 <TIM_Base_SetConfig+0x120>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d007      	beq.n	800d346 <TIM_Base_SetConfig+0x86>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a2a      	ldr	r2, [pc, #168]	@ (800d3e4 <TIM_Base_SetConfig+0x124>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d003      	beq.n	800d346 <TIM_Base_SetConfig+0x86>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a29      	ldr	r2, [pc, #164]	@ (800d3e8 <TIM_Base_SetConfig+0x128>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d108      	bne.n	800d358 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	4a28      	ldr	r2, [pc, #160]	@ (800d3ec <TIM_Base_SetConfig+0x12c>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	4313      	orrs	r3, r2
 800d356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2280      	movs	r2, #128	@ 0x80
 800d35c:	4393      	bics	r3, r2
 800d35e:	001a      	movs	r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	4313      	orrs	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	689a      	ldr	r2, [r3, #8]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4a13      	ldr	r2, [pc, #76]	@ (800d3d0 <TIM_Base_SetConfig+0x110>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00b      	beq.n	800d39e <TIM_Base_SetConfig+0xde>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4a15      	ldr	r2, [pc, #84]	@ (800d3e0 <TIM_Base_SetConfig+0x120>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d007      	beq.n	800d39e <TIM_Base_SetConfig+0xde>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4a14      	ldr	r2, [pc, #80]	@ (800d3e4 <TIM_Base_SetConfig+0x124>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d003      	beq.n	800d39e <TIM_Base_SetConfig+0xde>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a13      	ldr	r2, [pc, #76]	@ (800d3e8 <TIM_Base_SetConfig+0x128>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d103      	bne.n	800d3a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	691a      	ldr	r2, [r3, #16]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d106      	bne.n	800d3c6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	4393      	bics	r3, r2
 800d3c0:	001a      	movs	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	611a      	str	r2, [r3, #16]
  }
}
 800d3c6:	46c0      	nop			@ (mov r8, r8)
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	b004      	add	sp, #16
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	46c0      	nop			@ (mov r8, r8)
 800d3d0:	40012c00 	.word	0x40012c00
 800d3d4:	40000400 	.word	0x40000400
 800d3d8:	40000800 	.word	0x40000800
 800d3dc:	40002000 	.word	0x40002000
 800d3e0:	40014000 	.word	0x40014000
 800d3e4:	40014400 	.word	0x40014400
 800d3e8:	40014800 	.word	0x40014800
 800d3ec:	fffffcff 	.word	0xfffffcff

0800d3f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a1b      	ldr	r3, [r3, #32]
 800d404:	2201      	movs	r2, #1
 800d406:	4393      	bics	r3, r2
 800d408:	001a      	movs	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	699b      	ldr	r3, [r3, #24]
 800d418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	4a32      	ldr	r2, [pc, #200]	@ (800d4e8 <TIM_OC1_SetConfig+0xf8>)
 800d41e:	4013      	ands	r3, r2
 800d420:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2203      	movs	r2, #3
 800d426:	4393      	bics	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	4313      	orrs	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	2202      	movs	r2, #2
 800d438:	4393      	bics	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	4313      	orrs	r3, r2
 800d444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a28      	ldr	r2, [pc, #160]	@ (800d4ec <TIM_OC1_SetConfig+0xfc>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d00b      	beq.n	800d466 <TIM_OC1_SetConfig+0x76>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a27      	ldr	r2, [pc, #156]	@ (800d4f0 <TIM_OC1_SetConfig+0x100>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d007      	beq.n	800d466 <TIM_OC1_SetConfig+0x76>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a26      	ldr	r2, [pc, #152]	@ (800d4f4 <TIM_OC1_SetConfig+0x104>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d003      	beq.n	800d466 <TIM_OC1_SetConfig+0x76>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a25      	ldr	r2, [pc, #148]	@ (800d4f8 <TIM_OC1_SetConfig+0x108>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d10c      	bne.n	800d480 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2208      	movs	r2, #8
 800d46a:	4393      	bics	r3, r2
 800d46c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	4313      	orrs	r3, r2
 800d476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	2204      	movs	r2, #4
 800d47c:	4393      	bics	r3, r2
 800d47e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a1a      	ldr	r2, [pc, #104]	@ (800d4ec <TIM_OC1_SetConfig+0xfc>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d00b      	beq.n	800d4a0 <TIM_OC1_SetConfig+0xb0>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a19      	ldr	r2, [pc, #100]	@ (800d4f0 <TIM_OC1_SetConfig+0x100>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d007      	beq.n	800d4a0 <TIM_OC1_SetConfig+0xb0>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a18      	ldr	r2, [pc, #96]	@ (800d4f4 <TIM_OC1_SetConfig+0x104>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d003      	beq.n	800d4a0 <TIM_OC1_SetConfig+0xb0>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a17      	ldr	r2, [pc, #92]	@ (800d4f8 <TIM_OC1_SetConfig+0x108>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d111      	bne.n	800d4c4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	4a16      	ldr	r2, [pc, #88]	@ (800d4fc <TIM_OC1_SetConfig+0x10c>)
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	4a15      	ldr	r2, [pc, #84]	@ (800d500 <TIM_OC1_SetConfig+0x110>)
 800d4ac:	4013      	ands	r3, r2
 800d4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	695b      	ldr	r3, [r3, #20]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	699b      	ldr	r3, [r3, #24]
 800d4be:	693a      	ldr	r2, [r7, #16]
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	621a      	str	r2, [r3, #32]
}
 800d4de:	46c0      	nop			@ (mov r8, r8)
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	b006      	add	sp, #24
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	46c0      	nop			@ (mov r8, r8)
 800d4e8:	fffeff8f 	.word	0xfffeff8f
 800d4ec:	40012c00 	.word	0x40012c00
 800d4f0:	40014000 	.word	0x40014000
 800d4f4:	40014400 	.word	0x40014400
 800d4f8:	40014800 	.word	0x40014800
 800d4fc:	fffffeff 	.word	0xfffffeff
 800d500:	fffffdff 	.word	0xfffffdff

0800d504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	2210      	movs	r2, #16
 800d51a:	4393      	bics	r3, r2
 800d51c:	001a      	movs	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	4a2e      	ldr	r2, [pc, #184]	@ (800d5ec <TIM_OC2_SetConfig+0xe8>)
 800d532:	4013      	ands	r3, r2
 800d534:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	4a2d      	ldr	r2, [pc, #180]	@ (800d5f0 <TIM_OC2_SetConfig+0xec>)
 800d53a:	4013      	ands	r3, r2
 800d53c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	021b      	lsls	r3, r3, #8
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	4313      	orrs	r3, r2
 800d548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	2220      	movs	r2, #32
 800d54e:	4393      	bics	r3, r2
 800d550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	011b      	lsls	r3, r3, #4
 800d558:	697a      	ldr	r2, [r7, #20]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a24      	ldr	r2, [pc, #144]	@ (800d5f4 <TIM_OC2_SetConfig+0xf0>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d10d      	bne.n	800d582 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2280      	movs	r2, #128	@ 0x80
 800d56a:	4393      	bics	r3, r2
 800d56c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	011b      	lsls	r3, r3, #4
 800d574:	697a      	ldr	r2, [r7, #20]
 800d576:	4313      	orrs	r3, r2
 800d578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	2240      	movs	r2, #64	@ 0x40
 800d57e:	4393      	bics	r3, r2
 800d580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4a1b      	ldr	r2, [pc, #108]	@ (800d5f4 <TIM_OC2_SetConfig+0xf0>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d00b      	beq.n	800d5a2 <TIM_OC2_SetConfig+0x9e>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4a1a      	ldr	r2, [pc, #104]	@ (800d5f8 <TIM_OC2_SetConfig+0xf4>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d007      	beq.n	800d5a2 <TIM_OC2_SetConfig+0x9e>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a19      	ldr	r2, [pc, #100]	@ (800d5fc <TIM_OC2_SetConfig+0xf8>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d003      	beq.n	800d5a2 <TIM_OC2_SetConfig+0x9e>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a18      	ldr	r2, [pc, #96]	@ (800d600 <TIM_OC2_SetConfig+0xfc>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d113      	bne.n	800d5ca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	4a17      	ldr	r2, [pc, #92]	@ (800d604 <TIM_OC2_SetConfig+0x100>)
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	4a16      	ldr	r2, [pc, #88]	@ (800d608 <TIM_OC2_SetConfig+0x104>)
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	693a      	ldr	r2, [r7, #16]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	693a      	ldr	r2, [r7, #16]
 800d5ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	697a      	ldr	r2, [r7, #20]
 800d5e2:	621a      	str	r2, [r3, #32]
}
 800d5e4:	46c0      	nop			@ (mov r8, r8)
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	b006      	add	sp, #24
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	feff8fff 	.word	0xfeff8fff
 800d5f0:	fffffcff 	.word	0xfffffcff
 800d5f4:	40012c00 	.word	0x40012c00
 800d5f8:	40014000 	.word	0x40014000
 800d5fc:	40014400 	.word	0x40014400
 800d600:	40014800 	.word	0x40014800
 800d604:	fffffbff 	.word	0xfffffbff
 800d608:	fffff7ff 	.word	0xfffff7ff

0800d60c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a1b      	ldr	r3, [r3, #32]
 800d620:	4a33      	ldr	r2, [pc, #204]	@ (800d6f0 <TIM_OC3_SetConfig+0xe4>)
 800d622:	401a      	ands	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	4a2f      	ldr	r2, [pc, #188]	@ (800d6f4 <TIM_OC3_SetConfig+0xe8>)
 800d638:	4013      	ands	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2203      	movs	r2, #3
 800d640:	4393      	bics	r3, r2
 800d642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	4a29      	ldr	r2, [pc, #164]	@ (800d6f8 <TIM_OC3_SetConfig+0xec>)
 800d652:	4013      	ands	r3, r2
 800d654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	021b      	lsls	r3, r3, #8
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	4313      	orrs	r3, r2
 800d660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a25      	ldr	r2, [pc, #148]	@ (800d6fc <TIM_OC3_SetConfig+0xf0>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d10d      	bne.n	800d686 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4a24      	ldr	r2, [pc, #144]	@ (800d700 <TIM_OC3_SetConfig+0xf4>)
 800d66e:	4013      	ands	r3, r2
 800d670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	021b      	lsls	r3, r3, #8
 800d678:	697a      	ldr	r2, [r7, #20]
 800d67a:	4313      	orrs	r3, r2
 800d67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	4a20      	ldr	r2, [pc, #128]	@ (800d704 <TIM_OC3_SetConfig+0xf8>)
 800d682:	4013      	ands	r3, r2
 800d684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a1c      	ldr	r2, [pc, #112]	@ (800d6fc <TIM_OC3_SetConfig+0xf0>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d00b      	beq.n	800d6a6 <TIM_OC3_SetConfig+0x9a>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a1d      	ldr	r2, [pc, #116]	@ (800d708 <TIM_OC3_SetConfig+0xfc>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d007      	beq.n	800d6a6 <TIM_OC3_SetConfig+0x9a>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4a1c      	ldr	r2, [pc, #112]	@ (800d70c <TIM_OC3_SetConfig+0x100>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d003      	beq.n	800d6a6 <TIM_OC3_SetConfig+0x9a>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4a1b      	ldr	r2, [pc, #108]	@ (800d710 <TIM_OC3_SetConfig+0x104>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d113      	bne.n	800d6ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	4a1a      	ldr	r2, [pc, #104]	@ (800d714 <TIM_OC3_SetConfig+0x108>)
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	4a19      	ldr	r2, [pc, #100]	@ (800d718 <TIM_OC3_SetConfig+0x10c>)
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	011b      	lsls	r3, r3, #4
 800d6bc:	693a      	ldr	r2, [r7, #16]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	699b      	ldr	r3, [r3, #24]
 800d6c6:	011b      	lsls	r3, r3, #4
 800d6c8:	693a      	ldr	r2, [r7, #16]
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	68fa      	ldr	r2, [r7, #12]
 800d6d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	685a      	ldr	r2, [r3, #4]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	621a      	str	r2, [r3, #32]
}
 800d6e8:	46c0      	nop			@ (mov r8, r8)
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	b006      	add	sp, #24
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	fffffeff 	.word	0xfffffeff
 800d6f4:	fffeff8f 	.word	0xfffeff8f
 800d6f8:	fffffdff 	.word	0xfffffdff
 800d6fc:	40012c00 	.word	0x40012c00
 800d700:	fffff7ff 	.word	0xfffff7ff
 800d704:	fffffbff 	.word	0xfffffbff
 800d708:	40014000 	.word	0x40014000
 800d70c:	40014400 	.word	0x40014400
 800d710:	40014800 	.word	0x40014800
 800d714:	ffffefff 	.word	0xffffefff
 800d718:	ffffdfff 	.word	0xffffdfff

0800d71c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a1b      	ldr	r3, [r3, #32]
 800d730:	4a26      	ldr	r2, [pc, #152]	@ (800d7cc <TIM_OC4_SetConfig+0xb0>)
 800d732:	401a      	ands	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	69db      	ldr	r3, [r3, #28]
 800d742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	4a22      	ldr	r2, [pc, #136]	@ (800d7d0 <TIM_OC4_SetConfig+0xb4>)
 800d748:	4013      	ands	r3, r2
 800d74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4a21      	ldr	r2, [pc, #132]	@ (800d7d4 <TIM_OC4_SetConfig+0xb8>)
 800d750:	4013      	ands	r3, r2
 800d752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	021b      	lsls	r3, r3, #8
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	4a1d      	ldr	r2, [pc, #116]	@ (800d7d8 <TIM_OC4_SetConfig+0xbc>)
 800d764:	4013      	ands	r3, r2
 800d766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	031b      	lsls	r3, r3, #12
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	4313      	orrs	r3, r2
 800d772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4a19      	ldr	r2, [pc, #100]	@ (800d7dc <TIM_OC4_SetConfig+0xc0>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d00b      	beq.n	800d794 <TIM_OC4_SetConfig+0x78>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4a18      	ldr	r2, [pc, #96]	@ (800d7e0 <TIM_OC4_SetConfig+0xc4>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d007      	beq.n	800d794 <TIM_OC4_SetConfig+0x78>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4a17      	ldr	r2, [pc, #92]	@ (800d7e4 <TIM_OC4_SetConfig+0xc8>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d003      	beq.n	800d794 <TIM_OC4_SetConfig+0x78>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a16      	ldr	r2, [pc, #88]	@ (800d7e8 <TIM_OC4_SetConfig+0xcc>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d109      	bne.n	800d7a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	4a15      	ldr	r2, [pc, #84]	@ (800d7ec <TIM_OC4_SetConfig+0xd0>)
 800d798:	4013      	ands	r3, r2
 800d79a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	019b      	lsls	r3, r3, #6
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	621a      	str	r2, [r3, #32]
}
 800d7c2:	46c0      	nop			@ (mov r8, r8)
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	b006      	add	sp, #24
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	46c0      	nop			@ (mov r8, r8)
 800d7cc:	ffffefff 	.word	0xffffefff
 800d7d0:	feff8fff 	.word	0xfeff8fff
 800d7d4:	fffffcff 	.word	0xfffffcff
 800d7d8:	ffffdfff 	.word	0xffffdfff
 800d7dc:	40012c00 	.word	0x40012c00
 800d7e0:	40014000 	.word	0x40014000
 800d7e4:	40014400 	.word	0x40014400
 800d7e8:	40014800 	.word	0x40014800
 800d7ec:	ffffbfff 	.word	0xffffbfff

0800d7f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a1b      	ldr	r3, [r3, #32]
 800d7fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	4a23      	ldr	r2, [pc, #140]	@ (800d894 <TIM_OC5_SetConfig+0xa4>)
 800d806:	401a      	ands	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	4a1f      	ldr	r2, [pc, #124]	@ (800d898 <TIM_OC5_SetConfig+0xa8>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	4313      	orrs	r3, r2
 800d828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	4a1b      	ldr	r2, [pc, #108]	@ (800d89c <TIM_OC5_SetConfig+0xac>)
 800d82e:	4013      	ands	r3, r2
 800d830:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	041b      	lsls	r3, r3, #16
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a17      	ldr	r2, [pc, #92]	@ (800d8a0 <TIM_OC5_SetConfig+0xb0>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d00b      	beq.n	800d85e <TIM_OC5_SetConfig+0x6e>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a16      	ldr	r2, [pc, #88]	@ (800d8a4 <TIM_OC5_SetConfig+0xb4>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d007      	beq.n	800d85e <TIM_OC5_SetConfig+0x6e>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a15      	ldr	r2, [pc, #84]	@ (800d8a8 <TIM_OC5_SetConfig+0xb8>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d003      	beq.n	800d85e <TIM_OC5_SetConfig+0x6e>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a14      	ldr	r2, [pc, #80]	@ (800d8ac <TIM_OC5_SetConfig+0xbc>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d109      	bne.n	800d872 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	4a0c      	ldr	r2, [pc, #48]	@ (800d894 <TIM_OC5_SetConfig+0xa4>)
 800d862:	4013      	ands	r3, r2
 800d864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	4313      	orrs	r3, r2
 800d870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	621a      	str	r2, [r3, #32]
}
 800d88c:	46c0      	nop			@ (mov r8, r8)
 800d88e:	46bd      	mov	sp, r7
 800d890:	b006      	add	sp, #24
 800d892:	bd80      	pop	{r7, pc}
 800d894:	fffeffff 	.word	0xfffeffff
 800d898:	fffeff8f 	.word	0xfffeff8f
 800d89c:	fffdffff 	.word	0xfffdffff
 800d8a0:	40012c00 	.word	0x40012c00
 800d8a4:	40014000 	.word	0x40014000
 800d8a8:	40014400 	.word	0x40014400
 800d8ac:	40014800 	.word	0x40014800

0800d8b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a1b      	ldr	r3, [r3, #32]
 800d8c4:	4a24      	ldr	r2, [pc, #144]	@ (800d958 <TIM_OC6_SetConfig+0xa8>)
 800d8c6:	401a      	ands	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	4a20      	ldr	r2, [pc, #128]	@ (800d95c <TIM_OC6_SetConfig+0xac>)
 800d8dc:	4013      	ands	r3, r2
 800d8de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	021b      	lsls	r3, r3, #8
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	4a1c      	ldr	r2, [pc, #112]	@ (800d960 <TIM_OC6_SetConfig+0xb0>)
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	051b      	lsls	r3, r3, #20
 800d8fa:	693a      	ldr	r2, [r7, #16]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a18      	ldr	r2, [pc, #96]	@ (800d964 <TIM_OC6_SetConfig+0xb4>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d00b      	beq.n	800d920 <TIM_OC6_SetConfig+0x70>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a17      	ldr	r2, [pc, #92]	@ (800d968 <TIM_OC6_SetConfig+0xb8>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d007      	beq.n	800d920 <TIM_OC6_SetConfig+0x70>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4a16      	ldr	r2, [pc, #88]	@ (800d96c <TIM_OC6_SetConfig+0xbc>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d003      	beq.n	800d920 <TIM_OC6_SetConfig+0x70>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4a15      	ldr	r2, [pc, #84]	@ (800d970 <TIM_OC6_SetConfig+0xc0>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d109      	bne.n	800d934 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4a14      	ldr	r2, [pc, #80]	@ (800d974 <TIM_OC6_SetConfig+0xc4>)
 800d924:	4013      	ands	r3, r2
 800d926:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	029b      	lsls	r3, r3, #10
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	4313      	orrs	r3, r2
 800d932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685a      	ldr	r2, [r3, #4]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	621a      	str	r2, [r3, #32]
}
 800d94e:	46c0      	nop			@ (mov r8, r8)
 800d950:	46bd      	mov	sp, r7
 800d952:	b006      	add	sp, #24
 800d954:	bd80      	pop	{r7, pc}
 800d956:	46c0      	nop			@ (mov r8, r8)
 800d958:	ffefffff 	.word	0xffefffff
 800d95c:	feff8fff 	.word	0xfeff8fff
 800d960:	ffdfffff 	.word	0xffdfffff
 800d964:	40012c00 	.word	0x40012c00
 800d968:	40014000 	.word	0x40014000
 800d96c:	40014400 	.word	0x40014400
 800d970:	40014800 	.word	0x40014800
 800d974:	fffbffff 	.word	0xfffbffff

0800d978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	221f      	movs	r2, #31
 800d988:	4013      	ands	r3, r2
 800d98a:	2201      	movs	r2, #1
 800d98c:	409a      	lsls	r2, r3
 800d98e:	0013      	movs	r3, r2
 800d990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6a1b      	ldr	r3, [r3, #32]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	43d2      	mvns	r2, r2
 800d99a:	401a      	ands	r2, r3
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6a1a      	ldr	r2, [r3, #32]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	211f      	movs	r1, #31
 800d9a8:	400b      	ands	r3, r1
 800d9aa:	6879      	ldr	r1, [r7, #4]
 800d9ac:	4099      	lsls	r1, r3
 800d9ae:	000b      	movs	r3, r1
 800d9b0:	431a      	orrs	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	621a      	str	r2, [r3, #32]
}
 800d9b6:	46c0      	nop			@ (mov r8, r8)
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	b006      	add	sp, #24
 800d9bc:	bd80      	pop	{r7, pc}
	...

0800d9c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	223c      	movs	r2, #60	@ 0x3c
 800d9ce:	5c9b      	ldrb	r3, [r3, r2]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d101      	bne.n	800d9d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	e05a      	b.n	800da8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	223c      	movs	r2, #60	@ 0x3c
 800d9dc:	2101      	movs	r1, #1
 800d9de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	223d      	movs	r2, #61	@ 0x3d
 800d9e4:	2102      	movs	r1, #2
 800d9e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a26      	ldr	r2, [pc, #152]	@ (800da98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d108      	bne.n	800da14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4a25      	ldr	r2, [pc, #148]	@ (800da9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800da06:	4013      	ands	r3, r2
 800da08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	4313      	orrs	r3, r2
 800da12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2270      	movs	r2, #112	@ 0x70
 800da18:	4393      	bics	r3, r2
 800da1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a19      	ldr	r2, [pc, #100]	@ (800da98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d014      	beq.n	800da62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	2380      	movs	r3, #128	@ 0x80
 800da3e:	05db      	lsls	r3, r3, #23
 800da40:	429a      	cmp	r2, r3
 800da42:	d00e      	beq.n	800da62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a15      	ldr	r2, [pc, #84]	@ (800daa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d009      	beq.n	800da62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4a14      	ldr	r2, [pc, #80]	@ (800daa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d004      	beq.n	800da62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a12      	ldr	r2, [pc, #72]	@ (800daa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d10c      	bne.n	800da7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2280      	movs	r2, #128	@ 0x80
 800da66:	4393      	bics	r3, r2
 800da68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	4313      	orrs	r3, r2
 800da72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	223d      	movs	r2, #61	@ 0x3d
 800da80:	2101      	movs	r1, #1
 800da82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	223c      	movs	r2, #60	@ 0x3c
 800da88:	2100      	movs	r1, #0
 800da8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	0018      	movs	r0, r3
 800da90:	46bd      	mov	sp, r7
 800da92:	b004      	add	sp, #16
 800da94:	bd80      	pop	{r7, pc}
 800da96:	46c0      	nop			@ (mov r8, r8)
 800da98:	40012c00 	.word	0x40012c00
 800da9c:	ff0fffff 	.word	0xff0fffff
 800daa0:	40000400 	.word	0x40000400
 800daa4:	40000800 	.word	0x40000800
 800daa8:	40014000 	.word	0x40014000

0800daac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dab4:	46c0      	nop			@ (mov r8, r8)
 800dab6:	46bd      	mov	sp, r7
 800dab8:	b002      	add	sp, #8
 800daba:	bd80      	pop	{r7, pc}

0800dabc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dac4:	46c0      	nop			@ (mov r8, r8)
 800dac6:	46bd      	mov	sp, r7
 800dac8:	b002      	add	sp, #8
 800daca:	bd80      	pop	{r7, pc}

0800dacc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dad4:	46c0      	nop			@ (mov r8, r8)
 800dad6:	46bd      	mov	sp, r7
 800dad8:	b002      	add	sp, #8
 800dada:	bd80      	pop	{r7, pc}

0800dadc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e046      	b.n	800db7c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2288      	movs	r2, #136	@ 0x88
 800daf2:	589b      	ldr	r3, [r3, r2]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d107      	bne.n	800db08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2284      	movs	r2, #132	@ 0x84
 800dafc:	2100      	movs	r1, #0
 800dafe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	0018      	movs	r0, r3
 800db04:	f7f9 fc18 	bl	8007338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2288      	movs	r2, #136	@ 0x88
 800db0c:	2124      	movs	r1, #36	@ 0x24
 800db0e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2101      	movs	r1, #1
 800db1c:	438a      	bics	r2, r1
 800db1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db24:	2b00      	cmp	r3, #0
 800db26:	d003      	beq.n	800db30 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	0018      	movs	r0, r3
 800db2c:	f000 fec4 	bl	800e8b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	0018      	movs	r0, r3
 800db34:	f000 fb6a 	bl	800e20c <UART_SetConfig>
 800db38:	0003      	movs	r3, r0
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d101      	bne.n	800db42 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800db3e:	2301      	movs	r3, #1
 800db40:	e01c      	b.n	800db7c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	490d      	ldr	r1, [pc, #52]	@ (800db84 <HAL_UART_Init+0xa8>)
 800db4e:	400a      	ands	r2, r1
 800db50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	689a      	ldr	r2, [r3, #8]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	212a      	movs	r1, #42	@ 0x2a
 800db5e:	438a      	bics	r2, r1
 800db60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2101      	movs	r1, #1
 800db6e:	430a      	orrs	r2, r1
 800db70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	0018      	movs	r0, r3
 800db76:	f000 ff53 	bl	800ea20 <UART_CheckIdleState>
 800db7a:	0003      	movs	r3, r0
}
 800db7c:	0018      	movs	r0, r3
 800db7e:	46bd      	mov	sp, r7
 800db80:	b002      	add	sp, #8
 800db82:	bd80      	pop	{r7, pc}
 800db84:	ffffb7ff 	.word	0xffffb7ff

0800db88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db88:	b5b0      	push	{r4, r5, r7, lr}
 800db8a:	b0aa      	sub	sp, #168	@ 0xa8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	22a4      	movs	r2, #164	@ 0xa4
 800db98:	18b9      	adds	r1, r7, r2
 800db9a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	20a0      	movs	r0, #160	@ 0xa0
 800dba4:	1839      	adds	r1, r7, r0
 800dba6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	249c      	movs	r4, #156	@ 0x9c
 800dbb0:	1939      	adds	r1, r7, r4
 800dbb2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dbb4:	0011      	movs	r1, r2
 800dbb6:	18bb      	adds	r3, r7, r2
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4aa2      	ldr	r2, [pc, #648]	@ (800de44 <HAL_UART_IRQHandler+0x2bc>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	2298      	movs	r2, #152	@ 0x98
 800dbc0:	18bd      	adds	r5, r7, r2
 800dbc2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800dbc4:	18bb      	adds	r3, r7, r2
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d11a      	bne.n	800dc02 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dbcc:	187b      	adds	r3, r7, r1
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2220      	movs	r2, #32
 800dbd2:	4013      	ands	r3, r2
 800dbd4:	d015      	beq.n	800dc02 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dbd6:	183b      	adds	r3, r7, r0
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2220      	movs	r2, #32
 800dbdc:	4013      	ands	r3, r2
 800dbde:	d105      	bne.n	800dbec <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dbe0:	193b      	adds	r3, r7, r4
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	2380      	movs	r3, #128	@ 0x80
 800dbe6:	055b      	lsls	r3, r3, #21
 800dbe8:	4013      	ands	r3, r2
 800dbea:	d00a      	beq.n	800dc02 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d100      	bne.n	800dbf6 <HAL_UART_IRQHandler+0x6e>
 800dbf4:	e2dc      	b.n	800e1b0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	0010      	movs	r0, r2
 800dbfe:	4798      	blx	r3
      }
      return;
 800dc00:	e2d6      	b.n	800e1b0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dc02:	2398      	movs	r3, #152	@ 0x98
 800dc04:	18fb      	adds	r3, r7, r3
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d100      	bne.n	800dc0e <HAL_UART_IRQHandler+0x86>
 800dc0c:	e122      	b.n	800de54 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dc0e:	239c      	movs	r3, #156	@ 0x9c
 800dc10:	18fb      	adds	r3, r7, r3
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a8c      	ldr	r2, [pc, #560]	@ (800de48 <HAL_UART_IRQHandler+0x2c0>)
 800dc16:	4013      	ands	r3, r2
 800dc18:	d106      	bne.n	800dc28 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dc1a:	23a0      	movs	r3, #160	@ 0xa0
 800dc1c:	18fb      	adds	r3, r7, r3
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a8a      	ldr	r2, [pc, #552]	@ (800de4c <HAL_UART_IRQHandler+0x2c4>)
 800dc22:	4013      	ands	r3, r2
 800dc24:	d100      	bne.n	800dc28 <HAL_UART_IRQHandler+0xa0>
 800dc26:	e115      	b.n	800de54 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc28:	23a4      	movs	r3, #164	@ 0xa4
 800dc2a:	18fb      	adds	r3, r7, r3
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	4013      	ands	r3, r2
 800dc32:	d012      	beq.n	800dc5a <HAL_UART_IRQHandler+0xd2>
 800dc34:	23a0      	movs	r3, #160	@ 0xa0
 800dc36:	18fb      	adds	r3, r7, r3
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	2380      	movs	r3, #128	@ 0x80
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	4013      	ands	r3, r2
 800dc40:	d00b      	beq.n	800dc5a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2201      	movs	r2, #1
 800dc48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2290      	movs	r2, #144	@ 0x90
 800dc4e:	589b      	ldr	r3, [r3, r2]
 800dc50:	2201      	movs	r2, #1
 800dc52:	431a      	orrs	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2190      	movs	r1, #144	@ 0x90
 800dc58:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc5a:	23a4      	movs	r3, #164	@ 0xa4
 800dc5c:	18fb      	adds	r3, r7, r3
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2202      	movs	r2, #2
 800dc62:	4013      	ands	r3, r2
 800dc64:	d011      	beq.n	800dc8a <HAL_UART_IRQHandler+0x102>
 800dc66:	239c      	movs	r3, #156	@ 0x9c
 800dc68:	18fb      	adds	r3, r7, r3
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	4013      	ands	r3, r2
 800dc70:	d00b      	beq.n	800dc8a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2202      	movs	r2, #2
 800dc78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2290      	movs	r2, #144	@ 0x90
 800dc7e:	589b      	ldr	r3, [r3, r2]
 800dc80:	2204      	movs	r2, #4
 800dc82:	431a      	orrs	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2190      	movs	r1, #144	@ 0x90
 800dc88:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc8a:	23a4      	movs	r3, #164	@ 0xa4
 800dc8c:	18fb      	adds	r3, r7, r3
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2204      	movs	r2, #4
 800dc92:	4013      	ands	r3, r2
 800dc94:	d011      	beq.n	800dcba <HAL_UART_IRQHandler+0x132>
 800dc96:	239c      	movs	r3, #156	@ 0x9c
 800dc98:	18fb      	adds	r3, r7, r3
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	4013      	ands	r3, r2
 800dca0:	d00b      	beq.n	800dcba <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2204      	movs	r2, #4
 800dca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2290      	movs	r2, #144	@ 0x90
 800dcae:	589b      	ldr	r3, [r3, r2]
 800dcb0:	2202      	movs	r2, #2
 800dcb2:	431a      	orrs	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2190      	movs	r1, #144	@ 0x90
 800dcb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dcba:	23a4      	movs	r3, #164	@ 0xa4
 800dcbc:	18fb      	adds	r3, r7, r3
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2208      	movs	r2, #8
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	d017      	beq.n	800dcf6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcc6:	23a0      	movs	r3, #160	@ 0xa0
 800dcc8:	18fb      	adds	r3, r7, r3
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2220      	movs	r2, #32
 800dcce:	4013      	ands	r3, r2
 800dcd0:	d105      	bne.n	800dcde <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dcd2:	239c      	movs	r3, #156	@ 0x9c
 800dcd4:	18fb      	adds	r3, r7, r3
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4a5b      	ldr	r2, [pc, #364]	@ (800de48 <HAL_UART_IRQHandler+0x2c0>)
 800dcda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dcdc:	d00b      	beq.n	800dcf6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2208      	movs	r2, #8
 800dce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2290      	movs	r2, #144	@ 0x90
 800dcea:	589b      	ldr	r3, [r3, r2]
 800dcec:	2208      	movs	r2, #8
 800dcee:	431a      	orrs	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2190      	movs	r1, #144	@ 0x90
 800dcf4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dcf6:	23a4      	movs	r3, #164	@ 0xa4
 800dcf8:	18fb      	adds	r3, r7, r3
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	2380      	movs	r3, #128	@ 0x80
 800dcfe:	011b      	lsls	r3, r3, #4
 800dd00:	4013      	ands	r3, r2
 800dd02:	d013      	beq.n	800dd2c <HAL_UART_IRQHandler+0x1a4>
 800dd04:	23a0      	movs	r3, #160	@ 0xa0
 800dd06:	18fb      	adds	r3, r7, r3
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	2380      	movs	r3, #128	@ 0x80
 800dd0c:	04db      	lsls	r3, r3, #19
 800dd0e:	4013      	ands	r3, r2
 800dd10:	d00c      	beq.n	800dd2c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2280      	movs	r2, #128	@ 0x80
 800dd18:	0112      	lsls	r2, r2, #4
 800dd1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2290      	movs	r2, #144	@ 0x90
 800dd20:	589b      	ldr	r3, [r3, r2]
 800dd22:	2220      	movs	r2, #32
 800dd24:	431a      	orrs	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2190      	movs	r1, #144	@ 0x90
 800dd2a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2290      	movs	r2, #144	@ 0x90
 800dd30:	589b      	ldr	r3, [r3, r2]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d100      	bne.n	800dd38 <HAL_UART_IRQHandler+0x1b0>
 800dd36:	e23d      	b.n	800e1b4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd38:	23a4      	movs	r3, #164	@ 0xa4
 800dd3a:	18fb      	adds	r3, r7, r3
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2220      	movs	r2, #32
 800dd40:	4013      	ands	r3, r2
 800dd42:	d015      	beq.n	800dd70 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd44:	23a0      	movs	r3, #160	@ 0xa0
 800dd46:	18fb      	adds	r3, r7, r3
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2220      	movs	r2, #32
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	d106      	bne.n	800dd5e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd50:	239c      	movs	r3, #156	@ 0x9c
 800dd52:	18fb      	adds	r3, r7, r3
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	2380      	movs	r3, #128	@ 0x80
 800dd58:	055b      	lsls	r3, r3, #21
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	d008      	beq.n	800dd70 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d004      	beq.n	800dd70 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	0010      	movs	r0, r2
 800dd6e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2290      	movs	r2, #144	@ 0x90
 800dd74:	589b      	ldr	r3, [r3, r2]
 800dd76:	2194      	movs	r1, #148	@ 0x94
 800dd78:	187a      	adds	r2, r7, r1
 800dd7a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	2240      	movs	r2, #64	@ 0x40
 800dd84:	4013      	ands	r3, r2
 800dd86:	2b40      	cmp	r3, #64	@ 0x40
 800dd88:	d004      	beq.n	800dd94 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dd8a:	187b      	adds	r3, r7, r1
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2228      	movs	r2, #40	@ 0x28
 800dd90:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dd92:	d04c      	beq.n	800de2e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	0018      	movs	r0, r3
 800dd98:	f000 ff5c 	bl	800ec54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	2240      	movs	r2, #64	@ 0x40
 800dda4:	4013      	ands	r3, r2
 800dda6:	2b40      	cmp	r3, #64	@ 0x40
 800dda8:	d13c      	bne.n	800de24 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ddae:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800ddb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddb2:	2090      	movs	r0, #144	@ 0x90
 800ddb4:	183a      	adds	r2, r7, r0
 800ddb6:	6013      	str	r3, [r2, #0]
 800ddb8:	2301      	movs	r3, #1
 800ddba:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ddbe:	f383 8810 	msr	PRIMASK, r3
}
 800ddc2:	46c0      	nop			@ (mov r8, r8)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	689a      	ldr	r2, [r3, #8]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2140      	movs	r1, #64	@ 0x40
 800ddd0:	438a      	bics	r2, r1
 800ddd2:	609a      	str	r2, [r3, #8]
 800ddd4:	183b      	adds	r3, r7, r0
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dddc:	f383 8810 	msr	PRIMASK, r3
}
 800dde0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2280      	movs	r2, #128	@ 0x80
 800dde6:	589b      	ldr	r3, [r3, r2]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d016      	beq.n	800de1a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2280      	movs	r2, #128	@ 0x80
 800ddf0:	589b      	ldr	r3, [r3, r2]
 800ddf2:	4a17      	ldr	r2, [pc, #92]	@ (800de50 <HAL_UART_IRQHandler+0x2c8>)
 800ddf4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2280      	movs	r2, #128	@ 0x80
 800ddfa:	589b      	ldr	r3, [r3, r2]
 800ddfc:	0018      	movs	r0, r3
 800ddfe:	f7fa ffab 	bl	8008d58 <HAL_DMA_Abort_IT>
 800de02:	1e03      	subs	r3, r0, #0
 800de04:	d01c      	beq.n	800de40 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2280      	movs	r2, #128	@ 0x80
 800de0a:	589b      	ldr	r3, [r3, r2]
 800de0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	2180      	movs	r1, #128	@ 0x80
 800de12:	5852      	ldr	r2, [r2, r1]
 800de14:	0010      	movs	r0, r2
 800de16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de18:	e012      	b.n	800de40 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	0018      	movs	r0, r3
 800de1e:	f000 f9e1 	bl	800e1e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de22:	e00d      	b.n	800de40 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	0018      	movs	r0, r3
 800de28:	f000 f9dc 	bl	800e1e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de2c:	e008      	b.n	800de40 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	0018      	movs	r0, r3
 800de32:	f000 f9d7 	bl	800e1e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2290      	movs	r2, #144	@ 0x90
 800de3a:	2100      	movs	r1, #0
 800de3c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800de3e:	e1b9      	b.n	800e1b4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de40:	46c0      	nop			@ (mov r8, r8)
    return;
 800de42:	e1b7      	b.n	800e1b4 <HAL_UART_IRQHandler+0x62c>
 800de44:	0000080f 	.word	0x0000080f
 800de48:	10000001 	.word	0x10000001
 800de4c:	04000120 	.word	0x04000120
 800de50:	0800ed21 	.word	0x0800ed21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d000      	beq.n	800de5e <HAL_UART_IRQHandler+0x2d6>
 800de5c:	e13e      	b.n	800e0dc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800de5e:	23a4      	movs	r3, #164	@ 0xa4
 800de60:	18fb      	adds	r3, r7, r3
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2210      	movs	r2, #16
 800de66:	4013      	ands	r3, r2
 800de68:	d100      	bne.n	800de6c <HAL_UART_IRQHandler+0x2e4>
 800de6a:	e137      	b.n	800e0dc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800de6c:	23a0      	movs	r3, #160	@ 0xa0
 800de6e:	18fb      	adds	r3, r7, r3
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2210      	movs	r2, #16
 800de74:	4013      	ands	r3, r2
 800de76:	d100      	bne.n	800de7a <HAL_UART_IRQHandler+0x2f2>
 800de78:	e130      	b.n	800e0dc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2210      	movs	r2, #16
 800de80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	2240      	movs	r2, #64	@ 0x40
 800de8a:	4013      	ands	r3, r2
 800de8c:	2b40      	cmp	r3, #64	@ 0x40
 800de8e:	d000      	beq.n	800de92 <HAL_UART_IRQHandler+0x30a>
 800de90:	e0a4      	b.n	800dfdc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2280      	movs	r2, #128	@ 0x80
 800de96:	589b      	ldr	r3, [r3, r2]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	217e      	movs	r1, #126	@ 0x7e
 800de9e:	187b      	adds	r3, r7, r1
 800dea0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800dea2:	187b      	adds	r3, r7, r1
 800dea4:	881b      	ldrh	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d100      	bne.n	800deac <HAL_UART_IRQHandler+0x324>
 800deaa:	e185      	b.n	800e1b8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	225c      	movs	r2, #92	@ 0x5c
 800deb0:	5a9b      	ldrh	r3, [r3, r2]
 800deb2:	187a      	adds	r2, r7, r1
 800deb4:	8812      	ldrh	r2, [r2, #0]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d300      	bcc.n	800debc <HAL_UART_IRQHandler+0x334>
 800deba:	e17d      	b.n	800e1b8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	187a      	adds	r2, r7, r1
 800dec0:	215e      	movs	r1, #94	@ 0x5e
 800dec2:	8812      	ldrh	r2, [r2, #0]
 800dec4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2280      	movs	r2, #128	@ 0x80
 800deca:	589b      	ldr	r3, [r3, r2]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2220      	movs	r2, #32
 800ded2:	4013      	ands	r3, r2
 800ded4:	d170      	bne.n	800dfb8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ded6:	f3ef 8310 	mrs	r3, PRIMASK
 800deda:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800dedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dede:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dee0:	2301      	movs	r3, #1
 800dee2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dee6:	f383 8810 	msr	PRIMASK, r3
}
 800deea:	46c0      	nop			@ (mov r8, r8)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	49b4      	ldr	r1, [pc, #720]	@ (800e1c8 <HAL_UART_IRQHandler+0x640>)
 800def8:	400a      	ands	r2, r1
 800defa:	601a      	str	r2, [r3, #0]
 800defc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800defe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df02:	f383 8810 	msr	PRIMASK, r3
}
 800df06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df08:	f3ef 8310 	mrs	r3, PRIMASK
 800df0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800df0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df10:	677b      	str	r3, [r7, #116]	@ 0x74
 800df12:	2301      	movs	r3, #1
 800df14:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df18:	f383 8810 	msr	PRIMASK, r3
}
 800df1c:	46c0      	nop			@ (mov r8, r8)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	689a      	ldr	r2, [r3, #8]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2101      	movs	r1, #1
 800df2a:	438a      	bics	r2, r1
 800df2c:	609a      	str	r2, [r3, #8]
 800df2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800df30:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df34:	f383 8810 	msr	PRIMASK, r3
}
 800df38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df3a:	f3ef 8310 	mrs	r3, PRIMASK
 800df3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800df40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df42:	673b      	str	r3, [r7, #112]	@ 0x70
 800df44:	2301      	movs	r3, #1
 800df46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df4a:	f383 8810 	msr	PRIMASK, r3
}
 800df4e:	46c0      	nop			@ (mov r8, r8)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	689a      	ldr	r2, [r3, #8]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2140      	movs	r1, #64	@ 0x40
 800df5c:	438a      	bics	r2, r1
 800df5e:	609a      	str	r2, [r3, #8]
 800df60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800df62:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df66:	f383 8810 	msr	PRIMASK, r3
}
 800df6a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	228c      	movs	r2, #140	@ 0x8c
 800df70:	2120      	movs	r1, #32
 800df72:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df7a:	f3ef 8310 	mrs	r3, PRIMASK
 800df7e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800df80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800df84:	2301      	movs	r3, #1
 800df86:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df8a:	f383 8810 	msr	PRIMASK, r3
}
 800df8e:	46c0      	nop			@ (mov r8, r8)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2110      	movs	r1, #16
 800df9c:	438a      	bics	r2, r1
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfa6:	f383 8810 	msr	PRIMASK, r3
}
 800dfaa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2280      	movs	r2, #128	@ 0x80
 800dfb0:	589b      	ldr	r3, [r3, r2]
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	f7fa fe70 	bl	8008c98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2202      	movs	r2, #2
 800dfbc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	225c      	movs	r2, #92	@ 0x5c
 800dfc2:	5a9a      	ldrh	r2, [r3, r2]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	215e      	movs	r1, #94	@ 0x5e
 800dfc8:	5a5b      	ldrh	r3, [r3, r1]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	0011      	movs	r1, r2
 800dfd4:	0018      	movs	r0, r3
 800dfd6:	f000 f90d 	bl	800e1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfda:	e0ed      	b.n	800e1b8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	225c      	movs	r2, #92	@ 0x5c
 800dfe0:	5a99      	ldrh	r1, [r3, r2]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	225e      	movs	r2, #94	@ 0x5e
 800dfe6:	5a9b      	ldrh	r3, [r3, r2]
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	208e      	movs	r0, #142	@ 0x8e
 800dfec:	183b      	adds	r3, r7, r0
 800dfee:	1a8a      	subs	r2, r1, r2
 800dff0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	225e      	movs	r2, #94	@ 0x5e
 800dff6:	5a9b      	ldrh	r3, [r3, r2]
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d100      	bne.n	800e000 <HAL_UART_IRQHandler+0x478>
 800dffe:	e0dd      	b.n	800e1bc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800e000:	183b      	adds	r3, r7, r0
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d100      	bne.n	800e00a <HAL_UART_IRQHandler+0x482>
 800e008:	e0d8      	b.n	800e1bc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e00a:	f3ef 8310 	mrs	r3, PRIMASK
 800e00e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e010:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e012:	2488      	movs	r4, #136	@ 0x88
 800e014:	193a      	adds	r2, r7, r4
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	2301      	movs	r3, #1
 800e01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	f383 8810 	msr	PRIMASK, r3
}
 800e022:	46c0      	nop			@ (mov r8, r8)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4967      	ldr	r1, [pc, #412]	@ (800e1cc <HAL_UART_IRQHandler+0x644>)
 800e030:	400a      	ands	r2, r1
 800e032:	601a      	str	r2, [r3, #0]
 800e034:	193b      	adds	r3, r7, r4
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	f383 8810 	msr	PRIMASK, r3
}
 800e040:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e042:	f3ef 8310 	mrs	r3, PRIMASK
 800e046:	61bb      	str	r3, [r7, #24]
  return(result);
 800e048:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e04a:	2484      	movs	r4, #132	@ 0x84
 800e04c:	193a      	adds	r2, r7, r4
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	2301      	movs	r3, #1
 800e052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	f383 8810 	msr	PRIMASK, r3
}
 800e05a:	46c0      	nop			@ (mov r8, r8)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689a      	ldr	r2, [r3, #8]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	495a      	ldr	r1, [pc, #360]	@ (800e1d0 <HAL_UART_IRQHandler+0x648>)
 800e068:	400a      	ands	r2, r1
 800e06a:	609a      	str	r2, [r3, #8]
 800e06c:	193b      	adds	r3, r7, r4
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e072:	6a3b      	ldr	r3, [r7, #32]
 800e074:	f383 8810 	msr	PRIMASK, r3
}
 800e078:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	228c      	movs	r2, #140	@ 0x8c
 800e07e:	2120      	movs	r1, #32
 800e080:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e08e:	f3ef 8310 	mrs	r3, PRIMASK
 800e092:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e096:	2480      	movs	r4, #128	@ 0x80
 800e098:	193a      	adds	r2, r7, r4
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	2301      	movs	r3, #1
 800e09e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a2:	f383 8810 	msr	PRIMASK, r3
}
 800e0a6:	46c0      	nop			@ (mov r8, r8)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2110      	movs	r1, #16
 800e0b4:	438a      	bics	r2, r1
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	193b      	adds	r3, r7, r4
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	f383 8810 	msr	PRIMASK, r3
}
 800e0c4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2202      	movs	r2, #2
 800e0ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e0cc:	183b      	adds	r3, r7, r0
 800e0ce:	881a      	ldrh	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	0011      	movs	r1, r2
 800e0d4:	0018      	movs	r0, r3
 800e0d6:	f000 f88d 	bl	800e1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0da:	e06f      	b.n	800e1bc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e0dc:	23a4      	movs	r3, #164	@ 0xa4
 800e0de:	18fb      	adds	r3, r7, r3
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	2380      	movs	r3, #128	@ 0x80
 800e0e4:	035b      	lsls	r3, r3, #13
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	d010      	beq.n	800e10c <HAL_UART_IRQHandler+0x584>
 800e0ea:	239c      	movs	r3, #156	@ 0x9c
 800e0ec:	18fb      	adds	r3, r7, r3
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	2380      	movs	r3, #128	@ 0x80
 800e0f2:	03db      	lsls	r3, r3, #15
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	d009      	beq.n	800e10c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2280      	movs	r2, #128	@ 0x80
 800e0fe:	0352      	lsls	r2, r2, #13
 800e100:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	0018      	movs	r0, r3
 800e106:	f000 fe4e 	bl	800eda6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e10a:	e05a      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e10c:	23a4      	movs	r3, #164	@ 0xa4
 800e10e:	18fb      	adds	r3, r7, r3
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2280      	movs	r2, #128	@ 0x80
 800e114:	4013      	ands	r3, r2
 800e116:	d016      	beq.n	800e146 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e118:	23a0      	movs	r3, #160	@ 0xa0
 800e11a:	18fb      	adds	r3, r7, r3
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2280      	movs	r2, #128	@ 0x80
 800e120:	4013      	ands	r3, r2
 800e122:	d106      	bne.n	800e132 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e124:	239c      	movs	r3, #156	@ 0x9c
 800e126:	18fb      	adds	r3, r7, r3
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	2380      	movs	r3, #128	@ 0x80
 800e12c:	041b      	lsls	r3, r3, #16
 800e12e:	4013      	ands	r3, r2
 800e130:	d009      	beq.n	800e146 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e136:	2b00      	cmp	r3, #0
 800e138:	d042      	beq.n	800e1c0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	0010      	movs	r0, r2
 800e142:	4798      	blx	r3
    }
    return;
 800e144:	e03c      	b.n	800e1c0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e146:	23a4      	movs	r3, #164	@ 0xa4
 800e148:	18fb      	adds	r3, r7, r3
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2240      	movs	r2, #64	@ 0x40
 800e14e:	4013      	ands	r3, r2
 800e150:	d00a      	beq.n	800e168 <HAL_UART_IRQHandler+0x5e0>
 800e152:	23a0      	movs	r3, #160	@ 0xa0
 800e154:	18fb      	adds	r3, r7, r3
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2240      	movs	r2, #64	@ 0x40
 800e15a:	4013      	ands	r3, r2
 800e15c:	d004      	beq.n	800e168 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	0018      	movs	r0, r3
 800e162:	f000 fdf4 	bl	800ed4e <UART_EndTransmit_IT>
    return;
 800e166:	e02c      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e168:	23a4      	movs	r3, #164	@ 0xa4
 800e16a:	18fb      	adds	r3, r7, r3
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	2380      	movs	r3, #128	@ 0x80
 800e170:	041b      	lsls	r3, r3, #16
 800e172:	4013      	ands	r3, r2
 800e174:	d00b      	beq.n	800e18e <HAL_UART_IRQHandler+0x606>
 800e176:	23a0      	movs	r3, #160	@ 0xa0
 800e178:	18fb      	adds	r3, r7, r3
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	2380      	movs	r3, #128	@ 0x80
 800e17e:	05db      	lsls	r3, r3, #23
 800e180:	4013      	ands	r3, r2
 800e182:	d004      	beq.n	800e18e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	0018      	movs	r0, r3
 800e188:	f000 fe1d 	bl	800edc6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e18c:	e019      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e18e:	23a4      	movs	r3, #164	@ 0xa4
 800e190:	18fb      	adds	r3, r7, r3
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	2380      	movs	r3, #128	@ 0x80
 800e196:	045b      	lsls	r3, r3, #17
 800e198:	4013      	ands	r3, r2
 800e19a:	d012      	beq.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
 800e19c:	23a0      	movs	r3, #160	@ 0xa0
 800e19e:	18fb      	adds	r3, r7, r3
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	da0d      	bge.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	0018      	movs	r0, r3
 800e1aa:	f000 fe04 	bl	800edb6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1ae:	e008      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
      return;
 800e1b0:	46c0      	nop			@ (mov r8, r8)
 800e1b2:	e006      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
    return;
 800e1b4:	46c0      	nop			@ (mov r8, r8)
 800e1b6:	e004      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
      return;
 800e1b8:	46c0      	nop			@ (mov r8, r8)
 800e1ba:	e002      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
      return;
 800e1bc:	46c0      	nop			@ (mov r8, r8)
 800e1be:	e000      	b.n	800e1c2 <HAL_UART_IRQHandler+0x63a>
    return;
 800e1c0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	b02a      	add	sp, #168	@ 0xa8
 800e1c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e1c8:	fffffeff 	.word	0xfffffeff
 800e1cc:	fffffedf 	.word	0xfffffedf
 800e1d0:	effffffe 	.word	0xeffffffe

0800e1d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e1dc:	46c0      	nop			@ (mov r8, r8)
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	b002      	add	sp, #8
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e1ec:	46c0      	nop			@ (mov r8, r8)
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	b002      	add	sp, #8
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	000a      	movs	r2, r1
 800e1fe:	1cbb      	adds	r3, r7, #2
 800e200:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e202:	46c0      	nop			@ (mov r8, r8)
 800e204:	46bd      	mov	sp, r7
 800e206:	b002      	add	sp, #8
 800e208:	bd80      	pop	{r7, pc}
	...

0800e20c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e20c:	b5b0      	push	{r4, r5, r7, lr}
 800e20e:	b090      	sub	sp, #64	@ 0x40
 800e210:	af00      	add	r7, sp, #0
 800e212:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e214:	231a      	movs	r3, #26
 800e216:	2220      	movs	r2, #32
 800e218:	189b      	adds	r3, r3, r2
 800e21a:	19db      	adds	r3, r3, r7
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e222:	689a      	ldr	r2, [r3, #8]
 800e224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e226:	691b      	ldr	r3, [r3, #16]
 800e228:	431a      	orrs	r2, r3
 800e22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	431a      	orrs	r2, r3
 800e230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e232:	69db      	ldr	r3, [r3, #28]
 800e234:	4313      	orrs	r3, r2
 800e236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4ac1      	ldr	r2, [pc, #772]	@ (800e544 <UART_SetConfig+0x338>)
 800e240:	4013      	ands	r3, r2
 800e242:	0019      	movs	r1, r3
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e24a:	430b      	orrs	r3, r1
 800e24c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	4abc      	ldr	r2, [pc, #752]	@ (800e548 <UART_SetConfig+0x33c>)
 800e256:	4013      	ands	r3, r2
 800e258:	0018      	movs	r0, r3
 800e25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25c:	68d9      	ldr	r1, [r3, #12]
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	0003      	movs	r3, r0
 800e264:	430b      	orrs	r3, r1
 800e266:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4ab6      	ldr	r2, [pc, #728]	@ (800e54c <UART_SetConfig+0x340>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d009      	beq.n	800e28c <UART_SetConfig+0x80>
 800e278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4ab4      	ldr	r2, [pc, #720]	@ (800e550 <UART_SetConfig+0x344>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d004      	beq.n	800e28c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e284:	6a1b      	ldr	r3, [r3, #32]
 800e286:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e288:	4313      	orrs	r3, r2
 800e28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	4ab0      	ldr	r2, [pc, #704]	@ (800e554 <UART_SetConfig+0x348>)
 800e294:	4013      	ands	r3, r2
 800e296:	0019      	movs	r1, r3
 800e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e29e:	430b      	orrs	r3, r1
 800e2a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a8:	220f      	movs	r2, #15
 800e2aa:	4393      	bics	r3, r2
 800e2ac:	0018      	movs	r0, r3
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	0003      	movs	r3, r0
 800e2b8:	430b      	orrs	r3, r1
 800e2ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4aa5      	ldr	r2, [pc, #660]	@ (800e558 <UART_SetConfig+0x34c>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d131      	bne.n	800e32a <UART_SetConfig+0x11e>
 800e2c6:	4ba5      	ldr	r3, [pc, #660]	@ (800e55c <UART_SetConfig+0x350>)
 800e2c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ca:	2203      	movs	r2, #3
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d01d      	beq.n	800e30e <UART_SetConfig+0x102>
 800e2d2:	d823      	bhi.n	800e31c <UART_SetConfig+0x110>
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d00c      	beq.n	800e2f2 <UART_SetConfig+0xe6>
 800e2d8:	d820      	bhi.n	800e31c <UART_SetConfig+0x110>
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d002      	beq.n	800e2e4 <UART_SetConfig+0xd8>
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d00e      	beq.n	800e300 <UART_SetConfig+0xf4>
 800e2e2:	e01b      	b.n	800e31c <UART_SetConfig+0x110>
 800e2e4:	231b      	movs	r3, #27
 800e2e6:	2220      	movs	r2, #32
 800e2e8:	189b      	adds	r3, r3, r2
 800e2ea:	19db      	adds	r3, r3, r7
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	701a      	strb	r2, [r3, #0]
 800e2f0:	e154      	b.n	800e59c <UART_SetConfig+0x390>
 800e2f2:	231b      	movs	r3, #27
 800e2f4:	2220      	movs	r2, #32
 800e2f6:	189b      	adds	r3, r3, r2
 800e2f8:	19db      	adds	r3, r3, r7
 800e2fa:	2202      	movs	r2, #2
 800e2fc:	701a      	strb	r2, [r3, #0]
 800e2fe:	e14d      	b.n	800e59c <UART_SetConfig+0x390>
 800e300:	231b      	movs	r3, #27
 800e302:	2220      	movs	r2, #32
 800e304:	189b      	adds	r3, r3, r2
 800e306:	19db      	adds	r3, r3, r7
 800e308:	2204      	movs	r2, #4
 800e30a:	701a      	strb	r2, [r3, #0]
 800e30c:	e146      	b.n	800e59c <UART_SetConfig+0x390>
 800e30e:	231b      	movs	r3, #27
 800e310:	2220      	movs	r2, #32
 800e312:	189b      	adds	r3, r3, r2
 800e314:	19db      	adds	r3, r3, r7
 800e316:	2208      	movs	r2, #8
 800e318:	701a      	strb	r2, [r3, #0]
 800e31a:	e13f      	b.n	800e59c <UART_SetConfig+0x390>
 800e31c:	231b      	movs	r3, #27
 800e31e:	2220      	movs	r2, #32
 800e320:	189b      	adds	r3, r3, r2
 800e322:	19db      	adds	r3, r3, r7
 800e324:	2210      	movs	r2, #16
 800e326:	701a      	strb	r2, [r3, #0]
 800e328:	e138      	b.n	800e59c <UART_SetConfig+0x390>
 800e32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a8c      	ldr	r2, [pc, #560]	@ (800e560 <UART_SetConfig+0x354>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d131      	bne.n	800e398 <UART_SetConfig+0x18c>
 800e334:	4b89      	ldr	r3, [pc, #548]	@ (800e55c <UART_SetConfig+0x350>)
 800e336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e338:	220c      	movs	r2, #12
 800e33a:	4013      	ands	r3, r2
 800e33c:	2b0c      	cmp	r3, #12
 800e33e:	d01d      	beq.n	800e37c <UART_SetConfig+0x170>
 800e340:	d823      	bhi.n	800e38a <UART_SetConfig+0x17e>
 800e342:	2b08      	cmp	r3, #8
 800e344:	d00c      	beq.n	800e360 <UART_SetConfig+0x154>
 800e346:	d820      	bhi.n	800e38a <UART_SetConfig+0x17e>
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <UART_SetConfig+0x146>
 800e34c:	2b04      	cmp	r3, #4
 800e34e:	d00e      	beq.n	800e36e <UART_SetConfig+0x162>
 800e350:	e01b      	b.n	800e38a <UART_SetConfig+0x17e>
 800e352:	231b      	movs	r3, #27
 800e354:	2220      	movs	r2, #32
 800e356:	189b      	adds	r3, r3, r2
 800e358:	19db      	adds	r3, r3, r7
 800e35a:	2200      	movs	r2, #0
 800e35c:	701a      	strb	r2, [r3, #0]
 800e35e:	e11d      	b.n	800e59c <UART_SetConfig+0x390>
 800e360:	231b      	movs	r3, #27
 800e362:	2220      	movs	r2, #32
 800e364:	189b      	adds	r3, r3, r2
 800e366:	19db      	adds	r3, r3, r7
 800e368:	2202      	movs	r2, #2
 800e36a:	701a      	strb	r2, [r3, #0]
 800e36c:	e116      	b.n	800e59c <UART_SetConfig+0x390>
 800e36e:	231b      	movs	r3, #27
 800e370:	2220      	movs	r2, #32
 800e372:	189b      	adds	r3, r3, r2
 800e374:	19db      	adds	r3, r3, r7
 800e376:	2204      	movs	r2, #4
 800e378:	701a      	strb	r2, [r3, #0]
 800e37a:	e10f      	b.n	800e59c <UART_SetConfig+0x390>
 800e37c:	231b      	movs	r3, #27
 800e37e:	2220      	movs	r2, #32
 800e380:	189b      	adds	r3, r3, r2
 800e382:	19db      	adds	r3, r3, r7
 800e384:	2208      	movs	r2, #8
 800e386:	701a      	strb	r2, [r3, #0]
 800e388:	e108      	b.n	800e59c <UART_SetConfig+0x390>
 800e38a:	231b      	movs	r3, #27
 800e38c:	2220      	movs	r2, #32
 800e38e:	189b      	adds	r3, r3, r2
 800e390:	19db      	adds	r3, r3, r7
 800e392:	2210      	movs	r2, #16
 800e394:	701a      	strb	r2, [r3, #0]
 800e396:	e101      	b.n	800e59c <UART_SetConfig+0x390>
 800e398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a71      	ldr	r2, [pc, #452]	@ (800e564 <UART_SetConfig+0x358>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d131      	bne.n	800e406 <UART_SetConfig+0x1fa>
 800e3a2:	4b6e      	ldr	r3, [pc, #440]	@ (800e55c <UART_SetConfig+0x350>)
 800e3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3a6:	2230      	movs	r2, #48	@ 0x30
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	2b30      	cmp	r3, #48	@ 0x30
 800e3ac:	d01d      	beq.n	800e3ea <UART_SetConfig+0x1de>
 800e3ae:	d823      	bhi.n	800e3f8 <UART_SetConfig+0x1ec>
 800e3b0:	2b20      	cmp	r3, #32
 800e3b2:	d00c      	beq.n	800e3ce <UART_SetConfig+0x1c2>
 800e3b4:	d820      	bhi.n	800e3f8 <UART_SetConfig+0x1ec>
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d002      	beq.n	800e3c0 <UART_SetConfig+0x1b4>
 800e3ba:	2b10      	cmp	r3, #16
 800e3bc:	d00e      	beq.n	800e3dc <UART_SetConfig+0x1d0>
 800e3be:	e01b      	b.n	800e3f8 <UART_SetConfig+0x1ec>
 800e3c0:	231b      	movs	r3, #27
 800e3c2:	2220      	movs	r2, #32
 800e3c4:	189b      	adds	r3, r3, r2
 800e3c6:	19db      	adds	r3, r3, r7
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	701a      	strb	r2, [r3, #0]
 800e3cc:	e0e6      	b.n	800e59c <UART_SetConfig+0x390>
 800e3ce:	231b      	movs	r3, #27
 800e3d0:	2220      	movs	r2, #32
 800e3d2:	189b      	adds	r3, r3, r2
 800e3d4:	19db      	adds	r3, r3, r7
 800e3d6:	2202      	movs	r2, #2
 800e3d8:	701a      	strb	r2, [r3, #0]
 800e3da:	e0df      	b.n	800e59c <UART_SetConfig+0x390>
 800e3dc:	231b      	movs	r3, #27
 800e3de:	2220      	movs	r2, #32
 800e3e0:	189b      	adds	r3, r3, r2
 800e3e2:	19db      	adds	r3, r3, r7
 800e3e4:	2204      	movs	r2, #4
 800e3e6:	701a      	strb	r2, [r3, #0]
 800e3e8:	e0d8      	b.n	800e59c <UART_SetConfig+0x390>
 800e3ea:	231b      	movs	r3, #27
 800e3ec:	2220      	movs	r2, #32
 800e3ee:	189b      	adds	r3, r3, r2
 800e3f0:	19db      	adds	r3, r3, r7
 800e3f2:	2208      	movs	r2, #8
 800e3f4:	701a      	strb	r2, [r3, #0]
 800e3f6:	e0d1      	b.n	800e59c <UART_SetConfig+0x390>
 800e3f8:	231b      	movs	r3, #27
 800e3fa:	2220      	movs	r2, #32
 800e3fc:	189b      	adds	r3, r3, r2
 800e3fe:	19db      	adds	r3, r3, r7
 800e400:	2210      	movs	r2, #16
 800e402:	701a      	strb	r2, [r3, #0]
 800e404:	e0ca      	b.n	800e59c <UART_SetConfig+0x390>
 800e406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a57      	ldr	r2, [pc, #348]	@ (800e568 <UART_SetConfig+0x35c>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d106      	bne.n	800e41e <UART_SetConfig+0x212>
 800e410:	231b      	movs	r3, #27
 800e412:	2220      	movs	r2, #32
 800e414:	189b      	adds	r3, r3, r2
 800e416:	19db      	adds	r3, r3, r7
 800e418:	2200      	movs	r2, #0
 800e41a:	701a      	strb	r2, [r3, #0]
 800e41c:	e0be      	b.n	800e59c <UART_SetConfig+0x390>
 800e41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a52      	ldr	r2, [pc, #328]	@ (800e56c <UART_SetConfig+0x360>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d106      	bne.n	800e436 <UART_SetConfig+0x22a>
 800e428:	231b      	movs	r3, #27
 800e42a:	2220      	movs	r2, #32
 800e42c:	189b      	adds	r3, r3, r2
 800e42e:	19db      	adds	r3, r3, r7
 800e430:	2200      	movs	r2, #0
 800e432:	701a      	strb	r2, [r3, #0]
 800e434:	e0b2      	b.n	800e59c <UART_SetConfig+0x390>
 800e436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a4d      	ldr	r2, [pc, #308]	@ (800e570 <UART_SetConfig+0x364>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d106      	bne.n	800e44e <UART_SetConfig+0x242>
 800e440:	231b      	movs	r3, #27
 800e442:	2220      	movs	r2, #32
 800e444:	189b      	adds	r3, r3, r2
 800e446:	19db      	adds	r3, r3, r7
 800e448:	2200      	movs	r2, #0
 800e44a:	701a      	strb	r2, [r3, #0]
 800e44c:	e0a6      	b.n	800e59c <UART_SetConfig+0x390>
 800e44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a3e      	ldr	r2, [pc, #248]	@ (800e54c <UART_SetConfig+0x340>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d13e      	bne.n	800e4d6 <UART_SetConfig+0x2ca>
 800e458:	4b40      	ldr	r3, [pc, #256]	@ (800e55c <UART_SetConfig+0x350>)
 800e45a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e45c:	23c0      	movs	r3, #192	@ 0xc0
 800e45e:	011b      	lsls	r3, r3, #4
 800e460:	4013      	ands	r3, r2
 800e462:	22c0      	movs	r2, #192	@ 0xc0
 800e464:	0112      	lsls	r2, r2, #4
 800e466:	4293      	cmp	r3, r2
 800e468:	d027      	beq.n	800e4ba <UART_SetConfig+0x2ae>
 800e46a:	22c0      	movs	r2, #192	@ 0xc0
 800e46c:	0112      	lsls	r2, r2, #4
 800e46e:	4293      	cmp	r3, r2
 800e470:	d82a      	bhi.n	800e4c8 <UART_SetConfig+0x2bc>
 800e472:	2280      	movs	r2, #128	@ 0x80
 800e474:	0112      	lsls	r2, r2, #4
 800e476:	4293      	cmp	r3, r2
 800e478:	d011      	beq.n	800e49e <UART_SetConfig+0x292>
 800e47a:	2280      	movs	r2, #128	@ 0x80
 800e47c:	0112      	lsls	r2, r2, #4
 800e47e:	4293      	cmp	r3, r2
 800e480:	d822      	bhi.n	800e4c8 <UART_SetConfig+0x2bc>
 800e482:	2b00      	cmp	r3, #0
 800e484:	d004      	beq.n	800e490 <UART_SetConfig+0x284>
 800e486:	2280      	movs	r2, #128	@ 0x80
 800e488:	00d2      	lsls	r2, r2, #3
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d00e      	beq.n	800e4ac <UART_SetConfig+0x2a0>
 800e48e:	e01b      	b.n	800e4c8 <UART_SetConfig+0x2bc>
 800e490:	231b      	movs	r3, #27
 800e492:	2220      	movs	r2, #32
 800e494:	189b      	adds	r3, r3, r2
 800e496:	19db      	adds	r3, r3, r7
 800e498:	2200      	movs	r2, #0
 800e49a:	701a      	strb	r2, [r3, #0]
 800e49c:	e07e      	b.n	800e59c <UART_SetConfig+0x390>
 800e49e:	231b      	movs	r3, #27
 800e4a0:	2220      	movs	r2, #32
 800e4a2:	189b      	adds	r3, r3, r2
 800e4a4:	19db      	adds	r3, r3, r7
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	701a      	strb	r2, [r3, #0]
 800e4aa:	e077      	b.n	800e59c <UART_SetConfig+0x390>
 800e4ac:	231b      	movs	r3, #27
 800e4ae:	2220      	movs	r2, #32
 800e4b0:	189b      	adds	r3, r3, r2
 800e4b2:	19db      	adds	r3, r3, r7
 800e4b4:	2204      	movs	r2, #4
 800e4b6:	701a      	strb	r2, [r3, #0]
 800e4b8:	e070      	b.n	800e59c <UART_SetConfig+0x390>
 800e4ba:	231b      	movs	r3, #27
 800e4bc:	2220      	movs	r2, #32
 800e4be:	189b      	adds	r3, r3, r2
 800e4c0:	19db      	adds	r3, r3, r7
 800e4c2:	2208      	movs	r2, #8
 800e4c4:	701a      	strb	r2, [r3, #0]
 800e4c6:	e069      	b.n	800e59c <UART_SetConfig+0x390>
 800e4c8:	231b      	movs	r3, #27
 800e4ca:	2220      	movs	r2, #32
 800e4cc:	189b      	adds	r3, r3, r2
 800e4ce:	19db      	adds	r3, r3, r7
 800e4d0:	2210      	movs	r2, #16
 800e4d2:	701a      	strb	r2, [r3, #0]
 800e4d4:	e062      	b.n	800e59c <UART_SetConfig+0x390>
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a1d      	ldr	r2, [pc, #116]	@ (800e550 <UART_SetConfig+0x344>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d157      	bne.n	800e590 <UART_SetConfig+0x384>
 800e4e0:	4b1e      	ldr	r3, [pc, #120]	@ (800e55c <UART_SetConfig+0x350>)
 800e4e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4e4:	23c0      	movs	r3, #192	@ 0xc0
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	22c0      	movs	r2, #192	@ 0xc0
 800e4ec:	0092      	lsls	r2, r2, #2
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d040      	beq.n	800e574 <UART_SetConfig+0x368>
 800e4f2:	22c0      	movs	r2, #192	@ 0xc0
 800e4f4:	0092      	lsls	r2, r2, #2
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d843      	bhi.n	800e582 <UART_SetConfig+0x376>
 800e4fa:	2280      	movs	r2, #128	@ 0x80
 800e4fc:	0092      	lsls	r2, r2, #2
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d011      	beq.n	800e526 <UART_SetConfig+0x31a>
 800e502:	2280      	movs	r2, #128	@ 0x80
 800e504:	0092      	lsls	r2, r2, #2
 800e506:	4293      	cmp	r3, r2
 800e508:	d83b      	bhi.n	800e582 <UART_SetConfig+0x376>
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d004      	beq.n	800e518 <UART_SetConfig+0x30c>
 800e50e:	2280      	movs	r2, #128	@ 0x80
 800e510:	0052      	lsls	r2, r2, #1
 800e512:	4293      	cmp	r3, r2
 800e514:	d00e      	beq.n	800e534 <UART_SetConfig+0x328>
 800e516:	e034      	b.n	800e582 <UART_SetConfig+0x376>
 800e518:	231b      	movs	r3, #27
 800e51a:	2220      	movs	r2, #32
 800e51c:	189b      	adds	r3, r3, r2
 800e51e:	19db      	adds	r3, r3, r7
 800e520:	2200      	movs	r2, #0
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	e03a      	b.n	800e59c <UART_SetConfig+0x390>
 800e526:	231b      	movs	r3, #27
 800e528:	2220      	movs	r2, #32
 800e52a:	189b      	adds	r3, r3, r2
 800e52c:	19db      	adds	r3, r3, r7
 800e52e:	2202      	movs	r2, #2
 800e530:	701a      	strb	r2, [r3, #0]
 800e532:	e033      	b.n	800e59c <UART_SetConfig+0x390>
 800e534:	231b      	movs	r3, #27
 800e536:	2220      	movs	r2, #32
 800e538:	189b      	adds	r3, r3, r2
 800e53a:	19db      	adds	r3, r3, r7
 800e53c:	2204      	movs	r2, #4
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	e02c      	b.n	800e59c <UART_SetConfig+0x390>
 800e542:	46c0      	nop			@ (mov r8, r8)
 800e544:	cfff69f3 	.word	0xcfff69f3
 800e548:	ffffcfff 	.word	0xffffcfff
 800e54c:	40008000 	.word	0x40008000
 800e550:	40008400 	.word	0x40008400
 800e554:	11fff4ff 	.word	0x11fff4ff
 800e558:	40013800 	.word	0x40013800
 800e55c:	40021000 	.word	0x40021000
 800e560:	40004400 	.word	0x40004400
 800e564:	40004800 	.word	0x40004800
 800e568:	40004c00 	.word	0x40004c00
 800e56c:	40005000 	.word	0x40005000
 800e570:	40013c00 	.word	0x40013c00
 800e574:	231b      	movs	r3, #27
 800e576:	2220      	movs	r2, #32
 800e578:	189b      	adds	r3, r3, r2
 800e57a:	19db      	adds	r3, r3, r7
 800e57c:	2208      	movs	r2, #8
 800e57e:	701a      	strb	r2, [r3, #0]
 800e580:	e00c      	b.n	800e59c <UART_SetConfig+0x390>
 800e582:	231b      	movs	r3, #27
 800e584:	2220      	movs	r2, #32
 800e586:	189b      	adds	r3, r3, r2
 800e588:	19db      	adds	r3, r3, r7
 800e58a:	2210      	movs	r2, #16
 800e58c:	701a      	strb	r2, [r3, #0]
 800e58e:	e005      	b.n	800e59c <UART_SetConfig+0x390>
 800e590:	231b      	movs	r3, #27
 800e592:	2220      	movs	r2, #32
 800e594:	189b      	adds	r3, r3, r2
 800e596:	19db      	adds	r3, r3, r7
 800e598:	2210      	movs	r2, #16
 800e59a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4ac1      	ldr	r2, [pc, #772]	@ (800e8a8 <UART_SetConfig+0x69c>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d005      	beq.n	800e5b2 <UART_SetConfig+0x3a6>
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4ac0      	ldr	r2, [pc, #768]	@ (800e8ac <UART_SetConfig+0x6a0>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d000      	beq.n	800e5b2 <UART_SetConfig+0x3a6>
 800e5b0:	e093      	b.n	800e6da <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e5b2:	231b      	movs	r3, #27
 800e5b4:	2220      	movs	r2, #32
 800e5b6:	189b      	adds	r3, r3, r2
 800e5b8:	19db      	adds	r3, r3, r7
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	2b08      	cmp	r3, #8
 800e5be:	d015      	beq.n	800e5ec <UART_SetConfig+0x3e0>
 800e5c0:	dc18      	bgt.n	800e5f4 <UART_SetConfig+0x3e8>
 800e5c2:	2b04      	cmp	r3, #4
 800e5c4:	d00d      	beq.n	800e5e2 <UART_SetConfig+0x3d6>
 800e5c6:	dc15      	bgt.n	800e5f4 <UART_SetConfig+0x3e8>
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <UART_SetConfig+0x3c6>
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	d005      	beq.n	800e5dc <UART_SetConfig+0x3d0>
 800e5d0:	e010      	b.n	800e5f4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5d2:	f7fd fea3 	bl	800c31c <HAL_RCC_GetPCLK1Freq>
 800e5d6:	0003      	movs	r3, r0
 800e5d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5da:	e014      	b.n	800e606 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e5dc:	4bb4      	ldr	r3, [pc, #720]	@ (800e8b0 <UART_SetConfig+0x6a4>)
 800e5de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5e0:	e011      	b.n	800e606 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5e2:	f7fd fe0f 	bl	800c204 <HAL_RCC_GetSysClockFreq>
 800e5e6:	0003      	movs	r3, r0
 800e5e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5ea:	e00c      	b.n	800e606 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5ec:	2380      	movs	r3, #128	@ 0x80
 800e5ee:	021b      	lsls	r3, r3, #8
 800e5f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e5f2:	e008      	b.n	800e606 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800e5f8:	231a      	movs	r3, #26
 800e5fa:	2220      	movs	r2, #32
 800e5fc:	189b      	adds	r3, r3, r2
 800e5fe:	19db      	adds	r3, r3, r7
 800e600:	2201      	movs	r2, #1
 800e602:	701a      	strb	r2, [r3, #0]
        break;
 800e604:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d100      	bne.n	800e60e <UART_SetConfig+0x402>
 800e60c:	e135      	b.n	800e87a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e612:	4ba8      	ldr	r3, [pc, #672]	@ (800e8b4 <UART_SetConfig+0x6a8>)
 800e614:	0052      	lsls	r2, r2, #1
 800e616:	5ad3      	ldrh	r3, [r2, r3]
 800e618:	0019      	movs	r1, r3
 800e61a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e61c:	f7f5 fe7e 	bl	800431c <__udivsi3>
 800e620:	0003      	movs	r3, r0
 800e622:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e626:	685a      	ldr	r2, [r3, #4]
 800e628:	0013      	movs	r3, r2
 800e62a:	005b      	lsls	r3, r3, #1
 800e62c:	189b      	adds	r3, r3, r2
 800e62e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e630:	429a      	cmp	r2, r3
 800e632:	d305      	bcc.n	800e640 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e63a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d906      	bls.n	800e64e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800e640:	231a      	movs	r3, #26
 800e642:	2220      	movs	r2, #32
 800e644:	189b      	adds	r3, r3, r2
 800e646:	19db      	adds	r3, r3, r7
 800e648:	2201      	movs	r2, #1
 800e64a:	701a      	strb	r2, [r3, #0]
 800e64c:	e044      	b.n	800e6d8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e650:	61bb      	str	r3, [r7, #24]
 800e652:	2300      	movs	r3, #0
 800e654:	61fb      	str	r3, [r7, #28]
 800e656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e65a:	4b96      	ldr	r3, [pc, #600]	@ (800e8b4 <UART_SetConfig+0x6a8>)
 800e65c:	0052      	lsls	r2, r2, #1
 800e65e:	5ad3      	ldrh	r3, [r2, r3]
 800e660:	613b      	str	r3, [r7, #16]
 800e662:	2300      	movs	r3, #0
 800e664:	617b      	str	r3, [r7, #20]
 800e666:	693a      	ldr	r2, [r7, #16]
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	69b8      	ldr	r0, [r7, #24]
 800e66c:	69f9      	ldr	r1, [r7, #28]
 800e66e:	f7f5 ffcb 	bl	8004608 <__aeabi_uldivmod>
 800e672:	0002      	movs	r2, r0
 800e674:	000b      	movs	r3, r1
 800e676:	0e11      	lsrs	r1, r2, #24
 800e678:	021d      	lsls	r5, r3, #8
 800e67a:	430d      	orrs	r5, r1
 800e67c:	0214      	lsls	r4, r2, #8
 800e67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	085b      	lsrs	r3, r3, #1
 800e684:	60bb      	str	r3, [r7, #8]
 800e686:	2300      	movs	r3, #0
 800e688:	60fb      	str	r3, [r7, #12]
 800e68a:	68b8      	ldr	r0, [r7, #8]
 800e68c:	68f9      	ldr	r1, [r7, #12]
 800e68e:	1900      	adds	r0, r0, r4
 800e690:	4169      	adcs	r1, r5
 800e692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	603b      	str	r3, [r7, #0]
 800e698:	2300      	movs	r3, #0
 800e69a:	607b      	str	r3, [r7, #4]
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f7f5 ffb2 	bl	8004608 <__aeabi_uldivmod>
 800e6a4:	0002      	movs	r2, r0
 800e6a6:	000b      	movs	r3, r1
 800e6a8:	0013      	movs	r3, r2
 800e6aa:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e6ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6ae:	23c0      	movs	r3, #192	@ 0xc0
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d309      	bcc.n	800e6ca <UART_SetConfig+0x4be>
 800e6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6b8:	2380      	movs	r3, #128	@ 0x80
 800e6ba:	035b      	lsls	r3, r3, #13
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d204      	bcs.n	800e6ca <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6c6:	60da      	str	r2, [r3, #12]
 800e6c8:	e006      	b.n	800e6d8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800e6ca:	231a      	movs	r3, #26
 800e6cc:	2220      	movs	r2, #32
 800e6ce:	189b      	adds	r3, r3, r2
 800e6d0:	19db      	adds	r3, r3, r7
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800e6d6:	e0d0      	b.n	800e87a <UART_SetConfig+0x66e>
 800e6d8:	e0cf      	b.n	800e87a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6dc:	69da      	ldr	r2, [r3, #28]
 800e6de:	2380      	movs	r3, #128	@ 0x80
 800e6e0:	021b      	lsls	r3, r3, #8
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d000      	beq.n	800e6e8 <UART_SetConfig+0x4dc>
 800e6e6:	e070      	b.n	800e7ca <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800e6e8:	231b      	movs	r3, #27
 800e6ea:	2220      	movs	r2, #32
 800e6ec:	189b      	adds	r3, r3, r2
 800e6ee:	19db      	adds	r3, r3, r7
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	2b08      	cmp	r3, #8
 800e6f4:	d015      	beq.n	800e722 <UART_SetConfig+0x516>
 800e6f6:	dc18      	bgt.n	800e72a <UART_SetConfig+0x51e>
 800e6f8:	2b04      	cmp	r3, #4
 800e6fa:	d00d      	beq.n	800e718 <UART_SetConfig+0x50c>
 800e6fc:	dc15      	bgt.n	800e72a <UART_SetConfig+0x51e>
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d002      	beq.n	800e708 <UART_SetConfig+0x4fc>
 800e702:	2b02      	cmp	r3, #2
 800e704:	d005      	beq.n	800e712 <UART_SetConfig+0x506>
 800e706:	e010      	b.n	800e72a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e708:	f7fd fe08 	bl	800c31c <HAL_RCC_GetPCLK1Freq>
 800e70c:	0003      	movs	r3, r0
 800e70e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e710:	e014      	b.n	800e73c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e712:	4b67      	ldr	r3, [pc, #412]	@ (800e8b0 <UART_SetConfig+0x6a4>)
 800e714:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e716:	e011      	b.n	800e73c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e718:	f7fd fd74 	bl	800c204 <HAL_RCC_GetSysClockFreq>
 800e71c:	0003      	movs	r3, r0
 800e71e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e720:	e00c      	b.n	800e73c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e722:	2380      	movs	r3, #128	@ 0x80
 800e724:	021b      	lsls	r3, r3, #8
 800e726:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e728:	e008      	b.n	800e73c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800e72e:	231a      	movs	r3, #26
 800e730:	2220      	movs	r2, #32
 800e732:	189b      	adds	r3, r3, r2
 800e734:	19db      	adds	r3, r3, r7
 800e736:	2201      	movs	r2, #1
 800e738:	701a      	strb	r2, [r3, #0]
        break;
 800e73a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d100      	bne.n	800e744 <UART_SetConfig+0x538>
 800e742:	e09a      	b.n	800e87a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e748:	4b5a      	ldr	r3, [pc, #360]	@ (800e8b4 <UART_SetConfig+0x6a8>)
 800e74a:	0052      	lsls	r2, r2, #1
 800e74c:	5ad3      	ldrh	r3, [r2, r3]
 800e74e:	0019      	movs	r1, r3
 800e750:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e752:	f7f5 fde3 	bl	800431c <__udivsi3>
 800e756:	0003      	movs	r3, r0
 800e758:	005a      	lsls	r2, r3, #1
 800e75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	085b      	lsrs	r3, r3, #1
 800e760:	18d2      	adds	r2, r2, r3
 800e762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	0019      	movs	r1, r3
 800e768:	0010      	movs	r0, r2
 800e76a:	f7f5 fdd7 	bl	800431c <__udivsi3>
 800e76e:	0003      	movs	r3, r0
 800e770:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e774:	2b0f      	cmp	r3, #15
 800e776:	d921      	bls.n	800e7bc <UART_SetConfig+0x5b0>
 800e778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e77a:	2380      	movs	r3, #128	@ 0x80
 800e77c:	025b      	lsls	r3, r3, #9
 800e77e:	429a      	cmp	r2, r3
 800e780:	d21c      	bcs.n	800e7bc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e784:	b29a      	uxth	r2, r3
 800e786:	200e      	movs	r0, #14
 800e788:	2420      	movs	r4, #32
 800e78a:	1903      	adds	r3, r0, r4
 800e78c:	19db      	adds	r3, r3, r7
 800e78e:	210f      	movs	r1, #15
 800e790:	438a      	bics	r2, r1
 800e792:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e796:	085b      	lsrs	r3, r3, #1
 800e798:	b29b      	uxth	r3, r3
 800e79a:	2207      	movs	r2, #7
 800e79c:	4013      	ands	r3, r2
 800e79e:	b299      	uxth	r1, r3
 800e7a0:	1903      	adds	r3, r0, r4
 800e7a2:	19db      	adds	r3, r3, r7
 800e7a4:	1902      	adds	r2, r0, r4
 800e7a6:	19d2      	adds	r2, r2, r7
 800e7a8:	8812      	ldrh	r2, [r2, #0]
 800e7aa:	430a      	orrs	r2, r1
 800e7ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	1902      	adds	r2, r0, r4
 800e7b4:	19d2      	adds	r2, r2, r7
 800e7b6:	8812      	ldrh	r2, [r2, #0]
 800e7b8:	60da      	str	r2, [r3, #12]
 800e7ba:	e05e      	b.n	800e87a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800e7bc:	231a      	movs	r3, #26
 800e7be:	2220      	movs	r2, #32
 800e7c0:	189b      	adds	r3, r3, r2
 800e7c2:	19db      	adds	r3, r3, r7
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	e057      	b.n	800e87a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7ca:	231b      	movs	r3, #27
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	189b      	adds	r3, r3, r2
 800e7d0:	19db      	adds	r3, r3, r7
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b08      	cmp	r3, #8
 800e7d6:	d015      	beq.n	800e804 <UART_SetConfig+0x5f8>
 800e7d8:	dc18      	bgt.n	800e80c <UART_SetConfig+0x600>
 800e7da:	2b04      	cmp	r3, #4
 800e7dc:	d00d      	beq.n	800e7fa <UART_SetConfig+0x5ee>
 800e7de:	dc15      	bgt.n	800e80c <UART_SetConfig+0x600>
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d002      	beq.n	800e7ea <UART_SetConfig+0x5de>
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d005      	beq.n	800e7f4 <UART_SetConfig+0x5e8>
 800e7e8:	e010      	b.n	800e80c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7ea:	f7fd fd97 	bl	800c31c <HAL_RCC_GetPCLK1Freq>
 800e7ee:	0003      	movs	r3, r0
 800e7f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e7f2:	e014      	b.n	800e81e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7f4:	4b2e      	ldr	r3, [pc, #184]	@ (800e8b0 <UART_SetConfig+0x6a4>)
 800e7f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e7f8:	e011      	b.n	800e81e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7fa:	f7fd fd03 	bl	800c204 <HAL_RCC_GetSysClockFreq>
 800e7fe:	0003      	movs	r3, r0
 800e800:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e802:	e00c      	b.n	800e81e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e804:	2380      	movs	r3, #128	@ 0x80
 800e806:	021b      	lsls	r3, r3, #8
 800e808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e80a:	e008      	b.n	800e81e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800e80c:	2300      	movs	r3, #0
 800e80e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800e810:	231a      	movs	r3, #26
 800e812:	2220      	movs	r2, #32
 800e814:	189b      	adds	r3, r3, r2
 800e816:	19db      	adds	r3, r3, r7
 800e818:	2201      	movs	r2, #1
 800e81a:	701a      	strb	r2, [r3, #0]
        break;
 800e81c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800e81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e820:	2b00      	cmp	r3, #0
 800e822:	d02a      	beq.n	800e87a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e828:	4b22      	ldr	r3, [pc, #136]	@ (800e8b4 <UART_SetConfig+0x6a8>)
 800e82a:	0052      	lsls	r2, r2, #1
 800e82c:	5ad3      	ldrh	r3, [r2, r3]
 800e82e:	0019      	movs	r1, r3
 800e830:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e832:	f7f5 fd73 	bl	800431c <__udivsi3>
 800e836:	0003      	movs	r3, r0
 800e838:	001a      	movs	r2, r3
 800e83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	085b      	lsrs	r3, r3, #1
 800e840:	18d2      	adds	r2, r2, r3
 800e842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	0019      	movs	r1, r3
 800e848:	0010      	movs	r0, r2
 800e84a:	f7f5 fd67 	bl	800431c <__udivsi3>
 800e84e:	0003      	movs	r3, r0
 800e850:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e854:	2b0f      	cmp	r3, #15
 800e856:	d90a      	bls.n	800e86e <UART_SetConfig+0x662>
 800e858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e85a:	2380      	movs	r3, #128	@ 0x80
 800e85c:	025b      	lsls	r3, r3, #9
 800e85e:	429a      	cmp	r2, r3
 800e860:	d205      	bcs.n	800e86e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e864:	b29a      	uxth	r2, r3
 800e866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	60da      	str	r2, [r3, #12]
 800e86c:	e005      	b.n	800e87a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800e86e:	231a      	movs	r3, #26
 800e870:	2220      	movs	r2, #32
 800e872:	189b      	adds	r3, r3, r2
 800e874:	19db      	adds	r3, r3, r7
 800e876:	2201      	movs	r2, #1
 800e878:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87c:	226a      	movs	r2, #106	@ 0x6a
 800e87e:	2101      	movs	r1, #1
 800e880:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800e882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e884:	2268      	movs	r2, #104	@ 0x68
 800e886:	2101      	movs	r1, #1
 800e888:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	2200      	movs	r2, #0
 800e88e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e892:	2200      	movs	r2, #0
 800e894:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e896:	231a      	movs	r3, #26
 800e898:	2220      	movs	r2, #32
 800e89a:	189b      	adds	r3, r3, r2
 800e89c:	19db      	adds	r3, r3, r7
 800e89e:	781b      	ldrb	r3, [r3, #0]
}
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	b010      	add	sp, #64	@ 0x40
 800e8a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e8a8:	40008000 	.word	0x40008000
 800e8ac:	40008400 	.word	0x40008400
 800e8b0:	00f42400 	.word	0x00f42400
 800e8b4:	08011b68 	.word	0x08011b68

0800e8b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8c4:	2208      	movs	r2, #8
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	d00b      	beq.n	800e8e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	4a4a      	ldr	r2, [pc, #296]	@ (800e9fc <UART_AdvFeatureConfig+0x144>)
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	0019      	movs	r1, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	430a      	orrs	r2, r1
 800e8e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	4013      	ands	r3, r2
 800e8ea:	d00b      	beq.n	800e904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	4a43      	ldr	r2, [pc, #268]	@ (800ea00 <UART_AdvFeatureConfig+0x148>)
 800e8f4:	4013      	ands	r3, r2
 800e8f6:	0019      	movs	r1, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	430a      	orrs	r2, r1
 800e902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e908:	2202      	movs	r2, #2
 800e90a:	4013      	ands	r3, r2
 800e90c:	d00b      	beq.n	800e926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	4a3b      	ldr	r2, [pc, #236]	@ (800ea04 <UART_AdvFeatureConfig+0x14c>)
 800e916:	4013      	ands	r3, r2
 800e918:	0019      	movs	r1, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	430a      	orrs	r2, r1
 800e924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e92a:	2204      	movs	r2, #4
 800e92c:	4013      	ands	r3, r2
 800e92e:	d00b      	beq.n	800e948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	4a34      	ldr	r2, [pc, #208]	@ (800ea08 <UART_AdvFeatureConfig+0x150>)
 800e938:	4013      	ands	r3, r2
 800e93a:	0019      	movs	r1, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	430a      	orrs	r2, r1
 800e946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e94c:	2210      	movs	r2, #16
 800e94e:	4013      	ands	r3, r2
 800e950:	d00b      	beq.n	800e96a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	4a2c      	ldr	r2, [pc, #176]	@ (800ea0c <UART_AdvFeatureConfig+0x154>)
 800e95a:	4013      	ands	r3, r2
 800e95c:	0019      	movs	r1, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	430a      	orrs	r2, r1
 800e968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e96e:	2220      	movs	r2, #32
 800e970:	4013      	ands	r3, r2
 800e972:	d00b      	beq.n	800e98c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	4a25      	ldr	r2, [pc, #148]	@ (800ea10 <UART_AdvFeatureConfig+0x158>)
 800e97c:	4013      	ands	r3, r2
 800e97e:	0019      	movs	r1, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	430a      	orrs	r2, r1
 800e98a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e990:	2240      	movs	r2, #64	@ 0x40
 800e992:	4013      	ands	r3, r2
 800e994:	d01d      	beq.n	800e9d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	4a1d      	ldr	r2, [pc, #116]	@ (800ea14 <UART_AdvFeatureConfig+0x15c>)
 800e99e:	4013      	ands	r3, r2
 800e9a0:	0019      	movs	r1, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	430a      	orrs	r2, r1
 800e9ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9b2:	2380      	movs	r3, #128	@ 0x80
 800e9b4:	035b      	lsls	r3, r3, #13
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d10b      	bne.n	800e9d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	4a15      	ldr	r2, [pc, #84]	@ (800ea18 <UART_AdvFeatureConfig+0x160>)
 800e9c2:	4013      	ands	r3, r2
 800e9c4:	0019      	movs	r1, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	430a      	orrs	r2, r1
 800e9d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9d6:	2280      	movs	r2, #128	@ 0x80
 800e9d8:	4013      	ands	r3, r2
 800e9da:	d00b      	beq.n	800e9f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	4a0e      	ldr	r2, [pc, #56]	@ (800ea1c <UART_AdvFeatureConfig+0x164>)
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	0019      	movs	r1, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	430a      	orrs	r2, r1
 800e9f2:	605a      	str	r2, [r3, #4]
  }
}
 800e9f4:	46c0      	nop			@ (mov r8, r8)
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	b002      	add	sp, #8
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	ffff7fff 	.word	0xffff7fff
 800ea00:	fffdffff 	.word	0xfffdffff
 800ea04:	fffeffff 	.word	0xfffeffff
 800ea08:	fffbffff 	.word	0xfffbffff
 800ea0c:	ffffefff 	.word	0xffffefff
 800ea10:	ffffdfff 	.word	0xffffdfff
 800ea14:	ffefffff 	.word	0xffefffff
 800ea18:	ff9fffff 	.word	0xff9fffff
 800ea1c:	fff7ffff 	.word	0xfff7ffff

0800ea20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b092      	sub	sp, #72	@ 0x48
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2290      	movs	r2, #144	@ 0x90
 800ea2c:	2100      	movs	r1, #0
 800ea2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea30:	f7f8 ff88 	bl	8007944 <HAL_GetTick>
 800ea34:	0003      	movs	r3, r0
 800ea36:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2208      	movs	r2, #8
 800ea40:	4013      	ands	r3, r2
 800ea42:	2b08      	cmp	r3, #8
 800ea44:	d12d      	bne.n	800eaa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea48:	2280      	movs	r2, #128	@ 0x80
 800ea4a:	0391      	lsls	r1, r2, #14
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	4a47      	ldr	r2, [pc, #284]	@ (800eb6c <UART_CheckIdleState+0x14c>)
 800ea50:	9200      	str	r2, [sp, #0]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f000 f88e 	bl	800eb74 <UART_WaitOnFlagUntilTimeout>
 800ea58:	1e03      	subs	r3, r0, #0
 800ea5a:	d022      	beq.n	800eaa2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ea60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ea62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ea64:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ea66:	2301      	movs	r3, #1
 800ea68:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6c:	f383 8810 	msr	PRIMASK, r3
}
 800ea70:	46c0      	nop			@ (mov r8, r8)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2180      	movs	r1, #128	@ 0x80
 800ea7e:	438a      	bics	r2, r1
 800ea80:	601a      	str	r2, [r3, #0]
 800ea82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea88:	f383 8810 	msr	PRIMASK, r3
}
 800ea8c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2288      	movs	r2, #136	@ 0x88
 800ea92:	2120      	movs	r1, #32
 800ea94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2284      	movs	r2, #132	@ 0x84
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea9e:	2303      	movs	r3, #3
 800eaa0:	e060      	b.n	800eb64 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2204      	movs	r2, #4
 800eaaa:	4013      	ands	r3, r2
 800eaac:	2b04      	cmp	r3, #4
 800eaae:	d146      	bne.n	800eb3e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eab2:	2280      	movs	r2, #128	@ 0x80
 800eab4:	03d1      	lsls	r1, r2, #15
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	4a2c      	ldr	r2, [pc, #176]	@ (800eb6c <UART_CheckIdleState+0x14c>)
 800eaba:	9200      	str	r2, [sp, #0]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f000 f859 	bl	800eb74 <UART_WaitOnFlagUntilTimeout>
 800eac2:	1e03      	subs	r3, r0, #0
 800eac4:	d03b      	beq.n	800eb3e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eac6:	f3ef 8310 	mrs	r3, PRIMASK
 800eaca:	60fb      	str	r3, [r7, #12]
  return(result);
 800eacc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eace:	637b      	str	r3, [r7, #52]	@ 0x34
 800ead0:	2301      	movs	r3, #1
 800ead2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	f383 8810 	msr	PRIMASK, r3
}
 800eada:	46c0      	nop			@ (mov r8, r8)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4922      	ldr	r1, [pc, #136]	@ (800eb70 <UART_CheckIdleState+0x150>)
 800eae8:	400a      	ands	r2, r1
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	f383 8810 	msr	PRIMASK, r3
}
 800eaf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaf8:	f3ef 8310 	mrs	r3, PRIMASK
 800eafc:	61bb      	str	r3, [r7, #24]
  return(result);
 800eafe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb00:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb02:	2301      	movs	r3, #1
 800eb04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	f383 8810 	msr	PRIMASK, r3
}
 800eb0c:	46c0      	nop			@ (mov r8, r8)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	689a      	ldr	r2, [r3, #8]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2101      	movs	r1, #1
 800eb1a:	438a      	bics	r2, r1
 800eb1c:	609a      	str	r2, [r3, #8]
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb22:	6a3b      	ldr	r3, [r7, #32]
 800eb24:	f383 8810 	msr	PRIMASK, r3
}
 800eb28:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	228c      	movs	r2, #140	@ 0x8c
 800eb2e:	2120      	movs	r1, #32
 800eb30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2284      	movs	r2, #132	@ 0x84
 800eb36:	2100      	movs	r1, #0
 800eb38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e012      	b.n	800eb64 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2288      	movs	r2, #136	@ 0x88
 800eb42:	2120      	movs	r1, #32
 800eb44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	228c      	movs	r2, #140	@ 0x8c
 800eb4a:	2120      	movs	r1, #32
 800eb4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2284      	movs	r2, #132	@ 0x84
 800eb5e:	2100      	movs	r1, #0
 800eb60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eb62:	2300      	movs	r3, #0
}
 800eb64:	0018      	movs	r0, r3
 800eb66:	46bd      	mov	sp, r7
 800eb68:	b010      	add	sp, #64	@ 0x40
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	01ffffff 	.word	0x01ffffff
 800eb70:	fffffedf 	.word	0xfffffedf

0800eb74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	603b      	str	r3, [r7, #0]
 800eb80:	1dfb      	adds	r3, r7, #7
 800eb82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb84:	e051      	b.n	800ec2a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	d04e      	beq.n	800ec2a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb8c:	f7f8 feda 	bl	8007944 <HAL_GetTick>
 800eb90:	0002      	movs	r2, r0
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d302      	bcc.n	800eba2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800eba2:	2303      	movs	r3, #3
 800eba4:	e051      	b.n	800ec4a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2204      	movs	r2, #4
 800ebae:	4013      	ands	r3, r2
 800ebb0:	d03b      	beq.n	800ec2a <UART_WaitOnFlagUntilTimeout+0xb6>
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b80      	cmp	r3, #128	@ 0x80
 800ebb6:	d038      	beq.n	800ec2a <UART_WaitOnFlagUntilTimeout+0xb6>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b40      	cmp	r3, #64	@ 0x40
 800ebbc:	d035      	beq.n	800ec2a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	69db      	ldr	r3, [r3, #28]
 800ebc4:	2208      	movs	r2, #8
 800ebc6:	4013      	ands	r3, r2
 800ebc8:	2b08      	cmp	r3, #8
 800ebca:	d111      	bne.n	800ebf0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2208      	movs	r2, #8
 800ebd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f000 f83c 	bl	800ec54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2290      	movs	r2, #144	@ 0x90
 800ebe0:	2108      	movs	r1, #8
 800ebe2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2284      	movs	r2, #132	@ 0x84
 800ebe8:	2100      	movs	r1, #0
 800ebea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	e02c      	b.n	800ec4a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	69da      	ldr	r2, [r3, #28]
 800ebf6:	2380      	movs	r3, #128	@ 0x80
 800ebf8:	011b      	lsls	r3, r3, #4
 800ebfa:	401a      	ands	r2, r3
 800ebfc:	2380      	movs	r3, #128	@ 0x80
 800ebfe:	011b      	lsls	r3, r3, #4
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d112      	bne.n	800ec2a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2280      	movs	r2, #128	@ 0x80
 800ec0a:	0112      	lsls	r2, r2, #4
 800ec0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	0018      	movs	r0, r3
 800ec12:	f000 f81f 	bl	800ec54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2290      	movs	r2, #144	@ 0x90
 800ec1a:	2120      	movs	r1, #32
 800ec1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2284      	movs	r2, #132	@ 0x84
 800ec22:	2100      	movs	r1, #0
 800ec24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	e00f      	b.n	800ec4a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	69db      	ldr	r3, [r3, #28]
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	4013      	ands	r3, r2
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	425a      	negs	r2, r3
 800ec3a:	4153      	adcs	r3, r2
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	001a      	movs	r2, r3
 800ec40:	1dfb      	adds	r3, r7, #7
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d09e      	beq.n	800eb86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	0018      	movs	r0, r3
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	b004      	add	sp, #16
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08e      	sub	sp, #56	@ 0x38
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec60:	617b      	str	r3, [r7, #20]
  return(result);
 800ec62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec66:	2301      	movs	r3, #1
 800ec68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	f383 8810 	msr	PRIMASK, r3
}
 800ec70:	46c0      	nop			@ (mov r8, r8)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4926      	ldr	r1, [pc, #152]	@ (800ed18 <UART_EndRxTransfer+0xc4>)
 800ec7e:	400a      	ands	r2, r1
 800ec80:	601a      	str	r2, [r3, #0]
 800ec82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	f383 8810 	msr	PRIMASK, r3
}
 800ec8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ec92:	623b      	str	r3, [r7, #32]
  return(result);
 800ec94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec96:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec98:	2301      	movs	r3, #1
 800ec9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9e:	f383 8810 	msr	PRIMASK, r3
}
 800eca2:	46c0      	nop			@ (mov r8, r8)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	689a      	ldr	r2, [r3, #8]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	491b      	ldr	r1, [pc, #108]	@ (800ed1c <UART_EndRxTransfer+0xc8>)
 800ecb0:	400a      	ands	r2, r1
 800ecb2:	609a      	str	r2, [r3, #8]
 800ecb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecba:	f383 8810 	msr	PRIMASK, r3
}
 800ecbe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d118      	bne.n	800ecfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecc8:	f3ef 8310 	mrs	r3, PRIMASK
 800eccc:	60bb      	str	r3, [r7, #8]
  return(result);
 800ecce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f383 8810 	msr	PRIMASK, r3
}
 800ecdc:	46c0      	nop			@ (mov r8, r8)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2110      	movs	r1, #16
 800ecea:	438a      	bics	r2, r1
 800ecec:	601a      	str	r2, [r3, #0]
 800ecee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	f383 8810 	msr	PRIMASK, r3
}
 800ecf8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	228c      	movs	r2, #140	@ 0x8c
 800ecfe:	2120      	movs	r1, #32
 800ed00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ed0e:	46c0      	nop			@ (mov r8, r8)
 800ed10:	46bd      	mov	sp, r7
 800ed12:	b00e      	add	sp, #56	@ 0x38
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	46c0      	nop			@ (mov r8, r8)
 800ed18:	fffffedf 	.word	0xfffffedf
 800ed1c:	effffffe 	.word	0xeffffffe

0800ed20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	225e      	movs	r2, #94	@ 0x5e
 800ed32:	2100      	movs	r1, #0
 800ed34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2256      	movs	r2, #86	@ 0x56
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	0018      	movs	r0, r3
 800ed42:	f7ff fa4f 	bl	800e1e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed46:	46c0      	nop			@ (mov r8, r8)
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	b004      	add	sp, #16
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b086      	sub	sp, #24
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed56:	f3ef 8310 	mrs	r3, PRIMASK
 800ed5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed5c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed5e:	617b      	str	r3, [r7, #20]
 800ed60:	2301      	movs	r3, #1
 800ed62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f383 8810 	msr	PRIMASK, r3
}
 800ed6a:	46c0      	nop			@ (mov r8, r8)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2140      	movs	r1, #64	@ 0x40
 800ed78:	438a      	bics	r2, r1
 800ed7a:	601a      	str	r2, [r3, #0]
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	f383 8810 	msr	PRIMASK, r3
}
 800ed86:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2288      	movs	r2, #136	@ 0x88
 800ed8c:	2120      	movs	r1, #32
 800ed8e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	0018      	movs	r0, r3
 800ed9a:	f7ff fa1b 	bl	800e1d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed9e:	46c0      	nop			@ (mov r8, r8)
 800eda0:	46bd      	mov	sp, r7
 800eda2:	b006      	add	sp, #24
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b082      	sub	sp, #8
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800edae:	46c0      	nop			@ (mov r8, r8)
 800edb0:	46bd      	mov	sp, r7
 800edb2:	b002      	add	sp, #8
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b082      	sub	sp, #8
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800edbe:	46c0      	nop			@ (mov r8, r8)
 800edc0:	46bd      	mov	sp, r7
 800edc2:	b002      	add	sp, #8
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b082      	sub	sp, #8
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800edce:	46c0      	nop			@ (mov r8, r8)
 800edd0:	46bd      	mov	sp, r7
 800edd2:	b002      	add	sp, #8
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2284      	movs	r2, #132	@ 0x84
 800ede4:	5c9b      	ldrb	r3, [r3, r2]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d101      	bne.n	800edee <HAL_UARTEx_DisableFifoMode+0x16>
 800edea:	2302      	movs	r3, #2
 800edec:	e027      	b.n	800ee3e <HAL_UARTEx_DisableFifoMode+0x66>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2284      	movs	r2, #132	@ 0x84
 800edf2:	2101      	movs	r1, #1
 800edf4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2288      	movs	r2, #136	@ 0x88
 800edfa:	2124      	movs	r1, #36	@ 0x24
 800edfc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2101      	movs	r1, #1
 800ee12:	438a      	bics	r2, r1
 800ee14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	4a0b      	ldr	r2, [pc, #44]	@ (800ee48 <HAL_UARTEx_DisableFifoMode+0x70>)
 800ee1a:	4013      	ands	r3, r2
 800ee1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2288      	movs	r2, #136	@ 0x88
 800ee30:	2120      	movs	r1, #32
 800ee32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2284      	movs	r2, #132	@ 0x84
 800ee38:	2100      	movs	r1, #0
 800ee3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	0018      	movs	r0, r3
 800ee40:	46bd      	mov	sp, r7
 800ee42:	b004      	add	sp, #16
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	46c0      	nop			@ (mov r8, r8)
 800ee48:	dfffffff 	.word	0xdfffffff

0800ee4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2284      	movs	r2, #132	@ 0x84
 800ee5a:	5c9b      	ldrb	r3, [r3, r2]
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d101      	bne.n	800ee64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ee60:	2302      	movs	r3, #2
 800ee62:	e02e      	b.n	800eec2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2284      	movs	r2, #132	@ 0x84
 800ee68:	2101      	movs	r1, #1
 800ee6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2288      	movs	r2, #136	@ 0x88
 800ee70:	2124      	movs	r1, #36	@ 0x24
 800ee72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2101      	movs	r1, #1
 800ee88:	438a      	bics	r2, r1
 800ee8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	00db      	lsls	r3, r3, #3
 800ee94:	08d9      	lsrs	r1, r3, #3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	430a      	orrs	r2, r1
 800ee9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	0018      	movs	r0, r3
 800eea4:	f000 f854 	bl	800ef50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2288      	movs	r2, #136	@ 0x88
 800eeb4:	2120      	movs	r1, #32
 800eeb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2284      	movs	r2, #132	@ 0x84
 800eebc:	2100      	movs	r1, #0
 800eebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	0018      	movs	r0, r3
 800eec4:	46bd      	mov	sp, r7
 800eec6:	b004      	add	sp, #16
 800eec8:	bd80      	pop	{r7, pc}
	...

0800eecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2284      	movs	r2, #132	@ 0x84
 800eeda:	5c9b      	ldrb	r3, [r3, r2]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d101      	bne.n	800eee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eee0:	2302      	movs	r3, #2
 800eee2:	e02f      	b.n	800ef44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2284      	movs	r2, #132	@ 0x84
 800eee8:	2101      	movs	r1, #1
 800eeea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2288      	movs	r2, #136	@ 0x88
 800eef0:	2124      	movs	r1, #36	@ 0x24
 800eef2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2101      	movs	r1, #1
 800ef08:	438a      	bics	r2, r1
 800ef0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	4a0e      	ldr	r2, [pc, #56]	@ (800ef4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ef14:	4013      	ands	r3, r2
 800ef16:	0019      	movs	r1, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	0018      	movs	r0, r3
 800ef26:	f000 f813 	bl	800ef50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2288      	movs	r2, #136	@ 0x88
 800ef36:	2120      	movs	r1, #32
 800ef38:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2284      	movs	r2, #132	@ 0x84
 800ef3e:	2100      	movs	r1, #0
 800ef40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	0018      	movs	r0, r3
 800ef46:	46bd      	mov	sp, r7
 800ef48:	b004      	add	sp, #16
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	f1ffffff 	.word	0xf1ffffff

0800ef50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d108      	bne.n	800ef72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	226a      	movs	r2, #106	@ 0x6a
 800ef64:	2101      	movs	r1, #1
 800ef66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2268      	movs	r2, #104	@ 0x68
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef70:	e043      	b.n	800effa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef72:	260f      	movs	r6, #15
 800ef74:	19bb      	adds	r3, r7, r6
 800ef76:	2208      	movs	r2, #8
 800ef78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef7a:	200e      	movs	r0, #14
 800ef7c:	183b      	adds	r3, r7, r0
 800ef7e:	2208      	movs	r2, #8
 800ef80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	0e5b      	lsrs	r3, r3, #25
 800ef8a:	b2da      	uxtb	r2, r3
 800ef8c:	240d      	movs	r4, #13
 800ef8e:	193b      	adds	r3, r7, r4
 800ef90:	2107      	movs	r1, #7
 800ef92:	400a      	ands	r2, r1
 800ef94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	0f5b      	lsrs	r3, r3, #29
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	250c      	movs	r5, #12
 800efa2:	197b      	adds	r3, r7, r5
 800efa4:	2107      	movs	r1, #7
 800efa6:	400a      	ands	r2, r1
 800efa8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efaa:	183b      	adds	r3, r7, r0
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	197a      	adds	r2, r7, r5
 800efb0:	7812      	ldrb	r2, [r2, #0]
 800efb2:	4914      	ldr	r1, [pc, #80]	@ (800f004 <UARTEx_SetNbDataToProcess+0xb4>)
 800efb4:	5c8a      	ldrb	r2, [r1, r2]
 800efb6:	435a      	muls	r2, r3
 800efb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800efba:	197b      	adds	r3, r7, r5
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	4a12      	ldr	r2, [pc, #72]	@ (800f008 <UARTEx_SetNbDataToProcess+0xb8>)
 800efc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efc2:	0019      	movs	r1, r3
 800efc4:	f7f5 fa34 	bl	8004430 <__divsi3>
 800efc8:	0003      	movs	r3, r0
 800efca:	b299      	uxth	r1, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	226a      	movs	r2, #106	@ 0x6a
 800efd0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efd2:	19bb      	adds	r3, r7, r6
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	193a      	adds	r2, r7, r4
 800efd8:	7812      	ldrb	r2, [r2, #0]
 800efda:	490a      	ldr	r1, [pc, #40]	@ (800f004 <UARTEx_SetNbDataToProcess+0xb4>)
 800efdc:	5c8a      	ldrb	r2, [r1, r2]
 800efde:	435a      	muls	r2, r3
 800efe0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800efe2:	193b      	adds	r3, r7, r4
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	4a08      	ldr	r2, [pc, #32]	@ (800f008 <UARTEx_SetNbDataToProcess+0xb8>)
 800efe8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efea:	0019      	movs	r1, r3
 800efec:	f7f5 fa20 	bl	8004430 <__divsi3>
 800eff0:	0003      	movs	r3, r0
 800eff2:	b299      	uxth	r1, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2268      	movs	r2, #104	@ 0x68
 800eff8:	5299      	strh	r1, [r3, r2]
}
 800effa:	46c0      	nop			@ (mov r8, r8)
 800effc:	46bd      	mov	sp, r7
 800effe:	b005      	add	sp, #20
 800f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f002:	46c0      	nop			@ (mov r8, r8)
 800f004:	08011b80 	.word	0x08011b80
 800f008:	08011b88 	.word	0x08011b88

0800f00c <malloc>:
 800f00c:	b510      	push	{r4, lr}
 800f00e:	4b03      	ldr	r3, [pc, #12]	@ (800f01c <malloc+0x10>)
 800f010:	0001      	movs	r1, r0
 800f012:	6818      	ldr	r0, [r3, #0]
 800f014:	f000 f830 	bl	800f078 <_malloc_r>
 800f018:	bd10      	pop	{r4, pc}
 800f01a:	46c0      	nop			@ (mov r8, r8)
 800f01c:	20000050 	.word	0x20000050

0800f020 <free>:
 800f020:	b510      	push	{r4, lr}
 800f022:	4b03      	ldr	r3, [pc, #12]	@ (800f030 <free+0x10>)
 800f024:	0001      	movs	r1, r0
 800f026:	6818      	ldr	r0, [r3, #0]
 800f028:	f000 fb9e 	bl	800f768 <_free_r>
 800f02c:	bd10      	pop	{r4, pc}
 800f02e:	46c0      	nop			@ (mov r8, r8)
 800f030:	20000050 	.word	0x20000050

0800f034 <sbrk_aligned>:
 800f034:	b570      	push	{r4, r5, r6, lr}
 800f036:	4e0f      	ldr	r6, [pc, #60]	@ (800f074 <sbrk_aligned+0x40>)
 800f038:	000d      	movs	r5, r1
 800f03a:	6831      	ldr	r1, [r6, #0]
 800f03c:	0004      	movs	r4, r0
 800f03e:	2900      	cmp	r1, #0
 800f040:	d102      	bne.n	800f048 <sbrk_aligned+0x14>
 800f042:	f000 fb35 	bl	800f6b0 <_sbrk_r>
 800f046:	6030      	str	r0, [r6, #0]
 800f048:	0029      	movs	r1, r5
 800f04a:	0020      	movs	r0, r4
 800f04c:	f000 fb30 	bl	800f6b0 <_sbrk_r>
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	d103      	bne.n	800f05c <sbrk_aligned+0x28>
 800f054:	2501      	movs	r5, #1
 800f056:	426d      	negs	r5, r5
 800f058:	0028      	movs	r0, r5
 800f05a:	bd70      	pop	{r4, r5, r6, pc}
 800f05c:	2303      	movs	r3, #3
 800f05e:	1cc5      	adds	r5, r0, #3
 800f060:	439d      	bics	r5, r3
 800f062:	42a8      	cmp	r0, r5
 800f064:	d0f8      	beq.n	800f058 <sbrk_aligned+0x24>
 800f066:	1a29      	subs	r1, r5, r0
 800f068:	0020      	movs	r0, r4
 800f06a:	f000 fb21 	bl	800f6b0 <_sbrk_r>
 800f06e:	3001      	adds	r0, #1
 800f070:	d1f2      	bne.n	800f058 <sbrk_aligned+0x24>
 800f072:	e7ef      	b.n	800f054 <sbrk_aligned+0x20>
 800f074:	20001e70 	.word	0x20001e70

0800f078 <_malloc_r>:
 800f078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f07a:	2203      	movs	r2, #3
 800f07c:	1ccb      	adds	r3, r1, #3
 800f07e:	4393      	bics	r3, r2
 800f080:	3308      	adds	r3, #8
 800f082:	0005      	movs	r5, r0
 800f084:	001f      	movs	r7, r3
 800f086:	2b0c      	cmp	r3, #12
 800f088:	d234      	bcs.n	800f0f4 <_malloc_r+0x7c>
 800f08a:	270c      	movs	r7, #12
 800f08c:	42b9      	cmp	r1, r7
 800f08e:	d833      	bhi.n	800f0f8 <_malloc_r+0x80>
 800f090:	0028      	movs	r0, r5
 800f092:	f000 f871 	bl	800f178 <__malloc_lock>
 800f096:	4e37      	ldr	r6, [pc, #220]	@ (800f174 <_malloc_r+0xfc>)
 800f098:	6833      	ldr	r3, [r6, #0]
 800f09a:	001c      	movs	r4, r3
 800f09c:	2c00      	cmp	r4, #0
 800f09e:	d12f      	bne.n	800f100 <_malloc_r+0x88>
 800f0a0:	0039      	movs	r1, r7
 800f0a2:	0028      	movs	r0, r5
 800f0a4:	f7ff ffc6 	bl	800f034 <sbrk_aligned>
 800f0a8:	0004      	movs	r4, r0
 800f0aa:	1c43      	adds	r3, r0, #1
 800f0ac:	d15f      	bne.n	800f16e <_malloc_r+0xf6>
 800f0ae:	6834      	ldr	r4, [r6, #0]
 800f0b0:	9400      	str	r4, [sp, #0]
 800f0b2:	9b00      	ldr	r3, [sp, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d14a      	bne.n	800f14e <_malloc_r+0xd6>
 800f0b8:	2c00      	cmp	r4, #0
 800f0ba:	d052      	beq.n	800f162 <_malloc_r+0xea>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	0028      	movs	r0, r5
 800f0c0:	18e3      	adds	r3, r4, r3
 800f0c2:	9900      	ldr	r1, [sp, #0]
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	f000 faf3 	bl	800f6b0 <_sbrk_r>
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	4283      	cmp	r3, r0
 800f0ce:	d148      	bne.n	800f162 <_malloc_r+0xea>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	0028      	movs	r0, r5
 800f0d4:	1aff      	subs	r7, r7, r3
 800f0d6:	0039      	movs	r1, r7
 800f0d8:	f7ff ffac 	bl	800f034 <sbrk_aligned>
 800f0dc:	3001      	adds	r0, #1
 800f0de:	d040      	beq.n	800f162 <_malloc_r+0xea>
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	19db      	adds	r3, r3, r7
 800f0e4:	6023      	str	r3, [r4, #0]
 800f0e6:	6833      	ldr	r3, [r6, #0]
 800f0e8:	685a      	ldr	r2, [r3, #4]
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	d133      	bne.n	800f156 <_malloc_r+0xde>
 800f0ee:	9b00      	ldr	r3, [sp, #0]
 800f0f0:	6033      	str	r3, [r6, #0]
 800f0f2:	e019      	b.n	800f128 <_malloc_r+0xb0>
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	dac9      	bge.n	800f08c <_malloc_r+0x14>
 800f0f8:	230c      	movs	r3, #12
 800f0fa:	602b      	str	r3, [r5, #0]
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f100:	6821      	ldr	r1, [r4, #0]
 800f102:	1bc9      	subs	r1, r1, r7
 800f104:	d420      	bmi.n	800f148 <_malloc_r+0xd0>
 800f106:	290b      	cmp	r1, #11
 800f108:	d90a      	bls.n	800f120 <_malloc_r+0xa8>
 800f10a:	19e2      	adds	r2, r4, r7
 800f10c:	6027      	str	r7, [r4, #0]
 800f10e:	42a3      	cmp	r3, r4
 800f110:	d104      	bne.n	800f11c <_malloc_r+0xa4>
 800f112:	6032      	str	r2, [r6, #0]
 800f114:	6863      	ldr	r3, [r4, #4]
 800f116:	6011      	str	r1, [r2, #0]
 800f118:	6053      	str	r3, [r2, #4]
 800f11a:	e005      	b.n	800f128 <_malloc_r+0xb0>
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	e7f9      	b.n	800f114 <_malloc_r+0x9c>
 800f120:	6862      	ldr	r2, [r4, #4]
 800f122:	42a3      	cmp	r3, r4
 800f124:	d10e      	bne.n	800f144 <_malloc_r+0xcc>
 800f126:	6032      	str	r2, [r6, #0]
 800f128:	0028      	movs	r0, r5
 800f12a:	f000 f82d 	bl	800f188 <__malloc_unlock>
 800f12e:	0020      	movs	r0, r4
 800f130:	2207      	movs	r2, #7
 800f132:	300b      	adds	r0, #11
 800f134:	1d23      	adds	r3, r4, #4
 800f136:	4390      	bics	r0, r2
 800f138:	1ac2      	subs	r2, r0, r3
 800f13a:	4298      	cmp	r0, r3
 800f13c:	d0df      	beq.n	800f0fe <_malloc_r+0x86>
 800f13e:	1a1b      	subs	r3, r3, r0
 800f140:	50a3      	str	r3, [r4, r2]
 800f142:	e7dc      	b.n	800f0fe <_malloc_r+0x86>
 800f144:	605a      	str	r2, [r3, #4]
 800f146:	e7ef      	b.n	800f128 <_malloc_r+0xb0>
 800f148:	0023      	movs	r3, r4
 800f14a:	6864      	ldr	r4, [r4, #4]
 800f14c:	e7a6      	b.n	800f09c <_malloc_r+0x24>
 800f14e:	9c00      	ldr	r4, [sp, #0]
 800f150:	6863      	ldr	r3, [r4, #4]
 800f152:	9300      	str	r3, [sp, #0]
 800f154:	e7ad      	b.n	800f0b2 <_malloc_r+0x3a>
 800f156:	001a      	movs	r2, r3
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	42a3      	cmp	r3, r4
 800f15c:	d1fb      	bne.n	800f156 <_malloc_r+0xde>
 800f15e:	2300      	movs	r3, #0
 800f160:	e7da      	b.n	800f118 <_malloc_r+0xa0>
 800f162:	230c      	movs	r3, #12
 800f164:	0028      	movs	r0, r5
 800f166:	602b      	str	r3, [r5, #0]
 800f168:	f000 f80e 	bl	800f188 <__malloc_unlock>
 800f16c:	e7c6      	b.n	800f0fc <_malloc_r+0x84>
 800f16e:	6007      	str	r7, [r0, #0]
 800f170:	e7da      	b.n	800f128 <_malloc_r+0xb0>
 800f172:	46c0      	nop			@ (mov r8, r8)
 800f174:	20001e74 	.word	0x20001e74

0800f178 <__malloc_lock>:
 800f178:	b510      	push	{r4, lr}
 800f17a:	4802      	ldr	r0, [pc, #8]	@ (800f184 <__malloc_lock+0xc>)
 800f17c:	f000 fae9 	bl	800f752 <__retarget_lock_acquire_recursive>
 800f180:	bd10      	pop	{r4, pc}
 800f182:	46c0      	nop			@ (mov r8, r8)
 800f184:	20001fb8 	.word	0x20001fb8

0800f188 <__malloc_unlock>:
 800f188:	b510      	push	{r4, lr}
 800f18a:	4802      	ldr	r0, [pc, #8]	@ (800f194 <__malloc_unlock+0xc>)
 800f18c:	f000 fae2 	bl	800f754 <__retarget_lock_release_recursive>
 800f190:	bd10      	pop	{r4, pc}
 800f192:	46c0      	nop			@ (mov r8, r8)
 800f194:	20001fb8 	.word	0x20001fb8

0800f198 <std>:
 800f198:	2300      	movs	r3, #0
 800f19a:	b510      	push	{r4, lr}
 800f19c:	0004      	movs	r4, r0
 800f19e:	6003      	str	r3, [r0, #0]
 800f1a0:	6043      	str	r3, [r0, #4]
 800f1a2:	6083      	str	r3, [r0, #8]
 800f1a4:	8181      	strh	r1, [r0, #12]
 800f1a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f1a8:	81c2      	strh	r2, [r0, #14]
 800f1aa:	6103      	str	r3, [r0, #16]
 800f1ac:	6143      	str	r3, [r0, #20]
 800f1ae:	6183      	str	r3, [r0, #24]
 800f1b0:	0019      	movs	r1, r3
 800f1b2:	2208      	movs	r2, #8
 800f1b4:	305c      	adds	r0, #92	@ 0x5c
 800f1b6:	f000 fa39 	bl	800f62c <memset>
 800f1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f1e8 <std+0x50>)
 800f1bc:	6224      	str	r4, [r4, #32]
 800f1be:	6263      	str	r3, [r4, #36]	@ 0x24
 800f1c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f1ec <std+0x54>)
 800f1c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f1f0 <std+0x58>)
 800f1c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f1f4 <std+0x5c>)
 800f1ca:	6323      	str	r3, [r4, #48]	@ 0x30
 800f1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f1f8 <std+0x60>)
 800f1ce:	429c      	cmp	r4, r3
 800f1d0:	d005      	beq.n	800f1de <std+0x46>
 800f1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f1fc <std+0x64>)
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	d002      	beq.n	800f1de <std+0x46>
 800f1d8:	4b09      	ldr	r3, [pc, #36]	@ (800f200 <std+0x68>)
 800f1da:	429c      	cmp	r4, r3
 800f1dc:	d103      	bne.n	800f1e6 <std+0x4e>
 800f1de:	0020      	movs	r0, r4
 800f1e0:	3058      	adds	r0, #88	@ 0x58
 800f1e2:	f000 fab5 	bl	800f750 <__retarget_lock_init_recursive>
 800f1e6:	bd10      	pop	{r4, pc}
 800f1e8:	0800f3e1 	.word	0x0800f3e1
 800f1ec:	0800f409 	.word	0x0800f409
 800f1f0:	0800f441 	.word	0x0800f441
 800f1f4:	0800f46d 	.word	0x0800f46d
 800f1f8:	20001e78 	.word	0x20001e78
 800f1fc:	20001ee0 	.word	0x20001ee0
 800f200:	20001f48 	.word	0x20001f48

0800f204 <stdio_exit_handler>:
 800f204:	b510      	push	{r4, lr}
 800f206:	4a03      	ldr	r2, [pc, #12]	@ (800f214 <stdio_exit_handler+0x10>)
 800f208:	4903      	ldr	r1, [pc, #12]	@ (800f218 <stdio_exit_handler+0x14>)
 800f20a:	4804      	ldr	r0, [pc, #16]	@ (800f21c <stdio_exit_handler+0x18>)
 800f20c:	f000 f86c 	bl	800f2e8 <_fwalk_sglue>
 800f210:	bd10      	pop	{r4, pc}
 800f212:	46c0      	nop			@ (mov r8, r8)
 800f214:	20000044 	.word	0x20000044
 800f218:	0800febd 	.word	0x0800febd
 800f21c:	20000054 	.word	0x20000054

0800f220 <cleanup_stdio>:
 800f220:	6841      	ldr	r1, [r0, #4]
 800f222:	4b0b      	ldr	r3, [pc, #44]	@ (800f250 <cleanup_stdio+0x30>)
 800f224:	b510      	push	{r4, lr}
 800f226:	0004      	movs	r4, r0
 800f228:	4299      	cmp	r1, r3
 800f22a:	d001      	beq.n	800f230 <cleanup_stdio+0x10>
 800f22c:	f000 fe46 	bl	800febc <_fflush_r>
 800f230:	68a1      	ldr	r1, [r4, #8]
 800f232:	4b08      	ldr	r3, [pc, #32]	@ (800f254 <cleanup_stdio+0x34>)
 800f234:	4299      	cmp	r1, r3
 800f236:	d002      	beq.n	800f23e <cleanup_stdio+0x1e>
 800f238:	0020      	movs	r0, r4
 800f23a:	f000 fe3f 	bl	800febc <_fflush_r>
 800f23e:	68e1      	ldr	r1, [r4, #12]
 800f240:	4b05      	ldr	r3, [pc, #20]	@ (800f258 <cleanup_stdio+0x38>)
 800f242:	4299      	cmp	r1, r3
 800f244:	d002      	beq.n	800f24c <cleanup_stdio+0x2c>
 800f246:	0020      	movs	r0, r4
 800f248:	f000 fe38 	bl	800febc <_fflush_r>
 800f24c:	bd10      	pop	{r4, pc}
 800f24e:	46c0      	nop			@ (mov r8, r8)
 800f250:	20001e78 	.word	0x20001e78
 800f254:	20001ee0 	.word	0x20001ee0
 800f258:	20001f48 	.word	0x20001f48

0800f25c <global_stdio_init.part.0>:
 800f25c:	b510      	push	{r4, lr}
 800f25e:	4b09      	ldr	r3, [pc, #36]	@ (800f284 <global_stdio_init.part.0+0x28>)
 800f260:	4a09      	ldr	r2, [pc, #36]	@ (800f288 <global_stdio_init.part.0+0x2c>)
 800f262:	2104      	movs	r1, #4
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	4809      	ldr	r0, [pc, #36]	@ (800f28c <global_stdio_init.part.0+0x30>)
 800f268:	2200      	movs	r2, #0
 800f26a:	f7ff ff95 	bl	800f198 <std>
 800f26e:	2201      	movs	r2, #1
 800f270:	2109      	movs	r1, #9
 800f272:	4807      	ldr	r0, [pc, #28]	@ (800f290 <global_stdio_init.part.0+0x34>)
 800f274:	f7ff ff90 	bl	800f198 <std>
 800f278:	2202      	movs	r2, #2
 800f27a:	2112      	movs	r1, #18
 800f27c:	4805      	ldr	r0, [pc, #20]	@ (800f294 <global_stdio_init.part.0+0x38>)
 800f27e:	f7ff ff8b 	bl	800f198 <std>
 800f282:	bd10      	pop	{r4, pc}
 800f284:	20001fb0 	.word	0x20001fb0
 800f288:	0800f205 	.word	0x0800f205
 800f28c:	20001e78 	.word	0x20001e78
 800f290:	20001ee0 	.word	0x20001ee0
 800f294:	20001f48 	.word	0x20001f48

0800f298 <__sfp_lock_acquire>:
 800f298:	b510      	push	{r4, lr}
 800f29a:	4802      	ldr	r0, [pc, #8]	@ (800f2a4 <__sfp_lock_acquire+0xc>)
 800f29c:	f000 fa59 	bl	800f752 <__retarget_lock_acquire_recursive>
 800f2a0:	bd10      	pop	{r4, pc}
 800f2a2:	46c0      	nop			@ (mov r8, r8)
 800f2a4:	20001fb9 	.word	0x20001fb9

0800f2a8 <__sfp_lock_release>:
 800f2a8:	b510      	push	{r4, lr}
 800f2aa:	4802      	ldr	r0, [pc, #8]	@ (800f2b4 <__sfp_lock_release+0xc>)
 800f2ac:	f000 fa52 	bl	800f754 <__retarget_lock_release_recursive>
 800f2b0:	bd10      	pop	{r4, pc}
 800f2b2:	46c0      	nop			@ (mov r8, r8)
 800f2b4:	20001fb9 	.word	0x20001fb9

0800f2b8 <__sinit>:
 800f2b8:	b510      	push	{r4, lr}
 800f2ba:	0004      	movs	r4, r0
 800f2bc:	f7ff ffec 	bl	800f298 <__sfp_lock_acquire>
 800f2c0:	6a23      	ldr	r3, [r4, #32]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <__sinit+0x14>
 800f2c6:	f7ff ffef 	bl	800f2a8 <__sfp_lock_release>
 800f2ca:	bd10      	pop	{r4, pc}
 800f2cc:	4b04      	ldr	r3, [pc, #16]	@ (800f2e0 <__sinit+0x28>)
 800f2ce:	6223      	str	r3, [r4, #32]
 800f2d0:	4b04      	ldr	r3, [pc, #16]	@ (800f2e4 <__sinit+0x2c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1f6      	bne.n	800f2c6 <__sinit+0xe>
 800f2d8:	f7ff ffc0 	bl	800f25c <global_stdio_init.part.0>
 800f2dc:	e7f3      	b.n	800f2c6 <__sinit+0xe>
 800f2de:	46c0      	nop			@ (mov r8, r8)
 800f2e0:	0800f221 	.word	0x0800f221
 800f2e4:	20001fb0 	.word	0x20001fb0

0800f2e8 <_fwalk_sglue>:
 800f2e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2ea:	0014      	movs	r4, r2
 800f2ec:	2600      	movs	r6, #0
 800f2ee:	9000      	str	r0, [sp, #0]
 800f2f0:	9101      	str	r1, [sp, #4]
 800f2f2:	68a5      	ldr	r5, [r4, #8]
 800f2f4:	6867      	ldr	r7, [r4, #4]
 800f2f6:	3f01      	subs	r7, #1
 800f2f8:	d504      	bpl.n	800f304 <_fwalk_sglue+0x1c>
 800f2fa:	6824      	ldr	r4, [r4, #0]
 800f2fc:	2c00      	cmp	r4, #0
 800f2fe:	d1f8      	bne.n	800f2f2 <_fwalk_sglue+0xa>
 800f300:	0030      	movs	r0, r6
 800f302:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f304:	89ab      	ldrh	r3, [r5, #12]
 800f306:	2b01      	cmp	r3, #1
 800f308:	d908      	bls.n	800f31c <_fwalk_sglue+0x34>
 800f30a:	220e      	movs	r2, #14
 800f30c:	5eab      	ldrsh	r3, [r5, r2]
 800f30e:	3301      	adds	r3, #1
 800f310:	d004      	beq.n	800f31c <_fwalk_sglue+0x34>
 800f312:	0029      	movs	r1, r5
 800f314:	9800      	ldr	r0, [sp, #0]
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	4798      	blx	r3
 800f31a:	4306      	orrs	r6, r0
 800f31c:	3568      	adds	r5, #104	@ 0x68
 800f31e:	e7ea      	b.n	800f2f6 <_fwalk_sglue+0xe>

0800f320 <_puts_r>:
 800f320:	6a03      	ldr	r3, [r0, #32]
 800f322:	b570      	push	{r4, r5, r6, lr}
 800f324:	0005      	movs	r5, r0
 800f326:	000e      	movs	r6, r1
 800f328:	6884      	ldr	r4, [r0, #8]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d101      	bne.n	800f332 <_puts_r+0x12>
 800f32e:	f7ff ffc3 	bl	800f2b8 <__sinit>
 800f332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f334:	07db      	lsls	r3, r3, #31
 800f336:	d405      	bmi.n	800f344 <_puts_r+0x24>
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	059b      	lsls	r3, r3, #22
 800f33c:	d402      	bmi.n	800f344 <_puts_r+0x24>
 800f33e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f340:	f000 fa07 	bl	800f752 <__retarget_lock_acquire_recursive>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	071b      	lsls	r3, r3, #28
 800f348:	d502      	bpl.n	800f350 <_puts_r+0x30>
 800f34a:	6923      	ldr	r3, [r4, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d11f      	bne.n	800f390 <_puts_r+0x70>
 800f350:	0021      	movs	r1, r4
 800f352:	0028      	movs	r0, r5
 800f354:	f000 f90c 	bl	800f570 <__swsetup_r>
 800f358:	2800      	cmp	r0, #0
 800f35a:	d019      	beq.n	800f390 <_puts_r+0x70>
 800f35c:	2501      	movs	r5, #1
 800f35e:	426d      	negs	r5, r5
 800f360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f362:	07db      	lsls	r3, r3, #31
 800f364:	d405      	bmi.n	800f372 <_puts_r+0x52>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	059b      	lsls	r3, r3, #22
 800f36a:	d402      	bmi.n	800f372 <_puts_r+0x52>
 800f36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f36e:	f000 f9f1 	bl	800f754 <__retarget_lock_release_recursive>
 800f372:	0028      	movs	r0, r5
 800f374:	bd70      	pop	{r4, r5, r6, pc}
 800f376:	3601      	adds	r6, #1
 800f378:	60a3      	str	r3, [r4, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	da04      	bge.n	800f388 <_puts_r+0x68>
 800f37e:	69a2      	ldr	r2, [r4, #24]
 800f380:	429a      	cmp	r2, r3
 800f382:	dc16      	bgt.n	800f3b2 <_puts_r+0x92>
 800f384:	290a      	cmp	r1, #10
 800f386:	d014      	beq.n	800f3b2 <_puts_r+0x92>
 800f388:	6823      	ldr	r3, [r4, #0]
 800f38a:	1c5a      	adds	r2, r3, #1
 800f38c:	6022      	str	r2, [r4, #0]
 800f38e:	7019      	strb	r1, [r3, #0]
 800f390:	68a3      	ldr	r3, [r4, #8]
 800f392:	7831      	ldrb	r1, [r6, #0]
 800f394:	3b01      	subs	r3, #1
 800f396:	2900      	cmp	r1, #0
 800f398:	d1ed      	bne.n	800f376 <_puts_r+0x56>
 800f39a:	60a3      	str	r3, [r4, #8]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	da0f      	bge.n	800f3c0 <_puts_r+0xa0>
 800f3a0:	0022      	movs	r2, r4
 800f3a2:	0028      	movs	r0, r5
 800f3a4:	310a      	adds	r1, #10
 800f3a6:	f000 f8a1 	bl	800f4ec <__swbuf_r>
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d0d6      	beq.n	800f35c <_puts_r+0x3c>
 800f3ae:	250a      	movs	r5, #10
 800f3b0:	e7d6      	b.n	800f360 <_puts_r+0x40>
 800f3b2:	0022      	movs	r2, r4
 800f3b4:	0028      	movs	r0, r5
 800f3b6:	f000 f899 	bl	800f4ec <__swbuf_r>
 800f3ba:	3001      	adds	r0, #1
 800f3bc:	d1e8      	bne.n	800f390 <_puts_r+0x70>
 800f3be:	e7cd      	b.n	800f35c <_puts_r+0x3c>
 800f3c0:	6823      	ldr	r3, [r4, #0]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	6022      	str	r2, [r4, #0]
 800f3c6:	220a      	movs	r2, #10
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	e7f0      	b.n	800f3ae <_puts_r+0x8e>

0800f3cc <puts>:
 800f3cc:	b510      	push	{r4, lr}
 800f3ce:	4b03      	ldr	r3, [pc, #12]	@ (800f3dc <puts+0x10>)
 800f3d0:	0001      	movs	r1, r0
 800f3d2:	6818      	ldr	r0, [r3, #0]
 800f3d4:	f7ff ffa4 	bl	800f320 <_puts_r>
 800f3d8:	bd10      	pop	{r4, pc}
 800f3da:	46c0      	nop			@ (mov r8, r8)
 800f3dc:	20000050 	.word	0x20000050

0800f3e0 <__sread>:
 800f3e0:	b570      	push	{r4, r5, r6, lr}
 800f3e2:	000c      	movs	r4, r1
 800f3e4:	250e      	movs	r5, #14
 800f3e6:	5f49      	ldrsh	r1, [r1, r5]
 800f3e8:	f000 f94e 	bl	800f688 <_read_r>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	db03      	blt.n	800f3f8 <__sread+0x18>
 800f3f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f3f2:	181b      	adds	r3, r3, r0
 800f3f4:	6563      	str	r3, [r4, #84]	@ 0x54
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	4a02      	ldr	r2, [pc, #8]	@ (800f404 <__sread+0x24>)
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	e7f9      	b.n	800f3f6 <__sread+0x16>
 800f402:	46c0      	nop			@ (mov r8, r8)
 800f404:	ffffefff 	.word	0xffffefff

0800f408 <__swrite>:
 800f408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40a:	001f      	movs	r7, r3
 800f40c:	898b      	ldrh	r3, [r1, #12]
 800f40e:	0005      	movs	r5, r0
 800f410:	000c      	movs	r4, r1
 800f412:	0016      	movs	r6, r2
 800f414:	05db      	lsls	r3, r3, #23
 800f416:	d505      	bpl.n	800f424 <__swrite+0x1c>
 800f418:	230e      	movs	r3, #14
 800f41a:	5ec9      	ldrsh	r1, [r1, r3]
 800f41c:	2200      	movs	r2, #0
 800f41e:	2302      	movs	r3, #2
 800f420:	f000 f91e 	bl	800f660 <_lseek_r>
 800f424:	89a3      	ldrh	r3, [r4, #12]
 800f426:	4a05      	ldr	r2, [pc, #20]	@ (800f43c <__swrite+0x34>)
 800f428:	0028      	movs	r0, r5
 800f42a:	4013      	ands	r3, r2
 800f42c:	81a3      	strh	r3, [r4, #12]
 800f42e:	0032      	movs	r2, r6
 800f430:	230e      	movs	r3, #14
 800f432:	5ee1      	ldrsh	r1, [r4, r3]
 800f434:	003b      	movs	r3, r7
 800f436:	f000 f94d 	bl	800f6d4 <_write_r>
 800f43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f43c:	ffffefff 	.word	0xffffefff

0800f440 <__sseek>:
 800f440:	b570      	push	{r4, r5, r6, lr}
 800f442:	000c      	movs	r4, r1
 800f444:	250e      	movs	r5, #14
 800f446:	5f49      	ldrsh	r1, [r1, r5]
 800f448:	f000 f90a 	bl	800f660 <_lseek_r>
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	1c42      	adds	r2, r0, #1
 800f450:	d103      	bne.n	800f45a <__sseek+0x1a>
 800f452:	4a05      	ldr	r2, [pc, #20]	@ (800f468 <__sseek+0x28>)
 800f454:	4013      	ands	r3, r2
 800f456:	81a3      	strh	r3, [r4, #12]
 800f458:	bd70      	pop	{r4, r5, r6, pc}
 800f45a:	2280      	movs	r2, #128	@ 0x80
 800f45c:	0152      	lsls	r2, r2, #5
 800f45e:	4313      	orrs	r3, r2
 800f460:	81a3      	strh	r3, [r4, #12]
 800f462:	6560      	str	r0, [r4, #84]	@ 0x54
 800f464:	e7f8      	b.n	800f458 <__sseek+0x18>
 800f466:	46c0      	nop			@ (mov r8, r8)
 800f468:	ffffefff 	.word	0xffffefff

0800f46c <__sclose>:
 800f46c:	b510      	push	{r4, lr}
 800f46e:	230e      	movs	r3, #14
 800f470:	5ec9      	ldrsh	r1, [r1, r3]
 800f472:	f000 f8e3 	bl	800f63c <_close_r>
 800f476:	bd10      	pop	{r4, pc}

0800f478 <_vsniprintf_r>:
 800f478:	b530      	push	{r4, r5, lr}
 800f47a:	0005      	movs	r5, r0
 800f47c:	0014      	movs	r4, r2
 800f47e:	0008      	movs	r0, r1
 800f480:	001a      	movs	r2, r3
 800f482:	b09b      	sub	sp, #108	@ 0x6c
 800f484:	2c00      	cmp	r4, #0
 800f486:	da05      	bge.n	800f494 <_vsniprintf_r+0x1c>
 800f488:	238b      	movs	r3, #139	@ 0x8b
 800f48a:	2001      	movs	r0, #1
 800f48c:	602b      	str	r3, [r5, #0]
 800f48e:	4240      	negs	r0, r0
 800f490:	b01b      	add	sp, #108	@ 0x6c
 800f492:	bd30      	pop	{r4, r5, pc}
 800f494:	2382      	movs	r3, #130	@ 0x82
 800f496:	4669      	mov	r1, sp
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	818b      	strh	r3, [r1, #12]
 800f49c:	2100      	movs	r1, #0
 800f49e:	9000      	str	r0, [sp, #0]
 800f4a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800f4a2:	9004      	str	r0, [sp, #16]
 800f4a4:	428c      	cmp	r4, r1
 800f4a6:	d000      	beq.n	800f4aa <_vsniprintf_r+0x32>
 800f4a8:	1e61      	subs	r1, r4, #1
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	9102      	str	r1, [sp, #8]
 800f4ae:	9105      	str	r1, [sp, #20]
 800f4b0:	4669      	mov	r1, sp
 800f4b2:	425b      	negs	r3, r3
 800f4b4:	81cb      	strh	r3, [r1, #14]
 800f4b6:	0028      	movs	r0, r5
 800f4b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f4ba:	f000 f9ff 	bl	800f8bc <_svfiprintf_r>
 800f4be:	1c43      	adds	r3, r0, #1
 800f4c0:	da01      	bge.n	800f4c6 <_vsniprintf_r+0x4e>
 800f4c2:	238b      	movs	r3, #139	@ 0x8b
 800f4c4:	602b      	str	r3, [r5, #0]
 800f4c6:	2c00      	cmp	r4, #0
 800f4c8:	d0e2      	beq.n	800f490 <_vsniprintf_r+0x18>
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	9b00      	ldr	r3, [sp, #0]
 800f4ce:	701a      	strb	r2, [r3, #0]
 800f4d0:	e7de      	b.n	800f490 <_vsniprintf_r+0x18>
	...

0800f4d4 <vsniprintf>:
 800f4d4:	b513      	push	{r0, r1, r4, lr}
 800f4d6:	4c04      	ldr	r4, [pc, #16]	@ (800f4e8 <vsniprintf+0x14>)
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	0013      	movs	r3, r2
 800f4dc:	000a      	movs	r2, r1
 800f4de:	0001      	movs	r1, r0
 800f4e0:	6820      	ldr	r0, [r4, #0]
 800f4e2:	f7ff ffc9 	bl	800f478 <_vsniprintf_r>
 800f4e6:	bd16      	pop	{r1, r2, r4, pc}
 800f4e8:	20000050 	.word	0x20000050

0800f4ec <__swbuf_r>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	0006      	movs	r6, r0
 800f4f0:	000d      	movs	r5, r1
 800f4f2:	0014      	movs	r4, r2
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d004      	beq.n	800f502 <__swbuf_r+0x16>
 800f4f8:	6a03      	ldr	r3, [r0, #32]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d101      	bne.n	800f502 <__swbuf_r+0x16>
 800f4fe:	f7ff fedb 	bl	800f2b8 <__sinit>
 800f502:	69a3      	ldr	r3, [r4, #24]
 800f504:	60a3      	str	r3, [r4, #8]
 800f506:	89a3      	ldrh	r3, [r4, #12]
 800f508:	071b      	lsls	r3, r3, #28
 800f50a:	d502      	bpl.n	800f512 <__swbuf_r+0x26>
 800f50c:	6923      	ldr	r3, [r4, #16]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d109      	bne.n	800f526 <__swbuf_r+0x3a>
 800f512:	0021      	movs	r1, r4
 800f514:	0030      	movs	r0, r6
 800f516:	f000 f82b 	bl	800f570 <__swsetup_r>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d003      	beq.n	800f526 <__swbuf_r+0x3a>
 800f51e:	2501      	movs	r5, #1
 800f520:	426d      	negs	r5, r5
 800f522:	0028      	movs	r0, r5
 800f524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f526:	6923      	ldr	r3, [r4, #16]
 800f528:	6820      	ldr	r0, [r4, #0]
 800f52a:	b2ef      	uxtb	r7, r5
 800f52c:	1ac0      	subs	r0, r0, r3
 800f52e:	6963      	ldr	r3, [r4, #20]
 800f530:	b2ed      	uxtb	r5, r5
 800f532:	4283      	cmp	r3, r0
 800f534:	dc05      	bgt.n	800f542 <__swbuf_r+0x56>
 800f536:	0021      	movs	r1, r4
 800f538:	0030      	movs	r0, r6
 800f53a:	f000 fcbf 	bl	800febc <_fflush_r>
 800f53e:	2800      	cmp	r0, #0
 800f540:	d1ed      	bne.n	800f51e <__swbuf_r+0x32>
 800f542:	68a3      	ldr	r3, [r4, #8]
 800f544:	3001      	adds	r0, #1
 800f546:	3b01      	subs	r3, #1
 800f548:	60a3      	str	r3, [r4, #8]
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	1c5a      	adds	r2, r3, #1
 800f54e:	6022      	str	r2, [r4, #0]
 800f550:	701f      	strb	r7, [r3, #0]
 800f552:	6963      	ldr	r3, [r4, #20]
 800f554:	4283      	cmp	r3, r0
 800f556:	d004      	beq.n	800f562 <__swbuf_r+0x76>
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	07db      	lsls	r3, r3, #31
 800f55c:	d5e1      	bpl.n	800f522 <__swbuf_r+0x36>
 800f55e:	2d0a      	cmp	r5, #10
 800f560:	d1df      	bne.n	800f522 <__swbuf_r+0x36>
 800f562:	0021      	movs	r1, r4
 800f564:	0030      	movs	r0, r6
 800f566:	f000 fca9 	bl	800febc <_fflush_r>
 800f56a:	2800      	cmp	r0, #0
 800f56c:	d0d9      	beq.n	800f522 <__swbuf_r+0x36>
 800f56e:	e7d6      	b.n	800f51e <__swbuf_r+0x32>

0800f570 <__swsetup_r>:
 800f570:	4b2d      	ldr	r3, [pc, #180]	@ (800f628 <__swsetup_r+0xb8>)
 800f572:	b570      	push	{r4, r5, r6, lr}
 800f574:	0005      	movs	r5, r0
 800f576:	6818      	ldr	r0, [r3, #0]
 800f578:	000c      	movs	r4, r1
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d004      	beq.n	800f588 <__swsetup_r+0x18>
 800f57e:	6a03      	ldr	r3, [r0, #32]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d101      	bne.n	800f588 <__swsetup_r+0x18>
 800f584:	f7ff fe98 	bl	800f2b8 <__sinit>
 800f588:	220c      	movs	r2, #12
 800f58a:	5ea3      	ldrsh	r3, [r4, r2]
 800f58c:	071a      	lsls	r2, r3, #28
 800f58e:	d423      	bmi.n	800f5d8 <__swsetup_r+0x68>
 800f590:	06da      	lsls	r2, r3, #27
 800f592:	d407      	bmi.n	800f5a4 <__swsetup_r+0x34>
 800f594:	2209      	movs	r2, #9
 800f596:	602a      	str	r2, [r5, #0]
 800f598:	2240      	movs	r2, #64	@ 0x40
 800f59a:	2001      	movs	r0, #1
 800f59c:	4313      	orrs	r3, r2
 800f59e:	81a3      	strh	r3, [r4, #12]
 800f5a0:	4240      	negs	r0, r0
 800f5a2:	e03a      	b.n	800f61a <__swsetup_r+0xaa>
 800f5a4:	075b      	lsls	r3, r3, #29
 800f5a6:	d513      	bpl.n	800f5d0 <__swsetup_r+0x60>
 800f5a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5aa:	2900      	cmp	r1, #0
 800f5ac:	d008      	beq.n	800f5c0 <__swsetup_r+0x50>
 800f5ae:	0023      	movs	r3, r4
 800f5b0:	3344      	adds	r3, #68	@ 0x44
 800f5b2:	4299      	cmp	r1, r3
 800f5b4:	d002      	beq.n	800f5bc <__swsetup_r+0x4c>
 800f5b6:	0028      	movs	r0, r5
 800f5b8:	f000 f8d6 	bl	800f768 <_free_r>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5c0:	2224      	movs	r2, #36	@ 0x24
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	4393      	bics	r3, r2
 800f5c6:	81a3      	strh	r3, [r4, #12]
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	6063      	str	r3, [r4, #4]
 800f5cc:	6923      	ldr	r3, [r4, #16]
 800f5ce:	6023      	str	r3, [r4, #0]
 800f5d0:	2308      	movs	r3, #8
 800f5d2:	89a2      	ldrh	r2, [r4, #12]
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	81a3      	strh	r3, [r4, #12]
 800f5d8:	6923      	ldr	r3, [r4, #16]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10b      	bne.n	800f5f6 <__swsetup_r+0x86>
 800f5de:	21a0      	movs	r1, #160	@ 0xa0
 800f5e0:	2280      	movs	r2, #128	@ 0x80
 800f5e2:	89a3      	ldrh	r3, [r4, #12]
 800f5e4:	0089      	lsls	r1, r1, #2
 800f5e6:	0092      	lsls	r2, r2, #2
 800f5e8:	400b      	ands	r3, r1
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d003      	beq.n	800f5f6 <__swsetup_r+0x86>
 800f5ee:	0021      	movs	r1, r4
 800f5f0:	0028      	movs	r0, r5
 800f5f2:	f000 fcb9 	bl	800ff68 <__smakebuf_r>
 800f5f6:	220c      	movs	r2, #12
 800f5f8:	5ea3      	ldrsh	r3, [r4, r2]
 800f5fa:	2101      	movs	r1, #1
 800f5fc:	001a      	movs	r2, r3
 800f5fe:	400a      	ands	r2, r1
 800f600:	420b      	tst	r3, r1
 800f602:	d00b      	beq.n	800f61c <__swsetup_r+0xac>
 800f604:	2200      	movs	r2, #0
 800f606:	60a2      	str	r2, [r4, #8]
 800f608:	6962      	ldr	r2, [r4, #20]
 800f60a:	4252      	negs	r2, r2
 800f60c:	61a2      	str	r2, [r4, #24]
 800f60e:	2000      	movs	r0, #0
 800f610:	6922      	ldr	r2, [r4, #16]
 800f612:	4282      	cmp	r2, r0
 800f614:	d101      	bne.n	800f61a <__swsetup_r+0xaa>
 800f616:	061a      	lsls	r2, r3, #24
 800f618:	d4be      	bmi.n	800f598 <__swsetup_r+0x28>
 800f61a:	bd70      	pop	{r4, r5, r6, pc}
 800f61c:	0799      	lsls	r1, r3, #30
 800f61e:	d400      	bmi.n	800f622 <__swsetup_r+0xb2>
 800f620:	6962      	ldr	r2, [r4, #20]
 800f622:	60a2      	str	r2, [r4, #8]
 800f624:	e7f3      	b.n	800f60e <__swsetup_r+0x9e>
 800f626:	46c0      	nop			@ (mov r8, r8)
 800f628:	20000050 	.word	0x20000050

0800f62c <memset>:
 800f62c:	0003      	movs	r3, r0
 800f62e:	1882      	adds	r2, r0, r2
 800f630:	4293      	cmp	r3, r2
 800f632:	d100      	bne.n	800f636 <memset+0xa>
 800f634:	4770      	bx	lr
 800f636:	7019      	strb	r1, [r3, #0]
 800f638:	3301      	adds	r3, #1
 800f63a:	e7f9      	b.n	800f630 <memset+0x4>

0800f63c <_close_r>:
 800f63c:	2300      	movs	r3, #0
 800f63e:	b570      	push	{r4, r5, r6, lr}
 800f640:	4d06      	ldr	r5, [pc, #24]	@ (800f65c <_close_r+0x20>)
 800f642:	0004      	movs	r4, r0
 800f644:	0008      	movs	r0, r1
 800f646:	602b      	str	r3, [r5, #0]
 800f648:	f7f6 fe54 	bl	80062f4 <_close>
 800f64c:	1c43      	adds	r3, r0, #1
 800f64e:	d103      	bne.n	800f658 <_close_r+0x1c>
 800f650:	682b      	ldr	r3, [r5, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d000      	beq.n	800f658 <_close_r+0x1c>
 800f656:	6023      	str	r3, [r4, #0]
 800f658:	bd70      	pop	{r4, r5, r6, pc}
 800f65a:	46c0      	nop			@ (mov r8, r8)
 800f65c:	20001fb4 	.word	0x20001fb4

0800f660 <_lseek_r>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	0004      	movs	r4, r0
 800f664:	0008      	movs	r0, r1
 800f666:	0011      	movs	r1, r2
 800f668:	001a      	movs	r2, r3
 800f66a:	2300      	movs	r3, #0
 800f66c:	4d05      	ldr	r5, [pc, #20]	@ (800f684 <_lseek_r+0x24>)
 800f66e:	602b      	str	r3, [r5, #0]
 800f670:	f7f6 fe61 	bl	8006336 <_lseek>
 800f674:	1c43      	adds	r3, r0, #1
 800f676:	d103      	bne.n	800f680 <_lseek_r+0x20>
 800f678:	682b      	ldr	r3, [r5, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d000      	beq.n	800f680 <_lseek_r+0x20>
 800f67e:	6023      	str	r3, [r4, #0]
 800f680:	bd70      	pop	{r4, r5, r6, pc}
 800f682:	46c0      	nop			@ (mov r8, r8)
 800f684:	20001fb4 	.word	0x20001fb4

0800f688 <_read_r>:
 800f688:	b570      	push	{r4, r5, r6, lr}
 800f68a:	0004      	movs	r4, r0
 800f68c:	0008      	movs	r0, r1
 800f68e:	0011      	movs	r1, r2
 800f690:	001a      	movs	r2, r3
 800f692:	2300      	movs	r3, #0
 800f694:	4d05      	ldr	r5, [pc, #20]	@ (800f6ac <_read_r+0x24>)
 800f696:	602b      	str	r3, [r5, #0]
 800f698:	f7f6 fdc6 	bl	8006228 <_read>
 800f69c:	1c43      	adds	r3, r0, #1
 800f69e:	d103      	bne.n	800f6a8 <_read_r+0x20>
 800f6a0:	682b      	ldr	r3, [r5, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d000      	beq.n	800f6a8 <_read_r+0x20>
 800f6a6:	6023      	str	r3, [r4, #0]
 800f6a8:	bd70      	pop	{r4, r5, r6, pc}
 800f6aa:	46c0      	nop			@ (mov r8, r8)
 800f6ac:	20001fb4 	.word	0x20001fb4

0800f6b0 <_sbrk_r>:
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	b570      	push	{r4, r5, r6, lr}
 800f6b4:	4d06      	ldr	r5, [pc, #24]	@ (800f6d0 <_sbrk_r+0x20>)
 800f6b6:	0004      	movs	r4, r0
 800f6b8:	0008      	movs	r0, r1
 800f6ba:	602b      	str	r3, [r5, #0]
 800f6bc:	f7f6 fdee 	bl	800629c <_sbrk>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d103      	bne.n	800f6cc <_sbrk_r+0x1c>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d000      	beq.n	800f6cc <_sbrk_r+0x1c>
 800f6ca:	6023      	str	r3, [r4, #0]
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
 800f6ce:	46c0      	nop			@ (mov r8, r8)
 800f6d0:	20001fb4 	.word	0x20001fb4

0800f6d4 <_write_r>:
 800f6d4:	b570      	push	{r4, r5, r6, lr}
 800f6d6:	0004      	movs	r4, r0
 800f6d8:	0008      	movs	r0, r1
 800f6da:	0011      	movs	r1, r2
 800f6dc:	001a      	movs	r2, r3
 800f6de:	2300      	movs	r3, #0
 800f6e0:	4d05      	ldr	r5, [pc, #20]	@ (800f6f8 <_write_r+0x24>)
 800f6e2:	602b      	str	r3, [r5, #0]
 800f6e4:	f7f6 fdbd 	bl	8006262 <_write>
 800f6e8:	1c43      	adds	r3, r0, #1
 800f6ea:	d103      	bne.n	800f6f4 <_write_r+0x20>
 800f6ec:	682b      	ldr	r3, [r5, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d000      	beq.n	800f6f4 <_write_r+0x20>
 800f6f2:	6023      	str	r3, [r4, #0]
 800f6f4:	bd70      	pop	{r4, r5, r6, pc}
 800f6f6:	46c0      	nop			@ (mov r8, r8)
 800f6f8:	20001fb4 	.word	0x20001fb4

0800f6fc <__errno>:
 800f6fc:	4b01      	ldr	r3, [pc, #4]	@ (800f704 <__errno+0x8>)
 800f6fe:	6818      	ldr	r0, [r3, #0]
 800f700:	4770      	bx	lr
 800f702:	46c0      	nop			@ (mov r8, r8)
 800f704:	20000050 	.word	0x20000050

0800f708 <__libc_init_array>:
 800f708:	b570      	push	{r4, r5, r6, lr}
 800f70a:	2600      	movs	r6, #0
 800f70c:	4c0c      	ldr	r4, [pc, #48]	@ (800f740 <__libc_init_array+0x38>)
 800f70e:	4d0d      	ldr	r5, [pc, #52]	@ (800f744 <__libc_init_array+0x3c>)
 800f710:	1b64      	subs	r4, r4, r5
 800f712:	10a4      	asrs	r4, r4, #2
 800f714:	42a6      	cmp	r6, r4
 800f716:	d109      	bne.n	800f72c <__libc_init_array+0x24>
 800f718:	2600      	movs	r6, #0
 800f71a:	f000 fce1 	bl	80100e0 <_init>
 800f71e:	4c0a      	ldr	r4, [pc, #40]	@ (800f748 <__libc_init_array+0x40>)
 800f720:	4d0a      	ldr	r5, [pc, #40]	@ (800f74c <__libc_init_array+0x44>)
 800f722:	1b64      	subs	r4, r4, r5
 800f724:	10a4      	asrs	r4, r4, #2
 800f726:	42a6      	cmp	r6, r4
 800f728:	d105      	bne.n	800f736 <__libc_init_array+0x2e>
 800f72a:	bd70      	pop	{r4, r5, r6, pc}
 800f72c:	00b3      	lsls	r3, r6, #2
 800f72e:	58eb      	ldr	r3, [r5, r3]
 800f730:	4798      	blx	r3
 800f732:	3601      	adds	r6, #1
 800f734:	e7ee      	b.n	800f714 <__libc_init_array+0xc>
 800f736:	00b3      	lsls	r3, r6, #2
 800f738:	58eb      	ldr	r3, [r5, r3]
 800f73a:	4798      	blx	r3
 800f73c:	3601      	adds	r6, #1
 800f73e:	e7f2      	b.n	800f726 <__libc_init_array+0x1e>
 800f740:	08011bcc 	.word	0x08011bcc
 800f744:	08011bcc 	.word	0x08011bcc
 800f748:	08011bd0 	.word	0x08011bd0
 800f74c:	08011bcc 	.word	0x08011bcc

0800f750 <__retarget_lock_init_recursive>:
 800f750:	4770      	bx	lr

0800f752 <__retarget_lock_acquire_recursive>:
 800f752:	4770      	bx	lr

0800f754 <__retarget_lock_release_recursive>:
 800f754:	4770      	bx	lr

0800f756 <memcpy>:
 800f756:	2300      	movs	r3, #0
 800f758:	b510      	push	{r4, lr}
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d100      	bne.n	800f760 <memcpy+0xa>
 800f75e:	bd10      	pop	{r4, pc}
 800f760:	5ccc      	ldrb	r4, [r1, r3]
 800f762:	54c4      	strb	r4, [r0, r3]
 800f764:	3301      	adds	r3, #1
 800f766:	e7f8      	b.n	800f75a <memcpy+0x4>

0800f768 <_free_r>:
 800f768:	b570      	push	{r4, r5, r6, lr}
 800f76a:	0005      	movs	r5, r0
 800f76c:	1e0c      	subs	r4, r1, #0
 800f76e:	d010      	beq.n	800f792 <_free_r+0x2a>
 800f770:	3c04      	subs	r4, #4
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	da00      	bge.n	800f77a <_free_r+0x12>
 800f778:	18e4      	adds	r4, r4, r3
 800f77a:	0028      	movs	r0, r5
 800f77c:	f7ff fcfc 	bl	800f178 <__malloc_lock>
 800f780:	4a1d      	ldr	r2, [pc, #116]	@ (800f7f8 <_free_r+0x90>)
 800f782:	6813      	ldr	r3, [r2, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d105      	bne.n	800f794 <_free_r+0x2c>
 800f788:	6063      	str	r3, [r4, #4]
 800f78a:	6014      	str	r4, [r2, #0]
 800f78c:	0028      	movs	r0, r5
 800f78e:	f7ff fcfb 	bl	800f188 <__malloc_unlock>
 800f792:	bd70      	pop	{r4, r5, r6, pc}
 800f794:	42a3      	cmp	r3, r4
 800f796:	d908      	bls.n	800f7aa <_free_r+0x42>
 800f798:	6820      	ldr	r0, [r4, #0]
 800f79a:	1821      	adds	r1, r4, r0
 800f79c:	428b      	cmp	r3, r1
 800f79e:	d1f3      	bne.n	800f788 <_free_r+0x20>
 800f7a0:	6819      	ldr	r1, [r3, #0]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	1809      	adds	r1, r1, r0
 800f7a6:	6021      	str	r1, [r4, #0]
 800f7a8:	e7ee      	b.n	800f788 <_free_r+0x20>
 800f7aa:	001a      	movs	r2, r3
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <_free_r+0x4e>
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	d9f9      	bls.n	800f7aa <_free_r+0x42>
 800f7b6:	6811      	ldr	r1, [r2, #0]
 800f7b8:	1850      	adds	r0, r2, r1
 800f7ba:	42a0      	cmp	r0, r4
 800f7bc:	d10b      	bne.n	800f7d6 <_free_r+0x6e>
 800f7be:	6820      	ldr	r0, [r4, #0]
 800f7c0:	1809      	adds	r1, r1, r0
 800f7c2:	1850      	adds	r0, r2, r1
 800f7c4:	6011      	str	r1, [r2, #0]
 800f7c6:	4283      	cmp	r3, r0
 800f7c8:	d1e0      	bne.n	800f78c <_free_r+0x24>
 800f7ca:	6818      	ldr	r0, [r3, #0]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	1841      	adds	r1, r0, r1
 800f7d0:	6011      	str	r1, [r2, #0]
 800f7d2:	6053      	str	r3, [r2, #4]
 800f7d4:	e7da      	b.n	800f78c <_free_r+0x24>
 800f7d6:	42a0      	cmp	r0, r4
 800f7d8:	d902      	bls.n	800f7e0 <_free_r+0x78>
 800f7da:	230c      	movs	r3, #12
 800f7dc:	602b      	str	r3, [r5, #0]
 800f7de:	e7d5      	b.n	800f78c <_free_r+0x24>
 800f7e0:	6820      	ldr	r0, [r4, #0]
 800f7e2:	1821      	adds	r1, r4, r0
 800f7e4:	428b      	cmp	r3, r1
 800f7e6:	d103      	bne.n	800f7f0 <_free_r+0x88>
 800f7e8:	6819      	ldr	r1, [r3, #0]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	1809      	adds	r1, r1, r0
 800f7ee:	6021      	str	r1, [r4, #0]
 800f7f0:	6063      	str	r3, [r4, #4]
 800f7f2:	6054      	str	r4, [r2, #4]
 800f7f4:	e7ca      	b.n	800f78c <_free_r+0x24>
 800f7f6:	46c0      	nop			@ (mov r8, r8)
 800f7f8:	20001e74 	.word	0x20001e74

0800f7fc <__ssputs_r>:
 800f7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7fe:	688e      	ldr	r6, [r1, #8]
 800f800:	b085      	sub	sp, #20
 800f802:	001f      	movs	r7, r3
 800f804:	000c      	movs	r4, r1
 800f806:	680b      	ldr	r3, [r1, #0]
 800f808:	9002      	str	r0, [sp, #8]
 800f80a:	9203      	str	r2, [sp, #12]
 800f80c:	42be      	cmp	r6, r7
 800f80e:	d830      	bhi.n	800f872 <__ssputs_r+0x76>
 800f810:	210c      	movs	r1, #12
 800f812:	5e62      	ldrsh	r2, [r4, r1]
 800f814:	2190      	movs	r1, #144	@ 0x90
 800f816:	00c9      	lsls	r1, r1, #3
 800f818:	420a      	tst	r2, r1
 800f81a:	d028      	beq.n	800f86e <__ssputs_r+0x72>
 800f81c:	2003      	movs	r0, #3
 800f81e:	6921      	ldr	r1, [r4, #16]
 800f820:	1a5b      	subs	r3, r3, r1
 800f822:	9301      	str	r3, [sp, #4]
 800f824:	6963      	ldr	r3, [r4, #20]
 800f826:	4343      	muls	r3, r0
 800f828:	9801      	ldr	r0, [sp, #4]
 800f82a:	0fdd      	lsrs	r5, r3, #31
 800f82c:	18ed      	adds	r5, r5, r3
 800f82e:	1c7b      	adds	r3, r7, #1
 800f830:	181b      	adds	r3, r3, r0
 800f832:	106d      	asrs	r5, r5, #1
 800f834:	42ab      	cmp	r3, r5
 800f836:	d900      	bls.n	800f83a <__ssputs_r+0x3e>
 800f838:	001d      	movs	r5, r3
 800f83a:	0552      	lsls	r2, r2, #21
 800f83c:	d528      	bpl.n	800f890 <__ssputs_r+0x94>
 800f83e:	0029      	movs	r1, r5
 800f840:	9802      	ldr	r0, [sp, #8]
 800f842:	f7ff fc19 	bl	800f078 <_malloc_r>
 800f846:	1e06      	subs	r6, r0, #0
 800f848:	d02c      	beq.n	800f8a4 <__ssputs_r+0xa8>
 800f84a:	9a01      	ldr	r2, [sp, #4]
 800f84c:	6921      	ldr	r1, [r4, #16]
 800f84e:	f7ff ff82 	bl	800f756 <memcpy>
 800f852:	89a2      	ldrh	r2, [r4, #12]
 800f854:	4b18      	ldr	r3, [pc, #96]	@ (800f8b8 <__ssputs_r+0xbc>)
 800f856:	401a      	ands	r2, r3
 800f858:	2380      	movs	r3, #128	@ 0x80
 800f85a:	4313      	orrs	r3, r2
 800f85c:	81a3      	strh	r3, [r4, #12]
 800f85e:	9b01      	ldr	r3, [sp, #4]
 800f860:	6126      	str	r6, [r4, #16]
 800f862:	18f6      	adds	r6, r6, r3
 800f864:	6026      	str	r6, [r4, #0]
 800f866:	003e      	movs	r6, r7
 800f868:	6165      	str	r5, [r4, #20]
 800f86a:	1aed      	subs	r5, r5, r3
 800f86c:	60a5      	str	r5, [r4, #8]
 800f86e:	42be      	cmp	r6, r7
 800f870:	d900      	bls.n	800f874 <__ssputs_r+0x78>
 800f872:	003e      	movs	r6, r7
 800f874:	0032      	movs	r2, r6
 800f876:	9903      	ldr	r1, [sp, #12]
 800f878:	6820      	ldr	r0, [r4, #0]
 800f87a:	f000 fbb6 	bl	800ffea <memmove>
 800f87e:	2000      	movs	r0, #0
 800f880:	68a3      	ldr	r3, [r4, #8]
 800f882:	1b9b      	subs	r3, r3, r6
 800f884:	60a3      	str	r3, [r4, #8]
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	199b      	adds	r3, r3, r6
 800f88a:	6023      	str	r3, [r4, #0]
 800f88c:	b005      	add	sp, #20
 800f88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f890:	002a      	movs	r2, r5
 800f892:	9802      	ldr	r0, [sp, #8]
 800f894:	f000 fbeb 	bl	801006e <_realloc_r>
 800f898:	1e06      	subs	r6, r0, #0
 800f89a:	d1e0      	bne.n	800f85e <__ssputs_r+0x62>
 800f89c:	6921      	ldr	r1, [r4, #16]
 800f89e:	9802      	ldr	r0, [sp, #8]
 800f8a0:	f7ff ff62 	bl	800f768 <_free_r>
 800f8a4:	230c      	movs	r3, #12
 800f8a6:	2001      	movs	r0, #1
 800f8a8:	9a02      	ldr	r2, [sp, #8]
 800f8aa:	4240      	negs	r0, r0
 800f8ac:	6013      	str	r3, [r2, #0]
 800f8ae:	89a2      	ldrh	r2, [r4, #12]
 800f8b0:	3334      	adds	r3, #52	@ 0x34
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	81a3      	strh	r3, [r4, #12]
 800f8b6:	e7e9      	b.n	800f88c <__ssputs_r+0x90>
 800f8b8:	fffffb7f 	.word	0xfffffb7f

0800f8bc <_svfiprintf_r>:
 800f8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8be:	b0a1      	sub	sp, #132	@ 0x84
 800f8c0:	9003      	str	r0, [sp, #12]
 800f8c2:	001d      	movs	r5, r3
 800f8c4:	898b      	ldrh	r3, [r1, #12]
 800f8c6:	000f      	movs	r7, r1
 800f8c8:	0016      	movs	r6, r2
 800f8ca:	061b      	lsls	r3, r3, #24
 800f8cc:	d511      	bpl.n	800f8f2 <_svfiprintf_r+0x36>
 800f8ce:	690b      	ldr	r3, [r1, #16]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10e      	bne.n	800f8f2 <_svfiprintf_r+0x36>
 800f8d4:	2140      	movs	r1, #64	@ 0x40
 800f8d6:	f7ff fbcf 	bl	800f078 <_malloc_r>
 800f8da:	6038      	str	r0, [r7, #0]
 800f8dc:	6138      	str	r0, [r7, #16]
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d105      	bne.n	800f8ee <_svfiprintf_r+0x32>
 800f8e2:	230c      	movs	r3, #12
 800f8e4:	9a03      	ldr	r2, [sp, #12]
 800f8e6:	6013      	str	r3, [r2, #0]
 800f8e8:	2001      	movs	r0, #1
 800f8ea:	4240      	negs	r0, r0
 800f8ec:	e0cf      	b.n	800fa8e <_svfiprintf_r+0x1d2>
 800f8ee:	2340      	movs	r3, #64	@ 0x40
 800f8f0:	617b      	str	r3, [r7, #20]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	ac08      	add	r4, sp, #32
 800f8f6:	6163      	str	r3, [r4, #20]
 800f8f8:	3320      	adds	r3, #32
 800f8fa:	7663      	strb	r3, [r4, #25]
 800f8fc:	3310      	adds	r3, #16
 800f8fe:	76a3      	strb	r3, [r4, #26]
 800f900:	9507      	str	r5, [sp, #28]
 800f902:	0035      	movs	r5, r6
 800f904:	782b      	ldrb	r3, [r5, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <_svfiprintf_r+0x52>
 800f90a:	2b25      	cmp	r3, #37	@ 0x25
 800f90c:	d148      	bne.n	800f9a0 <_svfiprintf_r+0xe4>
 800f90e:	1bab      	subs	r3, r5, r6
 800f910:	9305      	str	r3, [sp, #20]
 800f912:	42b5      	cmp	r5, r6
 800f914:	d00b      	beq.n	800f92e <_svfiprintf_r+0x72>
 800f916:	0032      	movs	r2, r6
 800f918:	0039      	movs	r1, r7
 800f91a:	9803      	ldr	r0, [sp, #12]
 800f91c:	f7ff ff6e 	bl	800f7fc <__ssputs_r>
 800f920:	3001      	adds	r0, #1
 800f922:	d100      	bne.n	800f926 <_svfiprintf_r+0x6a>
 800f924:	e0ae      	b.n	800fa84 <_svfiprintf_r+0x1c8>
 800f926:	6963      	ldr	r3, [r4, #20]
 800f928:	9a05      	ldr	r2, [sp, #20]
 800f92a:	189b      	adds	r3, r3, r2
 800f92c:	6163      	str	r3, [r4, #20]
 800f92e:	782b      	ldrb	r3, [r5, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d100      	bne.n	800f936 <_svfiprintf_r+0x7a>
 800f934:	e0a6      	b.n	800fa84 <_svfiprintf_r+0x1c8>
 800f936:	2201      	movs	r2, #1
 800f938:	2300      	movs	r3, #0
 800f93a:	4252      	negs	r2, r2
 800f93c:	6062      	str	r2, [r4, #4]
 800f93e:	a904      	add	r1, sp, #16
 800f940:	3254      	adds	r2, #84	@ 0x54
 800f942:	1852      	adds	r2, r2, r1
 800f944:	1c6e      	adds	r6, r5, #1
 800f946:	6023      	str	r3, [r4, #0]
 800f948:	60e3      	str	r3, [r4, #12]
 800f94a:	60a3      	str	r3, [r4, #8]
 800f94c:	7013      	strb	r3, [r2, #0]
 800f94e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f950:	4b54      	ldr	r3, [pc, #336]	@ (800faa4 <_svfiprintf_r+0x1e8>)
 800f952:	2205      	movs	r2, #5
 800f954:	0018      	movs	r0, r3
 800f956:	7831      	ldrb	r1, [r6, #0]
 800f958:	9305      	str	r3, [sp, #20]
 800f95a:	f000 fb7d 	bl	8010058 <memchr>
 800f95e:	1c75      	adds	r5, r6, #1
 800f960:	2800      	cmp	r0, #0
 800f962:	d11f      	bne.n	800f9a4 <_svfiprintf_r+0xe8>
 800f964:	6822      	ldr	r2, [r4, #0]
 800f966:	06d3      	lsls	r3, r2, #27
 800f968:	d504      	bpl.n	800f974 <_svfiprintf_r+0xb8>
 800f96a:	2353      	movs	r3, #83	@ 0x53
 800f96c:	a904      	add	r1, sp, #16
 800f96e:	185b      	adds	r3, r3, r1
 800f970:	2120      	movs	r1, #32
 800f972:	7019      	strb	r1, [r3, #0]
 800f974:	0713      	lsls	r3, r2, #28
 800f976:	d504      	bpl.n	800f982 <_svfiprintf_r+0xc6>
 800f978:	2353      	movs	r3, #83	@ 0x53
 800f97a:	a904      	add	r1, sp, #16
 800f97c:	185b      	adds	r3, r3, r1
 800f97e:	212b      	movs	r1, #43	@ 0x2b
 800f980:	7019      	strb	r1, [r3, #0]
 800f982:	7833      	ldrb	r3, [r6, #0]
 800f984:	2b2a      	cmp	r3, #42	@ 0x2a
 800f986:	d016      	beq.n	800f9b6 <_svfiprintf_r+0xfa>
 800f988:	0035      	movs	r5, r6
 800f98a:	2100      	movs	r1, #0
 800f98c:	200a      	movs	r0, #10
 800f98e:	68e3      	ldr	r3, [r4, #12]
 800f990:	782a      	ldrb	r2, [r5, #0]
 800f992:	1c6e      	adds	r6, r5, #1
 800f994:	3a30      	subs	r2, #48	@ 0x30
 800f996:	2a09      	cmp	r2, #9
 800f998:	d950      	bls.n	800fa3c <_svfiprintf_r+0x180>
 800f99a:	2900      	cmp	r1, #0
 800f99c:	d111      	bne.n	800f9c2 <_svfiprintf_r+0x106>
 800f99e:	e017      	b.n	800f9d0 <_svfiprintf_r+0x114>
 800f9a0:	3501      	adds	r5, #1
 800f9a2:	e7af      	b.n	800f904 <_svfiprintf_r+0x48>
 800f9a4:	9b05      	ldr	r3, [sp, #20]
 800f9a6:	6822      	ldr	r2, [r4, #0]
 800f9a8:	1ac0      	subs	r0, r0, r3
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	4083      	lsls	r3, r0
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	002e      	movs	r6, r5
 800f9b2:	6023      	str	r3, [r4, #0]
 800f9b4:	e7cc      	b.n	800f950 <_svfiprintf_r+0x94>
 800f9b6:	9b07      	ldr	r3, [sp, #28]
 800f9b8:	1d19      	adds	r1, r3, #4
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	9107      	str	r1, [sp, #28]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	db01      	blt.n	800f9c6 <_svfiprintf_r+0x10a>
 800f9c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9c4:	e004      	b.n	800f9d0 <_svfiprintf_r+0x114>
 800f9c6:	425b      	negs	r3, r3
 800f9c8:	60e3      	str	r3, [r4, #12]
 800f9ca:	2302      	movs	r3, #2
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	6023      	str	r3, [r4, #0]
 800f9d0:	782b      	ldrb	r3, [r5, #0]
 800f9d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9d4:	d10c      	bne.n	800f9f0 <_svfiprintf_r+0x134>
 800f9d6:	786b      	ldrb	r3, [r5, #1]
 800f9d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9da:	d134      	bne.n	800fa46 <_svfiprintf_r+0x18a>
 800f9dc:	9b07      	ldr	r3, [sp, #28]
 800f9de:	3502      	adds	r5, #2
 800f9e0:	1d1a      	adds	r2, r3, #4
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	9207      	str	r2, [sp, #28]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	da01      	bge.n	800f9ee <_svfiprintf_r+0x132>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	425b      	negs	r3, r3
 800f9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9f0:	4e2d      	ldr	r6, [pc, #180]	@ (800faa8 <_svfiprintf_r+0x1ec>)
 800f9f2:	2203      	movs	r2, #3
 800f9f4:	0030      	movs	r0, r6
 800f9f6:	7829      	ldrb	r1, [r5, #0]
 800f9f8:	f000 fb2e 	bl	8010058 <memchr>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d006      	beq.n	800fa0e <_svfiprintf_r+0x152>
 800fa00:	2340      	movs	r3, #64	@ 0x40
 800fa02:	1b80      	subs	r0, r0, r6
 800fa04:	4083      	lsls	r3, r0
 800fa06:	6822      	ldr	r2, [r4, #0]
 800fa08:	3501      	adds	r5, #1
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	6023      	str	r3, [r4, #0]
 800fa0e:	7829      	ldrb	r1, [r5, #0]
 800fa10:	2206      	movs	r2, #6
 800fa12:	4826      	ldr	r0, [pc, #152]	@ (800faac <_svfiprintf_r+0x1f0>)
 800fa14:	1c6e      	adds	r6, r5, #1
 800fa16:	7621      	strb	r1, [r4, #24]
 800fa18:	f000 fb1e 	bl	8010058 <memchr>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	d038      	beq.n	800fa92 <_svfiprintf_r+0x1d6>
 800fa20:	4b23      	ldr	r3, [pc, #140]	@ (800fab0 <_svfiprintf_r+0x1f4>)
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d122      	bne.n	800fa6c <_svfiprintf_r+0x1b0>
 800fa26:	2207      	movs	r2, #7
 800fa28:	9b07      	ldr	r3, [sp, #28]
 800fa2a:	3307      	adds	r3, #7
 800fa2c:	4393      	bics	r3, r2
 800fa2e:	3308      	adds	r3, #8
 800fa30:	9307      	str	r3, [sp, #28]
 800fa32:	6963      	ldr	r3, [r4, #20]
 800fa34:	9a04      	ldr	r2, [sp, #16]
 800fa36:	189b      	adds	r3, r3, r2
 800fa38:	6163      	str	r3, [r4, #20]
 800fa3a:	e762      	b.n	800f902 <_svfiprintf_r+0x46>
 800fa3c:	4343      	muls	r3, r0
 800fa3e:	0035      	movs	r5, r6
 800fa40:	2101      	movs	r1, #1
 800fa42:	189b      	adds	r3, r3, r2
 800fa44:	e7a4      	b.n	800f990 <_svfiprintf_r+0xd4>
 800fa46:	2300      	movs	r3, #0
 800fa48:	200a      	movs	r0, #10
 800fa4a:	0019      	movs	r1, r3
 800fa4c:	3501      	adds	r5, #1
 800fa4e:	6063      	str	r3, [r4, #4]
 800fa50:	782a      	ldrb	r2, [r5, #0]
 800fa52:	1c6e      	adds	r6, r5, #1
 800fa54:	3a30      	subs	r2, #48	@ 0x30
 800fa56:	2a09      	cmp	r2, #9
 800fa58:	d903      	bls.n	800fa62 <_svfiprintf_r+0x1a6>
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d0c8      	beq.n	800f9f0 <_svfiprintf_r+0x134>
 800fa5e:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa60:	e7c6      	b.n	800f9f0 <_svfiprintf_r+0x134>
 800fa62:	4341      	muls	r1, r0
 800fa64:	0035      	movs	r5, r6
 800fa66:	2301      	movs	r3, #1
 800fa68:	1889      	adds	r1, r1, r2
 800fa6a:	e7f1      	b.n	800fa50 <_svfiprintf_r+0x194>
 800fa6c:	aa07      	add	r2, sp, #28
 800fa6e:	9200      	str	r2, [sp, #0]
 800fa70:	0021      	movs	r1, r4
 800fa72:	003a      	movs	r2, r7
 800fa74:	4b0f      	ldr	r3, [pc, #60]	@ (800fab4 <_svfiprintf_r+0x1f8>)
 800fa76:	9803      	ldr	r0, [sp, #12]
 800fa78:	e000      	b.n	800fa7c <_svfiprintf_r+0x1c0>
 800fa7a:	bf00      	nop
 800fa7c:	9004      	str	r0, [sp, #16]
 800fa7e:	9b04      	ldr	r3, [sp, #16]
 800fa80:	3301      	adds	r3, #1
 800fa82:	d1d6      	bne.n	800fa32 <_svfiprintf_r+0x176>
 800fa84:	89bb      	ldrh	r3, [r7, #12]
 800fa86:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fa88:	065b      	lsls	r3, r3, #25
 800fa8a:	d500      	bpl.n	800fa8e <_svfiprintf_r+0x1d2>
 800fa8c:	e72c      	b.n	800f8e8 <_svfiprintf_r+0x2c>
 800fa8e:	b021      	add	sp, #132	@ 0x84
 800fa90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa92:	aa07      	add	r2, sp, #28
 800fa94:	9200      	str	r2, [sp, #0]
 800fa96:	0021      	movs	r1, r4
 800fa98:	003a      	movs	r2, r7
 800fa9a:	4b06      	ldr	r3, [pc, #24]	@ (800fab4 <_svfiprintf_r+0x1f8>)
 800fa9c:	9803      	ldr	r0, [sp, #12]
 800fa9e:	f000 f87b 	bl	800fb98 <_printf_i>
 800faa2:	e7eb      	b.n	800fa7c <_svfiprintf_r+0x1c0>
 800faa4:	08011b90 	.word	0x08011b90
 800faa8:	08011b96 	.word	0x08011b96
 800faac:	08011b9a 	.word	0x08011b9a
 800fab0:	00000000 	.word	0x00000000
 800fab4:	0800f7fd 	.word	0x0800f7fd

0800fab8 <_printf_common>:
 800fab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800faba:	0016      	movs	r6, r2
 800fabc:	9301      	str	r3, [sp, #4]
 800fabe:	688a      	ldr	r2, [r1, #8]
 800fac0:	690b      	ldr	r3, [r1, #16]
 800fac2:	000c      	movs	r4, r1
 800fac4:	9000      	str	r0, [sp, #0]
 800fac6:	4293      	cmp	r3, r2
 800fac8:	da00      	bge.n	800facc <_printf_common+0x14>
 800faca:	0013      	movs	r3, r2
 800facc:	0022      	movs	r2, r4
 800face:	6033      	str	r3, [r6, #0]
 800fad0:	3243      	adds	r2, #67	@ 0x43
 800fad2:	7812      	ldrb	r2, [r2, #0]
 800fad4:	2a00      	cmp	r2, #0
 800fad6:	d001      	beq.n	800fadc <_printf_common+0x24>
 800fad8:	3301      	adds	r3, #1
 800fada:	6033      	str	r3, [r6, #0]
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	069b      	lsls	r3, r3, #26
 800fae0:	d502      	bpl.n	800fae8 <_printf_common+0x30>
 800fae2:	6833      	ldr	r3, [r6, #0]
 800fae4:	3302      	adds	r3, #2
 800fae6:	6033      	str	r3, [r6, #0]
 800fae8:	6822      	ldr	r2, [r4, #0]
 800faea:	2306      	movs	r3, #6
 800faec:	0015      	movs	r5, r2
 800faee:	401d      	ands	r5, r3
 800faf0:	421a      	tst	r2, r3
 800faf2:	d027      	beq.n	800fb44 <_printf_common+0x8c>
 800faf4:	0023      	movs	r3, r4
 800faf6:	3343      	adds	r3, #67	@ 0x43
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	1e5a      	subs	r2, r3, #1
 800fafc:	4193      	sbcs	r3, r2
 800fafe:	6822      	ldr	r2, [r4, #0]
 800fb00:	0692      	lsls	r2, r2, #26
 800fb02:	d430      	bmi.n	800fb66 <_printf_common+0xae>
 800fb04:	0022      	movs	r2, r4
 800fb06:	9901      	ldr	r1, [sp, #4]
 800fb08:	9800      	ldr	r0, [sp, #0]
 800fb0a:	9d08      	ldr	r5, [sp, #32]
 800fb0c:	3243      	adds	r2, #67	@ 0x43
 800fb0e:	47a8      	blx	r5
 800fb10:	3001      	adds	r0, #1
 800fb12:	d025      	beq.n	800fb60 <_printf_common+0xa8>
 800fb14:	2206      	movs	r2, #6
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	2500      	movs	r5, #0
 800fb1a:	4013      	ands	r3, r2
 800fb1c:	2b04      	cmp	r3, #4
 800fb1e:	d105      	bne.n	800fb2c <_printf_common+0x74>
 800fb20:	6833      	ldr	r3, [r6, #0]
 800fb22:	68e5      	ldr	r5, [r4, #12]
 800fb24:	1aed      	subs	r5, r5, r3
 800fb26:	43eb      	mvns	r3, r5
 800fb28:	17db      	asrs	r3, r3, #31
 800fb2a:	401d      	ands	r5, r3
 800fb2c:	68a3      	ldr	r3, [r4, #8]
 800fb2e:	6922      	ldr	r2, [r4, #16]
 800fb30:	4293      	cmp	r3, r2
 800fb32:	dd01      	ble.n	800fb38 <_printf_common+0x80>
 800fb34:	1a9b      	subs	r3, r3, r2
 800fb36:	18ed      	adds	r5, r5, r3
 800fb38:	2600      	movs	r6, #0
 800fb3a:	42b5      	cmp	r5, r6
 800fb3c:	d120      	bne.n	800fb80 <_printf_common+0xc8>
 800fb3e:	2000      	movs	r0, #0
 800fb40:	e010      	b.n	800fb64 <_printf_common+0xac>
 800fb42:	3501      	adds	r5, #1
 800fb44:	68e3      	ldr	r3, [r4, #12]
 800fb46:	6832      	ldr	r2, [r6, #0]
 800fb48:	1a9b      	subs	r3, r3, r2
 800fb4a:	42ab      	cmp	r3, r5
 800fb4c:	ddd2      	ble.n	800faf4 <_printf_common+0x3c>
 800fb4e:	0022      	movs	r2, r4
 800fb50:	2301      	movs	r3, #1
 800fb52:	9901      	ldr	r1, [sp, #4]
 800fb54:	9800      	ldr	r0, [sp, #0]
 800fb56:	9f08      	ldr	r7, [sp, #32]
 800fb58:	3219      	adds	r2, #25
 800fb5a:	47b8      	blx	r7
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d1f0      	bne.n	800fb42 <_printf_common+0x8a>
 800fb60:	2001      	movs	r0, #1
 800fb62:	4240      	negs	r0, r0
 800fb64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb66:	2030      	movs	r0, #48	@ 0x30
 800fb68:	18e1      	adds	r1, r4, r3
 800fb6a:	3143      	adds	r1, #67	@ 0x43
 800fb6c:	7008      	strb	r0, [r1, #0]
 800fb6e:	0021      	movs	r1, r4
 800fb70:	1c5a      	adds	r2, r3, #1
 800fb72:	3145      	adds	r1, #69	@ 0x45
 800fb74:	7809      	ldrb	r1, [r1, #0]
 800fb76:	18a2      	adds	r2, r4, r2
 800fb78:	3243      	adds	r2, #67	@ 0x43
 800fb7a:	3302      	adds	r3, #2
 800fb7c:	7011      	strb	r1, [r2, #0]
 800fb7e:	e7c1      	b.n	800fb04 <_printf_common+0x4c>
 800fb80:	0022      	movs	r2, r4
 800fb82:	2301      	movs	r3, #1
 800fb84:	9901      	ldr	r1, [sp, #4]
 800fb86:	9800      	ldr	r0, [sp, #0]
 800fb88:	9f08      	ldr	r7, [sp, #32]
 800fb8a:	321a      	adds	r2, #26
 800fb8c:	47b8      	blx	r7
 800fb8e:	3001      	adds	r0, #1
 800fb90:	d0e6      	beq.n	800fb60 <_printf_common+0xa8>
 800fb92:	3601      	adds	r6, #1
 800fb94:	e7d1      	b.n	800fb3a <_printf_common+0x82>
	...

0800fb98 <_printf_i>:
 800fb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb9a:	b08b      	sub	sp, #44	@ 0x2c
 800fb9c:	9206      	str	r2, [sp, #24]
 800fb9e:	000a      	movs	r2, r1
 800fba0:	3243      	adds	r2, #67	@ 0x43
 800fba2:	9307      	str	r3, [sp, #28]
 800fba4:	9005      	str	r0, [sp, #20]
 800fba6:	9203      	str	r2, [sp, #12]
 800fba8:	7e0a      	ldrb	r2, [r1, #24]
 800fbaa:	000c      	movs	r4, r1
 800fbac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fbae:	2a78      	cmp	r2, #120	@ 0x78
 800fbb0:	d809      	bhi.n	800fbc6 <_printf_i+0x2e>
 800fbb2:	2a62      	cmp	r2, #98	@ 0x62
 800fbb4:	d80b      	bhi.n	800fbce <_printf_i+0x36>
 800fbb6:	2a00      	cmp	r2, #0
 800fbb8:	d100      	bne.n	800fbbc <_printf_i+0x24>
 800fbba:	e0ba      	b.n	800fd32 <_printf_i+0x19a>
 800fbbc:	497a      	ldr	r1, [pc, #488]	@ (800fda8 <_printf_i+0x210>)
 800fbbe:	9104      	str	r1, [sp, #16]
 800fbc0:	2a58      	cmp	r2, #88	@ 0x58
 800fbc2:	d100      	bne.n	800fbc6 <_printf_i+0x2e>
 800fbc4:	e08e      	b.n	800fce4 <_printf_i+0x14c>
 800fbc6:	0025      	movs	r5, r4
 800fbc8:	3542      	adds	r5, #66	@ 0x42
 800fbca:	702a      	strb	r2, [r5, #0]
 800fbcc:	e022      	b.n	800fc14 <_printf_i+0x7c>
 800fbce:	0010      	movs	r0, r2
 800fbd0:	3863      	subs	r0, #99	@ 0x63
 800fbd2:	2815      	cmp	r0, #21
 800fbd4:	d8f7      	bhi.n	800fbc6 <_printf_i+0x2e>
 800fbd6:	f7f4 fb97 	bl	8004308 <__gnu_thumb1_case_shi>
 800fbda:	0016      	.short	0x0016
 800fbdc:	fff6001f 	.word	0xfff6001f
 800fbe0:	fff6fff6 	.word	0xfff6fff6
 800fbe4:	001ffff6 	.word	0x001ffff6
 800fbe8:	fff6fff6 	.word	0xfff6fff6
 800fbec:	fff6fff6 	.word	0xfff6fff6
 800fbf0:	0036009f 	.word	0x0036009f
 800fbf4:	fff6007e 	.word	0xfff6007e
 800fbf8:	00b0fff6 	.word	0x00b0fff6
 800fbfc:	0036fff6 	.word	0x0036fff6
 800fc00:	fff6fff6 	.word	0xfff6fff6
 800fc04:	0082      	.short	0x0082
 800fc06:	0025      	movs	r5, r4
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	3542      	adds	r5, #66	@ 0x42
 800fc0c:	1d11      	adds	r1, r2, #4
 800fc0e:	6019      	str	r1, [r3, #0]
 800fc10:	6813      	ldr	r3, [r2, #0]
 800fc12:	702b      	strb	r3, [r5, #0]
 800fc14:	2301      	movs	r3, #1
 800fc16:	e09e      	b.n	800fd56 <_printf_i+0x1be>
 800fc18:	6818      	ldr	r0, [r3, #0]
 800fc1a:	6809      	ldr	r1, [r1, #0]
 800fc1c:	1d02      	adds	r2, r0, #4
 800fc1e:	060d      	lsls	r5, r1, #24
 800fc20:	d50b      	bpl.n	800fc3a <_printf_i+0xa2>
 800fc22:	6806      	ldr	r6, [r0, #0]
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	2e00      	cmp	r6, #0
 800fc28:	da03      	bge.n	800fc32 <_printf_i+0x9a>
 800fc2a:	232d      	movs	r3, #45	@ 0x2d
 800fc2c:	9a03      	ldr	r2, [sp, #12]
 800fc2e:	4276      	negs	r6, r6
 800fc30:	7013      	strb	r3, [r2, #0]
 800fc32:	4b5d      	ldr	r3, [pc, #372]	@ (800fda8 <_printf_i+0x210>)
 800fc34:	270a      	movs	r7, #10
 800fc36:	9304      	str	r3, [sp, #16]
 800fc38:	e018      	b.n	800fc6c <_printf_i+0xd4>
 800fc3a:	6806      	ldr	r6, [r0, #0]
 800fc3c:	601a      	str	r2, [r3, #0]
 800fc3e:	0649      	lsls	r1, r1, #25
 800fc40:	d5f1      	bpl.n	800fc26 <_printf_i+0x8e>
 800fc42:	b236      	sxth	r6, r6
 800fc44:	e7ef      	b.n	800fc26 <_printf_i+0x8e>
 800fc46:	6808      	ldr	r0, [r1, #0]
 800fc48:	6819      	ldr	r1, [r3, #0]
 800fc4a:	c940      	ldmia	r1!, {r6}
 800fc4c:	0605      	lsls	r5, r0, #24
 800fc4e:	d402      	bmi.n	800fc56 <_printf_i+0xbe>
 800fc50:	0640      	lsls	r0, r0, #25
 800fc52:	d500      	bpl.n	800fc56 <_printf_i+0xbe>
 800fc54:	b2b6      	uxth	r6, r6
 800fc56:	6019      	str	r1, [r3, #0]
 800fc58:	4b53      	ldr	r3, [pc, #332]	@ (800fda8 <_printf_i+0x210>)
 800fc5a:	270a      	movs	r7, #10
 800fc5c:	9304      	str	r3, [sp, #16]
 800fc5e:	2a6f      	cmp	r2, #111	@ 0x6f
 800fc60:	d100      	bne.n	800fc64 <_printf_i+0xcc>
 800fc62:	3f02      	subs	r7, #2
 800fc64:	0023      	movs	r3, r4
 800fc66:	2200      	movs	r2, #0
 800fc68:	3343      	adds	r3, #67	@ 0x43
 800fc6a:	701a      	strb	r2, [r3, #0]
 800fc6c:	6863      	ldr	r3, [r4, #4]
 800fc6e:	60a3      	str	r3, [r4, #8]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	db06      	blt.n	800fc82 <_printf_i+0xea>
 800fc74:	2104      	movs	r1, #4
 800fc76:	6822      	ldr	r2, [r4, #0]
 800fc78:	9d03      	ldr	r5, [sp, #12]
 800fc7a:	438a      	bics	r2, r1
 800fc7c:	6022      	str	r2, [r4, #0]
 800fc7e:	4333      	orrs	r3, r6
 800fc80:	d00c      	beq.n	800fc9c <_printf_i+0x104>
 800fc82:	9d03      	ldr	r5, [sp, #12]
 800fc84:	0030      	movs	r0, r6
 800fc86:	0039      	movs	r1, r7
 800fc88:	f7f4 fbce 	bl	8004428 <__aeabi_uidivmod>
 800fc8c:	9b04      	ldr	r3, [sp, #16]
 800fc8e:	3d01      	subs	r5, #1
 800fc90:	5c5b      	ldrb	r3, [r3, r1]
 800fc92:	702b      	strb	r3, [r5, #0]
 800fc94:	0033      	movs	r3, r6
 800fc96:	0006      	movs	r6, r0
 800fc98:	429f      	cmp	r7, r3
 800fc9a:	d9f3      	bls.n	800fc84 <_printf_i+0xec>
 800fc9c:	2f08      	cmp	r7, #8
 800fc9e:	d109      	bne.n	800fcb4 <_printf_i+0x11c>
 800fca0:	6823      	ldr	r3, [r4, #0]
 800fca2:	07db      	lsls	r3, r3, #31
 800fca4:	d506      	bpl.n	800fcb4 <_printf_i+0x11c>
 800fca6:	6862      	ldr	r2, [r4, #4]
 800fca8:	6923      	ldr	r3, [r4, #16]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	dc02      	bgt.n	800fcb4 <_printf_i+0x11c>
 800fcae:	2330      	movs	r3, #48	@ 0x30
 800fcb0:	3d01      	subs	r5, #1
 800fcb2:	702b      	strb	r3, [r5, #0]
 800fcb4:	9b03      	ldr	r3, [sp, #12]
 800fcb6:	1b5b      	subs	r3, r3, r5
 800fcb8:	6123      	str	r3, [r4, #16]
 800fcba:	9b07      	ldr	r3, [sp, #28]
 800fcbc:	0021      	movs	r1, r4
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	9805      	ldr	r0, [sp, #20]
 800fcc2:	9b06      	ldr	r3, [sp, #24]
 800fcc4:	aa09      	add	r2, sp, #36	@ 0x24
 800fcc6:	f7ff fef7 	bl	800fab8 <_printf_common>
 800fcca:	3001      	adds	r0, #1
 800fccc:	d148      	bne.n	800fd60 <_printf_i+0x1c8>
 800fcce:	2001      	movs	r0, #1
 800fcd0:	4240      	negs	r0, r0
 800fcd2:	b00b      	add	sp, #44	@ 0x2c
 800fcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcd6:	2220      	movs	r2, #32
 800fcd8:	6809      	ldr	r1, [r1, #0]
 800fcda:	430a      	orrs	r2, r1
 800fcdc:	6022      	str	r2, [r4, #0]
 800fcde:	2278      	movs	r2, #120	@ 0x78
 800fce0:	4932      	ldr	r1, [pc, #200]	@ (800fdac <_printf_i+0x214>)
 800fce2:	9104      	str	r1, [sp, #16]
 800fce4:	0021      	movs	r1, r4
 800fce6:	3145      	adds	r1, #69	@ 0x45
 800fce8:	700a      	strb	r2, [r1, #0]
 800fcea:	6819      	ldr	r1, [r3, #0]
 800fcec:	6822      	ldr	r2, [r4, #0]
 800fcee:	c940      	ldmia	r1!, {r6}
 800fcf0:	0610      	lsls	r0, r2, #24
 800fcf2:	d402      	bmi.n	800fcfa <_printf_i+0x162>
 800fcf4:	0650      	lsls	r0, r2, #25
 800fcf6:	d500      	bpl.n	800fcfa <_printf_i+0x162>
 800fcf8:	b2b6      	uxth	r6, r6
 800fcfa:	6019      	str	r1, [r3, #0]
 800fcfc:	07d3      	lsls	r3, r2, #31
 800fcfe:	d502      	bpl.n	800fd06 <_printf_i+0x16e>
 800fd00:	2320      	movs	r3, #32
 800fd02:	4313      	orrs	r3, r2
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	2e00      	cmp	r6, #0
 800fd08:	d001      	beq.n	800fd0e <_printf_i+0x176>
 800fd0a:	2710      	movs	r7, #16
 800fd0c:	e7aa      	b.n	800fc64 <_printf_i+0xcc>
 800fd0e:	2220      	movs	r2, #32
 800fd10:	6823      	ldr	r3, [r4, #0]
 800fd12:	4393      	bics	r3, r2
 800fd14:	6023      	str	r3, [r4, #0]
 800fd16:	e7f8      	b.n	800fd0a <_printf_i+0x172>
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	680d      	ldr	r5, [r1, #0]
 800fd1c:	1d10      	adds	r0, r2, #4
 800fd1e:	6949      	ldr	r1, [r1, #20]
 800fd20:	6018      	str	r0, [r3, #0]
 800fd22:	6813      	ldr	r3, [r2, #0]
 800fd24:	062e      	lsls	r6, r5, #24
 800fd26:	d501      	bpl.n	800fd2c <_printf_i+0x194>
 800fd28:	6019      	str	r1, [r3, #0]
 800fd2a:	e002      	b.n	800fd32 <_printf_i+0x19a>
 800fd2c:	066d      	lsls	r5, r5, #25
 800fd2e:	d5fb      	bpl.n	800fd28 <_printf_i+0x190>
 800fd30:	8019      	strh	r1, [r3, #0]
 800fd32:	2300      	movs	r3, #0
 800fd34:	9d03      	ldr	r5, [sp, #12]
 800fd36:	6123      	str	r3, [r4, #16]
 800fd38:	e7bf      	b.n	800fcba <_printf_i+0x122>
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	1d11      	adds	r1, r2, #4
 800fd3e:	6019      	str	r1, [r3, #0]
 800fd40:	6815      	ldr	r5, [r2, #0]
 800fd42:	2100      	movs	r1, #0
 800fd44:	0028      	movs	r0, r5
 800fd46:	6862      	ldr	r2, [r4, #4]
 800fd48:	f000 f986 	bl	8010058 <memchr>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d001      	beq.n	800fd54 <_printf_i+0x1bc>
 800fd50:	1b40      	subs	r0, r0, r5
 800fd52:	6060      	str	r0, [r4, #4]
 800fd54:	6863      	ldr	r3, [r4, #4]
 800fd56:	6123      	str	r3, [r4, #16]
 800fd58:	2300      	movs	r3, #0
 800fd5a:	9a03      	ldr	r2, [sp, #12]
 800fd5c:	7013      	strb	r3, [r2, #0]
 800fd5e:	e7ac      	b.n	800fcba <_printf_i+0x122>
 800fd60:	002a      	movs	r2, r5
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	9906      	ldr	r1, [sp, #24]
 800fd66:	9805      	ldr	r0, [sp, #20]
 800fd68:	9d07      	ldr	r5, [sp, #28]
 800fd6a:	47a8      	blx	r5
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	d0ae      	beq.n	800fcce <_printf_i+0x136>
 800fd70:	6823      	ldr	r3, [r4, #0]
 800fd72:	079b      	lsls	r3, r3, #30
 800fd74:	d415      	bmi.n	800fda2 <_printf_i+0x20a>
 800fd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd78:	68e0      	ldr	r0, [r4, #12]
 800fd7a:	4298      	cmp	r0, r3
 800fd7c:	daa9      	bge.n	800fcd2 <_printf_i+0x13a>
 800fd7e:	0018      	movs	r0, r3
 800fd80:	e7a7      	b.n	800fcd2 <_printf_i+0x13a>
 800fd82:	0022      	movs	r2, r4
 800fd84:	2301      	movs	r3, #1
 800fd86:	9906      	ldr	r1, [sp, #24]
 800fd88:	9805      	ldr	r0, [sp, #20]
 800fd8a:	9e07      	ldr	r6, [sp, #28]
 800fd8c:	3219      	adds	r2, #25
 800fd8e:	47b0      	blx	r6
 800fd90:	3001      	adds	r0, #1
 800fd92:	d09c      	beq.n	800fcce <_printf_i+0x136>
 800fd94:	3501      	adds	r5, #1
 800fd96:	68e3      	ldr	r3, [r4, #12]
 800fd98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd9a:	1a9b      	subs	r3, r3, r2
 800fd9c:	42ab      	cmp	r3, r5
 800fd9e:	dcf0      	bgt.n	800fd82 <_printf_i+0x1ea>
 800fda0:	e7e9      	b.n	800fd76 <_printf_i+0x1de>
 800fda2:	2500      	movs	r5, #0
 800fda4:	e7f7      	b.n	800fd96 <_printf_i+0x1fe>
 800fda6:	46c0      	nop			@ (mov r8, r8)
 800fda8:	08011ba1 	.word	0x08011ba1
 800fdac:	08011bb2 	.word	0x08011bb2

0800fdb0 <__sflush_r>:
 800fdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdb2:	220c      	movs	r2, #12
 800fdb4:	5e8b      	ldrsh	r3, [r1, r2]
 800fdb6:	0005      	movs	r5, r0
 800fdb8:	000c      	movs	r4, r1
 800fdba:	071a      	lsls	r2, r3, #28
 800fdbc:	d456      	bmi.n	800fe6c <__sflush_r+0xbc>
 800fdbe:	684a      	ldr	r2, [r1, #4]
 800fdc0:	2a00      	cmp	r2, #0
 800fdc2:	dc02      	bgt.n	800fdca <__sflush_r+0x1a>
 800fdc4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800fdc6:	2a00      	cmp	r2, #0
 800fdc8:	dd4e      	ble.n	800fe68 <__sflush_r+0xb8>
 800fdca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800fdcc:	2f00      	cmp	r7, #0
 800fdce:	d04b      	beq.n	800fe68 <__sflush_r+0xb8>
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	2080      	movs	r0, #128	@ 0x80
 800fdd4:	682e      	ldr	r6, [r5, #0]
 800fdd6:	602a      	str	r2, [r5, #0]
 800fdd8:	001a      	movs	r2, r3
 800fdda:	0140      	lsls	r0, r0, #5
 800fddc:	6a21      	ldr	r1, [r4, #32]
 800fdde:	4002      	ands	r2, r0
 800fde0:	4203      	tst	r3, r0
 800fde2:	d033      	beq.n	800fe4c <__sflush_r+0x9c>
 800fde4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fde6:	89a3      	ldrh	r3, [r4, #12]
 800fde8:	075b      	lsls	r3, r3, #29
 800fdea:	d506      	bpl.n	800fdfa <__sflush_r+0x4a>
 800fdec:	6863      	ldr	r3, [r4, #4]
 800fdee:	1ad2      	subs	r2, r2, r3
 800fdf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <__sflush_r+0x4a>
 800fdf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fdf8:	1ad2      	subs	r2, r2, r3
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	0028      	movs	r0, r5
 800fdfe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800fe00:	6a21      	ldr	r1, [r4, #32]
 800fe02:	47b8      	blx	r7
 800fe04:	89a2      	ldrh	r2, [r4, #12]
 800fe06:	1c43      	adds	r3, r0, #1
 800fe08:	d106      	bne.n	800fe18 <__sflush_r+0x68>
 800fe0a:	6829      	ldr	r1, [r5, #0]
 800fe0c:	291d      	cmp	r1, #29
 800fe0e:	d846      	bhi.n	800fe9e <__sflush_r+0xee>
 800fe10:	4b29      	ldr	r3, [pc, #164]	@ (800feb8 <__sflush_r+0x108>)
 800fe12:	40cb      	lsrs	r3, r1
 800fe14:	07db      	lsls	r3, r3, #31
 800fe16:	d542      	bpl.n	800fe9e <__sflush_r+0xee>
 800fe18:	2300      	movs	r3, #0
 800fe1a:	6063      	str	r3, [r4, #4]
 800fe1c:	6923      	ldr	r3, [r4, #16]
 800fe1e:	6023      	str	r3, [r4, #0]
 800fe20:	04d2      	lsls	r2, r2, #19
 800fe22:	d505      	bpl.n	800fe30 <__sflush_r+0x80>
 800fe24:	1c43      	adds	r3, r0, #1
 800fe26:	d102      	bne.n	800fe2e <__sflush_r+0x7e>
 800fe28:	682b      	ldr	r3, [r5, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d100      	bne.n	800fe30 <__sflush_r+0x80>
 800fe2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe32:	602e      	str	r6, [r5, #0]
 800fe34:	2900      	cmp	r1, #0
 800fe36:	d017      	beq.n	800fe68 <__sflush_r+0xb8>
 800fe38:	0023      	movs	r3, r4
 800fe3a:	3344      	adds	r3, #68	@ 0x44
 800fe3c:	4299      	cmp	r1, r3
 800fe3e:	d002      	beq.n	800fe46 <__sflush_r+0x96>
 800fe40:	0028      	movs	r0, r5
 800fe42:	f7ff fc91 	bl	800f768 <_free_r>
 800fe46:	2300      	movs	r3, #0
 800fe48:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe4a:	e00d      	b.n	800fe68 <__sflush_r+0xb8>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	0028      	movs	r0, r5
 800fe50:	47b8      	blx	r7
 800fe52:	0002      	movs	r2, r0
 800fe54:	1c43      	adds	r3, r0, #1
 800fe56:	d1c6      	bne.n	800fde6 <__sflush_r+0x36>
 800fe58:	682b      	ldr	r3, [r5, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d0c3      	beq.n	800fde6 <__sflush_r+0x36>
 800fe5e:	2b1d      	cmp	r3, #29
 800fe60:	d001      	beq.n	800fe66 <__sflush_r+0xb6>
 800fe62:	2b16      	cmp	r3, #22
 800fe64:	d11a      	bne.n	800fe9c <__sflush_r+0xec>
 800fe66:	602e      	str	r6, [r5, #0]
 800fe68:	2000      	movs	r0, #0
 800fe6a:	e01e      	b.n	800feaa <__sflush_r+0xfa>
 800fe6c:	690e      	ldr	r6, [r1, #16]
 800fe6e:	2e00      	cmp	r6, #0
 800fe70:	d0fa      	beq.n	800fe68 <__sflush_r+0xb8>
 800fe72:	680f      	ldr	r7, [r1, #0]
 800fe74:	600e      	str	r6, [r1, #0]
 800fe76:	1bba      	subs	r2, r7, r6
 800fe78:	9201      	str	r2, [sp, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	079b      	lsls	r3, r3, #30
 800fe7e:	d100      	bne.n	800fe82 <__sflush_r+0xd2>
 800fe80:	694a      	ldr	r2, [r1, #20]
 800fe82:	60a2      	str	r2, [r4, #8]
 800fe84:	9b01      	ldr	r3, [sp, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	ddee      	ble.n	800fe68 <__sflush_r+0xb8>
 800fe8a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800fe8c:	0032      	movs	r2, r6
 800fe8e:	001f      	movs	r7, r3
 800fe90:	0028      	movs	r0, r5
 800fe92:	9b01      	ldr	r3, [sp, #4]
 800fe94:	6a21      	ldr	r1, [r4, #32]
 800fe96:	47b8      	blx	r7
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	dc07      	bgt.n	800feac <__sflush_r+0xfc>
 800fe9c:	89a2      	ldrh	r2, [r4, #12]
 800fe9e:	2340      	movs	r3, #64	@ 0x40
 800fea0:	2001      	movs	r0, #1
 800fea2:	4313      	orrs	r3, r2
 800fea4:	b21b      	sxth	r3, r3
 800fea6:	81a3      	strh	r3, [r4, #12]
 800fea8:	4240      	negs	r0, r0
 800feaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800feac:	9b01      	ldr	r3, [sp, #4]
 800feae:	1836      	adds	r6, r6, r0
 800feb0:	1a1b      	subs	r3, r3, r0
 800feb2:	9301      	str	r3, [sp, #4]
 800feb4:	e7e6      	b.n	800fe84 <__sflush_r+0xd4>
 800feb6:	46c0      	nop			@ (mov r8, r8)
 800feb8:	20400001 	.word	0x20400001

0800febc <_fflush_r>:
 800febc:	690b      	ldr	r3, [r1, #16]
 800febe:	b570      	push	{r4, r5, r6, lr}
 800fec0:	0005      	movs	r5, r0
 800fec2:	000c      	movs	r4, r1
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d102      	bne.n	800fece <_fflush_r+0x12>
 800fec8:	2500      	movs	r5, #0
 800feca:	0028      	movs	r0, r5
 800fecc:	bd70      	pop	{r4, r5, r6, pc}
 800fece:	2800      	cmp	r0, #0
 800fed0:	d004      	beq.n	800fedc <_fflush_r+0x20>
 800fed2:	6a03      	ldr	r3, [r0, #32]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d101      	bne.n	800fedc <_fflush_r+0x20>
 800fed8:	f7ff f9ee 	bl	800f2b8 <__sinit>
 800fedc:	220c      	movs	r2, #12
 800fede:	5ea3      	ldrsh	r3, [r4, r2]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d0f1      	beq.n	800fec8 <_fflush_r+0xc>
 800fee4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fee6:	07d2      	lsls	r2, r2, #31
 800fee8:	d404      	bmi.n	800fef4 <_fflush_r+0x38>
 800feea:	059b      	lsls	r3, r3, #22
 800feec:	d402      	bmi.n	800fef4 <_fflush_r+0x38>
 800feee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fef0:	f7ff fc2f 	bl	800f752 <__retarget_lock_acquire_recursive>
 800fef4:	0028      	movs	r0, r5
 800fef6:	0021      	movs	r1, r4
 800fef8:	f7ff ff5a 	bl	800fdb0 <__sflush_r>
 800fefc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fefe:	0005      	movs	r5, r0
 800ff00:	07db      	lsls	r3, r3, #31
 800ff02:	d4e2      	bmi.n	800feca <_fflush_r+0xe>
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	059b      	lsls	r3, r3, #22
 800ff08:	d4df      	bmi.n	800feca <_fflush_r+0xe>
 800ff0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff0c:	f7ff fc22 	bl	800f754 <__retarget_lock_release_recursive>
 800ff10:	e7db      	b.n	800feca <_fflush_r+0xe>
	...

0800ff14 <__swhatbuf_r>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	000e      	movs	r6, r1
 800ff18:	001d      	movs	r5, r3
 800ff1a:	230e      	movs	r3, #14
 800ff1c:	5ec9      	ldrsh	r1, [r1, r3]
 800ff1e:	0014      	movs	r4, r2
 800ff20:	b096      	sub	sp, #88	@ 0x58
 800ff22:	2900      	cmp	r1, #0
 800ff24:	da0c      	bge.n	800ff40 <__swhatbuf_r+0x2c>
 800ff26:	89b2      	ldrh	r2, [r6, #12]
 800ff28:	2380      	movs	r3, #128	@ 0x80
 800ff2a:	0011      	movs	r1, r2
 800ff2c:	4019      	ands	r1, r3
 800ff2e:	421a      	tst	r2, r3
 800ff30:	d114      	bne.n	800ff5c <__swhatbuf_r+0x48>
 800ff32:	2380      	movs	r3, #128	@ 0x80
 800ff34:	00db      	lsls	r3, r3, #3
 800ff36:	2000      	movs	r0, #0
 800ff38:	6029      	str	r1, [r5, #0]
 800ff3a:	6023      	str	r3, [r4, #0]
 800ff3c:	b016      	add	sp, #88	@ 0x58
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
 800ff40:	466a      	mov	r2, sp
 800ff42:	f000 f865 	bl	8010010 <_fstat_r>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	dbed      	blt.n	800ff26 <__swhatbuf_r+0x12>
 800ff4a:	23f0      	movs	r3, #240	@ 0xf0
 800ff4c:	9901      	ldr	r1, [sp, #4]
 800ff4e:	021b      	lsls	r3, r3, #8
 800ff50:	4019      	ands	r1, r3
 800ff52:	4b04      	ldr	r3, [pc, #16]	@ (800ff64 <__swhatbuf_r+0x50>)
 800ff54:	18c9      	adds	r1, r1, r3
 800ff56:	424b      	negs	r3, r1
 800ff58:	4159      	adcs	r1, r3
 800ff5a:	e7ea      	b.n	800ff32 <__swhatbuf_r+0x1e>
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	2340      	movs	r3, #64	@ 0x40
 800ff60:	e7e9      	b.n	800ff36 <__swhatbuf_r+0x22>
 800ff62:	46c0      	nop			@ (mov r8, r8)
 800ff64:	ffffe000 	.word	0xffffe000

0800ff68 <__smakebuf_r>:
 800ff68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff6a:	2602      	movs	r6, #2
 800ff6c:	898b      	ldrh	r3, [r1, #12]
 800ff6e:	0005      	movs	r5, r0
 800ff70:	000c      	movs	r4, r1
 800ff72:	b085      	sub	sp, #20
 800ff74:	4233      	tst	r3, r6
 800ff76:	d007      	beq.n	800ff88 <__smakebuf_r+0x20>
 800ff78:	0023      	movs	r3, r4
 800ff7a:	3347      	adds	r3, #71	@ 0x47
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	6123      	str	r3, [r4, #16]
 800ff80:	2301      	movs	r3, #1
 800ff82:	6163      	str	r3, [r4, #20]
 800ff84:	b005      	add	sp, #20
 800ff86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff88:	ab03      	add	r3, sp, #12
 800ff8a:	aa02      	add	r2, sp, #8
 800ff8c:	f7ff ffc2 	bl	800ff14 <__swhatbuf_r>
 800ff90:	9f02      	ldr	r7, [sp, #8]
 800ff92:	9001      	str	r0, [sp, #4]
 800ff94:	0039      	movs	r1, r7
 800ff96:	0028      	movs	r0, r5
 800ff98:	f7ff f86e 	bl	800f078 <_malloc_r>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	d108      	bne.n	800ffb2 <__smakebuf_r+0x4a>
 800ffa0:	220c      	movs	r2, #12
 800ffa2:	5ea3      	ldrsh	r3, [r4, r2]
 800ffa4:	059a      	lsls	r2, r3, #22
 800ffa6:	d4ed      	bmi.n	800ff84 <__smakebuf_r+0x1c>
 800ffa8:	2203      	movs	r2, #3
 800ffaa:	4393      	bics	r3, r2
 800ffac:	431e      	orrs	r6, r3
 800ffae:	81a6      	strh	r6, [r4, #12]
 800ffb0:	e7e2      	b.n	800ff78 <__smakebuf_r+0x10>
 800ffb2:	2380      	movs	r3, #128	@ 0x80
 800ffb4:	89a2      	ldrh	r2, [r4, #12]
 800ffb6:	6020      	str	r0, [r4, #0]
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	81a3      	strh	r3, [r4, #12]
 800ffbc:	9b03      	ldr	r3, [sp, #12]
 800ffbe:	6120      	str	r0, [r4, #16]
 800ffc0:	6167      	str	r7, [r4, #20]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d00c      	beq.n	800ffe0 <__smakebuf_r+0x78>
 800ffc6:	0028      	movs	r0, r5
 800ffc8:	230e      	movs	r3, #14
 800ffca:	5ee1      	ldrsh	r1, [r4, r3]
 800ffcc:	f000 f832 	bl	8010034 <_isatty_r>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d005      	beq.n	800ffe0 <__smakebuf_r+0x78>
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	89a2      	ldrh	r2, [r4, #12]
 800ffd8:	439a      	bics	r2, r3
 800ffda:	3b02      	subs	r3, #2
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	81a3      	strh	r3, [r4, #12]
 800ffe0:	89a3      	ldrh	r3, [r4, #12]
 800ffe2:	9a01      	ldr	r2, [sp, #4]
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	81a3      	strh	r3, [r4, #12]
 800ffe8:	e7cc      	b.n	800ff84 <__smakebuf_r+0x1c>

0800ffea <memmove>:
 800ffea:	b510      	push	{r4, lr}
 800ffec:	4288      	cmp	r0, r1
 800ffee:	d902      	bls.n	800fff6 <memmove+0xc>
 800fff0:	188b      	adds	r3, r1, r2
 800fff2:	4298      	cmp	r0, r3
 800fff4:	d308      	bcc.n	8010008 <memmove+0x1e>
 800fff6:	2300      	movs	r3, #0
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d007      	beq.n	801000c <memmove+0x22>
 800fffc:	5ccc      	ldrb	r4, [r1, r3]
 800fffe:	54c4      	strb	r4, [r0, r3]
 8010000:	3301      	adds	r3, #1
 8010002:	e7f9      	b.n	800fff8 <memmove+0xe>
 8010004:	5c8b      	ldrb	r3, [r1, r2]
 8010006:	5483      	strb	r3, [r0, r2]
 8010008:	3a01      	subs	r2, #1
 801000a:	d2fb      	bcs.n	8010004 <memmove+0x1a>
 801000c:	bd10      	pop	{r4, pc}
	...

08010010 <_fstat_r>:
 8010010:	2300      	movs	r3, #0
 8010012:	b570      	push	{r4, r5, r6, lr}
 8010014:	4d06      	ldr	r5, [pc, #24]	@ (8010030 <_fstat_r+0x20>)
 8010016:	0004      	movs	r4, r0
 8010018:	0008      	movs	r0, r1
 801001a:	0011      	movs	r1, r2
 801001c:	602b      	str	r3, [r5, #0]
 801001e:	f7f6 f973 	bl	8006308 <_fstat>
 8010022:	1c43      	adds	r3, r0, #1
 8010024:	d103      	bne.n	801002e <_fstat_r+0x1e>
 8010026:	682b      	ldr	r3, [r5, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d000      	beq.n	801002e <_fstat_r+0x1e>
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	20001fb4 	.word	0x20001fb4

08010034 <_isatty_r>:
 8010034:	2300      	movs	r3, #0
 8010036:	b570      	push	{r4, r5, r6, lr}
 8010038:	4d06      	ldr	r5, [pc, #24]	@ (8010054 <_isatty_r+0x20>)
 801003a:	0004      	movs	r4, r0
 801003c:	0008      	movs	r0, r1
 801003e:	602b      	str	r3, [r5, #0]
 8010040:	f7f6 f970 	bl	8006324 <_isatty>
 8010044:	1c43      	adds	r3, r0, #1
 8010046:	d103      	bne.n	8010050 <_isatty_r+0x1c>
 8010048:	682b      	ldr	r3, [r5, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d000      	beq.n	8010050 <_isatty_r+0x1c>
 801004e:	6023      	str	r3, [r4, #0]
 8010050:	bd70      	pop	{r4, r5, r6, pc}
 8010052:	46c0      	nop			@ (mov r8, r8)
 8010054:	20001fb4 	.word	0x20001fb4

08010058 <memchr>:
 8010058:	b2c9      	uxtb	r1, r1
 801005a:	1882      	adds	r2, r0, r2
 801005c:	4290      	cmp	r0, r2
 801005e:	d101      	bne.n	8010064 <memchr+0xc>
 8010060:	2000      	movs	r0, #0
 8010062:	4770      	bx	lr
 8010064:	7803      	ldrb	r3, [r0, #0]
 8010066:	428b      	cmp	r3, r1
 8010068:	d0fb      	beq.n	8010062 <memchr+0xa>
 801006a:	3001      	adds	r0, #1
 801006c:	e7f6      	b.n	801005c <memchr+0x4>

0801006e <_realloc_r>:
 801006e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010070:	0006      	movs	r6, r0
 8010072:	000c      	movs	r4, r1
 8010074:	0015      	movs	r5, r2
 8010076:	2900      	cmp	r1, #0
 8010078:	d105      	bne.n	8010086 <_realloc_r+0x18>
 801007a:	0011      	movs	r1, r2
 801007c:	f7fe fffc 	bl	800f078 <_malloc_r>
 8010080:	0004      	movs	r4, r0
 8010082:	0020      	movs	r0, r4
 8010084:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010086:	2a00      	cmp	r2, #0
 8010088:	d103      	bne.n	8010092 <_realloc_r+0x24>
 801008a:	f7ff fb6d 	bl	800f768 <_free_r>
 801008e:	002c      	movs	r4, r5
 8010090:	e7f7      	b.n	8010082 <_realloc_r+0x14>
 8010092:	f000 f81c 	bl	80100ce <_malloc_usable_size_r>
 8010096:	0007      	movs	r7, r0
 8010098:	4285      	cmp	r5, r0
 801009a:	d802      	bhi.n	80100a2 <_realloc_r+0x34>
 801009c:	0843      	lsrs	r3, r0, #1
 801009e:	42ab      	cmp	r3, r5
 80100a0:	d3ef      	bcc.n	8010082 <_realloc_r+0x14>
 80100a2:	0029      	movs	r1, r5
 80100a4:	0030      	movs	r0, r6
 80100a6:	f7fe ffe7 	bl	800f078 <_malloc_r>
 80100aa:	9001      	str	r0, [sp, #4]
 80100ac:	2800      	cmp	r0, #0
 80100ae:	d101      	bne.n	80100b4 <_realloc_r+0x46>
 80100b0:	9c01      	ldr	r4, [sp, #4]
 80100b2:	e7e6      	b.n	8010082 <_realloc_r+0x14>
 80100b4:	002a      	movs	r2, r5
 80100b6:	42bd      	cmp	r5, r7
 80100b8:	d900      	bls.n	80100bc <_realloc_r+0x4e>
 80100ba:	003a      	movs	r2, r7
 80100bc:	0021      	movs	r1, r4
 80100be:	9801      	ldr	r0, [sp, #4]
 80100c0:	f7ff fb49 	bl	800f756 <memcpy>
 80100c4:	0021      	movs	r1, r4
 80100c6:	0030      	movs	r0, r6
 80100c8:	f7ff fb4e 	bl	800f768 <_free_r>
 80100cc:	e7f0      	b.n	80100b0 <_realloc_r+0x42>

080100ce <_malloc_usable_size_r>:
 80100ce:	1f0b      	subs	r3, r1, #4
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	1f18      	subs	r0, r3, #4
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	da01      	bge.n	80100dc <_malloc_usable_size_r+0xe>
 80100d8:	580b      	ldr	r3, [r1, r0]
 80100da:	18c0      	adds	r0, r0, r3
 80100dc:	4770      	bx	lr
	...

080100e0 <_init>:
 80100e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e2:	46c0      	nop			@ (mov r8, r8)
 80100e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100e6:	bc08      	pop	{r3}
 80100e8:	469e      	mov	lr, r3
 80100ea:	4770      	bx	lr

080100ec <_fini>:
 80100ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ee:	46c0      	nop			@ (mov r8, r8)
 80100f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100f2:	bc08      	pop	{r3}
 80100f4:	469e      	mov	lr, r3
 80100f6:	4770      	bx	lr

080100f8 <__FLASH_Program_Fast_veneer>:
 80100f8:	b401      	push	{r0}
 80100fa:	4802      	ldr	r0, [pc, #8]	@ (8010104 <__FLASH_Program_Fast_veneer+0xc>)
 80100fc:	4684      	mov	ip, r0
 80100fe:	bc01      	pop	{r0}
 8010100:	4760      	bx	ip
 8010102:	bf00      	nop
 8010104:	200000a1 	.word	0x200000a1

Disassembly of section .data:

20000010 <hal_xa_tmr>:
20000010:	                                         .

20000011 <hal_xb_tmr>:
20000011:	                                         .

20000012 <hal_ya_tmr>:
20000012:	                                         .

20000013 <hal_yb_tmr>:
20000013:	                                         .

20000014 <position_saved>:
20000014:	                                         .

20000015 <tmr>:
20000015:	                                         ...

20000018 <SystemCoreClock>:
20000018:	00f42400                                .$..

2000001c <ch1_ctrl>:
2000001c:	20001d28 200013d4 200013e8 00000000     (.. ... ... ....

2000002c <ch2_ctrl>:
2000002c:	20001dbc 20001cfc 20001d10 00000000     ... ... ... ....

2000003c <uwTickPrio>:
2000003c:	00000004                                ....

20000040 <uwTickFreq>:
20000040:	00000001                                ....

20000044 <__sglue>:
20000044:	00000000 00000003 20001e78              ........x.. 

20000050 <_impure_ptr>:
20000050:	20000054                                T.. 

20000054 <_impure_data>:
20000054:	00000000 20001e78 20001ee0 20001f48     ....x.. ... H.. 
	...

200000a0 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200000a0:	b580      	push	{r7, lr}
200000a2:	b088      	sub	sp, #32
200000a4:	af00      	add	r7, sp, #0
200000a6:	6078      	str	r0, [r7, #4]
200000a8:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200000aa:	231f      	movs	r3, #31
200000ac:	18fb      	adds	r3, r7, r3
200000ae:	2200      	movs	r2, #0
200000b0:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000b6:	683b      	ldr	r3, [r7, #0]
200000b8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ba:	4b1a      	ldr	r3, [pc, #104]	@ (20000124 <FLASH_Program_Fast+0x84>)
200000bc:	695a      	ldr	r2, [r3, #20]
200000be:	4b19      	ldr	r3, [pc, #100]	@ (20000124 <FLASH_Program_Fast+0x84>)
200000c0:	2180      	movs	r1, #128	@ 0x80
200000c2:	02c9      	lsls	r1, r1, #11
200000c4:	430a      	orrs	r2, r1
200000c6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000c8:	f3ef 8310 	mrs	r3, PRIMASK
200000cc:	60fb      	str	r3, [r7, #12]
  return(result);
200000ce:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000d2:	b672      	cpsid	i
}
200000d4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000d6:	e00f      	b.n	200000f8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000d8:	697a      	ldr	r2, [r7, #20]
200000da:	69bb      	ldr	r3, [r7, #24]
200000dc:	6812      	ldr	r2, [r2, #0]
200000de:	601a      	str	r2, [r3, #0]
    src += 4U;
200000e0:	697b      	ldr	r3, [r7, #20]
200000e2:	3304      	adds	r3, #4
200000e4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000e6:	69bb      	ldr	r3, [r7, #24]
200000e8:	3304      	adds	r3, #4
200000ea:	61bb      	str	r3, [r7, #24]
    index++;
200000ec:	211f      	movs	r1, #31
200000ee:	187b      	adds	r3, r7, r1
200000f0:	781a      	ldrb	r2, [r3, #0]
200000f2:	187b      	adds	r3, r7, r1
200000f4:	3201      	adds	r2, #1
200000f6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000f8:	231f      	movs	r3, #31
200000fa:	18fb      	adds	r3, r7, r3
200000fc:	781b      	ldrb	r3, [r3, #0]
200000fe:	2b3f      	cmp	r3, #63	@ 0x3f
20000100:	d9ea      	bls.n	200000d8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000102:	46c0      	nop			@ (mov r8, r8)
20000104:	4b07      	ldr	r3, [pc, #28]	@ (20000124 <FLASH_Program_Fast+0x84>)
20000106:	691a      	ldr	r2, [r3, #16]
20000108:	23c0      	movs	r3, #192	@ 0xc0
2000010a:	029b      	lsls	r3, r3, #10
2000010c:	4013      	ands	r3, r2
2000010e:	d1f9      	bne.n	20000104 <FLASH_Program_Fast+0x64>
20000110:	693b      	ldr	r3, [r7, #16]
20000112:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000114:	68bb      	ldr	r3, [r7, #8]
20000116:	f383 8810 	msr	PRIMASK, r3
}
2000011a:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000011c:	46c0      	nop			@ (mov r8, r8)
2000011e:	46bd      	mov	sp, r7
20000120:	b008      	add	sp, #32
20000122:	bd80      	pop	{r7, pc}
20000124:	40022000 	.word	0x40022000
